{"text":"Chapter 1. Introduction\nTo be a good programmer is difficult and noble. The hardest part of making real a collective vi-\nsion of a software project is dealing with one's coworkers and customers. Writing computer pro-\ngrams is important and takes great intelligence and skill. But it is really child's play compared to\neverythingelsethatagoodprogrammermustdotomakeasoftwaresystemthatsucceedsforboth\nthe customer and myriad colleagues for whom she is partially responsible. In this essay I attempt\ntosummarizeasconciselyaspossiblethosethingsthatIwishsomeonehadexplainedtomewhen\nIwastwenty-one.\nThisisverysubjectiveand,therefore,thisessayisdoomedtobepersonalandsomewhatopinion-\nated. I confine myself to problems that a programmer is very likely to have to face in her work.\nManyoftheseproblemsandtheirsolutionsaresogeneraltothehumanconditionthatIwillprob-\nablyseempreachy.Ihopeinspiteofthisthatthisessaywillbeuseful.\nComputer programming is taught in courses. The excellent books: The Pragmatic Programmer\n[Prag99], Code Complete [CodeC93], Rapid Development [RDev96], and Extreme Programming\nExplained[XP99]allteachcomputerprogrammingandthelargerissuesofbeingagoodprogram-\nmer.TheessaysofPaulGraham[PGSite]andEricRaymond[Hacker]shouldcertainlybereadbe-\nforeoralongwiththisarticle.Thisessaydiffersfromthoseexcellentworksbyemphasizingsocial\nproblemsandcomprehensivelysummarizingtheentiresetofnecessaryskillsasIseethem.\nInthisessaythetermbosstorefertowhomevergivesyouprojectstodo.Iusethewordsbusiness,\ncompany, and tribe, synonymously except that business connotes moneymaking, company con-\nnotesthemodernworkplaceandtribeisgenerallythepeopleyoushareloyaltywith.\nWelcometothetribe.\nNote\nIfyouareprintingthisforyourpersonaluse,youmaywishtosavepaperbynotprinting\nsomeoftheappendices.\n4 Chapter 2. Beginner\n1. Personal Skills\n1.1. Learn to Debug\nDebuggingisthecornerstoneofbeingaprogrammer.Thefirstmeaningoftheverbtodebugisto\nremoveerrors,butthemeaningthatreallymattersistoseeintotheexecutionofaprogrambyex-\naminingit.Aprogrammerthatcannotdebugeffectivelyisblind.\nIdealiststhatthinkdesign,oranalysis,orcomplexitytheory,orwhatnot,aremorefundamentalare\nnot working programmers. The working programmer does not live in an ideal world. Even if you\nareperfect,youraresurroundedbyandmustinteractwithcodewrittenbymajorsoftwarecompa-\nnies,organizationslikeGNU,andyourcolleagues.Mostofthiscodeisimperfectandimperfectly\ndocumented. Without the ability to gain visibility into the execution of this code the slightest\nbump will throw you permanently. Often this visibility can only be gained by experimentation,\nthatis,debugging.\nDebuggingisabouttherunningofprograms,notprogramsthemselves.Ifyoubuysomethingfrom\na major software company, you usually don't get to see the program. But there will still arise\nplaces where the code does not conform to the documentation (crashing your entire machine is a\ncommon and spectacular example), or where the documentation is mute. More commonly, you\ncreateanerror,examinethecodeyouwroteandhavenocluehowtheerrorcanbeoccurring.In-\nevitably,thismeanssomeassumptionyouaremakingisnotquitecorrect,orsomeconditionarises\nthatyoudidnotanticipate.Sometimesthemagictrickofstaringintothesourcecodeworks.When\nitdoesn't,youmustdebug.\nTogetvisibilityintotheexecutionofaprogramyoumustbeabletoexecutethecodeandobserve\nsomethingaboutit.Sometimesthisisvisible,likewhatisbeingdisplayedonascreen,orthedelay\nbetween two events. In many other cases, it involves things that are not meant to be visible, like\nthe state of some variables inside the code, which lines of code are actually being executed, or\nwhether certain assertions hold across a complicated data structure. These hidden things must be\nrevealed.\nThecommonwaysoflookingintothe\u2018innards\u2019ofanexecutingprogramcanbecategorizedas:\n\u2022 Usingadebuggingtool,\n\u2022 Printlining --- Making a temporary modification to the program, typically adding lines that\nprintinformationout,and\n\u2022 Logging---Creatingapermanentwindowintotheprogramsexecutionintheformofalog.\nDebuggingtoolsarewonderfulwhentheyarestableandavailable,buttheprintliningandlogging\nareevenmoreimportant.Debuggingtoolsoftenlagbehindlanguagedevelopment,soatanypoint\nintimetheymaynotbeavailable.Inaddition,becausethedebuggingtoolmaysubtlychangethe\nwaytheprogramexecutesitmaynotalwaysbepractical.Finally,therearesomekindsofdebug-\nging, such as checking an assertion against a large data structure, that require writing code and\nchangingtheexecutionoftheprogram.Itisgoodtoknowhowtousedebuggingtoolswhenthey\narestable,butitiscriticaltobeabletoemploytheothertwomethods.\n5 Beginner\nSome beginners fear debugging when it requires modifying code. This is understandable---it is a\nlittle like exploratory surgery. But you have to learn to poke at the code and make it jump; you\nhave to learn to experiment on it, and understand that nothing that you temporarily do to it will\nmakeitworse.Ifyoufeelthisfear,seekoutamentor---welosealotofgoodprogrammersatthe\ndelicateonsetoftheirlearningtothisfear.\n1.2. How to Debug by Splitting the Problem\nSpace\nDebuggingisfun,becauseitbeginswithamystery.Youthinkitshoulddosomething,butinstead\nitdoessomethingelse.Itisnotalwaysquitesosimple---anyexamplesIcangivewillbecontrived\ncompared to what sometimes happens in practice. Debugging requires creativity and ingenuity. If\nthereisasinglekeytodebuggingistousethedivideandconquertechniqueonthemystery.\nSuppose, for example, you created a program that should do ten things in a sequence. When you\nrunit,itcrashes.Sinceyoudidn'tprogramittocrash,younowhaveamystery.Whenoutlookat\ntheoutput,youseethatthefirstseventhingsinthesequencewererunsuccessfully.Thelastthree\nare not visible from the output, so now your mystery is smaller: \u2018It crashed on thing #8, #9, or\n#10.\u2019\nCanyoudesignanexperimenttoseewhichthingitcrashedon?Sure.Youcanuseadebuggeror\nwecanaddprintlinestatements(ortheequivalentinwhateverlanguageyouareworkingin)after\n#8 and #9. When we run it again, our mystery will be smaller, such as \u2018It crashed on thing #9.\u2019 I\nfindthatbearinginmindexactlywhatthemysteryisatanypointintimehelpskeeponefocused.\nWhen several people are working together under pressure on a problem it is easy to forget what\nthemostimportantmysteryis.\nThekeytodivideandconquerasadebuggingtechniqueisthesameasitisforalgorithmdesign:\nas long as you do a good job splitting the mystery in the middle, you won't have to split it too\nmany times, and you will be debugging quickly. But what is the middle of a mystery? There is\nwheretruecreativityandexperiencecomesin.\nTo a true beginner, the space of all possible errors looks like every line in the source code. You\ndon'thavethevisionyouwilllaterdeveloptoseetheotherdimensionsoftheprogram,suchasthe\nspace of executed lines, the data structure, the memory management, the interaction with foreign\ncode, the code that is risky, and the code that is simple. For the experience programmer, these\nother dimensions form an imperfect but very useful mental model of all the things that can go\nwrong.Havingthatmentalmodeliswhathelpsonefindthemiddleofthemysteryeffectively.\nOnce you have evenly subdivided the space of all that can go wrong, you must try to decide in\nwhich space the error lies. In the simple case where the mystery is: \u2018Which single unknown line\nmakes my program crash?\u2019, you can ask yourself: \u2018Is the unknown line executed before or after\nthislinethatIjudgetobeexecutedintheaboutthemiddleoftherunningprogram?\u2019Usuallyyou\nwillnotbesoluckyastoknowthattheerrorexistsinasingleline,orevenasingleblock.Often\nthemysterywillbemorelike:\u2018Eitherthereisapointerinthatgraphthatpointstothewrongnode,\normyalgorithmthataddsupthevariablesinthatgraphdoesn'twork.\u2019Inthatcaseyoumayhave\nto write a small program to check that the pointers in the graph are all correct in order to decide\nwhichpartofthesubdividedmysterycanbeeliminated.\n6 Beginner\n1.3. How to Remove an Error\nI've intentionally separated the act of examining a program's execution from the act of fixing an\nerror. But of course, debugging does also mean removing the bug. Ideally you will have perfect\nunderstandingofthecodeandwillreachan\u2018A-Ha!\u2019momentwhereyouperfectlyseetheerrorand\nhowtofixit.Butsinceyourprogramwilloftenuseinsufficientlydocumentedsystemsintowhich\nyou have no visibility, this is not always possible. In other cases the code is so complicated that\nyourunderstandingcannotbeperfect.\nInfixingabug,youwanttomakethesmallestchangethatfixesthebug.Youmayseeotherthings\nthat need improvement; but don't fix those at the same time. Attempt to employ the scientific\nmethodofchangingonethingandonlyonethingatatime.Thebestprocessforthisistobeable\nto easily reproduce the bug, then put your fix in place, and then rerun the program and observe\nthat the bug no longer exists. Of course, sometimes more than one line must be changed, but you\nshouldstillconceptuallyapplyasingleatomicchangetofixthebug.\nSometimes, there are really several bugs that look like one. It is up to you to define the bugs and\nfix them one at a time. Sometimes it is unclear what the program should do or what the original\nauthor intended. In this case, you must exercise your experience and judgment and assign your\nownmeaningtothecode.Decidewhatitshoulddo,andcommentitorclarifyitinsomewayand\nthen make the code conform to your meaning. This is an intermediate or advanced skill that is\nsometimes harder than writing the original function in the first place, but the real world is often\nmessy.Youmayhavetofixasystemyoucannotrewrite.\n1.4. How to Debug Using a Log\nLogging is the practice of writing a system so that it produces a sequence of informative records,\ncalled a log. Printlining is just producing a simple, usually temporary, log. Absolute beginners\nmust understand and use logs because their knowledge of the programming is limited; system ar-\nchitectsmustunderstandanduselogsbecauseofthecomplexityofthesystem.Theamountofin-\nformationthatisprovidedbythelogshouldbeconfigurable,ideallywhiletheprogramisrunning.\nIngeneral,logsofferthreebasicadvantages:\n\u2022 Logscanprovideusefulinformationaboutbugsthatarehardtoreproduce(suchasthosethat\noccurintheproductionenvironmentbutthatcannotbereproducedinthetestenvironment).\n\u2022 Logscanprovidestatisticsanddatarelevanttoperformance,suchasthetimepassingbetween\nstatements.\n\u2022 When configurable, logs allow general information to be captured in order to debug unantici-\npated specific problems without having to modify and\/or redeploy the code just to deal with\nthosespecificproblems.\nThe amount to output into the log is always a compromise between information and brevity. Too\nmuch information makes the log expensive and produces scroll blindness, making it hard to find\nthe information you need. Too little information and it may not contain what you need. For this\nreason, making what is output configurable is very useful. Typically, each record in the log will\nidentifyitspositioninthesourcecode,thethreadthatexecuteditifapplicable,theprecisetimeof\nexecution, and, commonly, an additional useful piece of information, such as the value of some\nvariable, the amount of free memory, the number of data objects, etc. These log statements are\n7 Beginner\nsprinkledthroughoutthesourcecodebutareparticularlyatmajorfunctionalitypointsandaround\nrisky code. Each statement can be assigned a level and will only output a record if the system is\ncurrently configured to output that level. You should design the log statements to address prob-\nlemsthatyouanticipate.Anticipatetheneedtomeasureperformance.\nIfyouhaveapermanentlog,printliningcannowbedoneintermsofthelogrecords,andsomeof\nthedebuggingstatementswillprobablybepermanentlyaddedtotheloggingsystem.\n1.5. How to Understand Performance Problems\nLearning to understand the performance of a running system is unavoidable for the same reason\nthatlearningdebuggingis.Evenifyouunderstandperfectlyandpreciselythecostofthecodeyou\nwrite, your code will make calls into other software systems that you have little control over or\nvisibility into. However, in practice performance problems are a little different and a little easier\nthandebuggingingeneral.\nSupposethatyouoryourcustomersconsiderasystemorasubsystemtobetooslow.Beforeyou\ntry to make it faster, you must build a mental model of why it is slow. To do this you can use a\nprofilingtooloragoodlogtofigureoutwherethetimeorotherresourcesarereallybeingspent.\nThere is a famous dictum that 90% of the time will be spent in 10% of the code. I would add to\nthattheimportanceofinput\/outputexpense(I\/O)toperformanceissues.Oftenmostofthetimeis\nspentinI\/Oinonewayoranother.FindingtheexpensiveI\/Oandtheexpensive10%ofthecode\nisagoodfirststeptobuildingyourmentalmodel.\nThere are many dimensions to the performance of a computer system, and many resources con-\nsumed.Thefirstresourcetomeasureiswall--clocktime,thetotaltimethatpassesforthecompu-\ntation.Loggingwall-clocktimeisparticularlyvaluablebecauseitcaninformaboutunpredictable\ncircumstance that arise in situations where other profiling is impractical. However, this may not\nalwaysrepresentthewholepicture.Sometimessomethingthattakesalittlelongerbutdoesn'tburn\nupsomanyprocessorsecondswillbemuchbetterincomputingenvironmentyouactuallyhaveto\ndeal with. Similarly, memory, network bandwidth, database or other server accesses may, in the\nend,befarmoreexpensivethanprocessorseconds.\nContention for shared resources that are synchronized can cause deadlock and starvation. Dead-\nlockistheinabilitytoproceedbecauseofimpropersynchronizationorresourcedemands.Starva-\ntionisthefailuretoscheduleacomponentproperly.Ifitcanbeatallanticipated,itisbesttohave\nawayofmeasuringthiscontentionfromthestartofyourproject.Evenifthiscontentiondoesnot\noccur,itisveryhelpfultobeabletoassertthatwithconfidence.\n1.6. How to Fix Performance Problems\nMost software projects can be made 10 to 100 times faster than they are at the time that they are\nfirstreleasedwithrelativelylittleeffort.Undertime-to-marketpressure,itisbothwiseandeffec-\ntive to choose a solution that gets the job done simply and quickly, but less efficiently than some\nothersolution.However,performanceisapartofusability,andoftenitmusteventuallybeconsid-\neredmorecarefully.\nThe key to improving the performance of a very complicated system is to analyze it well enough\nto find the bottlenecks, or places where most of the resources are consumed. There is not much\nsense in optimizing a function that accounts for only 1% of the computation time. As a rule of\nthumb you should think carefully before doing anything unless you think it is going to make the\n8 Beginner\nsystem or a significant part of it at least twice as fast. There is usually a way to do this. Consider\nthe test and quality assurance effort that your change will require. Each change brings a test bur-\ndenwithit,soitismuchbettertohaveafewbigchanges.\nAfteryou'vemadeatwo-foldimprovementinsomething,youneedtoatleastrethinkandperhaps\nreanalyze to discover the next-most-expensive bottleneck in the system, and attack that to get an-\nothertwo-foldimprovement.\nOften, the bottlenecks in performance will be an example of counting cows by counting legs and\ndividing by four, instead of counting heads. For example, I've made errors such as failing to pro-\nvidearelationaldatabasesystemwithaproperindexonacolumnIlookupalot,whichprobably\nmade it at least 20 times slower. Other examples include doing unnecessary I\/O in inner loops,\nleaving in debugging statements that are no longer needed, unnecessary memory allocation, and,\ninparticular,inexpertuseoflibrariesandothersubsystemsthatareoftenpoorlydocumentedwith\nrespecttoperformance.Thiskindofimprovementissometimescalledlow-hangingfruit,meaning\nthatitcanbeeasilypickedtoprovidesomebenefit.\nWhat do you do when you start to run out of low-hanging fruit? Well, you can reach higher, or\nchopthetreedown.Youcancontinuemakingsmallimprovementsoryoucanseriouslyredesigna\nsystem or a subsystem. (This is a great opportunity to use your skills as a good programmer, not\nonlyinthenewdesignbutalsoinconvincingyourbossthatthisisagoodidea.)However,before\nyou argue for the redesign of a subsystem, you should ask yourself whether or not your proposal\nwillmakeitfivetotentimebetter.\n1.7. How to Optimize Loops\nSometimesyou'llencounterloops,orrecursivefunctions,thattakealongtimetoexecuteandare\nbottlenecks in your product. Before you try to make the loop a little faster, spend a few minutes\nconsidering if there is a way to remove it entirely. Would a different algorithm do? Could you\ncomputethatwhilecomputingsomethingelse?Ifyoucan'tfindawayaroundit,thenyoucanopti-\nmize the loop. This is simple; move stuff out. In the end, this will require not only ingenuity but\nalsoanunderstandingoftheexpenseofeachkindofstatementandexpression.Herearesomesug-\ngestions:\n\u2022 Removefloatingpointoperations.\n\u2022 Don'tallocatenewmemoryblocksunnecessarily.\n\u2022 Foldconstantstogether.\n\u2022 MoveI\/Ointoabuffer.\n\u2022 Trynottodivide.\n\u2022 Trynottodoexpensivetypecasts.\n\u2022 Moveapointerratherthanrecomputingindices.\nThecostofeachoftheseoperationsdependsonyourspecificsystem.Onsomesystemscompilers\nandhardwaredothesethingsforyou.Clear,efficientcodeisbetterthancodethatrequiresanun-\nderstandingofaparticularplatform.\n9 Beginner\n1.8. How to Deal with I\/O Expense\nForalotofproblems,processorsarefastcomparedtothecostofcommunicatingwithahardware\ndevice. This cost is usually abbreviated I\/O, and can include network cost, disk I\/O, database\nqueries,fileI\/O,andotheruseofsomehardwarenotveryclosetotheprocessor.Thereforebuild-\ningafastsystemisoftenmoreaquestionofimprovingI\/Othanimprovingthecodeinsometight\nloop,orevenimprovinganalgorithm.\nTherearetwoveryfundamentaltechniquestoimprovingI\/O:cachingandrepresentation.Caching\nis avoiding I\/O (generally avoiding the reading of some abstract value) by storing a copy of that\nvaluelocallysonoI\/Oisperformedtogetthevalue.Thefirstkeytocachingistomakeitcrystal\nclear which data is the master and which are copies. There is only one master---period. Caching\nbrings with it the danger that the copy is sometimes can't reflect changes to the master instanta-\nneously.\nRepresentation is the approach of making I\/O cheaper by representing data more efficiently. This\nisoftenintensionwithotherdemands,likehumanreadabilityandportability.\nRepresentationscanoftenbeimprovedbyafactoroftwoorthreefromtheirfirstimplementation.\nTechniquesfordoingthisincludeusingabinaryrepresentationinsteadofonethatishumanread-\nable, transmitting a dictionary of symbols along with the data so that long symbols don't have to\nbeencoded,and,attheextreme,thingslikeHuffmanencoding.\nAthirdtechniquethatissometimespossibleistoimprovethelocalityofreferencebypushingthe\ncomputation closer to the data. For instance, if you are reading some data from a database and\ncomputing something simple from it, such as a summation, try to get the database server to do it\nfor you. This is highly dependent on the kind of system you're working with, but you should ex-\nploreit.\n1.9. How to Manage Memory\nMemoryisapreciousresourcethatyoucan'taffordtorunoutof.Youcanignoreitforawhilebut\neventuallyyouwillhavetodecidehowtomanagememory.\nSpacethatneedstopersistbeyondthescopeofasinglesubroutineisoftencalledheapallocated.\nAchunkofmemoryisuseless,hencegarbage,whennothingreferstoit.Dependingonthesystem\nyou use, you may have to explicitly deallocate memory yourself when it is about to become\ngarbage.Moreoftenyoumaybeabletouseasystemthatprovidesagarbagecollector.Agarbage\ncollector notices garbage and frees its space without any action required by the programmer.\nGarbage collection is wonderful: it lessens errors and increases code brevity and concision\ncheaply.Useitwhenyoucan.\nButevenwithgarbagecollection,youcanfillupallmemorywithgarbage.Aclassicmistakeisto\nuse a hash table as a cache and forget to remove the references in the hash table. Since the refer-\nenceremains,thereferentisnoncollectablebutuseless.Thisiscalledamemoryleak.Youshould\nlookforandfixmemoryleaksearly.Ifyouhavelongrunningsystemsmemorymayneverbeex-\nhaustedintestingbutwillbeexhaustedbytheuser.\nThecreationofnewobjectsismoderatelyexpensiveonanysystem.Memoryallocateddirectlyin\nthelocalvariablesofasubroutine,however,isusuallycheapbecausethepolicyforfreeingitcan\nbeverysimple.Youshouldavoidunnecessaryobjectcreation.\n10 Beginner\nAnimportantcaseoccurswhenyoucandefineanupperboundonthenumberofobjectsyouwill\nneedatonetime.Iftheseobjectsalltakeupthesameamountofmemory,youmaybeabletoallo-\ncateasingleblockofmemory,orabuffer,toholdthemall.Theobjectsyouneedcanbeallocated\nandreleasedinsidethisbufferinasetrotationpattern,soitissometimescalledaringbuffer.This\nisusuallyfasterthanheapallocation.\nSometimes you have to explicitly free allocated space so it can be reallocated rather than rely on\ngarbage collection. Then you must apply careful intelligence to each chunk of allocated memory\nand design a way for it to be deallocated at the appropriate time. The method may differ for each\nkindofobjectyoucreate.Youmustmakesurethateveryexecutionofamemoryallocatingopera-\ntion is matched by a memory deallocating operation eventually. This is so difficult that program-\nmers often simply implement a rudimentary form or garbage collection, such as reference count-\ning,todothisforthem.\n1.10. How to Deal with Intermittent Bugs\nThe intermittent bug is a cousin of the 50-foot-invisible-scorpion-from-outer-space kind of bug.\nThisnightmareoccurssorarelythatitishardtoobserve,yetoftenenoughthatitcan'tbeignored.\nYoucan'tdebugitbecauseyoucan'tfindit.\nAlthoughaftereighthoursyouwillstarttodoubtit,theintermittentbughastoobeythesamelaws\noflogiceverythingelsedoes.Whatmakesithardisthatitoccursonlyunderunknownconditions.\nTrytorecordthecircumstancesunderwhichthebugdoesoccur,sothatyoucanguessatwhatthe\nvariabilityreallyis.Theconditionmayberelatedtodatavalues,suchas\u2018Thisonlyhappenswhen\nwe enter Wyoming as a value.\u2019 If that is not the source of variability, the next suspect should be\nimproperlysynchronizedconcurrency.\nTry,try,trytoreproducethebuginacontrolledway.Ifyoucan'treproduceit,setatrapforitby\nbuilding a logging system, a special one if you have to, that can log what you guess you need\nwhen it really does occur. Resign yourself to that if the bug only occurs in production and not at\nyourwhim,thisismaybealongprocess.Thehintsthatyougetfromthelogmaynotprovidethe\nsolutionbutmaygiveyouenoughinformationtoimprovethelogging.Theimprovedloggingsys-\ntemmaytakealongtimetobeputintoproduction.Then,youhavetowaitforthebugtoreoccur\ntogetmoreinformation.Thiscyclecangoonforsometime.\nThe stupidest intermittent bug I ever created was in a multi-threaded implementation of a func-\ntional programming language for a class project. I had very carefully insured correct concurrent\nevaluation of the functional program, good utilization of all the CPUs available (eight, in this\ncase).Isimplyforgottosynchronizethegarbagecollector.Thesystemcouldrunalongtime,of-\ntenfinishingwhatevertaskIbegan,beforeanythingnoticeablewentwrong.I'mashamedtoadmit\nIhadbeguntoquestionthehardwarebeforemymistakedawnedonme.\nAt work we recently had an intermittent bug that took us several weeks to find. We have multi-\nthreadedapplicationserversinJava\u2122behindApache\u2122webservers.Tomaintainfastpageturns,\nwedoallI\/Oinsmallsetoffourseparatethreadsthataredifferentthanthepage-turningthreads.\nEvery once in a while these would apparently get \u2018stuck\u2019 and cease doing anything useful, so far\nasourloggingallowedustotell,forhours.Sincewehadfourthreads,thiswasnotinitselfagiant\nproblem---unless all four got stuck. Then the queues emptied by these threads would quickly fill\nupallavailablememoryandcrashourserver.Ittookusaboutaweektofigurethismuchout,and\nwe still didn't know what caused it, when it would happen, or even what the threads where doing\nwhentheygot\u2018stuck\u2019.\n11 Beginner\nThis illustrates some risk associated with third-party software. We were using a licensed piece of\ncode that removed HTML tags from text. Due to its place of origin we affectionately referred to\nthisas\u2018theFrenchstripper.\u2019Althoughwehadthesourcecode(thankgoodness!)wehadnotstud-\nied it carefully until by turning up the logging on our servers we finally realized that the email\nthreadsweregettingstuckintheFrenchstripper.\nThe stripper performed well except on some long and unusual kinds of texts. On these texts, the\ncode was quadratic or worse. This means that the processing time was proportional to the square\nof the length of the text. Had these texts occurred commonly, we would have found the bug right\naway.Iftheyhadneveroccurredatall,wewouldneverhavehadaproblem.Asithappens,ittook\nusweekstofinallyunderstandandresolvetheproblem.\n1.11. How to Learn Design Skills\nTo learn how to design software, study the action of a mentor by being physically present when\nthey are designing. Then study well-written pieces of software. After that, you can read some\nbooksonthelatestdesigntechniques.\nThenyoumustdoityourself.Startwithasmallproject.Whenyouarefinallydone,considerhow\nthe design failed or succeeded and how you diverged from your original conception. They move\non to larger projects, hopefully in conjunction with other people. Design is a matter of judgment\nthattakesyearstoacquire.Asmartprogrammercanlearnthebasicsadequatelyintwomonthsand\ncanimprovefromthere.\nIt is natural and helpful to develop your own style, but remember that design is an art, not a sci-\nence. People who write books on the subject have a vested interest in making it seem scientific.\nDon'tbecomedogmaticaboutparticulardesignstyles.\n1.12. How to Conduct Experiments\nThe late, great Edsger Dijkstra has eloquently explained that Computer Science is not an experi-\nmentalscience[ExpCS]anddoesn'tdependonelectroniccomputers.Asheputsitreferringtothe\n1960s[Knife],\n...the harm was done: the topic became known as \u2018computer science\u2019---which,\nactually, is like referring to surgery as \u2018knife science\u2019 --- and it was firmly im-\nplantedinpeople'smindsthatcomputingscienceisaboutmachinesandtheirpe-\nripheralequipment.\nProgramming ought not to be an experimental science, but most working programmers do not\nhave the luxury of engaging in what Dijkstra means by computing science. We must work in the\nrealm of experimentation, just as some, but not all, physicists do. If thirty years from now pro-\ngramming can be performed without experimentation, it will be a great accomplishment of Com-\nputerScience.\nThekindsofexperimentsyouwillhavetoperforminclude:\n\u2022 Testing systems with small examples to verify that they conform to the documentation or to\nunderstandtheirresponsewhenthereisnodocumentation,\n12 Beginner\n\u2022 Testingsmallcodechangestoseeiftheyactuallyfixabug,\n\u2022 Measuring the performance of a system under two different conditions due to imperfect\nknowledgeofthereperformancecharacteristics,\n\u2022 Checkingtheintegrityofdata,and\n\u2022 Collectingstatisticsthatmayhintatthesolutiontodifficultorhard-to-repeatbugs.\nIdon'tthinkinthisessayIcanexplainthedesignofexperiments;youwillhavetostudyandprac-\ntice.However,Icanoffertwobitsofadvice.\nFirst,trytobeveryclearaboutyourhypothesis,ortheassertionthatyouaretryingtotest.Italso\nhelps to write the hypothesis down, especially if you find yourself confused or are working with\nothers.\nYou will often find yourself having to design a series of experiments, each of which is based on\ntheknowledgegainedfromthelastexperiment.Therefore,youshoulddesignyourexperimentsto\nprovidethemostinformationpossible.Unfortunately,thisisintensionwithkeepingeachexperi-\nmentsimple---youwillhavetodevelopthisjudgmentthroughexperience.\n2. Team Skills\n2.1. Why Estimation is Important\nTo get a working software system in active use as quickly as possible requires not only planning\nthe development, but also planning the documentation, deployment, marketing. In a commercial\nprojectitalsorequiressalesandfinance.Withoutpredictabilityofthedevelopmenttime,itisim-\npossibletoplantheseeffectively.\nGood estimation provides predictability. Managers love it, as well they should. The fact that it is\nimpossible, both theoretically and practically, to predict accurately how long it will take to de-\nvelop software is often lost on managers. We are asked to do this impossible thing all the time,\nandwemustfaceuptoithonestly.However,itwouldbedishonestnottoadmittheimpossibility\nofthistask,andwhennecessary,explainit.Thereisalotofroomformiscommunicationaboutes-\ntimates,aspeoplehaveastartlingtendencytothinkwishfullythatthesentence:\nIestimatethat,ifIreallyunderstandtheproblem,itisabout50%likelythatwe\nwillbedoneinfiveweeks(ifnoonebothersusduringthattime).\nreallymeans:\nIpromisetohaveitalldonefiveweeksfromnow.\nThis common interpretation problem requires that you explicitly discuss what the estimate means\nwithyourbossorcustomerasiftheywereasimpleton.Restateyourassumptions,nomatterhow\nobvioustheyseemtoyou.\n2.2. How to Estimate Programming Time\n13 Beginner\nEstimationtakespractice.Italsotakeslabor.Ittakessomuchlaboritmaybeagoodideatoesti-\nmate the time it will take to make the estimate, especially if you are asked to estimate something\nbig.\nWhenaskedtoprovideanestimateofsomethingbig,themosthonestthingtodoistostall.Most\nengineersareenthusiasticandeagertoplease,andstallingcertainlywilldispleasethestalled.But\nanon-the-spotestimateprobablywon'tbeaccurateandhonest.\nWhile stalling, it may be possible to consider doing or prototyping the task. If political pressure\npermits,thisisthemostaccuratewayofproducingtheestimate,anditmakesrealprogress.\nWhen not possible to take the time for some investigation, you should first establish the meaning\noftheestimateveryclearly.Restatethatmeaningasthefirstandlastpartofyourwrittenestimate.\nPrepareawrittenestimatebydeconstructingthetaskintoprogressivelysmallersubtasksuntileach\nsmalltaskisnomorethanaday;ideallyatmostinlength.Themostimportantthingisnottoleave\nanything out. For instance, documentation, testing, time for planning, time for communicating\nwithothergroups,andvacationtimeareallveryimportant.Ifyouspendpartofeachdaydealing\nwithknuckleheads,putalineitemforthatintheestimate.Thisgivesyourbossvisibilityintowhat\nisusingupyourtimeataminimum,andmightgetyoumoretime.\nIknowgoodengineerswhopadestimatesimplicitly,butIrecommendthatyoudonot.Oneofthe\nresults of padding is trust in you may be depleted. For instance, an engineer might estimate three\ndays for a task that she truly thinks will take one day. The engineer may plan to spend two days\ndocumenting it, or two days working on some other useful project. But it will be detectable that\nthetaskwasdoneinonlyoneday(ifitturnsoutthatway),andtheappearanceofslackingorover-\nestimatingisborn.It'sfarbettertogivepropervisibilityintowhatyouareactuallydoing.Ifdocu-\nmentationtakestwiceaslongascodingandtheestimatesaysso,tremendousadvantageisgained\nbymakingthisvisibletothemanager.\nPad explicitly instead. If a task will probably take one day---but might take ten days if your ap-\nproach doesn't work---note this somehow in the estimate if you can; if not, at least do an average\nweightedbyyourestimatesoftheprobabilities.Anyriskfactorthatyoucanidentifyandassignan\nestimatetoshouldgointotheschedule.Onepersonisunlikelytobesickinanygivenweek.Buta\nlarge project with many engineers will have some sick time; likewise vacation time. And what is\nthe probability of a mandatory company-wide training seminar? If it can be estimated, stick it in.\nThereareofcourse,unknownunknowns,orunk-unks.Unk-unksbydefinitioncannotbeestimated\nindividually. You can try to create a global line item for all unk-unks, or handle them in some\notherwaythatyoucommunicatetoyourboss.Youcannot,however,letyourbossforgetthatthey\nexist, and it is devilishly easy for an estimate to become a schedule without the unk-unks consid-\nered.\nIn a team environment, you should try to have the people who will do the work do the estimate,\nandyoushouldtrytohaveteam-wideconsensusonestimates.Peoplevarywidelyinskill,experi-\nence,preparedness,andconfidence.Calamitystrikeswhenastrongprogrammerestimatesforher-\nselfandthenweakprogrammersareheldtothisestimate.Theactofhavingthewholeteamagree\nonaline-by-linebasistotheestimateclarifiestheteamunderstanding,aswellasallowingtheop-\nportunity for tactical reassignment of resources (for instance, shifting burden away from weaker\nteammemberstostronger).\nIftherearebigrisksthatcannotbeevaluated,itisyourdutytostatesoforcefullyenoughthatyour\nmanagerdoesnotcommittothemandthenbecomeembarrassedwhentheriskoccurs.Hopefully\ninsuchacasewhateverisneededwillbedonetodecreasetherisk.\n14 Beginner\nIf you can convince your company to use Extreme Programming, you will only have to estimate\nrelativelysmallthings,andthisisbothmorefunandmoreproductive.\n2.3. How to Find Out Information\nThenatureofwhatyouneedtoknowdetermineshowyoushouldfindit.\nIf you need information about concrete things that are objective and easy to verify, for example\nthelatestpatchlevelofasoftwareproduct,askalargenumberofpeoplepolitelybysearchingthe\ninternet for it or by posting on a discussion group. Don't search on the internet for anything that\nsmacksofeitheropinionorsubjectiveinterpretation:theratioofdriveltotruthistoohigh.\nIf you need general knowledge about something subjective the history of what people have\nthoughtaboutit,gotothelibrary(thephysicalbuildinginwhichbooksarestored).Forexample,\ntolearnaboutmathormushroomsormysticism,gotothelibrary.\nIf you need to know how to do something that is not trivial get two or three books on the subject\nandreadthem.Youmightlearnhowtodosomethingtrivial,likeinstallasoftwarepackage,from\ntheInternet.Youcanevenlearnimportantthings,likegoodprogrammingtechnique,butyoucan\neasily spend more time searching and sorting the results and attempting to divine the authority of\ntheresultsthanitwouldtaketoreadthepertinentpartofasolidbook.\nIf you need information that no one else could be expected to know for example, \u2018does this soft-\nware that is brand new work on gigantic data sets?\u2019, you must still search the internet and the li-\nbrary.Afterthoseoptionsarecompletelyexhausted,youmaydesignanexperimenttoascertainit.\nIfyouwantanopinionoravaluejudgmentthattakesintoaccountsomeuniquecircumstance,talk\ntoanexpert.Forinstance,ifyouwanttoknowwhetherornotitisagoodideatobuildamodern\ndatabasemanagementsysteminLISP,youshouldtalktoaLISPexpertandadatabaseexpert.\nIf you want to know how likely it is that a faster algorithm for a particular application exists that\nhasnotyetbeenpublished,talktosomeoneworkinginthatfield.\nIf you want to make a personal decision that only you can make like whether or not you should\nstart a business, try putting into writing a list of arguments for and against the idea. If that fails,\nconsiderdivination.Supposeyouhavestudiedtheideafromallangles,havedoneallyourhome-\nwork, and worked out all the consequences and pros and cons in your mind, and yet still remain\nindecisive.Younowmustfollowyourheartandtellyourbraintoshutup.Themultitudeofavail-\nable divination techniques are very useful for determining your own semi-conscious desires, as\nthey each present a complete ambiguous and random pattern that your own subconscious will as-\nsignmeaningto.\n2.4. How to Utilize People as Information\nSources\nRespect every person's time and balance it against your own. Asking someone a question accom-\nplishes far more than just receiving the answer. The person learns about you, both by enjoying\nyour presence and hearing the particular question. You learn about the person in the same way,\nandyoumaylearntheansweryouseek.Thisisusuallyfarmoreimportantthanyourquestion.\n15 Beginner\nHowever, the value of this diminishes the more you do it. You are, after all, using the most pre-\ncious commodity a person has: their time. The benefits of communication must be weighed\nagainstthecosts.Furthermore,theparticularcostsandbenefitsderiveddifferfrompersontoper-\nson.Istronglybelievethatanexecutiveof100peopleshouldspendfiveminutesamonthtalking\ntoeachpersoninherorganization,whichwouldbeabout5%oftheirtime.Buttenminutesmight\nbe too much, and five minutes is too much if they have one thousand employees. The amount of\ntimeyouspendtalkingtoeachpersoninyourorganizationdependsontheirrole(morethantheir\nposition). You should talk to your boss more than your boss's boss, but you should talk to your\nboss'sbossalittle.Itmaybeuncomfortable,butIbelieveyouhaveadutytotalkalittlebittoall\nyoursuperiors,eachmonth,nomatterwhat.\nThe basic rule is that everyone benefits from talking to you a little bit, and the more they talk to\nyou, the less benefit they derive. It is your job to provide them this benefit, and to get the benefit\nofcommunicatingwiththem,keepingthebenefitinbalancewiththetimespent.\nItisimportanttorespectyourowntime.Iftalkingtosomeone,evenifitwillcostthemtime,will\nsave you a great deal of time, then you should do it unless you think their time is more valuable\nthanyours,tothetribe,bythatfactor.\nA strange example of this is the summer intern. A summer intern in a highly technical position\ncan'tbeexpectedtoaccomplishtoomuch;theycanbeexpectedtopesterthehelloutofeverybody\nthere. So why is this tolerated? Because the pestered are receiving something important from the\nintern. They get a chance to showoff a little. They get a chance to hear some new ideas, maybe;\ntheygetachancetoseethingsfromadifferentperspective.Theymayalsobetryingtorecruitthe\nintern,butevenifthisisnotthecasethereismuchtogain.\nYou should ask people for a little bit of their wisdom and judgment whenever you honestly be-\nlievetheyhavesomethingtosay.Thisflattersthemandyouwilllearnsomethingandteachthem\nsomething.AgoodprogrammerdoesnotoftenneedtheadviceofaVicePresidentofSales,butif\nyoueverdo,youbesuretoaskforit.Ionceaskedtolisteninonafewsalescallstobetterunder-\nstand the job of our sales staff. This took no more than 30 minutes but I think that small effort\nmadeanimpressiononthesalesforce.\n2.5. How to Document Wisely\nLifeistooshorttowritecrapnobodywillread;ifyouwritecrap,nobodywillreadit.Thereforea\nlittle good documentation is best. Managers often don't understand this, because even bad docu-\nmentationgivesthemafalsesenseofsecuritythattheyarenotdependentontheirprogrammers.If\nsomeoneabsolutelyinsiststhatyouwritetrulyuselessdocumentation,say``yes''andquietlybegin\nlookingforabetterjob.\nThere'snothingquiteaseffectiveasputtinganaccurateestimateoftheamountoftimeitwilltake\nto produce good documentation into an estimate to slacken the demand for documentation. The\ntruth is cold and hard: documentation, like testing, can take many times longer than developing\ncode.\nWriting good documentation is, first of all, good writing. I suggest you find books on writing,\nstudy them, and practice. But even if you are a lousy writer or have poor command of the lan-\nguage in which you must document, the Golden Rule is all you really need: ``Do unto others as\nyouwouldhavethemdountoyou.''Taketimetoreallythinkaboutwhowillbereadingyourdoc-\numentation,whattheyneedtogetoutofit,andhowyoucanteachthattothem.Ifyoudothat,you\n16 Beginner\nwillbeanaboveaveragedocumentationwriter,andagoodprogrammer.\nWhen it comes to actually documenting code itself, as opposed to producing documents that can\nactuallybereadbynon-programmers,thebestprogrammersI'veeverknownholdauniversalsen-\ntiment:writeself-explanatorycodeandonlydocumentcodeintheplacesthatyoucannotmakeit\nclear by writing the code itself. There are two good reasons for this. First, anyone who needs to\nsee code-level documentation will in most cases be able to and prefer to read the code anyway.\nAdmittedly, this seems easier to the experienced programmer than to the beginner. More impor-\ntantlyhowever,isthatthecodeandthedocumentationcannot beinconsistentifthereisnodocu-\nmentation.Thesourcecodecanatworstbewrongandconfusing.Thedocumentation,ifnotwrit-\ntenperfectly,canlie,andthatisathousandtimesworse.\nThisdoesnotmakeiteasierontheresponsibleprogrammer.Howdoesonewriteself-explanatory\ncode?Whatdoesthatevenmean?Itmeans:\n\u2022 Writingcodeknowingthatsomeonewillhavetoreadit;\n\u2022 Applyingthegoldenrule;\n\u2022 Choosing a solution that is straightforward, even if you could get by with another solution\nfaster;\n\u2022 Sacrificingsmalloptimizationsthatobfuscatethecode;\n\u2022 Thinking about the reader and spending some of your precious time to make it easier on her;\nand\n\u2022 Noteverusingafunctionnamelike``foo'',``bar'',or``doIt''!\n2.6. How to Work with Poor Code\nIt is very common to have to work with poor quality code that someone else has written. Don't\nthink too poorly of them, however, until you have walked in their shoes. They may have been\nasked very consciously to get something done quickly to meet schedule pressure. Regardless, in\nordertoworkwithunclearcodeyoumustunderstandit.Tounderstandittakeslearningtime,and\nthattimewillhavetocomeoutofsomeschedule,somewhere,andyoumustinsistonit.Tounder-\nstandit,youwillhavetoreadthesourcecode.Youwillprobablyhavetoexperimentwithit.\nThisisagoodtimetodocument,evenifitisonlyforyourself,becausetheactoftryingtodocu-\nment the code will force you to consider angles you might not have considered, and the resulting\ndocument may be useful. While you're doing this, consider what it would take to rewrite some or\nall of the code. Would it actually save time to rewrite some of it? Could you trust it better if you\nrewroteit?Becarefulofarrogancehere.Ifyourewriteit,itwillbeeasierforyoutodealwith,but\nwill it really be easier for the next person who has to read it? If you rewrite it, what will the test\nburdenbe?Willtheneedtore-testitoutweighanybenefitsthatmightbegained?\nIn any estimate that you make for work against code you didn't write, the quality of that code\nshouldaffectyourperceptionoftheriskofproblemsandunk-unks.\nIt is important to remember that abstraction and encapsulation, two of a programmer's best tools,\n17 Beginner\nare particularly applicable to lousy code. You may not be able to redesign a large block of code,\nbut if you can add a certain amount of abstraction to it you can obtain some of the benefits of a\ngooddesignwithoutreworkingthewholemess.Inparticular,youcantrytowalloffthepartsthat\nareparticularlybadsothattheymayberedesignedindependently.\n2.7. How to Use Source Code Control\nSourcecodecontrolsystemsletyoumanageprojectseffectively.They'reveryusefulforoneper-\nson and essential for a group. They track all changes in different versions so that no code is ever\nlost and meaning can be assigned to changes. One can create throw-away and debugging code\nwith confidence with a source code control system, since the code you modify is kept carefully\nseparatefromcommitted,officialcodethatwillbesharedwiththeteamorreleased.\nIwaslatetoappreciatethebenefitsofsourcecodecontrolsystemsbutnowIwouldn'tlivewithout\none even on a one-person project. Generally they are necessary when you have team working on\nthe same code base. However, they have another great advantage: they encourage thinking about\nthecodeasagrowing,organicsystem.Sinceeachchangeismarkedasanewrevisionwithanew\nname or number, one begins to think of the software as a visibly progressive series of improve-\nments.Ithinkthisisespeciallyusefulforbeginners.\nAgoodtechniqueforusingasourcecodecontrolsystemistostaywithinafewdaysofbeingup-\nto-dateatalltime.Codethatcan'tbefinishedinafewdaysischeckedin,butinawaythatitisin-\nactive and will not be called, or in a branch of its own, and therefore not create any problems for\nanybodyelse.Committingamistakethatslowsdownyourteammatesisaseriouserror;itisoften\ntaboo.\n2.8. How to Unit Test\nUnittesting,thetestingofanindividualpieceofcodedfunctionalitybytheteamthatwroteit,isa\npartofcoding,notsomethingdifferentfromit.Partofdesigningthecodeisdesigninghowitwill\nbe tested. You should write down a test plan, even if it is only one sentence. Sometimes the test\nwill be simple: ``Does the button look good?'' Sometimes it will be complex: ``Did this matching\nalgorithmreturnpreciselythecorrectmatches?''\nUseassertioncheckingandtestdriverswheneverpossible.Thisnotonlycatchesbugsearly,butis\nvery useful later on and lets you eliminate mysteries that you would otherwise have to worry\nabout.\nTheExtremeProgrammingdevelopersarewritingextensivelyonunittestingeffectively;Icando\nnobetterthantorecommendtheirwritings.\n2.9. Take Breaks when Stumped\nWhenstumped,takeabreak.Isometimesmeditatefor15minuteswhenstumpedandtheproblem\nmagically unravels when I come back to it. A night's sleep sometimes does the same thing on a\nlargerscale.It'spossiblethattemporarilyswitchingtoanyotheractivitymaywork.\n2.10. How to Recognize When to Go Home\nComputer programming is an activity that is also a culture. The unfortunate fact is that it is not a\n18 Beginner\nculture that values mental or physical health very much. For both cultural\/historical reasons (the\nneed to work at night on unloaded computers, for example) and because of overwhelming time-\nto-marketpressureandthescarcityofprogrammers,computerprogrammersaretraditionallyover-\nworked.Idon'tthinkyoucantrustallthestoriesyouhear,butIthink60hoursaweekiscommon,\nand50isprettymuchaminimum.Thismeansthatoftenmuchmorethanthatisrequired.Thisis\nserious problem for a good programmer, who is responsible not only for themselves but their\nteammatesaswell.Youhavetorecognizewhentogohome,andsometimeswhentosuggestthat\notherpeoplegohome.Therecan'tbeanyfixedrulesforsolvingthisproblem,anymorethanthere\ncanbefixedrulesforraisingachild,forthesamereason---everyhumanbeingisdifferent.\nBeyond 60 hours a week is an extraordinary effort for me, which I can apply for short periods of\ntime(aboutoneweek),andthatissometimesexpectedofme.Idon'tknowifitisfairtoexpect60\nhoursofworkfromaperson;Idon'tevenknowif40isfair.Iamsure,however,thatitisstupidto\nworksomuchthatyouaregettinglittleoutofthatextrahouryouwork.Formepersonally,that's\nany more than 60 hours a week. I personally think a programmer should exercise noblesse oblige\nandshoulderaheavyburden.However,itisnotaprogrammer'sdutytobeapatsy.Thesadfactis\nprogrammersareoftenaskedtobepatsiesinordertoputonashowforsomebody,forexamplea\nmanager trying to impress an executive. Programmers often succumb to this because they are ea-\ngertopleaseandnotverygoodatsayingno.Therearefourdefensesagainstthis:\n\u2022 Communicate as much as possible with everyone in the company so that no one can mislead\ntheexecutivesaboutwhatisgoingon,\n\u2022 Learn to estimate and schedule defensively and explicitly and give everyone visibility into\nwhatthescheduleisandwhereitstands,\n\u2022 Learntosayno,andsaynoasateamwhennecessary,and\n\u2022 Quitifyouhaveto.\nMost programmers are good programmers, and good programmers want to get a lot done. To do\nthat,theyhavetomanagetheirtimeeffectively.Thereisacertainamountofmentalinertiaassoci-\natedwithgettingwarmed-uptoaproblemanddeeplyinvolvedinit.Manyprogrammersfindthey\nworkbestwhentheyhavelong,uninterruptedblocksoftimeinwhichtogetwarmed-upandcon-\ncentrate.However,peoplemustsleepandperformotherduties.Eachpersonneedstofindawayto\nsatisfyboththeirhumanrhythmandtheirworkrhythm.Eachprogrammerneedstodowhateverit\ntakes to procure efficient work periods, such as reserving certain days in which you will attend\nonlythemostcriticalmeetings.\nSince I have children, I try to spend evenings with them sometimes. The rhythm that works best\nfor me is to work a very long day, sleep in the office or near the office (I have a long commute\nfrom home to work) then go home early enough the next day to spend time with my children be-\nforetheygotobed.Iamnotcomfortablewiththis,butitisthebestcompromiseIhavebeenable\nto work out. Go home if you have a contagious disease. You should go home if you are thinking\nsuicidal thoughts. You should take a break or go home if you think homicidal thoughts for more\nthan a few seconds. You should send someone home if they show serious mental malfunctioning\norsignsofmentalillnessbeyondmilddepression.Ifyouaretemptedtobedishonestordeceptive\nin a way that you normally are not due to fatigue, you should take a break. Don't use cocaine or\namphetaminestocombatfatigue.Don'tabusecaffeine.\n2.11. How to Deal with Difficult People\n19 Beginner\nYouwillprobablyhavetodealwithdifficultpeople.Youmayevenbeadifficultpersonyourself.\nIfyouarethekindofpersonwhohasalotofconflictswithcoworkersandauthorityfigures,you\nshould cherish the independence this implies, but work on your interpersonal skills without sacri-\nficingyourintelligenceorprinciples.\nThiscanbeverydisturbingtosomeprogrammerswhohavenoexperienceinthissortofthingand\nwhose previous life experience has taught them patterns of behavior that are not useful in the\nworkplace. Difficult people are often inured to disagreement and they are less affected by social\npressuretocompromisethanothers.Thekeyistorespectthemappropriately,whichismorethan\nyouwillwanttobutnotasmuchastheymightwant.\nProgrammers have to work together as a team. When disagreement arises, it must be resolved\nsomehow, it cannot be ducked for long. Difficult people are often extremely intelligent and have\nsomethingveryusefultosay.Itiscriticalthatyoulistenandunderstandthedifficultpersonwith-\nout prejudice caused by the person. A failure to communicate is often the basis of disagreement\nbut it can sometimes be removed with great patience. Try to keep this communication cool and\ncordial, and don't accept any baits for greater conflict that may be offered. After a reasonable pe-\nriodoftryingtounderstand,makeadecision.\nDon'tletabullyforceyoutodosomethingyoudon'tagreewith.Ifyouaretheleader,dowhatyou\nthink is best. Don't make a decision for any personal reasons, and be prepared to explain the rea-\nsonsforyourdecision.Ifyouareateammatewithadifficultperson,don'tlettheleader'sdecision\nhaveanypersonalimpact.Ifitdoesn'tgoyourway,doittheotherwaywhole-heartedly.\nDifficult people do change and improve. I've seen it with my own eyes, but it is very rare. How-\never,everyonehastransitoryupsanddowns.\nOne of the challenges that every programmer but especially leaders face is keeping the difficult\npersonfullyengaged.Theyaremorepronetoduckworkandresistpassivelythanothers.\n20 Chapter 3. Intermediate\n1. Personal Skills\n1.1. How to Stay Motivated\nItisawonderfulandsurprisingfactthatprogrammersarehighlymotivatedbythedesiretocreate\nartifactsthatarebeautiful,useful,ornifty.Thisdesireisnotuniquetoprogrammersnoruniversal\nbut it is so strong and common among programmers that it separates them from others in other\nroles.\nThis has practical and important consequences. If programmers are asked to do something that is\nnotbeautiful,useful,ornifty,theywillhavelowmorale.There'salotofmoneytobemadedoing\nugly,stupid,andboringstuff;butintheend,funwillmakethemostmoneyforthecompany.\nObviously,thereareentireindustriesorganizedaroundmotivationaltechniquessomeofwhichap-\nplyhere.ThethingsthatarespecifictoprogrammingthatIcanidentifyare:\n\u2022 Usethebestlanguageforthejob.\n\u2022 Lookforopportunitiestoapplynewtechniques,languages,andtechnologies.\n\u2022 Trytoeitherlearnorteachsomething,howeversmall,ineachproject.\nFinally,ifpossible,measuretheimpactofyourworkintermsofsomethingthatwillbepersonally\nmotivating.Forexample,whenfixingbugs,countingthenumberofbugsthatIhavefixedisnotat\nallmotivationaltome,becauseitisindependentofthenumberthatmaystillexist,andisalsoaf-\nfectsthetotalvalueI'maddingtomycompany'scustomersinonlythesmallestpossibleway.Re-\nlatingeachbugtoahappycustomer,however,ispersonallymotivatingtome.\n1.2. How to be Widely Trusted\nTobetrustedyoumustbetrustworthy.Youmustalsobevisible.Ifknowoneknowsaboutyou,no\ntrust will be invested in you. With those close to you, such as your teammates, this should not be\nanissue.Youestablishtrustbybeingresponsiveandinformativetothoseoutsideyourdepartment\nor team. Occasionally someone will abuse this trust, and ask for unreasonable favors. Don't be\nafraidofthis,justexplainwhatyouwouldhavetogiveupdoingtoperformthefavor.\nDon't pretend to know something that you don't. With people that are not teammates, you may\nhavetomakeacleardistinctionbetween``notknowingrightoffthetopofmyhead''and``notbe-\ningabletofigureitout,ever.''\n1.3. How to Tradeoff Time vs. Space\nYou can be a good programmer without going to college, but you can't be a good intermediate\nprogrammer without knowing basic computational complexity theory. You don't need to know\n21 Intermediate\n``big O'' notation, but I personally think you should be able to understand the difference between\n``constant-time'',``n log n'' and ``n squared''. You might be able to intuit how to tradeoff time\nagainstspacewithoutthisknowledge,butinitsabsenceyouwillnothaveafirmbasisforcommu-\nnicatingwithyourcolleagues.\nIn designing or understanding an algorithm, the amount of time it takes to run is sometimes a\nfunction of the size of the input. When that is true, we can say an algorithm's worst\/ex-\npected\/best-caserunningtimeis``nlogn''ifitisproportionaltothesize(representedbythevari-\nablen)timesthelogarithmofthesize.Thenotationandwayofspeakingcanbealsobeappliedto\nthespacetakenupbyadatastructure.\nTo me, computational complexity theory is beautiful and as profound as physics---and a little bit\ngoesalongway!\nTime (processor cycles) and space (memory) can be traded off against each other. Engineering is\naboutcompromise,andthisisafineexample.Itisnotalwayssystematic.Ingeneral,however,one\ncan save space by encoding things more tightly, at the expense of more computation time when\nyou have to decode them. You can save time by caching, that is, spending space to store a local\ncopy of something, at the expense of having to maintain the consistency of the cache. You can\nsometimes save time by maintaining more information in a data structure. This usually cost a\nsmallamountofspacebutmaycomplicatethealgorithm.\nImproving the space\/time tradeoff can often change one or the other dramatically. However, be-\nfore you work on this you should ask yourself if what you are improving is really the thing that\nneeds the most improvement. It's fun to work on an algorithm, but you can't let that blind you to\nthecoldhardfactthatimprovingsomethingthatisnotaproblemwillnotmakeanynoticeabledif-\nferenceandwillcreateatestburden.\nMemory on modern computers appears cheap, because unlike processor time, you can't see it be-\ninguseduntilyouhitthewall;butthenfailureiscatastrophic.Therearealsootherhiddencoststo\nusing memory, such as your effect on other programs that must be resident, and the time to allo-\ncateanddeallocateit.Considerthiscarefullybeforeyoutradeawayspacetogainspeed.\n1.4. How to Stress Test\nStresstestingisfun.Atfirstitappearsthatthepurposeofstresstestingistofindoutifthesystem\nworks under a load. In reality, it is common that the system does work under a load but fails to\nwork in some way when the load is heavy enough. I call this hitting the wall or bonking1. There\nmay be some exceptions, but there is almost always a \u2018wall\u2019. The purpose of stress testing is to\nfigureoutwherethewallis,andthenfigureouthowtomovethewallfurtherout.\nAplanforstresstestingshouldbedevelopedearlyintheproject,becauseitoftenhelpstoclarify\nexactlywhatisexpected.Istwosecondsforawebpagerequestamiserablefailureorasmashing\nsuccess?Is500concurrentusersenough?That,ofcourse,depends,butonemustknowtheanswer\nwhen designing the system that answers the request. The stress test needs to model reality well\nenoughtobeuseful.Itisn'treallypossibletosimulate500erraticandunpredictablehumansusing\na system concurrently very easily, but one can at least create 500 simulations and try to model\nsomepartofwhattheymightdo.\n1Thistermhasseveralmeanings,derivedfrom\u2018tohit\u2019,butisparticularlyusedbyathletestodescriberunningoutofblood\nsugarorsomeotherbasicresourcethatmanifestsasasudden,ratherthangradual,degradationofperformanceorspirit.I\nhavebeentoldithasanadditional,andverydifferentmeaning,throughoutsomeoftheBritishCommonwealth.\n22 Intermediate\nInstresstesting,startoutwithalightloadandloadthesystemalongsomedimension---suchasin-\nput rate or input size---until you hit the wall. If the wall is too close to satisfy your needs, figure\noutwhichresourceisthebottleneck(thereisusuallyadominantone.)Isitmemory,processor,In-\nput\/Output, network bandwidth, or data contention? Then figure out how you can move the wall.\nNotethatmovingthewall,thatis,increasingthemaximumloadthesystemcanhandle,mightnot\nhelpormightactuallyhurttheperformanceofalightlyloadedsystem.Usuallyperformanceunder\nheavyloadismoreimportantthanperformanceunderalightload.\nYou may have to get visibility into several different dimensions to build up a mental model of it;\nno single technique is sufficient. For instance, logging often gives a good idea of the wall-clock\ntimebetweentwoeventsinthesystem,butunlesscarefullyconstructed,doesn'tgivevisibilityinto\nmemory utilization or even data structure size. Similarly, in a modern system, a number of com-\nputersandmanysoftwaresystemsmaybecooperating.Particularlywhenyouarehittingthewall\n(thatis,theperformanceisnon-linearinthesizeoftheinput)theseothersoftwaresystemsmaybe\nabottleneck.Visibilityintothesesystems,evenifonlymeasuringtheprocessorloadonallpartici-\npatingmachines,canbeveryhelpful.\nKnowing where the wall is is essential not only to moving the wall, but also to providing pre-\ndictabilitysothatthebusinesscanbemanagedeffectively.\n1.5. How to Balance Brevity and Abstraction\nAbstractioniskeytoprogramming.Youshouldcarefullychoosehowabstractyouneedtobe.Be-\nginning programmers in their enthusiasm often create more abstraction than is really useful. One\nsign of this is if you create classes that don't really contain any code and don't really do anything\nexcept serve to abstract something. The attraction of this is understandable but the value of code\nbrevitymustbemeasuredagainstthevalueofabstraction.Occasionally,oneseesamistakemade\nby enthusiastic idealists: at the start of the project a lot of classes are defined that seem wonder-\nfullyabstractandonemayspeculatethattheywillhandleeveryeventualitythatmayarise.Asthe\nproject progresses and fatigue sets in, the code itself becomes messy. Function bodies become\nlongerthantheyshouldbe.Theemptyclassesareaburdentodocumentthatisignoredwhenun-\nder pressure. The final result would have been better if the energy spent on abstraction had been\nspent on keeping things short and simple. This is a form of speculative programming. I strongly\nrecommendthearticle``SuccinctnessisPower''byPaulGraham[PGSite].\nThere is a certain dogma associated with useful techniques such as information hiding and object\noriented programming that are sometimes taken too far. These techniques let one code abstractly\nandanticipatechange.Ipersonallythink,however,thatyoushouldnotproducemuchspeculative\ncode.Forexample,itisanacceptedstyletohideanintegervariableonanobjectbehindmutators\nandaccessors,sothatthevariableitselfisnotexposed,onlythelittleinterfacetoit.Thisdoesal-\nlow the implementation of that variable to be changed without affecting the calling code, and is\nperhaps appropriate to a library writer who must publish a very stable API. But I don't think the\nbenefitofthisoutweighsthecostofthewordinessofitwhenmyteamownsthecallingcodeand\nhencecanrecodethecalleraseasilyasthecalled.Fourorfiveextralinesofcodeisaheavyprice\ntopayforthisspeculativebenefit.\nPortability poses a similar problem. Should code be portable to a different computer, compiler,\nsoftware system or platform, or simply easily ported? I think a non-portable, short-\nand-easily-portedpieceofcodeisbetterthanalongportableone.Itisrelativelyeasyandcertainly\na good idea to confine non-portable code to designated areas, such as a class that makes database\nqueriesthatarespecifictoagivenDBMS.\n23 Intermediate\n1.6. How to Learn New Skills\nLearning new skills, especially non-technical ones, is the greatest fun of all. Most companies\nwouldhavebettermoraleiftheyunderstoodhowmuchthismotivatesprogrammers.\nHumanslearnbydoing.Book-readingandclass-takingareuseful.Butcouldyouhaveanyrespect\nforaprogrammerwhohadneverwrittenaprogram?Tolearnanyskill,youhavetoputyourselfin\na forgiving position where you can exercise that skill. When learning a new programming lan-\nguage,trytodoasmallprojectitinbeforeyouhavetodoalargeproject.Whenlearningtoman-\nageasoftwareproject,trytomanageasmallonefirst.\nA good mentor is no replacement for doing things yourself, but is a lot better than a book. What\ncanyouofferapotentialmentorinexchangefortheirknowledge?Ataminimum,youshouldof-\nfertostudyhardsotheirtimewon'tbewasted.\nTry to get your boss to let you have formal training, but understand that it often not much better\nthan the same amount of time spent simply playing with the new skill you want to learn. It is,\nhowever,easiertoaskfortrainingthanplaytimeinourimperfectworld,eventhoughalotoffor-\nmaltrainingisjustsleepingthroughlectureswaitingforthedinnerparty.\nIfyouleadpeople,understandhowtheylearnandassistthembyassigningthemprojectsthatare\nthe right size and that exercise skills they are interested in. Don't forget that the most important\nskillsforaprogrammerarenotthetechnicalones.Giveyourpeopleachancetoplayandpractice\ncourage,honesty,andcommunication.\n1.7. Learn to Type\nLearntotouch-type.Thisisanintermediateskillbecausewritingcodeissohardthatthespeedat\nwhichyoucantypeisirrelevantandcan'tputmuchofadentinthetimeittakestowritecode,no\nmatter how good you are. However, by the time you are an intermediate programmer you will\nprobably spend a lot of time writing natural language to your colleagues and others. This is a fun\ntestofyourcommitment;ittakesdedicatedtimethatisnotmuchfuntolearnsomethinglikethat.\nLegend has it that when Michael Tiemann2 was at MCC people would stand outside his door to\nlistentothehumgeneratedbyhiskeystrokeswhichweresorapidastobeindistinguishable.\n1.8. How to Do Integration Testing\nIntegration testing is the testing of the integration of various components that have been unit\ntested. Integration is expensive and it comes out in the testing. You must include time for this in\nyourestimatesandyourschedule.\nIdeallyyoushouldorganizeaprojectsothatthereisnotaphaseattheendwhereintegrationmust\nexplicitly take place. It is far better to gradually integrate things as they are completed over the\ncourseoftheproject.Ifitisunavoidableestimateitcarefully.\n1.9. Communication Languages\nThere are some languages, that is, formally defined syntactic systems, that are not programming\nlanguagesbutcommunicationlanguages---theyaredesignedspecificallytofacillitatecommunica-\n2AtthetimeofthiswritingMichaelTiemannistheCTOofRedHat.\n24 Intermediate\ntionthroughstandardization.In2003themostimportantoftheseareUML,XML,andSQL.You\nshouldhavesomefamiliaritywithallofthesesothatyoucancommunicatewellanddecidewhen\ntousethem.\nUMLisarichformalsystemformakingdrawingsthatdescribedesigns.It'sbeautylinesinthatis\nbothvisualandformal,capableofconveyingagreatdealofinformationifboththeauthorandthe\naudienceknowUML.Youneedtoknowaboutitbecausedesignsaresometimescommunicatedin\nit. There are very helpful tools for making UML drawings that look very professional. In a lot of\ncases UML is too formal, and I find myself using a simpler boxes and arrows style for design\ndrawings.ButI'mfairlysureUMLisatleastasgoodforyouasstudyingLatin.\nXML is a standard for defining new standards. It is not a solution to data interchange problems,\nthoughyousometimesseeitpresentedasifitwas.Rather,itisawelcomeautomationofthemost\nboring part of data interchange, namely, structuring the representation into a linear sequence and\nparsing back into a structure. It provides some nice type- and correctness-checking, though again\nonlyafractionofwhatyouarelikelytoneedinpractice.\nSQLisaverypowerfulandrichdataqueryandmanipulationlanguagethatisnotquiteaprogram-\nminglanguage.Ithasmanyvariations,typicallyquiteproduct-dependent,whicharelessimportant\nthanthestandardizedcore.SQListhelinguafrancaofrelationaldatabases.Youmayormaynot\nwork in any field that can benefit from an understanding of relational databases, but you should\nhaveabasicunderstandingofthemandtheysyntaxandmeaningofSQL.\n2. Team Skills\n2.1. How to Manage Development Time\nTomanagedevelopmenttime,maintainaconciseandup-to-dateprojectplan.Aprojectplanisan\nestimate,aschedule,asetofmilestonesformarkingprogress,andanassignmentofyourteamor\nyourowntimetoeachtaskontheestimate.Itshouldalsoincludeotherthingsyouhavetoremem-\nbertodo,suchasmeetingwiththequalityassurancepeople,preparingdocumentation,orordering\nequipment. If you are on a team, the project plan should be a consensual agreement, both at the\nstartandasyougo.\nThe project plan exists to help make decisions, not to show how organized you are. If the project\nplan is either too long or not up-to-date, it will be useless for making decisions. In reality, these\ndecisions are about individual persons. The plan and your judgment let you decide if you should\nshift tasks from one person to another. The milestones mark your progress. If you use a fancy\nproject planning tool, do not be seduced into creating a Big Design Up Front (BDUF) for the\nproject,butuseitmaintainconcisionandup-to-dateness.\nIf you miss a milestone, you should take immediate action such as informing your boss that the\nscheduledcompletionofthatprojecthasslippedbythatamount.Theestimateandschedulecould\nnever have been perfect to begin with; this creates the illusion that you might be able to make up\nthe days you missed in the latter part of the project. You might. But it is just as likely that you\nhave underestimated that part as that you have overestimated it. Therefore the scheduled comple-\ntionoftheprojecthasalreadyslipped,whetheryoulikeitornot.\nMake sure your plan includes time for: internal team meetings, demos, documentation, scheduled\nperiodic activities, integration testing, dealing with outsiders, sickness, vacations, maintenance of\nexistingproducts,andmaintenanceofthedevelopmentenvironment.Theprojectplancanserveas\n25 Intermediate\nawaytogiveoutsidersoryourbossaviewintowhatyouoryourteamisdoing.Forthisreasonit\nshouldbeshortandup-to-date.\n2.2. How to Manage Third-Party Software Risks\nAprojectoftendependsonsoftwareproducedbyorganizationsthatitdoesnotcontrol.Thereare\ngreatrisksassociatedwiththirdpartysoftwarethatmustberecognizedbyeveryoneinvolved.\nNever,ever,restanyhopesonvapor.Vaporisanyallegedsoftwarethathasbeenpromisedbutis\nnotyetavailable.Thisisthesurestwaytogooutofbusiness.Itisunwisetobemerelyskepticalof\nasoftwarecompany'spromisetoreleaseacertainproductwithacertainfeatureatacertaindate;it\nisfarwisertoignoreitcompletelyandforgetyoueverheardit.Neverletitbewrittendowninany\ndocumentsusedbyyourcompany.\nIfthird-partysoftwareisnotvapor,itisstillrisky,butatleastitisariskthatcanbetackled.Ifyou\nare considering using third-party software, you should devote energy early on to evaluating it.\nPeople might not like to hear that it will take two weeks or two months to evaluate each of three\nproductsforsuitability,butithastobedoneasearlyaspossible.Thecostofintegratingcannotbe\naccuratelyestimatedwithoutaproperevaluation.\nUnderstandingthesuitabilityofexistingthirdpartysoftwareforaparticularpurposeisverytribal\nknowledge.Itisverysubjectiveandgenerallyresidesinexperts.Youcansavealotoftimeifyou\ncanfindthoseexperts.Oftentimesaprojectwilldependonathird-partysoftwaresystemsocom-\npletely that if the integration fails the project will fail. Express risks like that clearly in writing in\ntheschedule.Trytohaveacontingencyplan,suchasanothersystemthatcanbeusedortheabil-\nity to write the functionality yourself if the risk can't be removed early. Never let a schedule de-\npendonvapor.\n2.3. How to Manage Consultants\nUseconsultants,butdon'trelyonthem.Theyarewonderfulpeopleanddeserveagreatdealofre-\nspect. Since they get to see a lot of different projects, they often know more about specific tech-\nnologies and even programming techniques than you will. The best way to use them is as educa-\ntorsin-housethatcanteachbyexample.\nHowever, they usually cannot become part of the team in the same sense that regular employees\nare,ifonlybecauseyoumaynothaveenoughtimetolearntheirstrengthsandweaknesses.Their\nfinancial commitment is much lower. They can move more easily. They may have less to gain if\nthecompanydoeswell.Somewillbegood,somewillbeaverage,andsomewillbebad,buthope-\nfully your selection of consultants will not be as careful as your selection of employees, so you\nwillgetmorebadones.\nIf consultants are going to write code, you must review it carefully as you go along. You cannot\nget to the end of the a project with the risk of a large block of code that has not been reviewed.\nThis is true of all team members, really, but you will usually have more knowledge of the team\nmembersclosertoyou.\n2.4. How to Communicate the Right Amount\nCarefully consider the cost of a meeting; it costs its duration multiplied by the number of partici-\n26 Intermediate\npants.Meetingsaresometimesnecessary,butsmallerisusuallybetter.Thequalityofcommunica-\ntion in small meetings is better, and less time overall is wasted. If any one person is bored at a\nmeeting,takethisasasignthatthemeetingshouldbesmaller.\nEverything possible should be done to encourage informal communication. More useful work is\ndoneduringluncheswithcolleaguesthanduringanyothertime.Itisashamethatmorecompanies\ndonotrecognizenorsupportthisfact.\n2.5. How to Disagree Honestly and Get Away\nwith It\nDisagreement is a great opportunity to make a good decision, but it should be handled delicately.\nHopefully you feel that you have expressed your thoughts adequately and been heard before the\ndecision is made. In that case there is nothing more to say, and you should decide whether you\nwill stand behind the decision even though you disagree with it. If you can support this decision\neventhoughyoudisagree,sayso.Thisshowshowvaluableyouarebecauseyouareindependent\nandarenotayes-man,butrespectfulofthedecisionandateamplayer.\nSometimesadecisionthatyoudisagreewithwillbemadewhenthedecisionmakersdidnothave\nthefullbenefitofyouopinion.Youshouldthenevaluatewhethertoraisetheissueonthebasisof\nthebenefittothecompanyortribe.Ifitisasmallmistakeinyouropinion,itmaynotbeworthre-\nconsidering.Ifitisalargemistakeinyouopinion,thenofcourseyoumustpresentanargument.\nUsually, this is not a problem. In some stressful circumstances and with some personality types\nthiscanleadtothingsbeingtakenpersonally.Forinstance,someverygoodprogrammerslackthe\nconfidenceneededtochallengeadecisionevenwhentheyhavegoodreasontobelieveitiswrong.\nIntheworstofcircumstancesthedecisionmakerisinsecureandtakesitasapersonalchallengeto\ntheir authority. It is best to remember that in such circumstances people react with the reptilian\npartoftheirbrains.Youshouldpresentyourargumentinprivate,andtrytoshowhownewknowl-\nedgechangesthebasisonwhichthedecisionwasmade.\nWhether the decision is reversed or not, you must remember that you will never be able to say \u2018I\ntoldyouso!\u2019sincethealternatedecisionwasneverfullyexplored.\n3. Judgement\n3.1. How to Tradeoff Quality Against Develop-\nment Time\nSoftware development is always a compromise between what the project does and getting the\nproject done. But you may be asked to tradeoff quality to speed the deployment of a project in a\nwaythatoffendsyourengineeringsensibilitiesorbusinesssensibilities.Forexample,youmaybe\nasked to do something that is a poor software engineering practice and that will lead to a lot of\nmaintenanceproblems.\nIfthishappensyourfirstresponsibilityistoinformyourteamandtoclearlyexplainthecostofthe\ndecreaseinquality.Afterall,yourunderstandingofitshouldbemuchbetterthanyourboss'sun-\nderstanding. Make it clear what is being lost and what is being gained, and at what cost the lost\n27 Intermediate\nground will be regained in the next cycle. In this, the visibility provided by a good project plan\nshouldbehelpful.Ifthequalitytradeoffaffectsthequalityassuranceeffort,pointthatout(bothto\nyour boss and quality assurance people). If the quality tradeoff will lead to more bugs being re-\nportedafterthequalityassuranceperiod,pointthatout.\nIfshestillinsistsyoushouldtrytoisolatetheshoddinessintoparticularcomponentsthatyoucan\nplantorewriteorimproveinthenextcycle.Explainthistoyourteamsothattheycanplanforit.\nNinjaProgrammeratSlashdotsentinthisgem:\nRemember that a good design will be resillient against poor code implementa-\ntions. If good interfaces and abstractions exist throughout the code, then the\neventualrewriteswillbefarmorepainless.Ifitishardtowriteclearcodethatis\nhardtofix,considerwhatiswrongwiththecoredesignthatiscausingthis.\n3.2. How to Manage Software System Depen-\ndence\nModern software systems tend to depend on a large number of components that may not be di-\nrectly under your control. This increases productivity through synergy and reuse. However, each\ncomponentbringswithitsomeproblems:\n\u2022 Howwillyoufixbugsinthecomponent?\n\u2022 Doesthecomponentrestrictyoutoparticularhardwareorsoftwaresystems?\n\u2022 Whatwillyoudoifthecomponentfailscompletely?\nItisalwaysbesttoencapsulatethecomponentinsomewaysothatitisisolatedandsothatitcan\nbe swapped out. If the component proves to be completely unworkable, you may be able to get a\ndifferent one, but you may have to write your own. Encapsulation is not portability, but it makes\nportingeasier,whichisalmostasgood.\nHavingthesourcecodeforacomponentdecreasestheriskbyafactoroffour.Withsourcecode,\nyou can evaluate it easier, debug it easier, find workarounds easier, and make fixes easier. If you\nmake fixes, you should give them to the owner of the component and get the fixes incorporated\nintoanofficialrelease;otherwiseyouwilluncomfortablyhavetomaintainanunofficialversion.\n3.3. How to Decide if Software is Too Immature\nUsing software other people wrote is one of the most effective ways to quickly build a solid sys-\ntem. It should not be discouraged, but the risks associated with it must be examined. One of the\nbiggest risks is the period of bugginess and near inoperability that is often associated with soft-\nwarebeforeitmatures,throughusage,intoausableproduct.Beforeyouconsiderintegratingwith\nasoftwaresystem,whethercreatedinhouseorbyathirdparty,itisveryimportanttoconsiderifit\nisreallymatureenoughtobeused.Herearetenquestionsyoushouldaskyourselfaboutit:\n1. Isitvapor?(Promisesareveryimmature).\n28 Intermediate\n2. Isthereanaccessiblebodyofloreaboutthesoftware?\n3. Areyouthefirstuser?\n4. Isthereastrongincentiveforcontinuation?\n5. Hasithadamaintenanceeffort?\n6. Willitsurvivedefectionofthecurrentmaintainers?\n7. Isthereaseasonedalternativeatleasthalfasgood?\n8. Isitknowntoyourtribeorcompany?\n9. Isitdesirabletoyourtribeorcompany?\n10. Canyouhirepeopletoworkonitevenifitisbad?\nA little consideration of these criteria demonstrates the great value of well-established free soft-\nwareandopen-sourcesoftwareinreducingrisktotheentrepreneur.\n3.4. How to Make a Buy vs. Build Decision\nAnentrepreneurialcompanyorprojectthatistryingtoaccomplishsomethingwithsoftwarehasto\nconstantlymakeso-calledbuyvs.builddecisions.Thisturnofphraseisunfortunateintwoways:\nit seems to ignore open-source and free software which is not necessarily bought. Even more im-\nportantly,itshouldperhapsbecalledanobtainandintegratevs.buildhereandintegratedecision\nbecausethecostofintegrationmustbeconsidered.Thisrequiresagreatcombinationofbusiness,\nmanagement,andengineeringsavvy.\n\u2022 Howwelldoyourneedsmatchthoseforwhichitwasdesigned?\n\u2022 Whatportionofwhatyoubuywillyouneed?\n\u2022 Whatisthecostofevaluatingtheintegration?\n\u2022 Whatisthecostofintegration?\n\u2022 Whatisthecostofevaluatingtheintegration?\n\u2022 Willbuyingincreaseordecreaselongtermmaintenancecosts?\n\u2022 Willbuildingitputyouinabusinesspositionyoudon'twanttobein?\nYou should think twice before building something that is big enough to serve as the basis for an\nentireotherbusiness.Suchideasareoftenproposedbybrightandoptimisticpeoplethatwillhave\nalottocontributetoyourteam.Iftheirideaiscompelling,youmaywishtochangeyourbusiness\nplan;butdonotinvestinasolutionbiggerthanyourownprojectwithoutconsciousthought.\nAfter considering these questions, you should perhaps prepare two draft project plans, one for\nbuildingandoneforbuying.Thiswillforceyoutoconsidertheintegrationcosts.Youshouldalso\n29 Intermediate\nconsiderthelongtermmaintenancecostsofbothsolutions.Toestimatetheintegrationcosts,you\nwill have to do a thorough evaluation of the software before you buy it. If you can't evaluate it,\nyou will assume an unreasonable risk in buying it and you should decide against buying that par-\nticularproduct.Ifthereareseveralbuydecisionsunderconsideration,someenergywillhavetobe\nspentevaluatingeach.\n3.5. How to Grow Professionally\nAssumeresponsibilityinexcessofyourauthority.Playtherolethatyoudesire.Expressapprecia-\ntion for people's contribution to the success of the larger organization, as well as things as that\nhelpyoupersonally.\nIfyouwanttobecomeateamleader,instigatetheformationofconsensus.Ifyouwanttobecome\na manager, take responsibility for the schedule. You can usually do this comfortably while work-\ningwithaleaderoramanager,sincethisfreesthemuptotakegreaterresponsibility.Ifthatistoo\nmuchtotry,doitalittleatatime.\nEvaluateyourself.Ifyouwanttobecomeabetterprogrammer,asksomeoneyouadmirehowyou\ncanbecomelikethem.Youcanalsoaskyourboss,whowillknowlessbuthaveagreaterimpact\nonyourcareer.\nPlanwaystolearnnewskills,boththetrivialtechnicalkind,likelearninganewsoftwaresystem,\nandthehardsocialkind,likewritingwell,byintegratingthemintoyourwork.\n3.6. How to Evaluate Interviewees\nEvaluating potential employees is not given the energy it deserves. A bad hire, like a bad mar-\nriage, is terrible. A significant portion of everyone's energy should be devoted to recruitment,\nthoughthisisrarelydone.\nThere are different interviewing styles. Some are torturous, designed to put the candidate under a\ngreatdealofstress.Thisservesaveryvaluablepurposeofpossiblyrevealingcharacterflawsand\nweaknesses under stress. Candidates are no more honest with interviewers than they are with\nthemselves,andthehumancapacityforself-deceptionisastonishing.\nYoushould,ataminimum,givethecandidatetheequivalentofanoralexaminationonthetechni-\ncal skills for two hours. With practice, you will be able to quickly cover what they know and\nquickly retract from what they don't know to mark out the boundary. Interviewees will respect\nthis. I have several times heard interviewees say that the quality of the examination was one of\ntheirmotivationsforchoosingacompany.Goodpeoplewanttobehiredfortheirskills,notwhere\ntheyworkedlastorwhatschooltheywenttoorsomeotherinessentialcharacteristic.\nIndoingthis,youshouldalsoevaluatetheirabilitytolearn,whichisfarmoreimportantthanwhat\ntheyknow.Youshouldalsowatchforthewhiffofbrimstonethatisgivenoffbydifficultpeople.\nYou may be able to recognize it by comparing notes after the interview, but in the heat of the in-\nterview it is hard to recognize. How well people communicate and work with people is more im-\nportantthanbeinguponthelatestprogramminglanguage.\nAreaderhashadgoodluckusinga\u2018take-home\u2019testforinterviewees.Thishastheadvantagethat\ncan uncover the interviewee that can present themselves well but can't really code---and there are\nmanysuchpeople.Ipersonallyhavenottriedthistechnique,butitsoundssensible.\n30 Intermediate\nFinally,interviewingisalsoaprocessofselling.Youshouldbesellingyourcompanyorprojectto\nthe candidate. However, you are talking to a programmer, so don't try to color the truth. Start off\nwiththebadstuff,thenfinishstrongwiththegoodstuff.\n3.7. How to Know When to Apply Fancy Com-\nputer Science\nThere is a body of knowledge about algorithms, data structures, mathematics, and other gee-whiz\nstuff that most programmers know about but rarely use. In practice, this wonderful stuff is too\ncomplicatedandgenerallyunnecessary.Thereisnopointinimprovinganalgorithmwhenmostof\nyour time is spent making inefficient database calls, for instance. An unfortunate amount of pro-\ngrammingconsistsofgettingsystemstotalktoeachotherandusingverysimpledatastructuresto\nbuildaniceuserinterface.\nWhenishightechnologytheappropriatetechnology?Whenshouldyoucrackabooktogetsome-\nthingotherthanarun-of-the-millalgorithm?Itissometimesusefultodothisbutitshouldbeeval-\nuatedcarefully.\nThethreemostimportantconsiderationsforthepotentialcomputersciencetechniqueare:\n\u2022 Isitwellencapsulatedsothattherisktoothersystemsislowandtheoverallincreaseincom-\nplexityandmaintenancecostislow?\n\u2022 Is the benefit startling (for example, a factor of two in a mature system or a factor of ten in a\nnewsystem)?\n\u2022 Willyoubeabletotestandevaluateiteffectively?\nIf a well-isolated algorithm that uses a slightly fancy algorithm can decrease hardware cost or in-\ncrease performance by a factor of two across an entire system, then it would be criminal not to\nconsiderit.Oneofthekeystoarguingforsuchanapproachistoshowthattheriskisreallyquite\nlow,sincetheproposedtechnologyhasprobablybeenwellstudied,theonlyissueistheriskofin-\ntegration. Here a programmer's experience and judgment can truly synergize with the fancy tech-\nnologytomakeintegrationeasy.\n3.8. How to Talk to Non-Engineers\nEngineersandprogrammersinparticulararegenerallyrecognizedbypopularcultureasbeingdif-\nferent from other people. This implies that other people are different from us. This is worth bear-\ninginmindwhencommunicatingwithnon-engineers;youshouldalwaysunderstandtheaudience.\nNon-engineers are smart, but not as grounded in creating technical things as we are. We make\nthings.Theysellthingsandhandlethingsandcountthingsandmanagethings,buttheyarenotex-\npertsonmakingthings.Theyarenotasgoodatworkingtogetheronteamsasengineersare(there\nare no doubt exceptions.)3 Their social skills are generally as good as or better than engineers in\n3Anumberofreadershavefoundthissectionarrogantandoutoftouchwiththeirownexperience.Ivaluenon-engineers\nveryhighly;Iamnotbeingintentionallycondescending.Idoapologizeifanyoneisoffendedbythesebeliefs,butitwould\nbedishonestformetoretractthemuntilexperiencegivesmeacounter-example.ItispossiblethatIhavebeenextraordi-\nnarilyluckyintheprogrammersthatIhavebeenabletoworkwith,andthatotherswillfindthestereotypeofthecommu-\nnication-challengedprogrammerthenorm.\n31 Intermediate\nnon-teamenvironments,buttheirworkdoesnotalwaysdemandthattheypracticethekindofinti-\nmate,precisecommunicationandcarefulsubdivisionsoftasksthatwedo.\nNon-engineers may be too eager to please and they may be intimidated by you. Just like us, they\nmay say \u2018yes\u2019 without really meaning it to please you or because they are a little scared of you,\nandthennotstandbehindtheirwords.\nNon-programmers can understand technical things but they do not have the thing that is so hard\nevenforus---technicaljudgment.Theydounderstandhowtechnologyworks,buttheycannotun-\nderstand why a certain approach would take three months and another one three days. (After all,\nprogrammers are anecdotally horrible at this kind of estimation as well.) This represents a great\nopportunitytosynergizewiththem.\nWhentalkingtoyourteamyouwill,withoutthinking,useasortofshorthand,anabbreviatedlan-\nguagethatiseffectivebecauseyouwillhavemuchsharedexperienceabouttechnologyingeneral\nand your product in particular. It takes some effort not to use this shorthand with those that don't\nhavethatsharedexperience,especiallywhenmembersofyourownteamarepresent.Thisvocabu-\nlarycreateawallbetweenyouandthosethatdonotshareit,and,evenworse,wastestheirtime.\nWith your team, the basic assumptions and goals do not need to be restated often, and most con-\nversation focuses on the details. With outsiders, it must be the other way around. They may not\nunderstandthingsyoutakeforgranted.Sinceyoutakethemforgrantedanddon'trepeatthem,you\ncan leave a conversation with an outsider thinking that you understand each other when really\nthere is a large misunderstanding. You should assume that you will miscommunicate and watch\ncarefullytofindthismiscommunication.Trytogetthemtosummarizeorparaphrasewhatyouare\nsayingtomakesuretheyunderstand.Ifyouhavetheopportunitytomeetwiththemoften,spenda\nlittlebitoftimeaskingifyouyouarecommunicatingeffectively,andhowyoucandoitbetter.If\nthereisaproblemincommunication,seektoalteryourownpracticesbeforebecomingfrustrated\nwiththeirs.\nI love working with non-engineers. It provides great opportunities to learn and to teach. You can\noften lead by example, in terms of the clarity of your communication. Engineers are trained to\nbring order out of chaos, to bring clarity out of confusion, and non-engineers like this about us.\nBecause we have technical judgment and can usually understand business issues, we can often\nfindasimplesolutiontoaproblem.\nOftennon-engineersproposesolutionsthattheythinkwillmakeiteasieronusoutofkindnessand\nadesiretodotherightthing,wheninfactamuchbetteroverallsolutionexistswhichcanonlybe\nseen by synergizing the outsiders view with your technical judgment. I personally like Extreme\nProgramming because it addresses this inefficiency; by marrying the estimation quickly to the\nidea,itmakesiteasiertofindtheideathatisthebestcombinationofcostandbenefit.\n32 Chapter 4. Advanced\n1. Technological Judgment\n1.1. How to Tell the Hard From the Impossible\nIt is our job to do the hard and discern the impossible. From the point of view of most working\nprogrammers,somethingisimpossibleifeitheritcannotbegrownfromasimplesystemoritcan-\nnotbeestimated.Bythisdefinitionwhatiscalledresearchisimpossible.Alargevolumeofmere\nworkishard,butnotnecessarilyimpossible.\nThe distinction is not facetious because you may very well be asked to do what is practically im-\npossible,eitherfromascientificpointofvieworasoftwareengineeringpointofview.Itthenbe-\ncomes your job to help the entrepreneur find a reasonable solution which is merely hard and gets\nmostofwhattheywanted.Asolutionismerelyhardwhenitcanbeconfidentlyscheduledandthe\nrisksareunderstood.\nItisimpossibletosatisfyavaguerequirement,suchas\u2018Buildasystemthatwillcomputethemost\nattractive hair style and color for any person.\u2019 If the requirement can be made more crisp, it will\noften become merely hard, such as \u2018Build a system to compute an attractive hair style and color\nforaperson,allowthemtopreviewitandmakechanges,andhavethecustomersatisfactionbased\nontheoriginalstylingbesogreatthatwemakealotofmoney.\u2019Ifthereisnotcrispdefinitionof\nsuccess,youwillnotsucceed.\n1.2. How to Utilize Embedded Languages\nEmbeddingaprogramminglanguageintoasystemhasanalmosteroticfascinationtoaprogram-\nmer. It is one of the most creative acts that can be performed. It makes the system tremendously\npowerful.ItallowsyoutoexerciseyourmostcreativeandPrometheanskills.Itmakesthesystem\nintoyourfriend.\nThebesttexteditorsintheworldallhaveembeddedlanguages.Thiscanbeusedtotheextentthat\nthe intended audience can master the language. Of course, use of the language can be made op-\ntional,asitisintexteditors,sothatinitiatescanuseitandnooneelsehasto.\nIandmanyotherprogrammershavefallenintothetrapofcreatingspecialpurposeembeddedlan-\nguages.Ifellintoittwice.Therealreadyexistmanylanguagesdesignedspecificallytobeembed-\ndedlanguages.Youshouldthinktwicebeforecreatinganewone.\nThe real question to ask oneself before embedding a language is: Does this work with or against\nthecultureofmyaudience?Ifyouintendedaudienceisexclusivelynon-programmers,howwillit\nhelp? If your intended audience is exclusively programmers, would they prefer an applications\nprogrammers interface (API)? And what language will it be? Programmers don't want to learn a\nnewlanguagethatisnarrowlyused;butifitmesheswiththeirculturetheywillnothavetospend\nmuch time learning it. It is a joy to create a new language. But we should not let that blind us to\ntheneedsoftheuser.Unlessyouhavesometrulyoriginalneedsandideas,whynotuseanexist-\ninglanguagesothatyoucanleveragethefamiliarityusersalreadyhavewithit?\n33 Advanced\n1.3. Choosing Languages\nThesolitaryprogrammerthatlovesherwork(ahacker)canchoosethebestlanguageforthetask.\nMost working programmers have very little control of the language they will use. Generally, this\nissueisdictatedbypointy-hairedbosseswhoaremakingapoliticaldecision,ratherthanatechno-\nlogical decision, and lack the courage to promote an unconventional tool even when they know,\noftenwithfirsthandknowledge,thatthelessacceptedtoolisbest.Inothercasestheveryrealben-\nefitofunityamongtheteam,andtosomeextentwithalargercommunity,precludeschoiceonthe\npartoftheindividual.Oftenmanagersaredrivenbytheneedtobeabletohireprogrammerswith\nexperienceinagivenlanguage.Nodoubttheyareservingwhattheyperceivetobethebestinter-\nestsoftheprojectorcompany,andmustberespectedforthat.However,Ipersonallybelievethis\nthemostwastefulanderroneouscommonpracticeyouarelikelytoencounter.\nButofcourse,thingsareneverone-dimensional.Evenifacorelanguageismandatedandbeyond\nyour control, it is often the case that tools and other programs can and should be written in a dif-\nferent language. If a language is to be embedded (and you should always consider it!) the choice\nof language will depend a lot on the culture of the users. One should take advantage of this to\nserveyourcompanyorprojectbyusingthebestlanguageforthejob,andinsodoingmakework\nmoreinteresting.\nProgramminglanguagesshouldreallybecallednotationsinthatlearningoneisnotatallasdiffi-\ncultaslearninganaturallanguage.Tobeginnersandtosomeoutsiders``learninganewlanguage''\nseemsadauntingtask;butafteryouhavethreeunderyourbeltit'sreallyjustaquestionofbecom-\ningfamiliarwiththeavailablelibraries.Onetendstothinkofalargesystemthathascomponents\ninthreeorfourlanguagesasamessyhodgepodge;butIarguethatsuchasystemisinmanycases\nstrongerthanaone-languagesysteminseveralways:\n\u2022 Thereisnecessarilyloosecouplingbetweenthecomponentsthatarewrittenindifferentnota-\ntions(thoughmaybenotcleaninterfaces),\n\u2022 Youcanevolvetoanewlanguage\/platformeasilybyrewritingeachcomponentindividually,\n\u2022 Itspossiblethatsomeofthemodulesareactuallyup-to-date.\nSome of these effects may only be psychological; but psychology matters. In the end the costs of\nlanguagetyrannyoutweighanyadvantagethatitprovides.\n2. Compromising Wisely\n2.1. How to Fight Schedule Pressure\nTime-to-marketpressureisthepressuretodeliveragoodproductquickly.Itisgoodbecauseitre-\nflects a financial reality, and is healthy up to a point. Schedule pressure is the pressure to deliver\nsomethingfasterthanitcanbedeliveredanditiswasteful,unhealthy,andalltoocommon.\nSchedule pressure exists for several reasons. The people who task programmers do not fully ap-\npreciate what a strong work ethic we have and how much fun it is to be a programmer. Perhaps\nbecause they project their own behavior onto us, they believe that asking for it sooner will make\nus work harder to get it there sooner. This is probably actually true, but the effect is very small,\n34 Advanced\nandthedamageisverygreat.Additionally,theyhavenovisibilityintowhatitreallytakestopro-\nducesoftware.Notbeingabletoseeit,andnotbeabletocreateitthemselves,theonlythingthey\ncandoisseetime-to-marketpressureandfussatprogrammersaboutit.\nThekeytofightingschedulepressureissimplytoturnitintotime-to-marketpressure.Thewayto\ndothistogivevisibilityintotherelationshipbetweentheavailablelaborandtheproduct.Produc-\ning an honest, detailed, and most of all, understandable estimate of all the labor involved is the\nbest way to do this. It has the added advantage of allowing good management decisions to be\nmadeaboutpossiblefunctionalitytradeoffs.\nThe key insight that the estimate must make plain is that labor is an almost incompressible fluid.\nYou can't pack more into a span of time anymore than you can pack more water into a container\noverandabovethatcontainer'svolume.Inasense,aprogrammershouldneversay\u2018no\u2019,butrather\ntosay\u2018Whatwillyougiveuptogetthatthingyouwant?\u2019Theeffectofproducingclearestimates\nwillbetoincreasetherespectforprogrammers.Thisishowotherprofessionalsbehave.Program-\nmers' hard work will be visible. Setting an unrealistic schedule will also be painfully obvious to\neveryone.Programmerscannotbehoodwinked.Itisdisrespectfulanddemoralizingtoaskthemto\ndo something unrealistic. Extreme Programming amplifies this and builds a process around it; I\nhopethateveryreaderwillbeluckyenoughtouseit.\n2.2. How to Understand the User\nItisyourdutytounderstandtheuser,andtohelpyourbossunderstandtheuser.Becausetheuser\nisnotasintimatelyinvolvedinthecreationofyourproductasyouare,theybehavealittlediffer-\nently:\n\u2022 Theusergenerallymakesshortpronouncements.\n\u2022 Theuserhastheirownjob;theywillmainlythinkofsmallimprovementsinyourproduct,not\nbigimprovements.\n\u2022 Theusercan'thaveavisionthatrepresentsthecompletebodyofyourproductusers.\nItisyourdutytogivethemwhattheyreallywant,notwhattheysaytheywant.Itishowever,bet-\nter to propose it to them and get them to agree that your proposal is what they really want before\nyou begin, but they may not have the vision to do this. Your confidence in your own ideas about\nthis should vary. You must guard against both arrogance and false modesty in terms of knowing\nwhatthecustomerreallywants.Programmersaretrainedtodesignandcreate.Marketresearchers\naretrainedtofigureoutwhatpeoplewant.Thesetwokindsofpeople,ortwomodesofthoughtin\nthe same person, working harmoniously together give the best chance of formulating the correct\nvision.\nThe more time you spend with users the better you will be able to understand what will really be\nsuccessful.Youshouldtrytotestyourideasagainstthemasmuchasyoucan.Youshouldeatand\ndrinkwiththemifyoucan.\nGuyKawasaki[Rules]hasemphasizedtheimportanceofwatchingwhatyourusersdoinaddition\ntolisteningtothem.\nIbelievecontractorsandconsultantsoftenhavetremendousproblemsgettingtheirclientstoclar-\nifyintheirownmindswhattheyreallywant.Ifyouintendtobeaconsultant,Isuggestyouchoose\n35 Advanced\nyourclientsbasedontheirclear-headednessaswellastheirpocketbooks.\n2.3. How to Get a Promotion\nTobepromotedtoarole,actoutthatrolefirst.\nTogetpromotedtoatitle,findoutwhatisexpectedofthattitleanddothat.\nTogetapayraise,negotiatearmedwithinformation.\nIf you feel like you are past due for a promotion, talk to your boss about it. Ask them explicitly\nwhatyouneedtodotogetpromoted,andtrytodoit.Thissoundstrite,butoftentimesyourper-\nception of what you need to do will differ considerably from your boss's. Also this will pin your\nbossdowninsomeways.\nMost programmers probably have an exaggerated sense of their relative abilities in some ways-\n--afterall,wecan'tallbeinthetop10%!However,Ihaveseemsomepeoplewhowereseriously\nunappreciated.Onecannotexpecteveryone'sevaluationtoperfectlymatchrealityatalltimes,but\nI think people are generally moderately fair, with one caveat: you cannot be appreciated without\nvisibility into your work. Sometimes, do to happenstance or personal habits, someone will not be\nnoticed much. Working from home a lot or being geographically separated from your team and\nbossmakesthisespeciallydifficult.\n3. Serving Your Team\n3.1. How to Develop Talent\nNietschzeexaggeratedwhenhesaid[Stronger]:\nWhatdoesnotdestroyme,makesmestronger.\nYour greatest responsibility is to your team. You should know each of them well. You should\nchallenge your team, but not overburden them. You should usually talk to them about the way\ntheyarebeingstretched.Iftheybuyintoit,theywillbewellmotivated.Oneachproject,orevery\notherproject,trytostretchtheminbothawaythattheysuggestandawaythatyouthinkwillbe\ngoodforthem.Stretchthemnotbygivingthemmorework,butbygivingthemanewskillorbet-\nteryetanewroletoplayontheteam.\nYoushouldallowpeople(includingyourself)tofailoccasionallyandshouldplanforsomefailure\ninyourschedule.Ifthereisneveranyfailure,therecanbenosenseofadventure.Iftherearenot\noccasionalfailures,youarenottakingenoughrisks.Whensomeonefails,youshouldbeasgentle\nasyoucanwiththemwhilenottreatingthemasthoughtheyhadsucceeded.\nTry to get each team member to buy in and be well motivated. Ask each of them explicitly what\nthey need to be well-motivated if they are not. You may have to leave them dissatisfied, but you\nshouldknowwhateverybodydesires.\nYoucan'tgiveuponsomeonewhoisintentionallynotcarryingtheirshareoftheloadbecauseof\nlowmoraleordissatisfactionandjustletthembeslack.Youmusttrytogetthemwell-motivated\n36 Advanced\nandproductive.Aslongasyouhavethepatience,keepthisup.Whenyourpatienceisexhausted,\nfirethem.Youcannotallowsomeonewhoisintentionallyworkingbelowtheirleveltoremainon\ntheteam,sinceitisnotfairtotheteam.\nMake it clear to the strong members of your team that you think they are strong by saying so in\npublic.Praiseshouldbepublicandcriticismprivate.\nThestrongmembersoftheteamwillnaturallyhavemoredifficulttasksthantheweakmembersof\nthe team. This is perfectly natural and nobody will be bothered by it as long as everyone works\nhard.\nItisanoddfactthatisnotreflectedinsalariesthatagoodprogrammerismoreproductivethan10\nbadprogrammers.Thiscreatesastrangesituation.Itwilloftenbetruethatyoucouldmovefaster\nif your weak programmers would just get out of the way. If you did this you would in fact make\nmoreprogressintheshortterm.However,yourtribewouldlosesomeimportantbenefits,namely\nthe training of the weaker members, the spreading of tribal knowledge, and the ability to recover\nfromthelossofthestrongmembers.Thestrongmustbegentleinthisregardandconsidertheis-\nsuefromallangles.\nYoucanoftengivethestrongerteammemberschallenging,butcarefullydelineated,tasks.\n3.2. How to Choose What to Work On\nYou balance your personal needs against the needs of the team in choosing what aspect of a\nproject to work on. You should do what you are best at, but try to find a way to stretch yourself\nnot by taking on more work but by exercising a new skill. Leadership and communication skills\naremoreimportantthantechnicalskills.Ifyouareverystrong,takeonthehardestorriskiesttask,\nanddoitasearlyaspossibleintheprojecttodecreaserisk.\n3.3. How to Get the Most From Your Teammates\nTogetthemostfromyourteammates,developagoodteamspiritandtrytokeepeveryindividual\nbothpersonallychallengedandpersonallyengaged.\nTodevelopteamspirit,cornystufflikelogoizedclothingandpartiesaregood,butnotasgoodas\npersonalrespect.Ifeveryonerespectseveryoneelse,nobodywillwanttoletanybodydown.Team\nspirit is created when people make sacrifices for the team and think in terms of the good of the\nteambeforetheirownpersonalgood.Asaleader,youcan'taskformorethanyougiveyourselfin\nthisrespect.\nOneofthekeystoteamleadershipistofacilitateconsensussothateveryonehasbuyin.Thisoc-\ncasionallymeansallowingyourteammatestobewrong.Thatis,ifitdoesnotharmtheprojecttoo\nmuch, you must let some of your team do things their own way, based on consensus, even if you\nbelieve with great confidence it is the wrong thing to do. When this happens, don't agree, simply\ndisagree openly and accept the consensus. Don't sound hurt, or like you're being forced into it,\nsimplystatethatyoudisagreebutthinktheconsensusoftheteamismoreimportant.Thiswillof-\nten cause them to backtrack. Don't insist that they go through with their initial plan if they do\nbacktrack.\nIfthereisanindividualwhowillnotconsentafteryouhavediscussedtheissuesfromallappropri-\natesides,simplyassertthatyouhavetomakeadecisionandthatiswhatyourdecisionis.Ifthere\n37 Advanced\nis a way to judge if your decision will be wrong or if it is later shown to be wrong, switch as\nquicklyasyoucanandrecognizethepersonswhowereright.\nAsk your team, both as a group and individually, what they think would create team spirit and\nmakeforaneffectiveteam.\nPraise frequently rather than lavishly. Especially praise those who disagree with you when they\nare praiseworthy. Praise in public and criticize in private; with one exception: sometimes growth\northecorrectionofafaultcan'tbepraisedwithoutdrawingembarrassingattentiontotheoriginal\nfault,sothatgrowthshouldbepraisedinprivate.\n3.4. How to Divide Problems\nIt'sfuntotakeasoftwareprojectanddivideitupintotasksthatwillbeperformedbyindividuals.\nThisshouldbedoneearly.Sometimesmanagersliketothinkthatanestimatecanbemadewithout\nconsiderationoftheindividualsthatwillperformthework.Thisisimpossiblesincetheproductiv-\nity of individuals varies so widely. Who has particular knowledge about a component also con-\nstantlychangesandcanhaveanorderofmagnitudeeffectonperformance.\nJust as a composer considers the timbre of the instrument that will play a part or the coach of an\nathletic team considers the strengths of each player, the experienced team leader will not usually\nbeabletoseparatethedivisionoftheprojectintotasksfromtheteammemberstowhichtheywill\nbeassigned.Thisispartofthereasonthatahigh-performingteamshouldnotbebrokenup.\nThere is a certain danger in this given that people will become bored as they build upon their\nstrengths and never improve their weaknesses or learn new skills. However, specialization is a\nveryusefulproductivitytoolwhennotoverused.\n3.5. How to Handle Boring Tasks\nSometimesitisnotpossibletoavoidboringtasksthatarecriticaltothesuccessofthecompanyor\nthe project. These tasks can really hurt the morale of those that have to do them. The best tech-\nnique for dealing with this is to invoke or promote Larry Wall's programmer's virtue of Laziness.\nTrytofindsomewaytogetthecomputertodothetaskforyouortohelpyourteammatesdothis.\nWorkingforaweekonaprogramtodoataskthatwilltakeaweektodobyhandhasthegreatad-\nvantageofbeingmoreeducationalandsometimesmorerepeatable.\nIfallelsefails,apologizetothosewhohavetodotheboringtask,butundernocircumstancesal-\nlow them to do it alone. At a minimum assign a team of two to do the work and promote healthy\nteamworktogetthetaskdone.\n3.6. How to Gather Support for a Project\nTo gather support for a project, create and communicate a vision that demonstrates real value to\ntheorganizationasawhole.Attempttoletothersshareinyourvisioncreation.Thisgivesthema\nreason to support you and gives you the benefit of their ideas. Individually recruit key supporters\nfor your project. Wherever possible, show, don't tell. If possible, construct a prototype or a\nmockup to demonstrate your ideas. A prototype is always powerful but in software it is far supe-\nriortoanywrittendescription.\n38 "}