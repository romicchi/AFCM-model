{
    "text": "The Unicode\nCookbook\nfor Linguists\nManaging writing systems using\northography profiles\nSteven Moran\nMichael Cysouw\nlanguage\nTranslation and Multilingual Natural\nscience\npress\nLanguage Processing 10 TranslationandMultilingualNaturalLanguageProcessing\nEditors:OliverCzulo(Universit\u00e4tLeipzig),SilviaHansen-Schirra(JohannesGutenberg-Universit\u00e4t\nMainz),ReinhardRapp(JohannesGutenberg-Universit\u00e4tMainz)\nInthisseries:\n1. Fantinuoli,Claudio&FedericoZanettin(eds.).Newdirectionsincorpus-basedtranslation\nstudies.\n2. Hansen-Schirra,Silvia&SamborGrucza(eds.).EyetrackingandAppliedLinguistics.\n3. Neumann,Stella,Oliver\u010culo&SilviaHansen-Schirra(eds.).Annotation,exploitationand\nevaluationofparallelcorpora:TC3I.\n4. Czulo,Oliver&SilviaHansen-Schirra(eds.).CrossroadsbetweenContrastiveLinguistics,\nTranslationStudiesandMachineTranslation:TC3II.\n5. Rehm,Georg,FelixSasaki,DanielStein&AndreasWitt(eds.).Languagetechnologiesfor\namultilingualEurope:TC3III.\n6. Menzel,Katrin,EkaterinaLapshinova-Koltunski&KerstinAnnaKunz(eds.).New\nperspectivesoncohesionandcoherence:Implicationsfortranslation.\n7. Hansen-Schirra,Silvia,OliverCzulo&SaschaHofmann(eds).Empiricalmodellingof\ntranslationandinterpreting.\n8. Svoboda,Tom\u00e1\u0161,\u0141ucjaBiel&Krzysztof\u0141oboda(eds.).Qualityaspectsininstitutional\ntranslation.\n9. Fox,Wendy.Canintegratedtitlesimprovetheviewingexperience?Investigatingtheimpact\nofsubtitlingonthereceptionandenjoymentoffilmusingeyetrackingandquestionnaire\ndata.\n10. Moran,Steven&MichaelCysouw.TheUnicodecookbookforlinguists:Managingwriting\nsystemsusingorthographyprofiles\nISSN:2364-8899 The Unicode\nCookbook\nfor Linguists\nManaging writing systems using\northography profiles\nSteven Moran\nMichael Cysouw\nlanguage\nscience\npress StevenMoran&MichaelCysouw.2018.TheUnicodeCookbook\nforLinguists:Managingwritingsystemsusingorthographyprofiles(Translation\nandMultilingualNaturalLanguageProcessing10).Berlin:LanguageScience\nPress.\nThistitlecanbedownloadedat:\nhttp://langsci-press.org/catalog/book/176\n\u00a92018,StevenMoran&MichaelCysouw\nPublishedundertheCreativeCommonsAttribution4.0Licence(CCBY4.0):\nhttp://creativecommons.org/licenses/by/4.0/\nISBN:978-3-96110-090-3 (Digital)\n978-3-96110-091-0(Hardcover)\nISSN:2364-8899\nDOI:10.5281/zenodo.773250\nSourcecodeavailablefromwww.github.com/langsci/176\nCollaborativereading:paperhive.org/documents/remote?type=langsci&id=176\nCoverandconceptofdesign:UlrikeHarbort\nTypesetting:MichaelCysouw,StevenMoran\nProofreading:SandraAuderset,AleksandrsBerdi\u010devskis,RoseyBillington,\nVarundeCastro-Arrazola,SimonCozens,AniefonDaniel,BevErasmus,Amir\nGhorbanpour,LindaLeembruggen,DavidLuke\u0161,AntonioMachicaoyPriemer,\nHughPatersonIII,StephenPepper,KatjaPolitt,FelixRau,LeaSch\u00e4fer,Benedikt\nSingpiel,JamesTauber,LuigiTalamo,JeroenvandeWeijer,ViolaWiegand,\nAlenaWitzlack-Makarevich,andEstherYap\nFonts:LinuxLibertine,LibertinusMath,Arimo,DejaVuSansMono\nTypesettingsoftware:X\u018eLATEX\nLanguageSciencePress\nUnterdenLinden6\n10099Berlin,Germany\nlangsci-press.org\nStorageandcataloguingdonebyFUBerlin Preface\nThistextismeantasapracticalguideforlinguistsandprogrammerswhowork\nwith data in multilingual computational environments. We introduce the basic\nconcepts needed to understand how writing systems and character encodings\nfunction,andhowtheyworktogether.\nThe intersection of the Unicode Standard and the International Phonetic Al-\nphabet is often met with frustration by users. Nevertheless, the two standards\nhaveprovidedlanguageresearcherswiththecomputationalarchitectureneeded\nto process, publish and analyze data from many different languages. We bring\ntolightcommon,butnotalwaystransparent,pitfallsthatresearchersfacewhen\nworkingwithUnicodeandIPA.\nInourresearch,weusequantitativemethodstocomparelanguagestouncover\nandclarifytheirphylogeneticrelationships.However,themajorityoflexicaldata\navailablefromtheworld\u2019slanguagesisinauthor-ordocument-specificorthogra-\nphies. Having identified and overcome the pitfalls involved in making writing\nsystems and character encodings syntactically and semantically interoperable\n(to the extent that they can be), we have created a suite of open-source Python\nandRsoftwarepackagestoworkwithlanguagesusingprofilesthatadequately\ndescribetheirorthographicconventions.Usingthesetoolsincombinationwith\northographyprofilesallowsuserstotokenizeandtransliteratetextfromdiverse\nsources,sothattheycanbemeaningfullycomparedandanalyzed.\nWewelcomecommentsandcorrectionsregardingthisbook,oursourcecode,\nand the supplemental case studies that we provide online.1 Please use the issue\ntracker,emailusdirectly,ormakesuggestionsonPaperHive.2\nStevenMoran\nMichaelCysouw\n1https://github.com/unicode-cookbook/\n2https://paperhive.org/  Acknowledgments\nWegratefullyacknowledgeRobertForkel,JeffGood,JeremyKahn,DanMcCloy,\nSebastian Nordhoff, and Richard Wright, for insights and inspiration. The re-\nsearchleadingtotheseresultshasreceivedfundingfromtheEuropeanResearch\nCouncilundertheEuropeanUnion\u2019sSeventhFrameworkProgramme(FP7/2007-\n2013)/ERCgrantagreementn\u00b0240816(PIMichaelCysouw).  Contents\nPreface i\nAcknowledgments iii\n1 Writingsystems 1\n1.1 Introduction . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 1\n1.2 Encoding . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 4\n1.3 Linguisticterminology . . . . . . . . . . . . . . . . . . . . . . . 7\n2 TheUnicodeapproach 13\n2.1 Background . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 13\n2.2 TheUnicodeStandard . . . . . . . . . . . . . . . . . . . . . . . . 13\n2.3 Characterencodingsystem . . . . . . . . . . . . . . . . . . . . . 14\n2.4 Graphemeclusters . . . . . . . . . . . . . . . . . . . . . . . . . . 17\n3 Unicodepitfalls 19\n3.1 Wrongitain\u2019t . . . . . . . . . . . . . . . . . . . . . . . . . . . . 19\n3.2 Pitfall:Charactersarenotglyphs . . . . . . . . . . . . . . . . . . 20\n3.3 Pitfall:Charactersarenotgraphemes . . . . . . . . . . . . . . . 21\n3.4 Pitfall:Missingglyphs . . . . . . . . . . . . . . . . . . . . . . . . 22\n3.5 Pitfall:Faultyrendering . . . . . . . . . . . . . . . . . . . . . . . 23\n3.6 Pitfall:Blocks . . . . . . . . . . . . . . . . . . . . . . . . . . . . 24\n3.7 Pitfall:Names . . . . . . . . . . . . . . . . . . . . . . . . . . . . 25\n3.8 Pitfall:Homoglyphs . . . . . . . . . . . . . . . . . . . . . . . . . 26\n3.9 Pitfall:Canonicalequivalence . . . . . . . . . . . . . . . . . . . 27\n3.10 Pitfall:Absenceofcanonicalequivalence . . . . . . . . . . . . . 30\n3.11 Pitfall:Encodings . . . . . . . . . . . . . . . . . . . . . . . . . . 31\n3.12 Pitfall:Fileformats . . . . . . . . . . . . . . . . . . . . . . . . . 32\n3.13 Pitfall:Incompleteimplementations . . . . . . . . . . . . . . . . 34\n3.14 Recommendations . . . . . . . . . . . . . . . . . . . . . . . . . . 35 Contents\n4 TheInternationalPhoneticAlphabet 37\n4.1 Briefhistory . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 37\n4.2 Premisesandprinciples . . . . . . . . . . . . . . . . . . . . . . . 39\n4.3 IPAencodings . . . . . . . . . . . . . . . . . . . . . . . . . . . . 42\n4.4 Theneedforasinglemultilingualenvironment . . . . . . . . . 47\n5 IPAmeetsUnicode 51\n5.1 Thetwainshallmeet . . . . . . . . . . . . . . . . . . . . . . . . 51\n5.2 Pitfall:NocompleteIPAcodeblock . . . . . . . . . . . . . . . . 52\n5.3 Pitfall:IPAhomoglyphsinUnicode . . . . . . . . . . . . . . . . 53\n5.4 Pitfall:HomoglyphsinIPA . . . . . . . . . . . . . . . . . . . . . 56\n5.5 Pitfall:MultipleencodingoptionsinIPA . . . . . . . . . . . . . 57\n5.6 Pitfall:Tiebar . . . . . . . . . . . . . . . . . . . . . . . . . . . . 59\n5.7 Pitfall:Ligaturesanddigraphs . . . . . . . . . . . . . . . . . . . 60\n5.8 Pitfall:Missingdecomposition . . . . . . . . . . . . . . . . . . . 61\n5.9 Pitfall:Differentnotionsofdiacritics. . . . . . . . . . . . . . . . 63\n5.10 Pitfall:Nouniquediacriticordering . . . . . . . . . . . . . . . . 64\n5.11 Pitfall:RevisionstotheIPA . . . . . . . . . . . . . . . . . . . . . 67\n5.12 AdditionstotheIPA . . . . . . . . . . . . . . . . . . . . . . . . . 69\n5.13 UnicodeIPARecommendations . . . . . . . . . . . . . . . . . . 70\n6 Practicalrecommendations 81\n6.1 Unicode . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 81\n6.2 IPA . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 83\n6.3 Forprogrammersandpotentialprogrammers. . . . . . . . . . . 84\n7 Orthographyprofiles 87\n7.1 Characterizingwritingsystems . . . . . . . . . . . . . . . . . . 87\n7.2 Informaldescription . . . . . . . . . . . . . . . . . . . . . . . . . 89\n7.3 Formalspecification . . . . . . . . . . . . . . . . . . . . . . . . . 91\n8 Implementation 97\n8.1 Overview . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 97\n8.2 HowtoinstallPythonandR . . . . . . . . . . . . . . . . . . . . 98\n8.3 Pythonpackage:segments . . . . . . . . . . . . . . . . . . . . . 99\n8.4 Rlibrary:qlcData . . . . . . . . . . . . . . . . . . . . . . . . . . 105\n8.5 Recipesonline . . . . . . . . . . . . . . . . . . . . . . . . . . . . 122\nReferences 125\nvi Contents\nIndex 131\nNameindex . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 131\nvii  1 Writing systems\n1.1 Introduction\nWriting systems arise and develop in a complex mixture of cultural, technolog-\nicalandpracticalpressures.Theytendtobehighlyconservative,inthatpeople\nwhohavelearnedtoreadandwriteinaspecificway\u2013howeverimpracticalorte-\ndious\u2013aremostlyunwillingtochangetheirhabits.Writerstendtoresistspelling\nreforms. In all literate societies there exists a strong socio-political mainstream\nthattriestoforceunificationofwriting(forexamplebystronglyenforcing\u201cright\u201d\nfrom\u201cwrong\u201dspellinginschools).However,therearealsocommunitiesofusers\nwhotakeasmanylibertiesintheirwritingastheycangetawaywith.\nForexample,thewritingoftonediacriticsinYorubaisoftenproclaimedtobe\ntherightwaytowrite,althoughmanyusersofYorubaorthographyseemtobe\nperfectly fine with leaving them out. As pointed out by the proponents of the\nofficial rules, there are some homographs when leaving out the tone diacritics\n(Ol\u00fam\u00fay\u0131\u0300w 2013: 44). However, writing systems (and the languages they repre-\nsent)arenormallyfullofhomographs(andhomophones),whichisnotaproblem\natallforspeakersofthelanguage.Moreimportantly,writingisnotjustapurely\nfunctionaltool,butjustasimportantlyitisamechanismtosignalsocialaffilia-\ntion.Byshowingthatyouknowtherulesofexpressingyourselfinwriting,others\nwill more easily accept you as a worthy participant in their group \u2013 whether it\nmeansfollowingtheofficialruleswhenwritingajobapplicationorconforming\ntotheinformalruleswhenwritingtextmessages.ThecaseofYorubawritingis\nan exemplary case, as even after more than a century of efforts to standardize\nthewritingsystems,thereisstillawiderangeofvariationofwritingindailyuse\n(Ol\u00fam\u00fay\u0131\u0300w2013).\nFormalizingorthographicstructure\nThe resulting cumbersome and often illogical structure of writing systems, and\nthe enormous variability of existing writing systems for the world\u2019s languages,\nis a fact of life that scholars have to accept and they should try to adapt to as\nwell as they can. Our goal in this book is a proposal for how to do exactly that: 1Writingsystems\nformalize knowledge about individual writing systems in a form that is easy to\nuse for linguists in daily practice, and at the same time computer-readable for\nautomatedprocessing.\nWhen considering worldwide linguistic diversity, including the many lesser-\nstudiedandendangeredlanguages,thereexistnumerousdifferentorthographies\nusing symbols from the same scripts. For example, there are hundreds of or-\nthographiesusingLatin-basedalphabeticscripts.Alloftheseorthographiesuse\nthe same symbols, but these symbols differ in meaning and usage throughout\nthe various orthographies. To be able to computationally use and compare dif-\nferent orthographies, we need a way to specify all orthographic idiosyncrasies\nin a computer-readable format. We call such specifications orthography pro-\nfiles. Ideally, these specifications have to be integrated into so-called Unicode\nLocales,1 though we will argue that in practice this is often not the most useful\nsolutionforthekindofproblemsarisinginthedailypracticeofmanylinguists.\nConsequently, a central goal of this book is to flesh out the linguistic-specific\nchallenges regarding Unicode Locales and to work out suggestions to simplify\ntheir structure for usage in a linguistic context. Conversely, we also aim to im-\nprovelinguists\u2019understandingandappreciationfortheaccomplishmentsofthe\nUnicodeConsortiuminthedevelopmentoftheUnicodeStandard.\nThe need to use computational methods to compare different orthographies\narises most forcefully in the context of language comparison. Concretely, the\nproper processing of orthographies and transcription systems becomes critical\nfor the development of quantitative methods for language comparison and his-\ntoricalreconstruction.Inordertoinvestigateworldwidelinguisticvariationand\ntomodelthehistoricalandarealprocessesthatunderlielinguisticdiversity,itis\ncrucial that we are able to flexibly process numerous resources in different or-\nthographies. In many cases even different resources on the same language use\ndifferentorthographicconventions.Anotherorthographicchallengethatween-\ncounter regularly in our linguistic practice is electronic resources on a partic-\nular language that claim to follow a specific orthographic convention (often a\nresource-specificconvention),butoncloserinspectionsuchresourcesarealmost\nalwaysnotconsistentlyencoded.Thus,asecondgoalofourorthographyprofiles\nis to allow for an easy specification of orthographic conventions, and use such\nprofilestocheckconsistencyandtoreporterrorstobecorrected.\nA central step in our proposed solution to this problem is the tailored graph-\nemeseparationofstringsofsymbols,aprocesswecallgraphemetokenization.\nBasically, given some strings of symbols (e.g. morphemes, words, sentences) in\n1http://cldr.unicode.org/locale_faq-html\n2 1.1Introduction\naspecificsource,ourfirstprocessingstepistospecifyhowthesestringsshould\nbeseparatedintographemes,consideringthespecificorthographicconventions\nused in a particular source document. Our experience is that such a graphemic\ntokenizationcanoftenbeperformedreasonablyaccuratelywithoutextensivein-\ndepth knowledge about the phonetic and phonological details of the language\nin question. For example, the specification that <ou> is a grapheme of English\nis a much easier task than to specify what exactly the phonetic values of this\ngraphemeareinanyspecificoccurrenceinEnglishwords.Graphemeseparation\nis a task that can be performed relatively reliably and with limited time and re-\nsources(compare,forexample,thedauntingtaskofcreatingacompletephonetic\norphonologicalnormalization).\nAlthough grapheme tokenization is only one part of the solution, it is an im-\nportantandhighlyfruitfulprocessingstep.Givenagraphemetokenization,var-\nious subsequent tasks become easier, for instance (a) temporarily reducing the\northography in a processing pipeline, e.g. only distinguishing high versus low\nvowels;(b)normalizingorthographiesacrosssources(oftenincludingtemporary\nreductionofoppositions),e.g.specifyingan(approximate)mappingtotheInter-\nnational Phonetic Alphabet; (c) using co-occurrence statistics across different\nlanguages(ordifferentsourcesinthesamelanguage)toestimatetheprobability\nofgraphemematches,e.g.withthegoaltofindregularsoundchangesbetween\nrelated languages or transliterations between different sources in the same lan-\nguage.\nStructureofthisbook\nBefore we deal with these proposals we will first discuss the theoretical back-\ngroundontextencoding,ontheUnicodeStandard,andontheInternationalPho-\nnetic Alphabet. In the remainder of this chapter, we give an extended introduc-\ntiontothenotionofencoding(Section1.2)andtheprinciplesofwritingsystems\nfromalinguisticperspective(Section1.3).InChapter2,wediscussthenotionsof\nencodingandwritingsystemsfromtheperspectiveoftheUnicodeConsortium.\nWeconsidertheUnicodeStandardtobeabreakthrough(andongoing)develop-\nment that fundamentally changed the way we look at writing systems, and we\naimtoprovidehereaslightlymorein-depthsurveyofthemanytechniquesthat\nareavailableinthestandard.AgoodappreciationforthesolutionsthattheUni-\ncodeConsortiumhascreatedallowsforathoroughunderstandingofthepossible\npitfalls that one might encounter when using the Unicode Standard in general\n(Chapter 3). Linguists are more often interested in using the Unicode Standard\nwiththeInternationalPhoneticAlphabet(IPA).Wefirstprovideahistoryofthe\n3 1Writingsystems\ndevelopmentoftheIPAandearlyattemptstoencodeitelectronically(Chapter4)\nbefore we discuss the rather problematic marriage of the IPA with the Unicode\nStandard(Chapter5).\nInthesecondpartofthebook(Chapters6,7&8)wedescribeourproposalsof\nhowtodealwiththeUnicodeStandardinthedailypracticeof(comparative)lin-\nguistics.First,weprovidesomepracticalrecommendationsforusingtheUnicode\nStandardandIPAforordinaryworkinglinguistsandforcomputerprogrammers\n(Chapter 6). Second, we discuss the challenges of characterizing a writing sys-\ntem; to solve these problems, we propose the notions of orthography profiles,\ncloselyrelatedtoUnicodelocaledescriptions(Chapter7).Lastly,weprovidean\nintroductiontotwoopensourcelibrariesthatwehavedeveloped,inPythonand\nR,forworkingwithlinguisticdataandorthographyprofiles(Chapter8).\nConventions\nThe following conventions are adhered to in this book. All phonemic and pho-\nneticrepresentationsaregivenintheInternationalPhoneticAlphabet(IPA),un-\nlessnotedotherwise(TheInternationalPhoneticAssociation2015).Standardcon-\nventions are used for distinguishing between graphemic < >, phonemic / / and\nphonetic[]representations.Forcharacterdescriptions,wefollowthenotational\nconventionsoftheUnicodeStandard(TheUnicodeConsortium2018).Character\nnames are represented in small capital letters (e.g. latin small letter schwa)\nandcodepointsareexpressedasU+n,wherenisafourtosixdigithexadecimal\nnumber,e.g.U+0256,whichcanberenderedastheglyph<\u0259>.\n1.2 Encoding\nTherearemanyin-depthhistoriesoftheoriginanddevelopmentofwritingsys-\ntems(e.g. Robinson1995;Powell2012),astorythatwethereforewillnotrepeat\nhere.However,thehistoryofturningwritingintomachine-readablecodeisnot\nsooftentold,sowedecidedtoofferashortsurveyofthemajordevelopmentsof\nsuchencodinghere.2Thishistoryturnsouttobeintimatelyrelatedtothehistory\noftelegraphiccommunication.\n2Because of the recent history as summarized in this section, we have used mostly rather\nephemeralinternetsources.Whennotreferencedbytraditionalliteratureinthebibliography,\nwehaveusedhttp://www.unicode.org/history/andvariousWikipediapagesfortheinforma-\ntionpresentedhere.Ausefulsurveyofthehistoricaldevelopmentofthephysicalhardware\noftelegraphyandtelecommunicationisHuurdeman(2003).Mostbooksthatdiscussthede-\nvelopmentofencodingoftelegraphiccommunicationfocusofcryptography,e.g.Singh(1999),\n4 1.2Encoding\nTelegraphy\nWriting systems have existed for roughly 6000 years, allowing people to ex-\nchange messages through time and space. Additionally, to quickly bridge large\ngeographic distances, telegraphic systems of communication (from Greek \u03c4\u1fc6\u03bb\u03b5\n\u03b3\u03c1\u03ac\u03c6\u03b5\u03b9\u03bd\u2018distantwriting\u2019)havealongandwidespreadhistorysinceancienttimes.\nThe most common telegraphic systems worldwide are so-called whistled lan-\nguages (Meyer 2015), but also drumming languages (Meyer et al. 2012) and sig-\nnaling by smoke, fire, flags, or even changes in water levels through hydraulic\npressurehavebeenusedasformsoftelegraphy.\nTelegraphy was reinvigorated at the end of the eighteenth century through\ntheintroductionofso-calledsemaphoricsystemsbyClaudeChapelletoconvey\nmessages over large distances. Originally, various specially designed contrap-\ntionswereusedtosendmessages.Today,descendantsofthesesystemsarestill\nin limited use, for example utilizing flags or flashing lights. The innovation of\nthose semaphoric systems was that all characters of the written language were\nreplaced one-to-one by visual signals. Since then, all telegraphic systems have\nadopted this principle,3 namely that any language to be transmitted first has to\nbe turned into some orthographic system, which subsequently is encoded for\ntransmissionbythesender,andthenturnedbackintoorthographicrepresenta-\ntion at the receiver side. This of course implies that the usefulness of any such\ntelegraphic encoding completely depends on the sometimes rather haphazard\nstructureoforthographicsystems.\nIn the nineteenth century, electric telegraphy led to a further innovation in\nwhichwrittenlanguagecharacterswereencodedbysignalssentthroughacop-\nper wire. Originally, bisignal codes were used, consisting of two different sig-\nnals.Forexample,CarlFriedrichGaussin1833usedpositiveandnegativecurrent\n(Mania2008:282).Morefamousandinfluential,SamuelMorsein1836usedlong\nand short pulses. In those bisignal codes each character from the written lan-\nguage was encoded with a different number of signals (between one and five),\nso two different separators are needed: one between signals and one between\ncharacters. For example, in Morse-code there is a short pause between signals\nandalongpausebetweencharacters.4\nandforegotheratherinterestingstoryofopen,i.e.non-cryptographic,encodingthatisrelated\nhere.\n3Sound-andvideo-basedtelecommunicationtakeadifferentapproachbyignoringthewritten\nversionoflanguageandtheydirectlyencodesoundwavesorlightpatterns.\n4Actually,Morse-codealsoincludesanextralongpausebetweenwords.Interestingly,ittooka\nlongtimetoconsiderthewrittenwordboundary\u2013usingwhite-space\u2013asabona-fidecharacter\n5 1Writingsystems\nBinaryencoding\nFromthosebisignalencodings,truebinarycodesdevelopedwithafixedlength\nof signals per character. In such systems only a single separator between sig-\nnalsisneeded,becausetheseparationbetweencharacterscanbeestablishedby\ncounting until a fixed number of signals has passed.5 In the context of electric\ntelegraphy, such a binary code system was first established by \u00c9mile Baudot in\n1870,usingafixedcombinationoffivesignalsforeachwrittencharacter.6 There\nare25 = 32possiblecombinationswhenusingfivebinarysignals;anencoding\ntoday designated as 5-bit. These codes are sufficient for all Latin letters, but of\ncourse they do not suffice for all written symbols, including punctuation and\ndigits.Asasolution,theBaudotcodeusesaso-calledshiftcharacter,whichsig-\nnifies that from that point onwards \u2013 until shifted back \u2013 a different encoding\nis used, allowing for yet another set of 32 codes. In effect, this means that the\nBaudotcode,andtheInternationalTelegraphAlphabet(ITA)derivedfrom\nit,hadanextrabitofinformation,sotheencodingisactually6-bit(with26 = 64\ndifferentpossiblecharacters).Fordecades,thisencodingwasthestandardforall\ntelegraphyanditisstillinlimitedusetoday.\nTo also allow for different uppercase and lowercase letters and for a large\nvariety of control characters to be used in the newly developing technology of\ncomputers,theAmericanStandardsAssociationdecidedtoproposeanew7-bit\nencoding in 1963 (with 27 = 128 different possible characters), known as the\nAmericanStandardCodeforInformationInterchange(ASCII),gearedto-\nwards the encoding of English orthography. With the ascent of other orthogra-\nphies in computer usage, the wish to encode further variations of Latin letters\n(includingGerman<\u00df>andvariousletterswithdiacritics,e.g.<\u00e8>)ledtheDig-\nital Equipment Corporation to introduce an 8-bit Multinational Character\nSet(MCS,with28 = 256differentpossiblecharacters),firstusedwiththeintro-\nductionoftheVT220Terminalin1983.\nthatshouldsimplybeencodedwithitsowncodepoint.Thishappenedonlywiththerevision\noftheBaudot-code(seebelow)byDonaldMurrayin1901,inwhichheintroducedaspecific\nwhite-spacecode.Thisprinciplehasbeenfollowedeversince.\n5Ofcourse,noexplicitseparatorisneededatallwhenthetimingofthesignalsisknown,which\nistheprincipleusedinallmoderntelecommunicationsystems.Animportantmodernconsid-\neration is also howto knowwhereto start counting when youdid not catch the start of a\nmessage,somethingthatisknowninUnicodeasselfsynchronization.\n6Truebinarycodeshavealongerhistory,goingbackatleasttotheBaconiancipherdevised\nbyFrancisBaconin1605.However,theproposalbyBaudotwasthequintessentialproposal\nleadingtoallmodernsystems.\n6 1.3Linguisticterminology\nBecause 256 characters were clearly not enough for the unique representa-\ntion of many different characters needed in the world\u2019s writing systems, the\nISO/IEC 8859 standard in 1987 extended the MCS to include 16 different 8-bit\ncode pages.Forexample,part5wasusedfor Cyrilliccharacters,part6 forAra-\nbic,andpart7forGreek.Thissystemwasalmostimmediatelyunderstoodtobe\ninsufficient and impractical, so various initiatives to extend and reorganize the\nencoding started in the 1980s. This led, for example, to various proprietary en-\ncodings from Microsoft (e.g. Windows Latin 1) and Apple (e.g. Mac OS Roman),\nwhichonestillsometimesencounterstoday.\nInthe1980svariouspeoplestartedtodeveloptrueinternationalcodesets.In\nthe United States, a group of computer scientists formed the unicode consor-\ntium,proposinga16-bitencodingin1991(with216 = 65,536differentpossible\ncharacters).AtthesametimeinEurope,theinternationalorganizationfor\nstandardization(ISO)wasworkingonISO10646toreplacetheISO/IEC8859\nstandard.Theirfirstdraftoftheuniversalcharacterset(UCS)in1990was31-\nbit (with theoretically 231 = 2,147,483,648 possible characters, but because\nof some technical restrictions only 679,477,248 were allowed). Since 1991, the\nUnicode Consortium and the ISO jointly develop the unicode standard, or\nISO/IEC 10646, leading to the current system including the original 16-bit Uni-\ncode proposal as the basic multilingual plane, and 16 additional planes of\n16-bit for further extensions (with in total \u201e1 + 16\u201d 216 = 1,114,112 possible\ncharacters). The most recent version of the Unicode Standard (currently at ver-\nsion number 11.0.0) was published in June 2018 and it defines 137,374 different\ncharacters(TheUnicodeConsortium2018).\nIn the next section we provide a very brief overview of the linguistic terminol-\nogy concerning writing systems before turning to the slightly different compu-\ntationalterminologyinthesubsequentchapterontheUnicodeStandard.\n1.3 Linguistic terminology\nLinguistically speaking, a writing system is a symbolic system that uses visi-\nbleortactilesignstorepresentlanguageinasystematicway.Thetermwriting\nsystem has two mutually exclusive meanings. First, it may refer to the way a\nparticularlanguageiswritten.Inthissensethetermreferstothewritingsystem\nof a particular language, as, for example, in the Serbian writing system uses two\nscripts: Latin and Cyrillic. Second, the term writing system may also refer to a\ntypeofsymbolicsystemas,forexample,inalphabeticwritingsystem.Inthislat-\n7 1Writingsystems\ntersensethetermreferstohowscriptshavebeenclassifiedaccordingtotheway\nthat they encode language, as in, for example, the Latin and Cyrillic scripts are\nbothalphabeticwritingsystems.Toavoidconfusion,thissecondnotionofwriting\nsystemwouldmoreaptlyhavebeencalledscriptsystem.\nWritingsystems\nFocusing on the first sense of writing system described above, we distinguish\nbetween two different kinds of writing systems used for a particular language,\nnamelytranscriptionsandorthographies.First,transcriptionisascientificpro-\ncedure (and also the result of that procedure) for graphically representing the\nsoundsofhumanspeechatthephoneticlevel.Itincorporatesasetofunambigu-\noussymbolstorepresentspeechsounds,includingconventionsthatspecifyhow\nthesesymbolsshouldbecombined.Atranscriptionsystemisaspecificsystemof\nsymbolsandrulesusedfortranscriptionofthesoundsofaspokenlanguagevari-\nety.Inprinciple,atranscriptionsystemshouldbelanguage-independent,inthat\nitshouldbeapplicabletoallspokenhumanlanguages.TheInternationalPho-\nnetic Alphabet (IPA) is a commonly used transcription system that provides\na medium for transcribing languages at the phonetic level. However, there is a\nlonghistoryofalternativekindsoftranscriptionsystems(seeKemp2006)andto-\ndayvariousalternativesareinwidespreaduse(e.g.X-SAMPAandCyrillic-based\nphonetic transcription systems). Many users of IPA do not follow the standard\ntotheletter,andmanydialectsbasedontheIPAhaveemerged,e.g.theAfrican-\nistandAmericanisttranscriptionsystems.NotethatIPAsymbolsarealsooften\nusedtorepresentlanguageonaphonemiclevel.Itisimportanttorealizethatin\nthisusagetheIPAsymbolsarenotatranscriptionsystem,butratheranorthog-\nraphy (though with strong links to the pronunciation). Further, a transcription\nsystemdoesnotneedtobeashighlydetailedastheIPA.Itcanalsobeasystem\nofbroadsoundclasses.Althoughsuchanapproximativetranscriptionisnotnor-\nmallyusedinlinguistics,itiswidespreadintechnologicalapproaches(Soundex\nand variants, e.g. Knuth 1973: 391\u2013392; Postel 1969; Beider & Morse 2008), and\nit is sometimes fruitfully used in automatic approaches to historical linguistics\n(Dolgopolsky1986;List2012;Brownetal.2013).\nSecond, an orthography specifies the symbols, punctuations, and the rules\nin which a specific language is written in a standardized way. Orthographies\nareoftenbasedonaphonemicanalysis,buttheyalmostalwaysincludeidiosyn-\ncrasies because of historical developments (like sound changes or loans) and\nbecause of the widely-followed principle of lexical integrity (i.e. the attempt to\nwritethesamelexicalrootinaconsistentway,alsowhensynchronicphonemic\n8 1.3Linguisticterminology\nruleschangethepronunciation,asforexamplewithfinaldevoicinginmanyGer-\nmaniclanguages).Orthographiesarelanguage-specific(andoftenevenresource-\nspecific), although individual symbols or rules might be shared between lan-\nguages.Apracticalorthographyisastronglyphoneme-basedwritingsystem\ndesignedforpracticalusebyspeakers.Themappingrelationbetweenphonemes\nandgraphemesinpracticalorthographiesispurposelyshallow,i.e.thereismostly\nasystematicandfaithfulmappingfromaphonemetoagrapheme.Practicalor-\nthographiesareintendedtojumpstartwrittenmaterialsdevelopmentbycorrelat-\ningawritingsystemwiththesoundunitsofalanguage(Meinhof&Jones1928).\nSymbolsfromtheIPAareoftenusedbylinguistsinthedevelopmentofsuchprac-\nticalorthographiesforlanguageswithoutwritingsystems,thoughthisusageof\nIPAsymbolsshouldnotbeconfusedwithtranscription(asdefinedabove).\nFurther,atransliterationisamappingbetweentwodifferentorthographies.\nItistheprocessof\u201crecordingthegraphicsymbolsofonewritingsysteminterms\nofthecorrespondinggraphicsymbolsofasecondwritingsystem\u201d(Kemp2006:\n396).Instraightforwardcases,suchatransliterationissimplyamatterofreplac-\ningonesymbolwithanother.However,therearewidespreadcomplications,like\none-to-many or many-to-many mappings, which are not always easy, or even\npossible,tosolvewithoutlistingallcasesindividually(cf. Moran2012:Ch.2).\nScriptsystems\nDifferentkindsofwritingsystemsareclassifiedintoscriptsystems.Ascriptis\nacollectionofdistinctsymbolsasemployedbyoneormoreorthographies.For\nexample,bothSerbianandRussianarewrittenwithsubsetsoftheCyrillicscript.\nA single language, like Serbian or Japanese, can also be written using orthogra-\nphies based on different scripts. Over the years linguists have classified script\nsystemsinavarietyofways,withthetripartiteclassificationoflogographic,syl-\nlabic,andalphabeticremainingthemostpopular,eventhoughthereareatleast\nhalfadozendifferenttypesofscriptsystemsthatcanbedistinguished(Daniels\n1990;1996).\nBreaking it down further, a script consists of graphemes, which are writing\nsystem-specificminimallydistinctivesymbols(seebelow).Graphemesmaycon-\nsist of one or more characters. The term character is overladen. In the lin-\nguistic terminology of writing systems, a character is a general term for any\nself-contained element in a writing system. A second interpretation is used as\na conventional term for a unit in the Chinese writing system (Daniels 1996). In\ntechnical terminology, a character refers to the electronic encoding of a com-\nponentinawritingsystemthathassemanticvalue(seeSection2.3).Thusinthis\n9 1Writingsystems\nwork we must navigate between the general linguistic and technical terms for\ncharacter and grapheme because of how these notions are defined and how\ntheyrelateattheintersectionbetweentheInternationalPhoneticAlphabetand\ntheUnicodeStandard(Chapter5).\nAlthoughinliteratesocietiesmostpeoplehaveastrongintuitionaboutwhat\nthecharactersareintheirparticularorthographyororthographies,itturnsout\nthattheseparationofanorthographyintoseparatecharactersisfarfromtrivial.\nThe widespread intuitive notion of a character is strongly biased towards edu-\ncational traditions, like the alphabet taught at schools, and technological possi-\nbilities, like the available type pieces in a printer\u2019s job case, the keys on a type-\nwriter,orthesymbolsdisplayedinMicrosoftWord\u2019ssymbolbrowser.Inpractice,\ncharactersoftenconsistofmultiplebuildingblocks,eachofwhichcouldbecon-\nsidered a character in its own right. For example, although a Chinese character\nmaybeconsideredtobeasinglebasicunanalyzableunit,atamorefine-grained\nlevelofanalysistheinternalstructureofChinesecharactersisoftencomprisedof\nsmallersemanticandphoneticunitsthatshouldbeconsideredcharacters(Sproat\n2000). In alphabetic scripts, this problem is most forcefully exemplified by dia-\ncritics.\nA diacritic is a mark, or series of marks, that may be above, below, before,\nafter, through, around, or between other characters (Gaultney 2002). Diacritics\naresometimesusedtodistinguishhomophonouswords,buttheyaremoreoften\nusedtoindicateamodifiedpronunciation(Daniels&Bright1996:xli).Thecentral\nquestion is whether, for example, <e>, <\u00e8>, <a> and <\u00e0> should be considered\nfourcharacters,ordifferentcombinationsofthreecharacters,i.e.<a>,<e>,and\n<\u25cc\u0300>.Ingeneral,multiplecharacterstogethercanformanothercharacter,andit\nisnotalwayspossibletodecideonprincipledgroundswhatshouldbethebasic\nbuildingblocksofanorthography.\nForthatreason,itisbettertoanalyzeanorthographyasacollectionofgraph-\nemes.Agraphemeisthebasic,minimallydistinctivesymbolofaparticularwrit-\ning system. It was modeled after the term phoneme (an abstract representation\nofadistinctsoundinaspecificlanguage)andassuchitrepresentsacontrastive\ngraphical unit in a writing system (see Kohrt 1986 for a historical overview of\nthetermgrapheme).Mostimportantly,asinglegraphemeregularlyconsistsof\nmultiple characters, like <th>, <ou> and <gh> in English (note that each char-\nacterinthesegraphemesisalsoaseparategraphemeinEnglish).Suchcomplex\ngraphemes are often used to represent single phonemes. So, a combination of\ncharacters isusedtorepresentasinglephoneme.Notethattheoppositeisalso\nfoundinwritingsystems,incasesinwhichasinglecharacterrepresentsacom-\n10 1.3Linguisticterminology\nbination of two or more phonemes. For example, <x> in English orthography\nsometimesrepresentsacombinationofthephonemes/k/and/s/,asintheword\n\u2018index\u2019[\u02c8\u026an\u02ccd\u025bks];othertimesitispronouncedas/z/,suchasinthewords\u2018Xerox\u2019\n[\u02c8z\u026ar\u02cc\u0251ks];andin\u2018example\u2019[\u026a\u0261\u02c8z\u00e6mp\u0259l]itisacombinationof/g/and/s/.Asone\ncan see, there can be non-trivial mappings between graphemes and phonemes\ninorthographieslikeEnglish,e.g.\u2018give\u2019,\u2018gin\u2019,\u2018jingle\u2019,wherethegraphemes<g>\nand<j>andthephonemes/g/and/d\u0292/haveacomplexmapping.\nFurther,conditionedorfreevariantsofagraphemearecalledallographs.For\nexample, the distinctive forms of Greek sigma are conditioned, with <\u03c3> being\nused word-internally and <\u03c2> being used at the end of a word. In sum, there\naremany-to-manyrelationshipsbetweenphonemesandgraphemesastheyare\nexpressedinthemyriadoflanguage-andresource-specificorthographies.\nSummary\nThisexpositionofthelinguisticterminologyinvolvedindescribingwritingsys-\ntems has been purposely brief. We have highlighted some of the linguistic no-\ntions that are pertinent to, yet sometimes confused with, the technical defini-\ntionsdevelopedforthecomputationalprocessingoftheworld\u2019swritingsystems,\nwhichwedescribeinthenextChapter.\n11  2 The Unicode approach\n2.1 Background\nThe conceptualization and terminology of writing systems was rejuvenated by\nthe development of the Unicode Standard, with major input from Mark Davis,\nco-founderandlong-termpresidentoftheUnicodeConsortium.Formanyyears,\n\u201cexotic\u201d writing systems and phonetic transcription systems on personal com-\nputers were constrained by the American Standard Code for Information Inter-\nchange(ASCII)characterencodingscheme,basedontheLatinscript,whichonly\nallowed for a strongly limited number of different symbols to be encoded. This\nimplied that users could either use and adopt the (extended) Latin alphabet or\ntheycouldassignnewsymbolstothesmallnumberofcodepointsintheASCII\nencodingschemetoberenderedbyaspecificallydesignedfont(Bird&Simons\n2003). In this situation, it was necessary to specify the font together with each\ndocumenttoensuretherightfuldisplayofitscontent.Toalleviatethisproblem\nofassigningdifferentsymbolstothesamecodepoints,inthelate80sandearly\n90stheUnicodeConsortiumsetitselftheambitiousgoalofdevelopingasingle\nuniversalcharacterencodingtoprovideauniquenumber,acodepoint,forevery\ncharacterintheworld\u2019swritingsystems.Nowadays,theUnicodeStandardisthe\ndefaultencoding of the technologies that support the WorldWide Weband for\nallmodernoperatingsystems,softwareandprogramminglanguages.\n2.2 The Unicode Standard\nTheUnicodeStandardrepresentsamassivestepforwardbecauseitaimstoerad-\nicatethedistinctionbetweenuniversal(ASCII)versuslanguage-particular(font)\nby adding as much language-specific information as possible into the univer-\nsal standard. However, there are still language/resource-specific specifications\nnecessary for the proper usage of Unicode, as will be discussed below. Within\ntheUnicodestructuremanyofthesespecificationscanbecapturedbyso-called\nUnicodeLocales,sowearemovingtoanewdistinctionofuniversal(Unicode\nStandard) versus language-particular (Unicode Locale). The major gain is much 2TheUnicodeapproach\nlargercompatibilityontheuniversallevel(becauseUnicodestandardizesamuch\ngreaterportionofwritingsystemdiversity),andmuchbetterpossibilitiesforau-\ntomated processing on the language-particular level (because Unicode Locales\naremachine-readablespecifications).\nEach version of the Unicode Standard (The Unicode Consortium 2018, as of\nwritingatversion11.0.0)consistsofasetofspecificationsandguidelinesthatin-\nclude(i)acorespecification,(ii)codecharts,(iii)standardannexesand(iv)achar-\nacterdatabase.1 Thecorespecificationisabookaimedathumanreadersthat\ndescribes the formal standard for encoding multilingual text. The code charts\nprovideahuman-readableonlinereferencetothecharactercontentsoftheUni-\ncodeStandardintheformofPDFfiles.TheUnicodeStandardAnnexes(UAX)\nareasetoftechnicalstandardsthatdescribetheimplementationoftheUnicode\nStandardforsoftwaredevelopment,webstandards,andprogramminglanguages.\nThe Unicode Character Database (UCD) is a set of computer-readable text\nfilesthatdescribethecharacterproperties,includingasetofrichcharacterand\nwriting system semantics, for each character in the Unicode Standard. In this\nsection, we introduce the basic Unicode concepts, but we will leave out many\ndetails. Please consult the above-mentioned full documentation for a more de-\ntaileddiscussion.FurthernotethattheUnicodeStandardisexactlythat,namely\na standard. It normatively describes notions and rules to be followed. In the ac-\ntual practice of applying this standard in a computational setting, a specific im-\nplementationisnecessary.ThemostwidelyusedimplementationoftheUnicode\nStandard is the International Components for Unicode (ICU), which offers\nC/C++andJavalibrariesimplementingtheUnicodeStandard.2\n2.3 Character encoding system\nTheUnicodeStandardisacharacterencodingsystemwhosegoalistosupport\ntheinterchangeandprocessingofwrittencharactersandtextinacomputational\n1All documents of the Unicode Standard are available at: http://www.unicode.org/versions/\nlatest/.ForaquicksurveyoftheuseofterminologyinsidetheUnicodeStandard,theirglossary\nisparticularlyuseful,availableat:http://www.unicode.org/glossary/.Forageneralintroduc-\ntiontotheprinciplesofUnicode,Chapter2ofthecorespecification,calledgeneralstruc-\nture,isparticularlyinsightful.UnlikemanyotherdocumentsintheUnicodeStandard,this\ngeneralintroductionisrelativelyeasytoreadandillustratedwithmanyinterestingexamples\nfromvariousorthographictraditionsfromallovertheworld.\n2MoreinformationabouttheICUisavailablehere:http://icu-project.org.\n14 2.3Characterencodingsystem\nsetting.3 Underlyingly, the character encoding is represented by a range of nu-\nmerical values called a code space, which is used to encode a set of characters.\nA code point is a unique non-negative integer within a code space (i.e. within\nacertainnumericalrange).IntheUnicodeStandardcharacterencodingsystem,\nan abstract character, for example the latin small letter p, is mapped to\naparticularcodepoint,inthiscasethedecimalvalue112,normallyrepresented\ninhexadecimal,whichthenlooksinUnicodeparlanceasU+0070.Thatencoded\nabstractcharacterisrenderedonacomputerscreen(orprintedpage)asaglyph,\ne.g.<p>,dependingonthefontandthecontextinwhichthatcharacterappears.\nIn Unicode Standard terminology, an (abstract) character is the basic en-\ncoding unit. The term character can be quite confusing due to its alternative\ndefinitionsacrossdifferentscientificdisciplinesandbecauseingeneraltheword\ncharactermeansmanydifferentthingstodifferentpeople.Itisthereforeoften\npreferable to refer to Unicode characters simply as code points, because there\nis a one-to-one mapping between Unicode characters and their numeric repre-\nsentation. In the Unicode approach, a character refers to the abstract meaning\nand/or general shape, rather than a specific shape, though in code tables some\nform of visual representation is essential for the reader\u2019s understanding. Uni-\ncodedefinescharactersasabstractionsoforthographicsymbols,anditdoesnot\ndefinevisualizationsforthesecharacters(althoughitdoespresentexamples).In\ncontrast, a glyph is a concrete graphical representation of a character as it ap-\npearswhenrendered(orrasterized)anddisplayedonanelectronicdeviceoron\nprintedpaper.Forexample,<gg gg g g>aredifferentglyphsofthesamechar-\nacter, i.e. they may be rendered differently depending on the typography being\nused, but they all share the same code point. From the perspective of Unicode\nthey are the same thing. In this approach, a font is then simply a collection of\nglyphsconnectedtocodepoints.AllographyisnotspecifiedinUnicode(barring\nafewexceptionalcases,duetolegacyencodingissues),butcanbespecifiedina\nfontasacontextualvariant(akapresentationform).\nEachcodepointintheUnicodeStandardisassociatedwithasetofcharacter\npropertiesasdefinedbytheUnicodecharacterpropertymodel.4Basically,those\n3Aninsightfulreviewernotesthatthetermencodingisusedforbothsequencesofcodepoints\nandtextencodedasbitpatterns.HenceaUnicode-awareprogrammermightprefertosaythat\nUTF-8, UTF-16, etc., are Unicode encoding systems. The issue is that the Unicode Standard\nintroducesalayerofindirectionbetweencharactersandbitpatterns,i.e.thecodepoint,which\ncanbeencodeddifferentlybydifferentencodingsystems.\n4Thecharacterpropertymodelisdescribedinhttp://www.unicode.org/reports/tr23/,buttheac-\ntualpropertiesaredescribedinhttp://www.unicode.org/reports/tr44/.Asimplifiedoverview\nof the properties is available at: http://userguide.icu-project.org/strings/properties. The ac-\n15 2TheUnicodeapproach\npropertiesarejustalonglistofvaluesforeachcharacter.Forexample,codepoint\nU+0047hasthefollowingproperties(amongmanyothers):\n\u2022 Name:LATINCAPITALLETTERG\n\u2022 Alphabetic:YES\n\u2022 Uppercase:YES\n\u2022 Script:LATIN\n\u2022 Extender:NO\n\u2022 Simple_Lowercase_Mapping:0067\nThese properties contain the basic information of the Unicode Standard and\ntheyarenecessarytodefinethecorrectbehaviorandconformancerequiredfor\ninteroperabilityinandacrossdifferentsoftwareimplementations(asdefinedin\ntheUnicodeStandardAnnexes).Thecharacterpropertiesassignedtoeachcode\npointarebasedoneachcharacter\u2019sbehaviorinreal-worldwritingtraditions.For\nexample,thecorrespondinglowercasecharactertoU+0047isU+0067.5 Another\nuseofpropertiesistodefinethescriptofacharacter.6Inpractice,scriptissimply\ndefinedforeachcharacterastheexplicitscriptpropertyintheUnicodeCharac-\nterDatabase.\nOnefrequentlyreferencedpropertyistheblockproperty,whichisoftenused\nin software applications to impose some structure on the large number of Uni-\ncode characters. Each character in Unicode belongs to a specific block. These\nblocks are basically an organizational structure to alleviate the administrative\nburdenofkeepingUnicodeup-to-date.Blocksconsistofcharactersthatinsome\nway belong together, so that characters are easier to find. Some blocks are con-\nnectedwithaspecificscript,liketheHebrewblockortheGujaratiblock.How-\never, blocks are predefined ranges of code points, and often there will come a\npoint after which the range is completely filled. Any extra characters will have\ntobeassignedsomewhereelse.Thereis,forexample,ablockArabic,whichcon-\ntainsmostArabicsymbols.However,thereisalsoablockArabicSupplement,\nArabicPresentationForms-AandArabicPresentationForms-B.Thesitua-\ntion with Latin symbols is even more extreme. In general, the names of blocks\ntualcodetableslistingallpropertiesforallUnicodecodepointsareavailableat:http://www.\nunicode.org/Public/UCD/latest/ucd/.\n5Note that the relation between uppercase and lowercase is in many situations much more\ncomplexthanthis,andUnicodehasfurtherspecificationsforthosecases.\n6TheGlossaryofUnicodeTermsdefinesthetermscriptasa\u201ccollectionoflettersandother\nwrittensignsusedtorepresenttextualinformationinoneormorewritingsystems.Forexam-\nple,RussianiswrittenwithasubsetoftheCyrillicscript;Ukrainianiswrittenwithadifferent\nsubset.TheJapanesewritingsystemusesseveralscripts.\u201d\n16 2.4Graphemeclusters\nshouldnotbetakenasadefinitionalstatement.Forexample,manyIPAsymbols\nare not located in the aptly-named block IPA extensions, but in other blocks\n(seeSection5.2).\n2.4 Grapheme clusters\nTherearemanycasesinwhichasequenceofcharacters(i.e.asequenceofmore\nthanonecodepoint)representswhatauserperceivesasanindividualunitina\nparticularorthographicwritingsystem.ForthisreasontheUnicodeStandarddif-\nferentiates between abstract character and user-perceived character. Se-\nquencesofmultiplecodepointsthatcorrespondtoasingleuser-perceivedchar-\nacters are called grapheme clusters in Unicode parlance. Grapheme clusters\ncomeintwoflavors:(default)graphemeclustersandtailoredgraphemeclusters.\nThe(default)graphemeclustersarelocale-independentgraphemes,i.e.they\nalwaysapplywhenaparticularcombinationofcharactersoccursindependentof\nthewritingsysteminwhichtheyareused.Thesecharactercombinationsarede-\nfinedintheUnicodeStandardasfunctioningasonetextelement.7Thesimplest\nexample of a grapheme cluster is a base character followed by a letter modifier\ncharacter. For example, the sequence <n> + <\u25cc\u0303> (i.e. latin small letter n at\nU+006E,followedbycombiningtildeatU+0303)combinesvisuallyinto<\u00f1>,a\nuser-perceivedcharacterinwritingsystemslikethatofSpanish.Ineffect,what\nthe user perceives as a single character actually involves a multi-code-point se-\nquence. Note that this specific sequence can also be represented with a single\nso-called precomposed code point, the latin small letter n with tilde at\nU+00F1, but this is not the case for all multi-code-point character sequences. A\nsolutiontotheproblemofmultipleencodingsforthesametextelementwasde-\nveloped early on in the Unicode Standard. It is called canonical eqivalence,\ne.g.for<\u00f1>,thesequenceU+006EU+0303shouldinallsituationsbetreatediden-\ntically to the precomposed U+00F1. By doing so, Unicode can also support spe-\ncialorprecomposedcharactersinlegacycharactersets.Todeterminecanonical\nequivalence, the Unicode Standard offers different kinds of normalization to ei-\ntherdecomposeprecomposedcharacters(calledNFDfornormalizationform\ncanonical decomposition) or to combine sequences of code points into pre-\ncomposedcharacters(calledNFCfornormalizationformcanonicalcompo-\n7TheGlossaryofUnicodeTermsdefinestextelementas:\u201cAminimumunitoftextinrelation\ntoaparticulartextprocess,inthecontextofagivenwritingsystem.Ingeneral,themapping\nbetweentextelementsandcodepointsismany-to-many.\u201d\n17 2TheUnicodeapproach\nsition).8 In current software development practice, NFC seems to be preferred\nin most situations and is widely proposed as the preferred canonical form. We\ndiscussUnicodenormalizationindetailinSection3.9.\nMore difficult for text processing, because less standardized, is what the Uni-\ncodeStandardtermstailoredgraphemeclusters.9Tailoredgraphemeclusters\narelocale-dependentgraphemes,i.e.suchcombinationofcharactersdonotfunc-\ntionastextelementsinallsituations.Examplesincludethesequence<c>+<h>\nfor the Slovak digraph <ch> and the sequence <ky> in the Sisaala practical or-\nthography,whichispronouncedasIPA/t\u0283/(Moran2006).Thesegraphemeclus-\nters are tailored in the sense that they must be specified on a language-by-\nlanguage or writing-system-by-writing-system basis. They are also grapheme\nclustersintheseorthographiesforprocessessuchascollation(i.e.sorting).10\nTheUnicodeStandardprovidestechnicalspecificationsforcreatinglocalespe-\ncific data in so-called Unicode Locales, i.e. specifications that define a set of\nlanguage-specificelements(e.g.tailoredgraphemeclusters,collationorder,cap-\nitalization equivalence), as well as other special information, like how to for-\nmat numbers, dates, or currencies. Locale descriptions are saved in the Com-\nmon Locale Data Repository (CLDR),11 a repository of language-specific defi-\nnitions of writing system properties, each of which describes specific usages of\ncharacters. Each locale can be encoded in a document using the Locale Data\nMarkup Language (LDML). LDML is an XML format and vocabulary for the\nexchange of structured locale data. Unicode Locale Descriptions allow users to\ndefine language- or even resource-specific writing systems or orthographies.12\nHowever, Unicode Locales have various drawbacks for the daily practice of sci-\nentificlinguisticresearchinamultilingualsetting.\n8See the Unicode Standard Annex #15, Unicode Normalization Forms (http://unicode.org/\nreports/tr15/), which provides a detailed description of normalization algorithms and illus-\ntratedexamples.\n9http://unicode.org/reports/tr29/\n10https://www.unicode.org/glossary/#collation\n11MoreinformationabouttheCLDRcanbefoundhere:http://cldr.unicode.org/.\n12TheGlossaryofUnicodeTermsdefineswritingsystemonlyveryloosely,asitisnotacentral\nconceptintheUnicodeStandard.Awritingsystemis,\u201cAsetofrulesforusingoneormore\nscripts to write a particular language. Examples include the American English writing sys-\ntem,theBritishEnglishwritingsystem,theFrenchwritingsystem,andtheJapanesewriting\nsystem.\u201d\n18 3 Unicode pitfalls\n3.1 Wrong it ain\u2019t\nIn this chapter we describe some of the most common pitfalls that we have en-\ncountered when using the Unicode Standard in our own work,or in discussion\nwithotherlinguists.Thissectionisnotmeantasacriticismofthedecisionsmade\nby the Unicode Consortium; rather we aim to highlight where the technical as-\npects of the Unicode Standard diverge from many users\u2019 intuitions. What have\nsometimesbeenreferredtoasproblemsorinconsistenciesintheUnicodeStan-\ndardaremostlyduetolegacycompatibilityissues,whichcanleadtounexpected\nbehaviorbylinguistsusingthestandard.However,therearealsosomecasesin\nwhich the Unicode Standard has made decisions that theoretically could have\nbeenmadedifferently,butforsomereasonoranother(mostlyverygoodreasons)\nwereacceptedastheyarenow.Wecallsuchbehaviorthatexecuteswithouter-\nrorbutdoessomethingdifferentthantheuserexpected\u2013oftenunknowingly\u2013\napitfall.\nIn this context, it is important to realize that the Unicode Standard was not\ndeveloped to solve linguistic problems per se, but to offer a consistent compu-\ntationalenvironmentforwrittenlanguage.InthosecasesinwhichtheUnicode\nStandard behaves differently than expected, we think it is important not to dis-\nmissUnicodeaswrongordeficient,becauseourexperienceisthatinalmostall\ncases the behavior of the Unicode Standard has been particularly well thought\nthrough.TheUnicodeConsortiumhasawide-rangingviewofmattersandoften\nexaminesimportantpracticalusecasesthatarenotnormallyconsideredfroma\nlinguisticpointofview.OurgeneralguidelinefordealingwiththeUnicodeStan-\ndardistoacceptitasitis,andnottotiltatwindmills.Alternatively,ofcourse,it\nispossibletoactivelyengageinthedevelopmentofthestandarditself,aneffort\nthatishighlyappreciatedbytheUnicodeConsortium. 3Unicodepitfalls\n3.2 Pitfall: Characters are not glyphs\nAcentralprincipleofUnicodeisthedistinctionbetweencharacterandglyph.A\ncharacteristheabstractnotionofasymbolinawritingsystem,whileaglyphis\nthevisualrepresentationofsuchasymbol.Inpractice,thereisacomplexinterac-\ntionbetweencharactersandglyphs.AsingleUnicodecharactermayofcoursebe\nrenderedasasingleglyph.However,acharactermayalsobeapieceofaglyph,\norvice-versa.Actually,allpossiblerelationsbetweenglyphsandcharactersare\nattested.\nFirst, a single character may have different contextually determined glyphs.\nFor example, characters in writing systems like Hebrew and Arabic have differ-\nent glyphs depending on where they appear in a word. Some letters in Hebrew\nchange their form at the end of the word, and in Arabic, primary letters have\nfourcontextually-sensitivevariants(isolated,wordinitial,medialandfinal).\nSecond,asinglecharactermayberenderedasasequenceofmultipleglyphs.\nFor example, in Tamil one Unicode character may result in a combination of a\nconsonant and vowel, which are rendered as two adjacent glyphs by fonts that\nsupport Tamil, e.g. tamil letter au at U+0B94 represents a single character\n<\u0b94>, composed of two glyphs <\u0b93> and <\u0ba9>. Perhaps confusingly, in the\nUnicodeStandardtherearealsotwoindividualcharacters,i.e.tamilletteroo\nat U+0B93 and U+0BA9 tamil letter nnna, each of which is a glyph. Another\nexampleisSinhalasinhalavowelsignkombudekaatU+0DDB<\u0ddb\u25cc>,which\nis visually two glyphs, each represented by sinhala vowel sign kombuva at\nU+0DD9<\u0dd9\u25cc>.\nThird,asingleglyphmaybeacombinationofmultiplecharacters.Forexample,\ntheligature<fi>,asingleglyph,istheresultoftwocharacters,<f>and<i>,that\nhaveundergoneglyphsubstitutionbyfontrendering(seealsoSection3.5).Like\ncontextually-determinedglyphs,ligaturesare(intended)artifactsoftextprocess-\ninginstructions.Finally,asingleglyphmaybeapartofacharacter,asexempli-\nfiedbydiacriticslikethediaeresis<\u25cc\u0308>in<\u00eb>.\nFurther,therenderingofaglyphisdependentonthefontbeingused.Forex-\nample,theUnicodecharacterlatinsmalllettergappearsas<g>and<g>in\nthe Linux Libertine and Courier fonts, respectively, because their typefaces are\ndesigned differently. Furthermore, the font face may change the visual appear-\nanceofacharacter,forexampleTimesNewRomantwo-story<a>changestoa\nsingle-storyglyphinitalics<a>.Thisbecomesarealproblemforsomephonetic\ntypesetting(seeSection5.3).\n20 3.3Pitfall:Charactersarenotgraphemes\nIn sum, character-to-glyph mappings are complex technical issues that the\nUnicodeConsortiumhashadtoaddressinthedevelopmentoftheUnicodeStan-\ndard.However,theycancanbeutterlyconfusingforthelayuserbecausevisual\nrenderingdoesnot(necessarily)indicatelogicalencoding.\n3.3 Pitfall: Characters are not graphemes\nThe Unicode Standard encodes characters. This becomes most clear with the\nnotion of grapheme. From a linguistic point of view, graphemes are the basic\nbuildingblocksofawritingsystem(seeSection1.3).Itisextremelycommonfor\nwritingsystemstousecombinationsofmultiplesymbols(orletters)asasingle\ngrapheme,suchas<sch>,<th>or<ei>.Thereisnowaytoencodesuchcomplex\ngraphemesusingtheUnicodeStandard.\nTheUnicodeStandarddealswith complexgraphemesonlyinasmuch asthey\nconsistofbasecharacterswithdiacritics(seeSection5.9foradiscussionofthe\nnotionofdiacritic).TheUnicodeStandardcallssuchcombinationsgraphemeclus-\nters.Complexgraphemesconsistingofmultiplebasecharacters,like<sch>,are\ncalledtailoredgraphemeclusters(seeChapter2).\nTherearespecialUnicodecharactersthatgluetogethercharactersintolarger\ntailored grapheme clusters, specifically the zero width joiner at U+200D and\nthecombininggraphemejoineratU+034F.However,thesecharactersarecon-\nfusinglynamed(cf.Section3.7).Bothcodepointsactuallydonotjoincharacters,\nbut explicitly separate them. The zero-width joiner (ZWJ) can be used to solve\nspecial problems related to ordering (called collation in Unicode parlance). The\ncombininggraphemejoiner(CGJ)canbeusedtoseparatecharactersthatarenot\nsupposedtoformligatures.\nTo solve the issue of tailored grapheme clusters, Unicode offers some assis-\ntance in the form of Unicode Locales.1 However, in the practice of linguistic re-\nsearch,thisisnotarealsolution.Toaddressthisissue,weproposetouseorthog-\nraphyprofiles(seeChapter7).Basically,bothorthographyprofilesandUnicode\nLocales offer a way to specify tailored grapheme clusters. For example, for En-\nglishonecouldspecifythat<sh>issuchacluster.Consequently,thissequenceof\ncharactersisthenalwaysinterpretedasacomplexgrapheme.Forcasesinwhich\nthis is not the right decision, like in the English word mishap, the zero width\njoineratU+200Dhastobeenteredbetween<s>and<h>.\n1http://cldr.unicode.org/locale_faq-html\n21 3Unicodepitfalls\n3.4 Pitfall: Missing glyphs\nTheUnicodeStandardisoftenpraised(anddeservedlyso)forsolvingmanyofthe\nperennialproblemswiththeinterchangeanddisplayoftheworld\u2019swritingsys-\ntems.Nevertheless,acommoncomplaintfromusersisthatsomesymbolsdonot\ndisplaycorrectly,i.e.notatall orfromafallbackfont,e.g.arectangle<(cid:0)>,ques-\ntionmark<?>,ortheUnicodereplacementcharacter<\ufffd>.Theuser\u2019scomputer\ndoes not have the fonts installed that map the desired glyphs to Unicode char-\nacters. Therefore the glyphs cannot be displayed. This is not the Unicode Stan-\ndard\u2019sfaultbecauseitisacharacterencodingsystemandnotafont.Computer-\ninternally everything works as expected; any handling of Unicode code points\nworksindependentlyofhowtheyaredisplayedonthescreen.Soalthoughusers\nmightseealienfacesondisplay,theyshouldnotfretbecauseeverythingisstill\ntechnicallyinorderbelowthesurface.\nTherearetwoobstaclesregardingmissingglyphs.Oneispractical:designing\nglyphs includes many different considerations and it is a time-consuming pro-\ncess,especiallywhendonewell.Traditionalexpectationsofwhatspecificcharac-\ntersshouldlooklikeneedtobetakenintoaccountwhendesigningglyphs.Those\nexpectationsareoftennotwelldocumented,anditismostlyuptotheknowledge\nandexpertiseofthefontdesignertotryandconformtothem.Furthermore,the\nnumber of characters supported by Unicode is vast. Therefore, most designers\nproducefontsthatonlyincludeglyphsforcertainpartsoftheUnicodeStandard.\nThesecondobstacleistechnical:themaximumnumberofglyphsthatcanbe\ndefinedbytheTrueTypefontstandardandtheOpenTypespecification(ISO/IEC\n14496-22:2015) is 65,535. The current version of the Unicode Standard contains\n137,374characters.Thus,nosinglefontcanprovideindividualglyphsforallUni-\ncodecharacters.\nA simple solution to missing glyphs is to install additional fonts providing\nadditionalglyphs.Forbroadcoverage,thereistheNotofontfamily,aprojectde-\nvelopedbyGoogle,whichcoversover100scriptsandnearly64,000characters.2\nTheUnicodeConsortiumalsoprovides,butdoesnotendorse,anextensivelistof\nfontsandfontlibrariesonline.3\nFor the more exotic characters there is often not much choice. We have had\nsuccessusingMichaelEverson\u2019sEversonMonofont,whichhas9,756different\nglyphs (not including Chinese)4 and with the somewhat older Titus Cyberbit\n2https://www.google.com/get/noto/\n3http://unicode.org/resources/fonts.html\n4http://www.evertype.com/emono/\n22 3.5Pitfall:Faultyrendering\nBasic font by Jost Gippert and Carl-Martin Bunz. It includes 10,044 different\nglyphs(notincludingChinese).5\nWealsosuggestinstallingatleastonefall-backfont,whichprovidesglyphs\nthat show the user some information about the underlying encoded character.\nApple computers have such a font (which is invisible to the user), which is de-\nsigned by Michael Everson and made available for other systems through the\nUnicode Consortium.6 Further, the GNU Unifont is a clever way to produce\nbitmaps approximating the intended glyph of each available character.7 Finally,\nSIL International provides a SIL Unicode BMP Fallback Font. This font does\nnotshowarealglyph,butinsteadshowsthehexadecimalcodeinsideaboxfor\neachcharacter,soausercanatleastseetheUnicodecodepointofthecharacter\nintendedfordisplay.8\n3.5 Pitfall: Faulty rendering\nAsimilarcomplainttomissingglyphs,discussedpreviously,isthatwhileaglyph\nmightbedisplayed,itdoesnotlookright.Therearetworeasonsforunexpected\nvisual display, namely automatic font substitution and faulty rendering. Like\nmissingglyphs,anysuchproblemsareindependentfromtheUnicodeStandard.\nThe Unicode Standard only includes very general information about characters\nandleavesthespecificvisualdisplayforotherstodecideon.Anyfaultydisplay\nisthusnottobeblamedontheUnicodeConsortium,butonacomplexinterplay\nof different mechanisms happening in a computer to turn Unicode code points\nintovisualsymbols.Wewillonlysketchafewaspectsofthiscomplexinterplay\nhere.\nMostmodernsoftwareapplications(likeMicrosoftWord)offersomeapproach\nto automatic font substitution. This means that when a text is written in a\nspecificfont(e.g.TimesNewRoman)andaninsertedUnicodecharacterdoesnot\nhave a glyph within this font, then the software application will automatically\nsearchforanotherfonttodisplaytheglyph.Theresultwillbethatthisspecific\nglyph will look slightly different from the others. This mechanism works dif-\nferently depending on the software application; only limited user influence is\nusually expected and little feedback is given. This may be rather frustrating to\nfont-awareusers.\n5http://titus.fkidg1.uni-frankfurt.de/unicode/tituut.asp\n6http://www.unicode.org/policies/lastresortfont_eula.html\n7http://unifoundry.com/unifont.html\n8http://scripts.sil.org/UnicodeBMPFallbackFont\n23 3Unicodepitfalls\nAnother problem with visual display is related to so-called font rendering.\nFont rendering refers to the process of the actual positioning of Unicode char-\nacters on a page of written text. This positioning is actually a highly complex\nchallengeandmanythingscangowrongintheprocess.Well-knownrendering\ndifficulties, like proportional glyph size or ligatures, are reasonably well under-\nstoodbydevelopers.Nevertheless,thepositioningofmultiplediacriticsrelative\ntoabasecharacterisstillawidespreadproblem.Especiallyproblematiciswhen\nmorethanonediacriticissupposedtobeplacedabove(orbelow)another.Even\nwithin the Latin script vertical placement often leads to unexpected effects in\nmany modern software applications. The rendering problems arising in Arabic\nand in many scripts of Southeast Asia (like Devanagari or Burmese) are even\nmorecomplex.\nTo understand why these problems arise it is important to realize that there\narebasicallythreedifferentapproachestofontrendering.Themostwidespread\nis Adobe\u2019sand Microsoft\u2019s OpenTypesystem. This approach makesit relatively\neasyforfontdevelopers,butthefontitselfdoesnotincludealldetailsaboutthe\npreciseplacementofindividualcharacters.Forthosedetails,additionalscriptde-\nscriptionsarenecessary.Allsuchsystemscanleadtounexpectedbehavior.9 Al-\nternativesystemsareAppleAdvancedTypography(AAT)andtheopen-source\nGraphitesystemproducedandmaintainedbytheNon-RomanScriptInitiative\nof SIL International (SIL).10 In these systems, a larger burden is placed on the\ndescriptioninsidethefont.\nThere is no complete solution to the problems arising from faulty font ren-\ndering. Switching to another software application that offers better handling is\ntheonlyrealalternative,butthisisnormallynotanoptionfordailywork.Font\nrendering is developing quickly in the software industry, so we can expect the\nsituationtoonlygetbetter.\n3.6 Pitfall: Blocks\nTheUnicodecodespaceissubdividedintoblocksofcontiguouscodepoints.For\nexample, the block called Cyrillic runs from U+0400 till U+04FF. These blocks\n9For more details about OpenType, see http://www.adobe.com/products/type/opentype.html\nandhttp://www.microsoft.com/typography/otspec/.Additionalsystemsforcomplextextlay-\noutare,amongothers,Microsoft\u2019sDirectWrite(https://msdn.microsoft.com/library/dd368038.\naspx) and the open-source project HarfBuzz (http://www.freedesktop.org/wiki/Software/\nHarfBuzz/).\n10MoreinformationaboutAATcanbefoundat:https://developer.apple.com/fonts/.\nGraphiteisdescribedindetailat:http://scripts.sil.org/default.\n24 3.7Pitfall:Names\naroseasanattemptatorderingtheenormousnumberofcharactersinUnicode,\nbut the idea of blocks very quickly ran into problems. First, the size of a block\nis fixed, so when a block is full, a new block will have to be instantiated some-\nwhere else in the code space. For example, this led to the blocks Cyrillic Sup-\nplement, Cyrillic Extended-A (both of which are already full) and Cyrillic\nExtended-B. Second, when a specific character already exists, it is not dupli-\ncated in another block, although the name of the block might indicate that a\nspecificsymbolshouldbeavailablethere.Ingeneral,namesofblocksarejustan\napproximateindicationofthekindofcharactersthatwillbeintheblock.\nTheproblemwithblocksarisesbecausefindingtherightcharacteramongthe\nthousandsofUnicodecharactersisnoteasy.Manysoftwareapplicationspresent\nblocksasaprimarysearchmechanism,becausetheblocknamessuggestwhere\ntolookforaparticularcharacter.However,whenausersearchesforanIPAchar-\nacterintheblockIPAExtensions,thenmanyIPAcharacterswillnotbefound\nthere.Forexample,thevelarnasal<\u014b>isnotpartoftheblockIPAExtensions\nbecause it was already included as latin small letter eng at U+014B in the\nblockLatinExtensions-A.\nIn general, finding a specific character in the Unicode Standard is often non-\ntrivial.Thenamesoftheblockscanhelp,buttheyarenot(andwereneversup-\nposedtobe)afoolproofstructure.ItisneitherthegoalnortheaimoftheUnicode\nConsortiumtoprovideauserinterfacetotheUnicodeStandard.Ifoneoftenen-\ncounters the problem of needing to find a suitable character, there are various\notherusefulservicesforend-usersavailable.11\n3.7 Pitfall: Names\nThenamesofcharactersintheUnicodeStandardaresometimesmisnomersand\nshouldnotbemisinterpretedasdefinitions.Forexample,thecombininggraph-\neme joiner at U+034F does not join characters into larger graphemes (see Sec-\ntion 3.3) and the latin letter retroflex click U+01C3 is actually not the IPA\nsymbolforaretroflexclick,butforanalveolarclick(seeSection5.3).Inasense,\nthesenamescanbeseenaserrors.However,itisprobablybettertorealizethat\n11The Unicode website offers a basic interface to the code charts at: http://www.unicode.org/\ncharts/index.html. As a more flexible interface, we particularly like PopChar from Ergonis\nSoftware,availableforbothMacandWindows.Therearealsovariousfreewebsitesthatoffer\nsearchinterfacestotheUnicodecodetables,likehttp://unicode-search.netorhttp://unicode-\nsearch.net.Anotherusefulapproachforsearchingforcharactersusingshapematching(Be-\nlongieetal.2002)is:http://shapecatcher.com.\n25 3Unicodepitfalls\nsuchnamesarejustconveniencelabelsthatarenotgoingtobechanged.Justlike\ntheblocknames(Section3.6),thecharacternamesareoftenhelpful,buttheyare\nnotsupposedtobedefinitions.\nTheactualintendedmeaningofaUnicodecodepointisacombinationofthe\nname, the block and the character properties (see Chapter 2). Further details\nabouttheunderlyingintentionswithwhichacharactershouldbeusedareonly\naccessible byperusing the actual decisions of the Unicode Consortium. All pro-\nposals, discussions and decisions of the Unicode Consortium are publicly avail-\nable. Unfortunately there is not (yet) any way to easily find everything that is\neverproposed,discussedanddecidedinrelationtoaspecificcodepointofinter-\nest,somanyofthedetailsareoftensomewhathidden.12\n3.8 Pitfall: Homoglyphs\nHomoglyphsarevisuallyindistinguishableglyphs(orhighlysimilarglyphs)that\nhavedifferentcodepointsintheUnicodeStandardandthusdifferentcharacter\nsemantics. As a principle, the Unicode Standard does not specify how a char-\nacter appears visually on the page or the screen. So in most cases, a different\nappearanceiscausedbythespecificdesignofafont,orbyuser-settingslikesize\nor boldface. Taking an example already discussed in Section 2.3, the following\nsymbols<gg gg g g>aredifferentglyphsofthesamecharacter,i.e.theymay\nbe rendered differently depending on the typography being used, but they all\nsharethesamecodepoint(viz.latinsmalllettergatU+0067).Incontrast,the\nsymbols<A\u0410\u0391\u13aa\u15c5\u1d00\ua4ee\ud800\udea0\ud835\udda0\ud835\ude70>arealldifferentcodepoints,althoughtheylookhighly\nsimilar \u2013 in some cases even sharing exactly the same glyph in some fonts. All\nthesedifferentA-likecharactersincludethefollowingcodepointsintheUnicode\nStandard:\n<A>latincapitallettera,atU+0041\n<\u0410>cyrilliccapitallettera,atU+0410\n<\u0391>greekcapitalletteralpha,atU+0391\n<\u13aa>cherokeelettergo,atU+13AA\n<\u15c5>canadiansyllabicscarriergho,atU+15C5\n<\u1d00>latinsmalllettercapitala,atU+1D00\n12AllproposalsandotherdocumentsthatarethebasisofUnicodedecisionsareavailableat:http:\n//www.unicode.org/L2/all-docs.html.TheactualdecisionsthatmakeuptheUnicodeStandard\naredocumentedintheminutesoftheUnicodeTechnicalCommittee,availableat:http://www.\nunicode.org/consortium/utc-minutes.html.\n26 3.9Pitfall:Canonicalequivalence\n<\ua4ee>lisulettera,atU+A4EE\n<\ud800\udea0>carianlettera,atU+102A0\n<\ud835\udda0>mathematicalsans-serifcapitala,U+1D5A0\n<\ud835\ude70>mathematicalmonospacecapitala,atU+1D670\nThe existence of such homoglyphs is partly due to legacy compatibility, but\nforthemostpartthesecharactersaresimplydifferentcharactersthathappento\nlooksimilar.13Yet,theyaresupposetobehavedifferentlyfromtheperspectiveof\na font designer. For example, when designing a Cyrillic font, the <A> will have\ndifferent aesthetics and different traditional expectations compared to a Latin\n<A>. Thus, the Unicode Standard has character properties associated with each\ncodepointwhichdefinecertainexpectations,e.g.charactersbelongtodifferent\nblocks,theyhavedifferentlowercasevariants(seeSection2.3).\nHomoglyphsareawidespreadproblemforconsistentencoding.Althoughfor\nmost users it looks like the words <voces> and <\u03bd\u03bf\u0441\u0435\u0455> are nearly identical, in\nfacttheydonotshareanycodepoints.14Forcomputersthesetwowordsarecom-\npletelydifferententities.SometimeswhenuserswithCyrillicorGreekkeyboards\nhavetotypesomeLatin-basedorthography,theymixsimilarlookingCyrillicor\nGreek characters into their text, because those characters are so much easier\nto type. Similarly, when users want to enter an unusual symbol, they normally\nsearch by visual impression in their favorite software application, and just pick\nsomethingthatlooksreasonablyaliketowhattheyexpecttheglyphtolooklike.\nItisveryeasytomakeerrorsduringtextentryandaddcharactersthatarenot\nsupposedtobeincluded.Ourproposalsfororthographyprofiles(seeChapter7)\nare a method for checking the consistency of any text. In situations in which\ninteroperability is important, we consider it crucial to add such checks in any\nworkflow.\n3.9 Pitfall: Canonical equivalence\nFor some characters, there is more than one possible encoding in the Unicode\nStandard. This means that for the computer there exists multiple different en-\ntities, which for the user, may be visually the same. This leads to, for example,\n13Aparticularlyniceinterfacetolookforhomoglyphsishttp://shapecatcher.com,basedonthe\nprincipleofrecognizingshapes(Belongieetal.2002).\n14The first words consists completely of Latin characters: U+0076, U+006F, U+0063, U+0065\nandU+0073.ThesecondisamixofCyrillicandGreekcharacters:U+03BD,U+03BF,U+0041,\nU+0435andU+0455.\n27 3Unicodepitfalls\nproblemswithsearch.Thecomputersearchesforspecificcodepointsandbyde-\nsign does not return all visually similar characters. As a solution, the Unicode\nStandardincludesanotionof canonicaleqivalence.Differentencodingsare\nexplicitly declared as equivalent in the Unicode Standard code tables. Further,\ntoharmonizeallencodingsinaspecificpieceoftext,theUnicodeStandardpro-\nposes a mechanism of normalization. The process of normalization and the\nUnicode Normalization Forms are described in detail in the Unicode Standard\nAnnex #15 online.15 Here we provide a brief summary of that material as it per-\ntainstocanonicalequivalence.\nConsiderforexamplethecharactersandfollowingUnicodecodepoints:\n1. <\u00c5>latincapitalletterawithringaboveU+00C5\n2. <\u00c5>angstromsignU+212B\n3. <\u00c5>latincapitalletteraU+0041+combiningringaboveU+030A\nThe character, represented here by glyph <\u00c5>, is encoded in the Unicode Stan-\ndard in the first two examples by a single-character sequence; each is assigned\na different code point. In the third example, the glyph is encoded in a multiple-\ncharacter sequence that is composed of two character code points. All three se-\nquencesare,i.e.theyarestringsthatrepresentthesameabstractcharacterand\nbecausetheyarenotdistinguishablebytheuser,theUnicodeStandardrequires\nthem to be treated the same in regards to their behavior and appearance. Nev-\nertheless, they are encoded differently. For example, if one were to search an\nelectronic text (with software that does not apply Unicode Standard normaliza-\ntion)forangstromsign(U+212B),thentheinstancesof latincapitallettera\nwithringabove(U+00C5)wouldnotbefound.\nIn other words, there are equivalent sequences of Unicode characters that\nshould be normalized, i.e. transformed into a unique Unicode-sanctioned rep-\nresentationofacharactersequencecalledanormalizationform.Unicodepro-\nvides a Unicode Normalization Algorithm, which puts combining marks into a\nspecificlogicalorderanditdefinesdecompositionandcompositiontransforma-\ntion rules to convert each string into one of four normalization forms. We will\ndiscussherethetwomostrelevantnormalizationforms:NFCandNFD.\nThefirstofthethreecharactersaboveisconsideredtheNormalizationForm\nC(NFC),whereCstandsforcomposition.WhentheprocessofNFCnormaliza-\ntion is applied to the characters in 2 and 3, both are normalized into the pre-\ncomposedcharactersequencein1.Thusallthreecanonicalcharactersequences\n15http://unicode.org/reports/tr15/\n28 3.9Pitfall:Canonicalequivalence\narestandardizedintoonecompositionforminNFC.Theotherfrequentlyencoun-\nteredUnicodenormalizationformistheNormalizationFormD(NFD),where\nDstandsfordecomposition.WhenNFDisappliedtothethreeexamplesabove,\nall three, including importantly the single-character sequences in 1 and 2, are\nnormalizedintothedecomposedmultiple-sequenceofcharactersin3.Again,all\nthree are then logically equivalent and therefore comparable and syntactically\ninteroperable.\nAs illustrated, some characters in the Unicode Standard have alternative rep-\nresentations(infact,manydo),buttheUnicodeNormalizationAlgorithmcanbe\nusedtotransformcertainsequencesofcharactersintocanonicalformstotestfor\nequivalency.Todetermineequivalence,eachcharacterintheUnicodeStandard\nis associated with a combining class, which is formally defined as a character\nproperty called canonical combining class which is specified in the Unicode\nCharacter Database. The combining class assigned to each code point is a nu-\nmeric value between 0 and 254 and is used bythe Unicode Canonical Ordering\nAlgorithmtodeterminewhichsequencesofcharactersare.Normalizationforms,\nasverybrieflydescribedabove,canbeusedtoensurecharacterequivalenceby\norderingcharactersequencessothattheycanbefaithfullycompared.\nItisveryimportanttonotethatanysoftwareapplicationthatisUnicodeStan-\ndard compliant is free to change the character stream from one representation\ntoanother.Thismeansthatasoftwareapplicationmaycompose,decomposeor\nreorder characters as its developers desire; as long as the resultant strings are\nto the original. This might lead to unexpected behavior for users. Various play-\ners,liketheUnicodeConsortium,theW3C,ortheTEIrecommendNFCinmost\nuser-directed situations, and some software applications that we tested indeed\nseemtoautomaticallyconvertstringsintoNFC.16 Thismeansinpracticethatif\nauser,forexample,enters<a>and<\u25cc\u0300>,i.e.latinsmallletteraatU+0061and\ncombininggraveaccentatU+0300,thismightbeautomaticallyconvertedinto\n<\u00e0>,i.e.latinsmallletterawithgraveatU+00E0.17\n16Seethesummaryofvariousrecommendationhere:http://www.win.tue.nl/~aeb/linux/uc/nfc_\nvs_nfd.html.\n17Thebehaviorofsoftwareapplicationscanbequiteerraticinthisrespect.Forexample,Apple\u2019s\nTextEditdoesnotdoanyconversionontextentry.However,whenyoucopyandpastesome\ntextinsidethesamedocumentinrichtextmode(i.e.RTF-format),itwillbetransformedinto\nNFConpaste.Savingadocumentdoesnotdoanyconversiontotheglyphsonscreen,butit\nwillsavethecharactersinNFC.\n29 3Unicodepitfalls\n3.10 Pitfall: Absence of canonical equivalence\nAlthoughinmostcasescanonicalequivalencewilltakecareofalternativeencod-\ningsofthesamecharacter,therearesomecasesinwhichtheUnicodeStandard\ndecidedagainstequivalence.Thisleadstoidenticalcharactersthatarenotequiv-\nalent,like<\u00f8>latinsmallletterowithstrokeatU+00F8and<o\u0337>acombina-\ntionoflatinsmallletteroatU+006Fwithcombiningshortsolidusoverlay\nat U+0037. The general rule followed is that extensions of Latin characters that\nare connected to the base character are not separated as combining diacritics.\nFor example, characters like <\u014b \u0272 \u0273> or <\u0256 \u0257> are obviously derived from <n>\nand <d> respectively, but they are treated like new separate characters in the\nUnicodeStandard.Likewise,characterslike<\u00f8>and<\u0188>arenotseparatedinto\nabasecharacter<o>and<c>withanattachedcombiningdiacritic.\nInterestingly,andsomewhatillogically,therearethreeelementswhicharedi-\nrectlyattachedtotheirbasecharacters,butwhicharestilltreatedasseparablein\ntheUnicodeStandard.Suchcharactersaredecomposed(inNFDnormalization)\ninto a base character with a combining diacritic. However,it is these cases that\nshould be considered the exceptions to the rule. These three elements are the\nfollowing:\n\u2022 <\u25cc\u0327>:thecombiningcedillaatU+0327\nThis diacritic is for example attested in the precomposed character <\u00e7>\nlatin small letter c with cedilla at U+00E7. This <\u00e7> will thus be de-\ncomposedinNFCnormalization.\n\u2022 <\u25cc\u0328>:thecombiningogonekatU+0328\nThisdiacriticisforexampleattestedinprecomposed<\u0105>latinsmalllet-\nterawithogonekatU+0105.This<\u0105>willthusbedecomposedinNFC\nnormalization.\n\u2022 <\u25cc\u031b>:thecombininghornatU+031B\nThisdiacriticisforexampleattestedinprecomposed<\u01a1>latinsmalllet-\nter o with horn at U+01A1. This <\u01a1> will thus be decomposed in NFC\nnormalization.\nTherearefurthercombinationsthatdeservespecialcarebecauseitisactually\npossible to produce identical characters in different ways without them being .\nInthesesituations,thegeneralruleholds,namelythatcharacterswithattached\nextras are not decomposed. However, in the following cases the extras actually\nexist as combining diacritics, so there is also the possibility to construct a char-\nacterbyusingabasecharacterwiththosecombiningdiacritics.\n30 3.11Pitfall:Encodings\n\u2022 First,therearethecombiningcharactersdesignatedascombiningoverlay\nintheUnicodeStandard,like<\u25cc\u0334>combiningtildeoverlayatU+0334or\n<\u25cc\u0335>combiningshortstrokeoverlayatU+0335.Therearemanycharac-\ntersthatlookliketheyareprecomposedwithsuchanoverlay,forexample\n<\u026b \u1d6c \u1d6d \u1d71>or<\u019a \u0268 \u0249 \u024d>,oralsothe exampleof<\u00f8> givenatthe startofthis\nsection.However,theyarenotdecomposedinNFDnormalization.\n\u2022 Second, the same situation also occurs with combining characters desig-\nnated as combining hook, like <\u25cc\u0321> combining palatalized hook below\nat U+0321. This element seems to occur in precomposed characters like\n<\u1d80\u1d81\u1d82\u1d84>.However,theyarenotdecomposedinNFDnormalization.\nTo harmonize the encoding in these cases it is not sufficient to use Unicode\nnormalization. Additional checks are necessary, for example by using orthogra-\nphyprofiles(seeChapter7).\n3.11 Pitfall: Encodings\nBeforewediscussthepitfallofdifferentfileformatsinSection3.12,itispertinent\ntopointoutthatthecommonusageofthetermencodingunfortunatelydoesnot\ndistinguishbetweenencodedsequencesofcodepointsandtextencodedasbitpat-\nterns.Recall,acodepointissimplyanumericalrepresentationofsomedefined\nentity;inotherwords,acodepointisacharacterencoding-specificuniqueidenti-\nfierorID.IntheUnicodeStandardencoding,codepointsarenumbersthatserve\nas unique identifiers, each of which is associated with a set of character prop-\nertiesdefinedbytheUnicodeConsortiumintheUnicodeCharacterDatabase.18\nThenumberofeachcodepointcanbeencoded invariousformats,includingasa\ndecimalinteger(e.g.112),asan8-bitbinarysequence(01110000)orhexadecimal\n(0070).ThisexampleUnicodecodepoint,U+0070,representslatinsmallletter\npanditsassociatedUnicodeproperties,suchasitbelongstothecategoryLetter,\nLowercase[Ll],intheBasicLatinblock,andthatitstitlecaseanduppercaseis\nassociatedwithcodepointU+0050.19\nThe other meaning of encoding has to do with the fact that computers rep-\nresent data and instructions in patterns of bits. A bit pattern is a combination\nofbinarydigitsarrangedinasequence.Andhowthesesequencesarecarvedup\nintobitpatternsisdeterminedbyhowtheyareencoded.Thusthetermencoding\nisusedforbothsequencesofcodepointsandtextencodedasbitpatterns.Hence\n18https://www.unicode.org/ucd/\n19SeealsoChapter2.\n31 3Unicodepitfalls\na Unicode-aware programmer might prefer to say that UTF-8, UTF-16, etc., are\nUnicodeencodingsystemsbecausetheydeterminehowsequencesofbitpatterns\naredetermined,whicharethenmappedtocharacters.20Theterminologicalissue\nhereisthattheUnicodeStandardintroducesalayerofindirectionbetweenchar-\nacters and bit patterns, i.e. the code point, which can be encoded differently by\ndifferentencodingsystems.\nNote also that all computer character encodings include so-called control\ncharacters,whicharenon-printablesometimesaction-inducingcharacters,such\nasthenullcharacter,bellcode,backspace,escape,delete,andlinefeed.Control\ncharacterscaninteractwithencodingschemes.Forexample,someprogramming\nlanguagesmakeuseofthenullcharactertomarktheendofastring.Linebreaks\nare part of the text, and as such as covered by the Unicode Standard. But they\ncanbeproblematicbecauselinebreaksdifferfromoperatingsystemtooperating\nsysteminhowtheyareencoded.ThesevariantsarediscussedinSection3.12.\n3.12 Pitfall: File formats\nUnicode is a character encoding standard, but characters of course appear in-\nside some kind of computer file. The most basic Unicode-based file format is\npureline-basedtext,i.e.stringsofUnicode-encodedcharactersseparatedbyline\nbreaks (note that these line breaks are what for most people intuitively corre-\nsponds to paragraph breaks). Unfortunately, even within this apparently basic\nsetting there exists a multitude of variants. In general these different possibili-\nties are well-understood in the software industry, and nowadays they normally\ndonotleadtoanyproblemsfortheenduser.However,therearesomesituations\ninwhichauserissuddenlyconfrontedwithcrypticquestionsintheuserinter-\nfaceinvolvingabbreviationslikeLF,CR,BE,LEorBOM.Mostprominentlythis\noccurs with exporting or importing data in several software applications from\nMicrosoft. Basically, there are two different issues involved. First, the encoding\noflinebreaksand,second,theencodingoftheUnicodecharactersintocodeunits\nandtherelatedissueofendianness.\n20UTFstandsforUnicodeTransformationFormat.Itamethodfortranslatingnumbersintobi-\nnarydataandviceversa.ThereareseveraldifferentUTFencodingformats,e.g.UTF-8isa\nvariable-lengthencodingthatuses8-bitcodeunits,iscompatiblewithASCII,andiscommon\nontheweb.UTF-16isalsovariable-length,uses16-bitcodeunits,andisusedsystem-internally\nbyWindowsandJava.SeefurtherdiscussionunderCodeunits inSection3.12.Formorein-\ndepth discussion, refer to the Unicode Frequently Asked Questions and additional sources\ntherein:http://unicode.org/faq/utf_bom.html.\n32 3.12Pitfall:Fileformats\nLinebreaks\nTheissuewithlinebreaksoriginatedwiththeinstructionsnecessarytodirect\naprintingheadofaphysicalprintertoanewline.Thisinvolvestwomovements,\nknownascarriagereturn(CR,returningtheprintingheadtothestartofthe\nlineonthepage)andlinefeed(LF,movingtheprintingheadtothenextlineon\nthe page). Physically, these are two different events, but conceptually together\nthey form one action. In the history of computing, various encodings of line\nbreaks have been used (e.g. CR+LF, LF+CR, only LF, or only CR). Currently, all\nUnix and Unix-derived systems use only LF as code for a line break, while soft-\nware from Microsoft still uses a combination of CR+LF. Today, most software\napplicationsrecognizebothoptions,andareabletodealwitheitherencodingof\nlinebreaks(untilratherrecentlythiswasnotthecase,andusingthewrongline\nbreakswouldleadtounexpectederrors).Ourimpressionisthatthereisastrong\ntendency in software development to standardize on the simpler \u201conly LF\u201d en-\ncodingforlinebreaks,andwesuggestthateverybodyshouldusethisencoding\nwheneverpossible.\nCodeunits\nTheissuewithcodeunitsstemsfromthequestionhowtoseparateastreamof\nbinary ones and zeros, i.e. bits, into chunks representing Unicode characters. A\ncodeunitisthesequenceofbitsusedtoencodeasinglecharacterinanencoding.\nThe Unicode Standard offers three different approaches, called UTF-32, UTF-16\nand UTF-8, that are intended for different use cases.21 The details of this issue\nare extensively explained in section 2.5 of the Unicode Core Specification (The\nUnicodeConsortium2018).\nBasically,UTF-32encodeseachcharacterin32bits(32binaryunits,i.e.32ze-\nrosorones)andisthemostdisk-space-consumingvariantofthethree.However,\nit is the most efficient encoding processing-wise, because the computer simply\nhastoseparateeachcharacterafter32bits.\nIncontrast,UTF-16usesonly16bitspercharacter,whichissufficientforthe\nlargemajorityofUnicodecharacters,butnotforallofthem.Aspecialsystemof\nsurrogatesisdefinedwithintheUnicodeStandardtodealwiththeseadditional\ncharacters.Theeffectisamoredisk-spaceefficientencoding(approximatelyhalf\n21ThelettersUTFstandforUnicodeTransformationFormat,butthenotionof\u201ctransforma-\ntion\u201disalegacynotionthatdoesnothavemeaninganymore.Nevertheless,thedesignation\nUTF(incapitals)hasbecomeanofficialstandarddesignation,butshouldprobablybestberead\nassimply\u201cUnicodeFormat\u201d.\n33 3Unicodepitfalls\nthe size), while adding a limited computational overhead to manage the surro-\ngates.\nFinally,UTF-8isamorecomplexsystemthatdynamicallyencodeseachchar-\nacterwiththeminimallynecessarynumberofbits,choosingeither8,16or32bits\ndepending on the character. This represents again a strong reduction in space\n(particularly due to the high frequency of data using erstwhile ASCII charac-\nters,whichneedonly8bits)attheexpenseofevenmorecomputationnecessary\nto process such strings. However, because of the ever growing computational\npower of modern machines, the processing overhead is in most practical situa-\ntions a non-issue, while saving on space is still useful, particularly for sending\ntexts over the Internet. As a result, UTF-8 has become the dominant encoding\nontheWorldWideWeb.WesuggestthateverybodyusesUTF-8astheirdefault\nencoding.\nA related problem is a general issue about how to store information in com-\nputer memory, which is known as endianness. The details of this issue go be-\nyondthescopeofthisbook.Itsufficestorealizethatthereisadifferencebetween\nbig-endian(BE)storageandlittle-endian(LE)storage.TheUnicodeStandard\noffersapossibilitytoexplicitlyindicatewhatkindofstorageisusedbystarting\nafilewithaso-calledbyteordermark(BOM).However,theUnicodeStandard\ndoesnotrequiretheuseofBOM,preferringothernon-Unicodemethodstosig-\nnal to computers which kind of endianness is used. This issue only arises with\nUTF-32andUTF-16encodings.WhenusingthepreferredUTF-8,usingaBOMis\ntheoretically possible, but strongly dispreferred according to the Unicode Stan-\ndard. We suggest that everyone tries to prevent the inclusion of BOM in their\ndata.\n3.13 Pitfall: Incomplete implementations\nAnother pitfall that we encounter when using the Unicode Standard is its in-\ncompleteimplementationindifferentstandardsandprogramminglanguages,e.g.\nSQL,XML,XLST,Python.Forexample,althoughtheUnicodeStandardmandates\nthat the comparison of Unicode text be done using normalized text, this is not\nthe case with the equality operator \u201c==\u201d in Python. Furthermore, it is not al-\nwaystransparentwhattheoperatingsystemorspecificsoftwareapplicationsdo\nwhen text is being copied and pasted. For example, copy and pasting the char-\nactersequenceU+0061latinsmalllettera<a>andU+0301combiningacute\naccent<\u25cc\u0301>,visually<\u00e1>,intothetexteditorTextWranglerleavesthesequence\ndecomposedastwocharacters.Butwhenpastingthedecomposedsequenceinto\n34 3.14Recommendations\nRStudio, and other software programs, the sequence becomes precomposed as\nU+00E1latinsmallletterawithacute,i.e.<\u00e1>.\n3.14 Recommendations\nSummarizingthepitfallsdiscussedinthischapter,weproposethefollowingrec-\nommendations:\n\u2022 Topreventstrangeboxesinsteadofniceglyphs,alwaysinstallafewfonts\nwithalargeglyphcollectionandatleastonefall-backfont(seeSection3.4).\n\u2022 Unexpected visual impressions of symbols do not necessarily mean that\nthe actual encoding is wrong. It is mostly a problem of faulty rendering\n(seeSection3.5).\n\u2022 Donottrustthenamesofcodepointsasadefinitionofthecharacter(see\nSection3.7).AlsodonottrustUnicodeblocksasastrategytofindspecific\ncharacters(seeSection3.6).\n\u2022 Toensureconsistentencodingoftexts,applyUnicodenormalization(NFC\norNFD,seeSection3.9).\n\u2022 Topreventremaininginconsistenciesafternormalization,forexamplestem-\nmingfromhomoglyphs(seeSection3.8)orfrommissingcanonicalequiv-\nalenceintheUnicodeStandard(seeSection3.10),useorthographyprofiles\n(seeChapter7).\n\u2022 Todealwithtailoredgraphemeclusters(Section3.3),useUnicodeLocale\nDescriptions,ororthographyprofiles(seeChapter7).\n\u2022 As a preferred file format, use Unicode Format UTF-8 in Normalization\nForm Composition (NFC) with LF line endings, but without byte order\nmark (BOM), whenever possible (see Section 3.12). This last nicely cryp-\nticrecommendationhasT-shirtpotential:\nIpreferit\nUTF-8NFCLFnoBOM\n35  4 The International Phonetic Alphabet\nIn this chapter we present a brief history of the IPA (Section 4.1), which dates\nback to the late 19th century, not long after the creation of the first typewriter\nwith a QWERTY keyboard. An understanding of the IPA and its premises and\nprinciples (Section 4.2) leads to a better appreciation of the challenges that the\nInternational Phonetic Association faced when digitally encoding the IPA\u2019s set\nof symbols and diacritics (Section 4.3). Occurring a little over a hundred years\nafter the inception of the IPA, its encoding was a major challenge (Section 4.4);\nmany linguists have encountered the pitfalls when the two are used together\n(Chapter5).\n4.1 Brief history\nEstablished in 1886, the international phonetic association (henceforth As-\nsociation) has long maintained a standard alphabet, the international pho-\nnetic alphabet or IPA, which is a standard in linguistics to transcribe sounds\nofspokenlanguages.Itwasfirstpublishedin1888asaninternationalsystemof\nphonetic transcription for oral languages and for pedagogical purposes. It con-\ntainedphoneticvaluesforEnglish,FrenchandGerman.Diacriticsforlengthand\nnasalizationwerealreadypresentinthisfirstversion,andthesamesymbolsare\nstillusedtoday.\nOriginally, the IPA was a list of symbols with pronunciation examples using\nwordsindifferentlanguages.In1900thesymbolswerefirstorganizedintoachart\nandweregivenphoneticfeaturelabels,e.g.formannerofarticulationamongoth-\nersplosives,nasales,fricatives,forplaceofarticulationamongothersbronchiales,\nlaryngales,labialesandforvowelse.g.ferm\u00e9es,mi-ferm\u00e9es,mi-ouvertes,ouvertes.\nThroughout the last century, the structure of the chart has changed with in-\ncreases in phonetic knowledge.Thus, similar to notational systems in other sci-\nentificdisciplines,theIPAreflectsfactsandtheoriesofphoneticknowledgethat\nhavedevelopedovertime.ItisnaturalthenthattheIPAismodifiedoccasionally\ntoaccommodatescientificinnovationsanddiscoveries.Infact,updatesarepart 4TheInternationalPhoneticAlphabet\noftheAssociation\u2019smandate.ThesechangesarecapturedinrevisionstotheIPA\nchart.1\nOver the years there have been severalrevisions, but mostly minor ones. Ar-\nticulationlabels\u2013whatareoftencalledfeatureseventhoughtheIPAdeliberately\navoidsthisterm\u2013havechanged,e.g.termslikelips,throatorrolledarenolonger\nused. Phonetic symbol values have changed, e.g. voiceless is no longer marked\nby <h>. Symbols have been dropped, e.g. the caret diacritic denoting \u2018long and\nnarrow\u2019 is no longer used. And many symbols have been added to reflect con-\ntrastivesoundsfoundintheworld\u2019sverydiversephonologicalsystems.Theuse\nof the IPA is guided by principles outlined in the Handbook of the International\nPhonetic Association (The International Phonetic Association 1999), henceforth\nsimplycalledHandbook.\nToday, the IPA is designed to meet practical linguistic needs and is used to\ntranscribe the phonetic or phonological structure of languages. It is also used\nincreasingly as a foreign language learning tool, as a standard pronunciation\nguideandasatoolforcreatingpracticalorthographiesofpreviouslyunwritten\nlanguages.TheIPAsuitsmanylinguists\u2019needsbecause:\n\u2022 itisintendedtobeasetofsymbolsforrepresentingallpossiblesoundsin\ntheworld\u2019s(spoken)languages;\n\u2022 itscharthasalinguisticbasis(andspecificallyaphonologicalbias)rather\nthanjustbeingageneralphoneticnotationscheme;\n\u2022 itssymbolscanbeusedtorepresentdistinctivefeaturecombinations;2\n\u2022 its chart provides a summary of linguists\u2019 agreed-upon phonetic knowl-\nedge.\nSeveral styles of transcription with the IPA are possible, as illustrated in the\nHandbook, and they are all valid.3 Therefore, there are different but equivalent\ntranscriptions,orasnotedbyLadefoged(1990:64),\u201cperhapsnowthattheAsso-\nciationhasbeenexplicitinitseclecticapproach,outsiderstotheAssociationwill\nnolongerspeakoftheIPAtranscriptionofagivenphenomenon,asiftherewere\nonlyoneapprovedstyle.\u201dClearlynotallphoneticiansagree,noraretheylikely\n1Foradetailedhistory,wereferthereaderto:https://en.wikipedia.org/wiki/History_of_the_\nInternational_Phonetic_Alphabet.\n2Althoughthechartusestraditionalmannerandplaceofarticulationlabels,thesymbolscan\nbeusedasarepresentationofanydefinedbundleoffeatures,binaryorotherwise,todefine\nphoneticdimensions.\n3Foranillustrationofthedifferences,seethe29languagesandtheirtranscriptionsintheIllus-\ntrationsoftheIPA(TheInternationalPhoneticAssociation1999:41\u2013154).\n38 4.2Premisesandprinciples\ntoevercompletelyagree,onallaspectsoftheIPAorontranscriptionapproaches\nandpracticesingeneral.Asnotedabove,therehavebeenseveralrevisionsinthe\nIPA\u2019slonghistory,butthecurrentversion(2005)isstrikinglysimilartothe1926\nversion,whichshowstheviabilityoftheIPAasacommonstandardforlinguistic\ntranscription.\n4.2 Premises and principles\nPremises\nAnyIPAtranscriptionisbasedontwopremises:(i)thatitispossibletodescribe\nthe acoustic speech signal (sound waves) in terms of sequentially ordered dis-\ncrete segments, and, (ii) that each segment can be characterized by an articula-\ntorytarget.\nOnce spoken language data are segmented, the IPA provides symbols to un-\nambiguously represent phonetic details. However, since phonetic detail could\npotentially include anything, e.g. something like \u201cdeep voice\u201d, the IPA restricts\nphoneticdetailtolinguisticallyrelevantaspectsofspeech.Phonologicalconsid-\nerations thus inextricably play a roll in transcription. In other words, phonetic\nobservationsbeyondquantitativeacousticanalysisarealwaysmadeintermsof\nsomephonologicalframework.\nToday, the IPA chart reflects a linguistic theory grounded in principles of\nphonological contrast and in knowledge about the attested linguistic variation.\nThisfactisstatedexplicitlyinseveralplaces,includingintheReportonthe1989\nKielconventionpublishedintheJournaloftheInternationalPhoneticAssociation\n(Roach1989:67\u201368):\nThe IPA is intended to be a set of symbols for representing all the possi-\nble sounds of the world\u2019s languages. The representation of these sounds\nuses a set of phonetic categories which describe how each sound is made.\nThesecategoriesdefineanumberofnaturalclassesofsoundsthatoperate\ninphonologicalrulesandhistoricalsoundchanges.ThesymbolsoftheIPA\nareshorthandwaysofindicatingcertainintersectionsofthesecategories.\nandintheHandbook (TheInternationalPhoneticAssociation1999:18):\n[\u2026] a symbol can be regarded as a shorthand equivalent to a phonetic de-\nscription, and a way of representing the contrasting sounds that occur in\na language. Thus [m] is equivalent to \u201cvoiced bilabial nasal\u201d, and is also a\n39 4TheInternationalPhoneticAlphabet\nway of representing one of the contrasting nasal sounds that occur in En-\nglishandotherlanguages.[\u2026]Whenasymbolissaidtobesuitableforthe\nrepresentation of sounds in two languages, it does not necessarily mean\nthatthesoundsinthetwolanguagesareidentical.\nFromitsearliestdaystheAssociationaimedtoprovide\u201caseparatesignforeach\ndistinctivesound;thatis,foreachsoundwhich,beingusedinsteadofanother,in\nthe same language, can change the meaning of a word\u201d (The International Pho-\nneticAssociation1999:27).Distinctivesoundsbecamelaterknownasphonemes\nand the IPA has developed historically into a notational device with a strictly\nsegmentalphonemicview.Aphonemeisanabstracttheoreticalnotionderived\nfrom an acoustic signal as produced by speakers in the real world. Therefore\ntheIPAcontainsanumberoftheoreticalassumptionsaboutspeechandhowto\ntranscribespeechinwrittenform.\nPrinciples\nEssentially, transcription has two parts: a text containing symbols and a set of\nconventions for interpreting those symbols (and their combinations). The sym-\nbols of the IPA distinguish between letter-like symbols and diacritics (symbol\nmodifiers). The use of the letter-like symbols to represent a language\u2019s sounds\nis guided by the principle of contrast; where two words are distinguishable by\nphonemic contrast, those contrasts should be transcribed with different letter\nsymbols (and not just diacritics). Allophonic distinction falls under the rubric\nofdiacritically-distinguishedsymbols,e.g.thedifferenceinEnglishbetweenan\naspirated/p/in[p\u02b0\u00e6t]andanunreleased/p/in[stop\u031a].\n\u2022 Differentletter-likesymbolsshouldbeusedwheneveralanguageemploys\ntwosoundscontrastively.\n\u2022 Whentwosoundsinalanguagearenotknowntobecontrastive,thesame\nsymbol should be used to represent these sounds. Diacritics may be used\ntodistinguishdifferentarticulationswhennecessary.\nYet,insomesituationsdiacriticsareusedtomarkphonemiccontrasts.TheHand-\nbook recommendstolimittheuseofphonemicdiacriticstothefollowingsitua-\ntions:\n\u2022 denotinglength,stressandpitch;\n\u2022 obviating the design of a (large) number of new symbols when a single\ndiacriticsuffices(e.g.nasalizedvowels,aspiratedstops).\n40 4.2Premisesandprinciples\nTheinterpretationoftheIPAsymbolsinspecificusageisnottrivial.Although\nthe articulatory properties of the IPA symbols themselves are rather succinctly\nsummarizedbythenormativedescriptionintheHandbook,itiscommoninprac-\ntical applications that the transcribed symbols do not precisely represent the\nphonetic value of the sounds that they represent. So an IPA symbol <t> in one\ntranscription is not always the same as an IPA <t> in another transcription (or\neven within a single transcription). The interpretation of any particular <t> is\nmostly a language-specific convention (or even resource-specific and possibly\nevencontext-specific),afactwhich\u2013unfortunately\u2013isinmostcasesnotmade\nexplicitbyusersoftheIPA.\nThere are different reasons for this difficulty to interpret IPA symbols, all of-\nficially sanctioned by the IPA. An important principle of the IPA is that differ-\nentrepresentationsresultingfromdifferentunderlyinganalysesareallowed.Be-\ncausetheIPAdoesnotprovidephonologicalanalysesforspecificlanguages,the\nIPAdoesnotdefineasinglecorrecttranscriptionsystem.Rather,theIPAaimsto\nprovide a resource that allows users to express any analysis so that it is widely\nunderstood. Basically, the IPA allows for both a narrow phonetic transcription\nand a broad phonological transcription. A narrow phonetic transcription may\nfreely use all symbols in the IPA chart with direct reference to their phonetic\nvalue,i.e.thetranscribercanindicatewiththesymbols<\u014b\u0361m>thatthephonetic\nvalue of the attested sound is a simultaneous labial and velar closure which is\nvoicedandcontainsnasalairflow,independentlyofthephonemicstatusofthis\nsoundinthelanguageinquestion.\nIncontrast,thebasicgoalofabroadphonemictranscriptionistodistinguish\nallwordsinalanguagewithaminimalnumberoftranscriptionsymbols(Aber-\ncrombie 1964: 19). A phonemic transcription includes the conventions of a par-\nticular language\u2019s phonological rules. These rules determine the realization of\nthat language\u2019s phonemes. For example, in the transcription of German, Dutch,\nEnglish and French a symbol <t> might be used for the voiceless plosive in the\nalveolar and dental areas. This symbol is sufficient for a succinct transcription\noftheselanguagesbecausethereisnofurtherphonemicsubdivisionsinthisdo-\nmainineitheroftheselanguages.However,thelanguage-specificrealizationof\nthis consonant is closer to [t\u02b0\u032a], [t], [t\u02b0] and [t]\u032a, respectively. Similarly, the five\nvowelsofGreekcanberepresentedphonemicallyinIPAas/ieaou/,thoughpho-\nnetically they are closer to [i\u03b5a\u0254u]. The Japanese five-vowel system can also be\ntranscribedinIPAas/ieaou/,whilethephonetictargetsinthiscasearecloserto\n[ieao\u026f].\n41 4TheInternationalPhoneticAlphabet\nNotealsothattherecanbedifferentsystemsofphonemictranscriptionforthe\nsame variety of a language, so two different resources on the \u201csame\u201d language\nmightusedifferentsymbolsthatrepresentthesamesound.Thedifferencesmay\nresult from the fact that more than one phonetic symbol may be appropriate\nfor a phoneme, or the differences may be due to different phonemic analyses,\ne.g. Standard German\u2019s vowel system is arguably contrastive in length, tense-\nness or vowel quality. Finally, even within a single phonemic transcription a\nspecific symbol can have different realizations because of allophonic variation\nwhichmightnotbeexplicitlytranscribed.\nIn sum, there are three different reasons why phonemically-based IPA tran-\nscriptionisdifficulttointerpret:\n\u2022 Asymbolrepresentsthephonemicstatus,andnotnecessarilytheprecise\nphoneticrealization. So,differenttranscriptions might use the same sym-\nbolfordifferentunderlyingsounds.\n\u2022 Anysymbolthatisusedforaspecificphonemeisnotnecessarilyunique,\nsodifferenttranscriptionsmightusedifferentsymbolsforthesameunder-\nlyingsound.\n\u2022 Allophonicvariationcanbedisregardedinphonemictranscription,sothe\nsamesymbolwithinasingletranscriptioncanrepresentdifferentsounds.\nIdeally, all such implicit conventions of a phonemic transcription would be\nexplicitly codified. This could very well be performed by using an orthography\nprofile (see Chapter 7), linking the selected phonemic transcription symbols to\nnarrowphonetictranscriptions,possiblyalsoincludingspecificationsofcontex-\ntualinterpretation.\n4.3 IPA encodings\nIn 1989, an IPA revision convention was held in Kiel, Germany. As in previous\nmeetings,therewerechangesmadetotherepertoireofphoneticsymbolsinthe\nIPA chart, which reflected what had been discovered, described and cataloged\nby linguists about the phonological systems in the world\u2019s languages in the in-\nterim.Personalcomputerswerealsobecomingmorecommonplace,andlinguists\nwereusingthemtocreatedatabases.AcogentexampleistheUCLAPhonologi-\ncalSegmentInventoryDatabase(UPSID;Maddieson1984),whichwasexpanded\n(Maddieson & Precoda 1990) and then encoded and distributed in a computer\n42 4.3IPAencodings\nprogram(Maddieson&Precoda1992).4 TheprogrammersusedonlyASCIIchar-\nacters to maximize compatibility (e.g. <kpW> for \u00bbkp\u02b7\u2026), but were faced with\nunavoidablearbitrarymappingsbetweenASCIIlettersandpunctuation,andthe\nmorethan900segmenttypesdocumentedintheirsampleofworld\u2019slanguages\u2019\nphonological systems. The developers devised a system of base characters with\nsecondary diacritic marks (e.g. in the previous example <kp>, the base charac-\nter, is modified with <W>). This encoding approach is also used in SAMPA and\nX-SAMPA (Section 4.3) and in the ASJP.5 But before UPSID, SAMPA and ASJP,\nIPAwasencodedwithnumbers.\nIPANumbers\nPrior to the Kiel Convention for the modern revision of the IPA in 1989, Wells\n(1987) collected and published practical approaches to coded representations of\ntheIPA,whichdealtmainlywiththeassignmentofcharactersonthekeyboardto\nIPAsymbols.Theprocessofassigningstandardizedcomputercodestophonetic\nsymbols was given to the workgroup on computer coding (henceforth working\ngroup)attheKielConvention.Thisworkinggroupwasgiventhefollowingtasks\n(Esling1990;Esling&Gaylord1993):\n\u2022 determininghowtorepresenttheIPAnumerically\n\u2022 developingasetofnumberstorefertotheIPAsymbolsunambiguously\n\u2022 providing each symbol a unique name (intended to provide a mnemonic\ndescriptionofthatcharacter\u2019sshape)\nTheidentificationofIPAsymbolswithuniqueidentifierswasafirststepinfor-\nmalizing the IPA computationally because it would give each symbol an unam-\nbiguous numerical identifier called an ipa number. The numbering system was\nto be comprehensive enough to support future revisions of the IPA, including\nsymbol specifications and diacritic placement. The application of diacritics was\nalsotobemadeexplicit.\nAlthoughtheAssociationhadneverofficiallyapprovedasetofnamesforthe\nIPA symbols, each IPA symbol received a unique ipa name. Many symbols al-\nreadyhadaninformalname(ortwo)usedbylinguists,butconsensusonsymbol\nnames was growing due to the recent publication of the Phonetic Symbol Guide\n4ItcouldbeinstalledviafloppydiskonanIBMPC,orcompatible,runningDOSwith1MBfree\ndiskspaceand360KavailableRAM.\n5SeetheASJPusecaseintheonlinesupplementarymaterialstothisbook:https://github.com/\nunicode-cookbook/recipes.\n43 4TheInternationalPhoneticAlphabet\n(Pullum&Ladusaw1986).ThusmostoftheIPAsymbolnamesweretakenfrom\nthatsource(TheInternationalPhoneticAssociation1999:31).\nThe working group decided insightfully that the computing-coding conven-\ntion for the IPA should be independent of computer environments or formats,\ni.e. the ipa number was not meant to be encoded at the bit pattern level. The\nworkinggroupreport\u2019sdeclarationincludesthefollowingexplanatoryremarks\n(Roach1989:82):\nThe recommendation of a 7-bit ASCII or 8-bit extended-ASCII coding sys-\ntemwouldbeshort-sightedinviewofdevelopmenttowards16-bitand32-\nbitprocessors.Infact,anyspecificrecommendationswouldtietheAssocia-\ntiontoastageoftechnologicaldevelopmentwhichisboundtobeoutdated\nlongbeforethenextrevisionofthehandbook.\nThecodingconventionwasnotmeanttoaddresstheengineeringaspectsofthe\nactual encoding in computers (cf. Anderson (1984)). However, it was meant to\nserveasabasisforainterchangestandardforcreatingmappingtablesfromvari-\nouscomputerencodings,fonts,phonetic-character-setsoftware,etc.,tocommon\nIPAnumbers,andthereforesymbols.6\nFurthermore,theassignmentofcomputercodestoIPAsymbolswasmeantto\nrepresent an unbiased formulation. The Association here played the role of an\ninternationaladvisorybodyanditstatedthatitshouldnotrecommendapartic-\nular existing system of encoding. In fact, during this time there were a number\nofcodingsystemsused(seeSection1.2),butnoneofthemhadadominantinter-\nnationalposition.Thedifferencesbetweensystemswerealsoeithertoogreator\ntoosubtletowarrantanattemptatcombiningthem(Roach1989).\nTheworkinggroupassignedeachIPAsymboltoauniquethree-digitIPAnum-\nber.Encodedinthisnumberschemeimplicitlyisinformationaboutthestatusof\neach symbol (see below). The IPA numbers were listed with the IPA symbols\nandtheywerealsoillustratedinIPAchartform(seeEsling&Gaylord(1993:84)\norTheInternationalPhoneticAssociation(1999:App.2)).Thenumberswereas-\nsigned in linear order (e.g. [p] 101, [b] 102, [t] 103\u2026) following the IPA revision\nof 1989 and its update in 1996. Although the numbering scheme still exists, in\npracticeitissupersededbytheUnicodecodificationofsymbols.\n6Remember, at this time in the late 1980s there was no stable multilingual computing envi-\nronment.Butsomesolutionwasneededbecausescholarswereincreasinglyusingpersonal\ncomputersfortheirresearchandmanywerequicklyadoptingelectronicmailordiscussion\nboards like Usenet as a medium for international exchanges. Most of these systems ran on\n8-bithardwaresystemsusinga7-bitASCIIcharacterencoding.\n44 4.3IPAencodings\nThe working group made the decision that no IPA symbol, past or present,\ncouldbeignored. Thecomprehensiveinclusion ofallIPAsymbolswas toantic-\nipate the possibility that some symbols might be added, withdrawn, or reintro-\nduced into current or future usage. For example, in the 1989 revision voiceless\nimplosives < \u01a5, \u01ad, \u0188, \u0199, \u02a0 > were added; in the 1993 revision they were removed.\nLigatureslike<\u02a7,\u02a4>areincludedasformerlyrecognizedIPAsymbols;theyare\nassigned to the 200 series of IPA numbers as members of the group of symbols\nformerlyrecognizedbytheIPA.Toensurebackwardscompatibility,legacyIPA\nsymbols would retain an IPA number and an IPA name for reference purposes.\nAs we discuss below, this decision is later reflected in the Unicode Standard as\nmanylegacyIPAsymbolsstillresideintheIPAExtensionsblock.\nTheIPAnumberisexpressedasathree-digitnumber.Thefirstdigitindicates\nthesymbol\u2019scategory(Esling1990;Esling&Gaylord1993):\n\u2022 100sforacceptedIPAconsonants\n\u2022 200sforformerIPAconsonantsandnon-IPAsymbols\n\u2022 300sforvowels\n\u2022 400sforsegmentaldiacritics\n\u2022 500sforsuprasegmentalsymbols\n\u2022 600s-800sforfuturespecifications\n\u2022 900sforescapesequences\nAfter a symbol is categorized, it is assigned a number sequentially, e.g. [i]\n301, [e] 302, [\u025b] 303. The system allows for the addition of new symbols within\nthevariousseriesbyappendingthem,e.g.[\u2c71]184.Formernon-IPAsymbols(or\noften-usedbutnon-officialIPAsymbols)forconsonants,vowelsanddiacriticsare\nnumbered from 299 backwards. For example, the voiceless and voiced postalve-\nolaraffricatesandfricatives<\u010d,\u01f0,\u0161,\u017e>areassignedtheIPAnumbers299,298,\n297and296,respectively,becausetheyarenotsanctionedIPAsymbols.\nThe assignment of the IPA numbers to IPA symbols provided the basis for\nuniquely identifying the set of past and present IPA symbols as a type of com-\nputationalrepresentationalstandardoftheIPA.WithineachrevisionoftheIPA,\nthecodingdefinesaclosedandclearlydefinedsetofcharacters.Thebenefitsof\nthisstandardizationareclearinatleasttwoways:itisusedintranslationtables\nthat reference ASCII representations of the IPA, and this early computational\nrepresentation of the IPA became the basis for X-SAMPA and for the inclusion\noftheIPAintotheUnicodeStandardversion1.0.\n45 4TheInternationalPhoneticAlphabet\nSAMPAandX-SAMPA\nTruetotheworkinggroup\u2019saim,theIPAnumbersprovidedamechanismforan\ninterchangestandardforcreatingmappingtablestovariouscomputerencodings.\nForexample,theIPAcodingsystemwasusedasamappingsysteminthecreation\nofSAMPA(Wellsetal.1992),anASCIIrepresentationoftheIPAsymbols.\nForalongtime,linguists,likeallothercomputerusers,werelimitedtoASCII-\nencoded 7-bit characters, which only includes Latin characters, numbers and\nsomepunctuationandsymbols.Restrictedtothesestandardcharactersetsthat\nlacked IPA support or other language-specific graphemes that they needed, lin-\nguists devised their own solutions.7 For example, some chose to represent un-\navailablegraphemeswithsubstitutes,e.g.thecombinationof<ng>torepresent\n<\u014b>.Tech-savvylinguistsredefinedselectedcharactersfromacharacterencod-\ning by mapping custom-made fonts to specific code points.8 However, one lin-\nguist\u2019selectronictextwouldnotrenderproperlyonanotherlinguist\u2019scomputer\nwithoutaccesstothesamefont.Furthermore,iftwocharacterencodingsdefined\ntwo character sets differently, then data could not be reliably and correctly dis-\nplayed.Thisisacommonlyencounteredexampleofthenon-interoperabilityof\ndataanddataformats.\nOnesolutionwastheASCII-ificationoftheIPA,whichsimplyinvolveddefin-\ning keyboard-able sequences consisting of ASCII combinations as IPA symbols.\nForexample,Wells(1987)providesanin-depthdescriptionofIPAcodingsfrom\ncountry-to-country. Later ASCII-IPAs include Kirshenbaum (created in 1992 in\naUsenetgroupandnamedafteritsleaddeveloperwhowasatHewlett-Packard\nLaboratories)andWorldbet(publishedbyHieronymus(1993),whowasatAT&T\nLaboratories).ThemostsuccessfuleffortwasSAMPA(SpeechAssessmentMeth-\nodsPhoneticAlphabet),whichwascreatedbetween1988\u20131991inEuropetorepre-\nsentIPAsymbolswithASCIIcharactersequences(Wells1987;Wellsetal.1992),\nusing e.g. <p\\> for [\u0278]. SAMPA was developed by a group of speech scientists\nfromninecountriesinEuropeanditconstitutedtheASCII-IPAsymbolsneeded\nforphonemictranscriptionoftheprincipalEuropeanlanguages(Wells1995).It\nisstillwidelyusedinlanguagetechnology.\nTwoproblemswithSAMPAarethat(i)itisonlyapartialencodingoftheIPA\nand (ii) it encodes different languages in separate data tables, instead of using\n7Earlyworkaddressingtheneedforauniversalcomputingenvironmentforwritingsystems\nandtheircomputationalcomplexityisdiscussedinSimons(1989).Amorerecentsurveyof\npracticalrecommendationsforlanguageresources,includingnotesonencoding,canbefound\ninBird&Simons(2003).\n8Forexample,SIL\u2019spopularfontSILIPA1990.\n46 4.4Theneedforasinglemultilingualenvironment\na universal alphabet, like IPA. SAMPA tables were developed as part of a Euro-\npean Commission-funded project to address technical problems like electronic\nmailexchange(whatisnowsimplycalledemail).SAMPAisessentiallyahackto\nwork around displaying IPA characters, but it provided speech technology and\notherfieldsabasisthathasbeenwidelyadoptedandoftenstillusedincode.So,\nSAMPAisacollectionoftablestobecompared,insteadofalargeuniversaltable\nrepresentingalllanguages.\nAnextendedversionofSAMPA,calledX-SAMPA,setouttoincludeeverysym-\nbol,includingalldiacritics,intheIPAchart(Wells1995).X-SAMPAisconsidered\nmoreuniversallyapplicablebecauseitconsistsofonetablethatencodesallchar-\nacters in IPA. In line with the principles of the IPA, SAMPA and X-SAMPA in-\ncludearepertoireofsymbols.Thesesymbolsareintendedtorepresentphonemes\nratherthanallallophonicdistinctions.Additionally,bothASCII-ificationsofIPA\n\u2013SAMPAandX-SAMPA\u2013are(reportedly)uniquelyparsable(Wells1995).How-\never,liketheIPA,X-SAMPAhasdifferentnotationsforencodingthesamepho-\nneticphenomena(cf.Section 5.5).\nSAMPAandX-SAMPAhavebeenwidelyusedforspeechtechnologyandasan\nencodingsystemincomputationallinguistics.Infact,theyarestillusedinpop-\nularsoftwarepackagesthatrequireASCIIinput,e.g.RuG/L04andSplitsTree4.9\n4.4 The need for a single multilingual environment\nIn hindsight it is easy to lose sight of how impactful 30 years of technological\ndevelopmenthavebeenonlinguistics,fromtheorydevelopmentusingquantita-\ntivemeanstopuredatacollectionanddissemination.Butattheendofthe1970s,\nvirtually no ordinary working linguist was using a personal computer (Simons\n1996).Personalcomputerusage,however,dramaticallyincreasedthroughoutthe\n1980s.By1990,dozensofcharactersetswereincommonuse.Theyvariedintheir\narchitectureandintheircharacterrepertoires,whichmadethingsamess.\nDuringthe1980s,itbecameincreasinglyclearthatanadequatesolutiontothe\nproblemofmultilingualcomputingenvironmentswasneeded.Linguistswereon\nthe forefront of addressing this issue because they faced these challenges head-\nonbywishingtopublishandcommunicateelectronictextwithphoneticsymbols\nwhichwerenotincludedinbasicASCII.Oneonlyneedstolookatfacsimilesof\nolder electronic documents to see exotic symbols written in by hand after the\npreparationoftypedversion.\n9Seehttp://www.let.rug.nl/kleiweg/L04/andhttp://www.splitstree.org/,respectively.\n47 4TheInternationalPhoneticAlphabet\nAmajorbenefitofthestandardizationoftheIPAinacomputationalrepresen-\ntation by the Kiel working group is that it provided the basis for a formal pro-\nposal to be submitted to various international standards organizations, several\nofwhichweretryingtotackle(andinasensewin)themultilingualcomputing\nenvironmentproblem(cf.Section1.2).Basically,everyone\u2013fromcorporationsto\ngovernmentstolanguagescientists\u2013wantedasingleunifiedmultilingualchar-\nacterencodingsetforalltheworld\u2019swritingsystems,eveniftheydidnotunder-\nstandorappreciatethechallengesinvolvedincreatingandadoptingasolution.\nIndustrywasstartingtotackletheissuesinvolvedindevelopingasinglemul-\ntilingualcomputingenvironmentonavarietyoffronts,includingthethennew\ntechnologyofbitmapfontsandthecreationofFontManagerandScriptManager\nby Apple (Apple Computer 1985; 1986; 1988). As noted above, around this time\nlinguistsweredevelopingwork-aroundssuchasSAMPA,sothattheycouldcom-\nmunicateIPAtranscriptionanduseASCII-basedsoftware.Somelinguistsformal-\nizedtheissuesofmultilingualtextprocessingfromacomputationalperspective\n(Anderson 1984; Becker 1984; Simons 1989). The study of writing systems was\nalsobeinginvigorated(Sampson1985:11\u201315)bythecomputationalchallengesin\nmaking computers work in a multilingual environment. The engineering prob-\nlems and solutions had been spelled out years before, e.g. a two-byte encoding\nformultilingualtext(Anderson1984).Althoughlanguagesvarytoanastounding\nextent(cf.Evans&Levinson(2009)),writingsystemsarequitesimilarformally\nandtheissueofformalrepresentationoftheworld\u2019sorthographicsystemshad\nalreadybeenaddressed(Simons1989).\nAftertheKielConventionin1989,theworkinggroupassistedtheInternational\nPhoneticAssociationinrepresentingtheIPAtotheinternationalorganiza-\ntion for standardization (ISO) and to the text encoding initiative (TEI)\n(Esling&Gaylord1993).Theworkinggroup\u2019sformalizationoftheIPA,i.e.afull\nlisting of agreed-upon computer codings for phonetic symbols, was used in de-\nvelopingwritingsystemdescriptions,whichwereatthetimebeingsolicitedfor\nscripts to be included in the new multilingual international character encoding\nstandards. The working group for ISO/IEC 10646 and Unicode were two such\ninitiatives.\nInthehistoricalcontextoftheIPAbeingconsideredforinclusioninISO/IEC\n10646,itisimportanttorealizethattherewereavarietyofsources(i.e.notjust\nfrom the Association) which submitted character proposals for phonetic alpha-\nbets.Theseproposals,includingtheonefromtheAssociationviatheKielwork-\ning group, were considered as a whole by the ISO working groups that were\nresponsible for incorporating a phonetic script into the universal character set\n48 4.4Theneedforasinglemultilingualenvironment\n(UCS). The ISO working groups that were responsible for assigning a phonetic\ncharactersetthenmadetheirownsubmissionsaspartofareviewprocessbyISO\nfor approval based on both informatics and phonetic criteria (Esling & Gaylord\n1993:86).\nCharactersetISO/IEC10646wasapprovedbyISO,includingthephoneticchar-\nacters submitted to them in May 1993. The set of IPA characters were assigned\nUCScodesin16-bitrepresentation(inhexadecimal)andwerepublishedasTables\n2 and 3 in Esling & Gaylord (1993), which include a graphical representation of\ntheIPAsymbol,itsIPAname,phoneticdescription,IPAnumber,UCScodeand\nAFIIcode.10WhenthecharactersetsofISO/IEC10646andtheUnicodeStandard\nlater converged (see Chapter 2), the IPA proposal was included in the Unicode\nStandardVersion1.0\u2013largelyasweknowittoday.\nWithsubsequentrevisionstotheIPA,onemighthaveexpectedthattheUni-\ncodeConsortiumwouldupdatetheUnicodeStandardinawaythatisinlinewith\nthedevelopmentoflinguisticinsights.However,updatesthatgoagainsttheprin-\nciple of maintaining backwards compatibility lose out, i.e. it is more important\ntodealwiththepitfallscreatedalongthewaythanitistochangethestandard.\nTherefore,manyofthepitfallsweencountertodaywhenusingUnicodeIPAare\nhistoricrelicsthatwehavetocometogripswith.\nItwasalongjourney,butthegoalofachievingasinglemultilingualcomputing\nenvironmenthaslargelybeenaccomplished.Assuch,weshouldnotdismissthe\nIPA numbers or pre-Unicode encoding attempts, such as SAMPA/X-SAMPA, as\nmisguided.TheparallelsbetweentheIPAnumbersandUnicodeCodepoints,for\nexample, are striking because both the IPA and the Unicode Consortium came\nup with the solution of an additional layer of indirection (an abstraction layer)\nbetween symbols/characters and encoding on the bit pattern level. SAMPA/X-\nSAMPAisalsostillusefulasaninputmethodforIPAinASCIIandrequiredby\nsomesoftware.\nCurrent users of the Unicode Standard must cope with the pitfalls that were\ndug along the way, as will be discussed in the next chapter. As the Association\nforesightfullyremarkedaboutUnicode:\n\u201cWhenthischaractersetisinwideuse,\nitwillbethenormalwaytoencodeIPAsymbols.\u201d\n(TheInternationalPhoneticAssociation1999:164).\n10The Association for Font Information Interchange (AFII) was an international database of\nglyphscreatedtopromotethestandardizationoffontdatarequiredtoproduceISO/IEC10646.\n49  5 IPA meets Unicode\n5.1 The twain shall meet\nTheInternationalPhoneticAlphabet(IPA)isacommonstandardinlinguisticsto\ntranscribesoundsofspokenlanguageintodiscretesegmentsusingaLatin-based\nalphabet.AlthoughIPAisreasonablyeasilyadheredtowithpenandpaper,itis\nnottrivialtoencodeIPAcharacterselectronically.Inthischapterwediscussvari-\nouspitfallswiththeencodingofIPAintheUnicodeStandard.Wewillspecifically\nrefertothe2015versionoftheIPA(TheInternationalPhoneticAssociation2015)\nandthe11.0.0versionofUnicode(TheUnicodeConsortium2018).\nAs long as a transcription is only directed towards phonetically trained eyes,\nthenallthedetailsoftheUnicode-encodingareunimportant.Foralinguistread-\ninganIPAtranscription,manyofthedetailsthatwillbediscussedinthischap-\nter might seem like hair-splitting trivialities. However,if IPA transcriptions are\nintended to be used across resources (e.g. searching similar phenomena across\ndifferentlanguages)thenitbecomescrucialthattherearestrictencodingguide-\nlines.Ourmaingoalinthischapteristopresenttheencodingissuesandpropose\nrecommendationsforastrictIPAencodingforsituationsinwhichcross-resource\nconsistencyiscrucial.\nThereareseveralpitfallsto be awareofwhen using theUnicode Standard to\nencodeIPA.Aswehavesaidbefore,fromalinguisticperspectiveitmightsome-\ntimes look like the Unicode Consortium is making incomprehensible decisions,\nbut it is important to realize that the consortium has tried and is continuing to\ntry to be as consistent as possible across a wide range of use cases, and it does\nplacelinguistictraditionsaboveotherorthographicchoices.Furthermore,when\nwe look at the history of how the IPA met Unicode, we see that many of the\ndecisions for IPA symbols in the Unicode Standard come directly from the In-\nternationalPhoneticAssociationitself.Therefore,manypitfallsthatwewillen-\ncounterhavetheirgroundinginthehistoryoftheprinciplesoftheIPA,aswell\nasinthetechnologicalconsiderationsinvolvedincreatingasinglemultilingual\nencoding.Ingeneral,westronglysuggesttolinguiststonotcomplainaboutany\ndecisionsintheUnicodeStandard,buttotryandunderstandtherationaleofthe 5IPAmeetsUnicode\nInternationalPhoneticAssociationandtheUnicodeConsortium(bothofwhich\nare almost always well-conceived in our experience) and devise ways to work\nwithanyunexpectedbehavior.\nManyofthecurrentproblemsderivefromthefactthattheIPAisclearlyhistor-\nicallybasedontheLatinscript,butdifferentenoughfrommostotherLatin-based\nwriting systems to warrant special attention. This ambivalent status of the IPA\nglyphs (partly Latin, partly special) is unfortunately also attested in the treat-\nmentofIPAintheUnicodeStandard.Inretrospect,itmighthavebeenbetterto\nconsidertheIPA(andothertranscriptionsystems)tobeaspecialkindofscript\nwithin the Unicode Standard, and treat the obvious similarity to Latin glyphs\nas a historical relic. All IPA glyphs would then have their own code points, in-\nsteadofthecurrentsituationinwhichsomeIPAglyphshavespecialcodepoints,\nwhileothersaretreatedasbeingidenticaltotheregularLatincharacters.Yet,the\ncurrentsituation,howeverunfortunate,isunlikelytochange,soaslinguistswe\nmustlearntodealwiththespecificpitfallsofIPAwithintheUnicodeStandard.\n5.2 Pitfall: No complete IPA code block\nTheambivalentnatureofIPAglyphsarisesbecause,ontheonehand,theIPAuses\nLatin-based glyphs like <a>, <b> or <p>. From this perspective, the IPA seems\ntobejustanotherorthographictraditionusingLatincharacters,allofwhichdo\nnotgetaspecialtreatmentwithintheUnicodeStandard(justlikee.g.theFrench,\nGerman,orDanishorthographictraditionsdonothaveaspecialstatus).Onthe\nother hand, the IPA uses many special symbols (like turned <\u0250>, mirrored <\u0258>\nand/or extended <\u0267> Latin glyphs) not found in any other Latin-based writing\nsystem.Forthisreasonaspecialblockwithcodepoints,calledIPAExtensions\nwas already included in the first version of the Unicode Standard (Version 1.0\nfrom1991).\nAs explained in Section 3.6, the Unicode Standard code space is subdivided\ninto character blocks, which generally encode characters from a single script.\nHowever, as is illustrated by the IPA, characters that form a single writing sys-\ntemmaybedispersedacrossseveraldifferentcharacterblocks.Withitsdiverse\ncollectionofsymbolsfromvariousscriptsanddiacritics,theIPAisspreadacross\n12blocksintheUnicodeStandard:1\n1This number of blocks depends on whether only IPA-sanctioned symbols are counted or if\nthephoneticsymbolscommonlyfoundintheliteraturearealsoincluded,seeMoran(2012:\nAppendixC).The159charactersfrom12codeblocksshownherearethecharactersproposed\nforstrictIPAencoding,asdiscussedinSection5.13.\n52 5.3Pitfall:IPAhomoglyphsinUnicode\n\u2022 BasicLatin(27characters)\nabcdefhijklmnopqrstuvwxyz.|\n\u2022 Latin-1Supplement(4characters)\n\u00e6\u00e7\u00f0\u00f8\n\u2022 LatinExtended-A(3characters)\n\u0127\u014b\u0153\n\u2022 LatinExtended-B(4characters)\n\u01c0\u01c1\u01c2\u01c3\n\u2022 LatinExtended-C(1character):\n\u2c71\n\u2022 IPAExtensions(67characters)\n\u0250\u0251\u0252\u0253\u0254\u0255\u0256\u0257\u0258\u0259\u025b\u025c\u025e\u025f\u0260\u0261\u0262\u0263\u0264\u0265\u0266\u0267\u0268\u026a\u026c\u026d\u026e\u026f\u0270\u0271\u0272\u0273\u0274\n\u0275\u0276\u0278\u0279\u027a\u027b\u027d\u027e\u0280\u0281\u0282\u0283\u0284\u0288\u0289\u028a\u028b\u028c\u028d\u028e\u028f\u0290\u0291\u0292\u0294\u0295\u0298\u0299\u029b\u029c\u029d\u029f\u02a1\u02a2\n\u2022 GreekandCoptic(3characters)\n\u03b2\u03b8\u03c7\n\u2022 SpacingModifierLetters(17characters)\n\u25cc\u02de\u25cc\u02e1\u25cc\u02b7\u25cc\u02b2\u25cc\u02e0\u25cc\u02e4\u25cc\u02b0\u25cc\u02bc\u25cc\u02d0\u25cc\u02d1\u02e5\u02e6\u02e7\u02e8\u02e9\u02c8\u02cc\n\u2022 SuperscriptsandSubscripts(1character)\n\u25cc\u207f\n\u2022 CombiningDiacriticalMarks(25characters)\n\u25cc\u033c\u25cc\u032a\u25cc\u033b\u25cc\u033a\u25cc\u031f\u25cc\u0320\u25cc\u031d\u25cc\u031e\u25cc\u0318\u25cc\u0319\u25cc\u031c\u25cc\u0339\u25cc\u032c\u25cc\u0325\u25cc\u0330\u25cc\u0324\u25cc\u0329\u25cc\u032f\u25cc\u0334\u25cc\u0303\u25cc\u0308\u25cc\u033d\u25cc\u0306\u25cc\u031a \u25cc\u0361\u25cc\n\u2022 GeneralPunctuation(2characters)\n\u2016\u203f\n\u2022 Arrows(4characters)\n\u2191\u2193\u2197\u2198\n5.3 Pitfall: IPA homoglyphs in Unicode\nAnother problem is the large number of homoglyphs, i.e. different characters\nthat have highly similar glyphs (or even completely identical glyphs, depend-\ningonthefontrendering).Forexample,auserofaCyrilliccomputerkeyboard\nshouldideallynotusethe<\u0430>cyrillicsmallletteraatcodepointU+0430for\nIPAtranscriptions,butinsteadusethe<a>latinsmallletteraatcodepoint\nU+0061,althoughvisuallytheyaremostlyindistinguishable,andtheCyrillicchar-\n53 5IPAmeetsUnicode\nacter is moreeasily typed on a Cyrillic keyboard. Some further problematicho-\nmoglyphsrelatedtoencodingIPAintheUnicodeStandardarethefollowing:\n\u2022 The uses of the apostrophe have led to long discussions on the Unicode\nStandard email list. An English keyboard inputs the symbol <\u25cc'> apos-\ntropheatU+0027,althoughthepreferredUnicodeapostropheisthe<\u25cc\u2019>\nrightsingleqotationmarkatU+2019.2 However,theglottalstop/glot-\ntalization/ejective marker is yet another completely different character,\nnamely<\u25cc\u02bc>,i.e.themodifierletter apostropheatU+02BC,which un-\nfortunatelylooksextremelysimilartoU+2019.\n\u2022 Another problem is the <\u25cc\u02c1> modifier letter reversed glottal stop\nat U+02C1 vs. the <\u25cc\u02e4> modifier letter small reversed glottal stop\nat U+02E4. Both appear in various resources representing phonetic data\nonline. This is thus a clear example for which the Unicode Standard does\nnotsolvethelinguisticstandardizationproblem.\n\u2022 Linguists are also unlikely to distinguish between the <\u0259> latin small\nletterschwaatcodepointU+0259and<\u01dd>latinsmallletterturned\neatU+01DD.\n\u2022 The alveolar click <\u01c3> at U+01C3 is of course often simply typed as <!>\nexclamationmarkatU+0021.3\n\u2022 The dental click <\u01c0>, in Unicode known as latin letter dental click at\nU+01C0,isoftensimplytypedas<|>verticallineatU+007C.\n\u2022 ForthemarkingoflengththereisaspecialUnicodecharacter,namely<\u25cc\u02d0>\nmodifier letter triangular colon at U+02D0. However, typing <\u25cc:>\ncolonatU+003Aisofcoursemucheasier.\n\u2022 There are two mostly identical-looking Unicode characters for the super-\nscript<\u02b0>:thecombininglatinsmallletterhatU+036Aandthemodi-\nfierlettersmallhatU+02B0.Makingthesituationevenmoreproblem-\naticisthattheyhavedifferentbehavior(seeSection5.9).Toharmonizethe\nbehavior of <\u02b0> with other superscript letters, we propose to standardize\nonthemodifierletteratU+02B0(seeSection5.10).\nConversely,non-linguistsareunlikelytodistinguishanysemanticdifference\nbetweenanopenbackunroundedvowel,whichisencodedinIPAwitha\u201csingle-\nstory\u201d<\u0251>latinsmallletteralphaatU+0251,andtheopenfrontunrounded\n2Notethatmanywordprocessors(likeMicrosoftWord)bydefaultwillreplacestraightquotes\nbycurlyquotes,dependingonthewhitespacearoundit.\n3IntheUnicodeStandardthe<\u01c3>atU+01C3islabeledlatinletterretroflexclick,butinIPA\nthatglyphisusedforanalveolarorpostalveolarclick(notretroflex).Thisnamingisprobably\nbestseenasanerrorintheUnicodeStandard.Fortherealretroflexclick,seeSection5.12.\n54 5.3Pitfall:IPAhomoglyphsinUnicode\nvowel, which is encoded in IPA with a \u201cdouble-story\u201d <a> latin small letter\naatU+0061,basicallytreatingthemashomoglyphs,althoughtheyaredifferent\nphonetic symbols. But even among linguists this distinction leads to problems.\nForexample,aspointedoutbyMielke(2009),thereisaproblemstemmingfrom\nthe fact that about 75% of languages are reported to have a five-vowel system\n(Maddieson 1984). Historically, linguistic descriptions tend not to include pre-\nciseaudiorecordingandmeasurementsofformants,sothismayleadonetoask\nif the many <a> characters that are used in phonological description reflects a\ntranscriptional bias. The common use of <a> in transcriptions could be in part\nduetotheeaseoftypingtheletteronanEnglishkeyboard(orforolderdescrip-\ntions,thetypewriter).Wefoundittobeexceedinglyrarethatalinguistuses<\u0251>\nfor a low back unrounded vowel.4 They simply use <a> as long as there is no\noppositionto<\u0251>.\nMaking things even more problematic, there is an old typographic tradition\nthat the double-story <a> uses a single-story <\u0251> in italics. This leads to the\nunfortunate effect that even in many well-designed fonts the italics of <a> and\n<\u0251> use the same glyph. For example, in Linux Libertine (the font of this book)\nthe italics of these characters are highly similar, <a> and <\u0251>, while in Charis\nSIL they are identical: <a> and <\u0251>. If this distinction has to be kept upright in\nitalics,theonlysolutionwecancurrentlyofferistouseslantedglyphs(i.e.arti-\nficiallyitalicizedglyphs)insteadofrealitalics(i.e.specialitalicsglyphsdesigned\nby a typographer).5 This approach was taken by the Language Science Press to\n4One example is Vidal (2001: 75), in which the author states: \u201cThe definition of Pilag\u00e1/a/ as\n[+back]resultsfromitsbehaviorincertainphonologicalcontexts.Forinstance,uvularand\npharyngealconsonantsonlyoccuraround/a/and/o/.Hence,thecharacterizationof/a/and\n/o/asanaturalclassof(i.e.[+back]vowels),asopposedto/i/and/e/.\u201d\n5Forexample,thewidelyusedIPAfontDoulosSIL(https://software.sil.org/doulos/)doesnot\nhaverealitalics.Thisleadssomeword-processingsoftware,likeMicrosoftWord,toproduce\nslantedglyphsinstead.Thatparticularcombinationoffontandsoftwareapplicationwillthus\nleadtothedesiredeffectdistinguishing<a>from<\u0251>initalics.However,notethatwhenthe\ntextistransferredtoanotherfont(i.e.onethatincludesrealitalics)and/ortoanothersoftware\napplication(likeApplePages,whichdoesnotperformslanting),thenthisvisualappearance\nwillbelost.Inthiscasewearethusstillinthepre-Unicodesituationinwhichthechoiceof\nfontandrenderingsoftwareactuallymatters.Theidealsolutionfromalinguisticpointofview\nwouldbetheintroductionofanewIPAcodepointforadifferentkindof<a>,whichexplic-\nitlyspecifiesthatitshouldstillberenderedasadouble-storycharacterwhenitalicized.After\ninformaldiscussionwithvariousUnicodeplayers,ourimpressionisthatthishighlyrestricted\nproblemisnotsufficientlyurgenttointroduceevenmore<a>homographsinUnicode(which\nalreadyleadtomuchconfusion,seeSection3.8).\n55 5IPAmeetsUnicode\ndistinguish between the two different orthographic <a>\u2019s in Chakali in Brindle\n(2017).6\nLastly, before we move on from the pitfall of IPA homoglyphs in Unicode to\nthe pitfall of homoglyphs in IPA, we are aware of one example that illustrates\nbothpitfalls.Considerforexamplewhatonereviewercoinedidot-suppression.\nWhencombining,saythelatinsmallletteri<i>atU+0069withthecombin-\ning acute accent <\u25cc\u0301> at U+0301, the result is the combination of these two\ncharacters into <\u00ed> or the associated precomposed form latin small letter i\nwith acute <\u00ed> at U+00ED. Typographically, the accent mark replaces the dot.\nInIPA,the<\u00ed>denotesahighfrontunroundedvowelwithhightone.However,\ntheresultoflosingthedotmakesthisIPAsymbollookverysimilartothenear-\nhighnear-frontunroundedvowel<\u026a>,whenitalsohasthehightonemarker:<\u026a>\u0301 .\nTo boot, when an accent mark is added to latin small letter i with stroke\n<\u0268>atU+0268,thedotisnotsuppressedbutretained,i.e.<\u0268>\u0301 .7\n5.4 Pitfall: Homoglyphs in IPA\nReversely, there are a few cases in which the IPA distinguishes different pho-\nnetic concepts, but the visual characters used by the IPA look very much alike.\nSuchcasesarethushomoglyphsintheIPAitself,whichofcourseneeddifferent\nencodings.\n\u2022 The dental click <\u01c0> and the indication of a minor group break <|> look\nalmost the same in most fonts. For a proper encoding, the latin letter\ndentalclickatU+01C0andtheverticallineatU+007Cshouldbeused,\nrespectively.\n\u2022 Similarly, the alveolar lateral click <\u01c1> should be encoded with a latin\nletter lateral click at U+01C1, different from <\u2016>, which according to\ntheIPAisthecharactertobyusedforamajorgroupbreak(byintonation),\ntobeencodedbydoubleverticallineatU+2016.\n\u2022 Themarkingofprimarystress<\u02c8>lookslikeanapostrophe,andisoften\ntyped with the same symbol as the ejective <\u25cc\u02bc>. For a proper encoding,\nthese two symbols should be typed as modifier letter vertical line at\nU+02C8andmodifierletterapostropheatU+02BC,respectively.\n6http://langsci-press.org/catalog/book/74\n7AccordingtotheUnicodeStandard,latinsmallletteriwithstroke<\u0268>atU+0268cannot\nbedecomposedinto,say,latinsmallletteri<i>atU+0069andcombiningshortstroke\noverlay<\u25cc\u0335>atU+0335.WediscussthepitfallofmissingdecompositionformsinSection5.8.\n56 5.5Pitfall:MultipleencodingoptionsinIPA\n\u2022 There are two different dashed-l characters in IPA, namely the <\u026b> latin\nsmall letter l with middle tilde at U+026B and the <\u026c> latin small\nletter l with belt at U+026C. These of course look highly similar, al-\nthough they are different sounds. As a solution, we will actually propose\ntonotusethemiddletildeatall(seeSection5.5).\n5.5 Pitfall: Multiple encoding options in IPA\nItisnotjusttheUnicodeStandardthatoffersmultipleoptionsforencodingthe\nIPA.EventheIPAspecificationitselfofferssomeflexibilityinhowtranscriptions\nhavetobeencoded.ThereareafewcasesinwhichtheIPAexplicitlyallowsfor\ndifferent options of transcribing the same phonetic content. This is understand-\nablefromatranscriber\u2019spointofview,butitisnotacceptablewhenthegoalisin-\nteroperabilitybetweenresourceswritteninIPA.Weconsideritcrucialtodistin-\nguishbetweenvalidIPA,forwhichitissufficientthatanyphonetically-trained\nreader is able to understand the transcription, and strict IPA, which should be\nstandardized on a single unique encoding for each sound, so search will work\nacrossresources.Weareawareofthefollowingnon-uniqueencodingoptionsin\ntheIPA,whichwillbediscussedinturnbelow:\n\u2022 Themarkingoftone\n\u2022 Themarkingof<g>\n\u2022 Themarkingofvelarizationandpharyngealization\n\u2022 Theplacementofdiacritics\nThefirstcaseinwhichtheIPAallowsfordifferentencodingsisthequestionof\nhow to transcribe tone (cf. Maddieson (1990)). There is an old tradition to use\ndiacritics on vowels to mark different tone levels (The International Phonetic\nAssociation1949).Priortothe1989Kielconvention,IPA-approvedtonesymbols\nincludeddiacriticsaboveorbelowthevowelorsyllable,e.g.highandlowtones\nmarked with macrons (<\u25cc\u0304>, <\u25cc\u0331>), and acute and grave accents for high rising\ntone <\u25cc\u0301>, low rising tone <\u25cc\u0317>, high falling tone <\u25cc\u0300> and low falling tone <\u25cc\u0316>.\nThesetonesymbols,however,hadfailedtocatchon(probably)duetoaesthetic\nobjectionsandmattersofadequacyfortranscription(Maddieson1990:29).\nAfter the 1989 Kiel convention, the accent tone symbols were updated to the\ntradition that we are familiar with today and which was already in wide use\nby Africanists and others, namely level tones <\u25cc\u030b, \u25cc\u0301, \u25cc\u0304, \u25cc\u0300, \u25cc\u030f> and contour tones\n57 5IPAmeetsUnicode\n<\u25cc\u030c,\u25cc\u0302,\u25cc\u1dc4,\u25cc\u1dc5,\u25cc\u1dc8>.8 Inaddition,theIPAalsoadoptedtonelettersdevelopedbyChao\n(1930),e.g.<\u02e5\u02e6\u02e7\u02e8\u02e9>,whichwereinwideusebyAsianists.9TonelettersintheIPA\nhave five different levels, and sequences of these letters can be used to indicate\ncontours. Well-designed fonts will even merge a sequence of tone letters into a\ncontour. For example, compare the font Linux Libertine, which does not merge\ntoneletters<\u02e5\u02e8\u02e7\u02e9>,withthefontCharisSIL,whichmergesthissequenceoffour\ntone letters into a single contour <\u02e5\u02e8\u02e7\u02e9>. For strict IPA encoding we propose to\nstandardizeontoneletters.\nSecond, we commonly encounter the use of <g> latin small letter g at\nU+0067,insteadoftheUnicodeStandardIPAcharacterforthevoicedvelarstop\n<\u0261>latinsmallletterscriptgatU+0261.Onebeginstoquestionwhetherthis\nissueisatallapparenttotheworkinglinguist,oriftheysimplyusetheU+0067\nbecause it is easily keyboarded and thus saves time, whereas the latter must be\ncumbersomely inserted as a special symbol in most software. The International\nPhonetic Association has taken the stance that both the keyboard latin small\nlettergandthelatinsmallletterscriptgarevalidinputcharactersforthe\nvoicedvelarplosive(TheInternationalPhoneticAssociation1999:19).10Unfortu-\nnately, this decision further introduces ambiguity for linguists trying to adhere\nto a strict Unicode Standard IPA encoding. For strict IPA encoding we propose\ntostandardizeonthemoreidiosyncraticlatinsmallletterscriptgatU+0261.\nThird, the IPA has special markers for velarization <\u25cc\u02e0> and pharyngealiza-\ntion<\u25cc\u02e4>.Confusingly,thereisalsoamarkerfor\u201cvelarizedorpharyngealized\u201d,\nusing the <\u25cc\u0334> combining tilde overlay at U+0334. The tilde overlay seems to\nbe extremely rarely used. We suggest to try and avoid using the tilde overlay,\nthoughforreasonsofbackwardcompatibilitywewillallowitinvalid-IPA.\nFinally,theIPAstatesthat\u201cdiacriticsmaybeplacedaboveasymbolwithade-\nscender\u201d.Forexample,formarkingofvoicelesspronunciationofvoicedsegments\nthe IPA uses the ring diacritic. Originally, the ring should be placed below the\n8Tomakethingsevenmorecomplicated,thereareatleasttwodifferentUnicodehomoglyphs\nforthelowandhighleveltones,namely<\u25cc\u0300>combininggravetonemarkatU+0340vs.<\u25cc\u0300>\ncombininggraveaccentatU+0300forlowtone,and<\u25cc\u0301>combiningacutetonemarkat\nU+0341vs.<\u25cc\u0301>combiningacuteaccentatU+0301forhightone.\n9NotsanctionedbytheIPA,butneverthelesswidelyattested,istheuseofsuperscriptnumbers\nformarkingtones,alsoproposedbyChao(1930).Oneissuetonotehereisthatsuperscript\nnumberscanbeeitherregularnumbersthatareformattedassuperscriptwithatextprocessor,\northeycanbeseparatesuperscriptcharacters,asdefinedintheUnicodeStandard(see:https:\n//en.wikipedia.org/wiki/Superscripts_and_Subscripts).Thisdividemeansthatsearchingtext\nisdependentonhowtheauthorformattedorencodedthesuperscriptnumbers.\n10NotehoweverthatthecurrentinstructionsforcontributorstotheJournaloftheInternational\nPhoneticAssociationrequirestheuseofopentail<\u0261>andnotlooptail<g>.\n58 5.6Pitfall:Tiebar\nbase character, like in <m\u0325>, using the combining ring below at U+0325. How-\never, in letters with long descenders the IPA also allows to put the ring above\nthe base, like in <\u014b\u030a>, using the combining ring above at U+030A. Yet, proper\nfont design does not have any problem with rendering the ring below the base\ncharacter, like in <\u014b\u0325>, so for strict IPA encoding we propose to standardize on\ntheringbelow.Asaprinciple,forstrictIPAencodingonlyoneoptionshouldbe\nallowedforalldiacritics.\nThevariableencodingasallowedbytheIPAbecomesevenmoretroublesome\nforthetildeanddiaeresisdiacritics.Inthesecases,theIPAitselfattachesdiffer-\nentsemanticstothesymbolsaboveandbelowabasecharacters.Thetildeabove\nacharacter(likein<\u00e3>,usingthecombiningtildeatU+0303)isusedfornasal-\nization,whilethetildebelowacharacter(likein<a\u0330>,usingthecombiningtilde\nbelow at U+0330) indicates creaky voice. Likewise, the diaeresis above (like in\n<\u00e4>,usingthecombiningdiaeresisatU+0308)isusedforcentralization,while\nthediaeresisbelowacharacter(likein<a>\u0324 ,usingthecombiningdiaeresisbe-\nlow at U+0324) indicates breathy voice. These cases strengthen our plea to not\nallowdiacriticstoswitchpositionfortypographicconvenience.\n5.6 Pitfall: Tie bar\nInthemajorrevisionoftheIPAin1932,affricateswererepresentedbytwocon-\nsonants <t\u0283>, ligatures <\u02a7>, or with the tie bar <t\u0361\u0283>. In the 1938 revision the tie\nbar\u2019ssemanticswerebroadenedtoindicatesimultaneousarticulation,asforex-\nample in labial velars such as <k\u0361p>. Thus, the tie bar is a convenient diacritic\nfor visually tokenizing input strings into chunks of phonetically salient groups,\nincludingaffricates,doublyarticulatedconsonantsordiphthongs.\nThetiebarcanbeplacedaboveorbelowthebasecharacters,e.g.<t\u0361s>or<t\u035cs>.\nIPAallowsbothoptions.Thechoicebetweenthetwosymbolsispurelyforlegible\nrendering;thereisnodifferenceinsemanticsbetweenthetwosymbols.However,\nrenderingissuchaproblematicissuefortiebarsingeneralthatmanylinguists\nsimply do not use them. Just looking at a few different fonts already indicates\nthat actually no font designer really gets the placement right in combination\nwith superscripts and subscripts. If really necessary, we propose to standardize\non the tie bar above the base characters, using a combining double inverted\nbreveatU+0361.11\n11Also note that the undertie at U+203F looks like the tie bar below and is easily confused\nwithit.However,itisadifferentcharacterandhasadifferentfunctioninIPA.Theundertieis\n59 5IPAmeetsUnicode\nTimesnewRoman:t\u0325\u02b0\u0361st\u0325\u02b0\u035cs\nCharisSIL:t\u02b0\u0325\u0361st\u02b0\u0325\u035cs\nMonaco: t\u0325\u02b0\u0361 s t\u0325\u02b0\u035cs\nDoulosSIL: t\u02b0\u0325\u0361s t\u02b0\u0325\u035cs\nLinuxLibertine:t\u02b0\u0325\u0361st\u02b0\u0325\u035cs\nTie bars are a special type of character in the sense that they do not belong\nto a segment, but bind two graphemes together. This actually turns out to be\nratherdifferentfromUnicodeconceptions.TheUnicodeencodingofthischarac-\nter belong to the Combining Diacritical Marks, namely either combining dou-\nble inverted breve at U+0361 or combining double breve below at U+035C.\nSuchacombiningmarkisbydefinitiontiedtothecharacterinfront,butnotthe\ncharacterfollowingit.TheUnicodetreatmentofthischaracterthusonlypartly\ncorrespondstotheIPAconception,whichideallywouldhavethetiebarlinked\nbothtothecharacterinfrontandtothecharacterfollowing.\nFurther,accordingtothespiritoftheIPA,itwouldalsobepossibletocombine\nmorethantwobasecharactersintoonetiebar,butthisisnotpossiblewithUni-\ncode (i.e. there is no possibility to draw a tie bar over three or four characters).\nIt is possible to indicate such larger groups by repeating the tie bar, like for a\ntriphthong<a\u0361\u028a\u0361\u0259>intheEnglishwordhour.Ifreallynecessary,weconsiderthis\npossible,eventhoughtherenderingwillneverlookgood.\nMostimportantlythough,incomparisontonormalUnicodeprocessing,thetie\nbaractuallytakesareversedapproachtocomplexgraphemes.Basically,theUni-\ncodeprinciple(seeSection3.3)isthatfixedsequencesinawritingsystemhave\ntobespecifiedastailoredgraphemeclusters.Onlyincasethesequenceisnota\ncluster,thenthishastobeexplicitlyindicated.IPAtakesadifferentapproach.In\nIPA by default different base letters are not connected into larger clusters; only\nwhenitisspecifiedinthestringitself(usingthetiebar).\n5.7 Pitfall: Ligatures and digraphs\nOneimportantdistinctiontoacknowledgeisthedifferencebetweenmultigraphs\nandligatures.Multigraphsaregroupsofcharacters(inthecontextofIPAe.g.<t\u0283>\nor<ou>)whileligaturesaresinglecharacters(e.g.<\u02a7>latinsmalllettertesh\nusedasalinkingsymboltoindicatethelackofaboundary,e.g.Frenchpetitami[p\u0259tit\u203fami]\n\u2018boyfriend\u2019.\n60 5.8Pitfall:Missingdecomposition\ndigraph at U+02A7). Ligatures arose in the context of printing easier-to-read\ntexts, and are included in the Unicode Standard for reasons of legacy encoding.\nHowever, their usage is discouraged by the Unicode core specification. Specifi-\ncallyrelatedtoIPA,variousphoneticcombinationsofcharacters(typicallyaffri-\ncates)areavailableassinglecodepointsintheUnicodeStandard,butaredesig-\nnated digraphs. Such glyphs might be used by software to produce a pleasing\ndisplay, but they should not be hard-coded into the text itself. In the context of\nIPA, characters like the following ligatures should thus not be used. Instead a\ncombinationoftwocharactersispreferred:\n<\u02a3>latinsmallletterdzdigraphatU+02A3(use<dz>)\n<\u02a4>latinsmallletterdezhdigraphatU+02A4(use<d\u0292>)\n<\u02a5>latinsmallletterdzdigraphwithcurlatU+02A5(use<d\u0291>)\n<\u02a6>latinsmalllettertsdigraphatU+02A6(use<ts>)\n<\u02a7>latinsmallletterteshdigraphatU+02A7(use<t\u0283>)\n<\u02a8>latinsmalllettertcdigraphwithcurlatU+02A8(use<t\u0255>)\n<\u02a9>latinsmallletterfengdigraphatU+02A9(use<f\u014b>)\nHowever, there are a few Unicode characters that are historically ligatures,\nbut which are today considered as simple characters in the Unicode Standard\nandthusshouldbeusedwhenwritingIPA,namely:\n<\u026e>latinsmallletterlezhatU+026E\n<\u0153>latinsmallligatureoeatU+0153\n<\u0276>latinlettersmallcapitaloeatU+0276\n<\u00e6>latinsmallletteraeatU+00E6\n5.8 Pitfall: Missing decomposition\nAlthoughmanycombinationsofbasecharacterwithdiacriticaretreatedaswith\nprecomposedcharacters,thereareafewcombinationsinIPAthatallowformul-\ntiple,apparentlyidentical,encodingsthatarenot(seeSection3.9ontheprinciple\nofcanonicalequivalence).Forthatreason,thefollowingelementsshouldnotbe\ntreatedasdiacriticswhenencodingIPAinUnicode:\n<\u25cc\u0321>combiningpalatalizedhookbelowatU+0321\n<\u25cc\u0322>combiningretroflexhookbelowatU+0322\n<\u25cc\u0335>combiningshortstrokeoverlayatU+0335\n<\u25cc\u0337>combiningshortsolidusoverlayatU+0337\n61 5IPAmeetsUnicode\nThere turn out to be a lot of characters in the IPA that could be conceived\nas using any of these elements, like <\u0272>, <\u0273>, <\u0268> or <\u00f8>. However, all such\ncharactersexistaswellasprecomposedcombinationinUnicode,andthesepre-\ncomposed characters should preferably be used. When combinations of a base\ncharacterwithdiacriticareusedinstead,thenthesecombinationsarenottothe\nprecomposedcombinations.Thismeansthatanysearchwillnotfindbothatthe\nsametime.\nA similar problem arises with the rhotic hook. There are two precomposed\ncharacters in Unicode with a rhotic hook, which are not with a combination of\nthevowelwithaseparatelyencodedhook:\n<\u025a>latinsmallletterschwawithhookatU+025A\n<\u025d>latinsmallletterreversedopenewithhookatU+025D\nAllothercombinationsofvowelswithrhotichookswillhavetobemadebyusing\n<\u25cc\u02de>modifierletterrhotichookatU+02DE,becausethereisnocompleteset\nof precomposed characters with rhotic hooks in Unicode. For that reason we\nproposetonotusethetwoprecomposedcharacterswithhooksmentionedabove,\nbutalwaysusetheseparaterhotichookatU+02DEinIPA.\nAsimilarsituationariseswith<\u25cc\u0334>combiningtildeoverlayatU+0334.The\nmain reason some phoneticians like to use this in IPA is to mark the dark <l>\nin English codas, using the character <\u026b> latin small letter l with middle\ntildeatU+026B.Thischaracterisnotcanonicallyequivalenttothecombination\n<l> + <\u25cc\u0334>, so one of the two possible encodings has to be chosen. Because the\ntilde overlay is described as a general mechanism by the IPA, we propose to\nusetheseparated<\u25cc\u0334>combiningtildeoverlayatU+0334.However,notethat\nphoneticallythisseemstobe(almost)superfluous(seeSection5.5)andthetypical\nusageintheformof<\u026b>is(almost)ahomoglyphwith<\u026c>(seeSection5.4).For\nthesereasonswealsosuggesttotryandavoidthetildeoverlaycompletely.\nReversely, note that the <\u00e7> latin small letter c with cedilla at U+00E7\niswith<c>with<\u25cc\u0327>combiningcedillaatU+0327,soitwillbeseparatedinto\ntwo characters by Unicode canonical decomposition, also if such a decomposi-\ntion is not intended in the IPA. However, because of the nature of canonical\nequivalence (see Section 3.9), these two encodings are completely identical in\nanycomputationaltreatment,sothisdecompositiondoesnothaveanypractical\nconsequences.\n62 5.9Pitfall:Differentnotionsofdiacritics\n5.9 Pitfall: Different notions of diacritics\nAnother pitfall relates to the question, what is a diacritic? The problem is that\nthe meaning of the term diacritic as used by the IPA is not the same as it\nis used in the Unicode Standard. Specifically, diacritics in the IPA-sense are ei-\nther so-called combining diacritical marks or spacing modifier letters in\ntheUnicodeStandard.Crucially,CombiningDiacriticalMarksarebydefinition\ncombined with the character before them (to form so-called default grapheme\nclusters, see Chapter 2). In contrast, Spacing Modifier Letters are by definition\nnot combined into grapheme clusters with the preceding character, but simply\ntreatedasseparateletters.InthecontextoftheIPA,thefollowingIPA-diacritics\nareactuallySpacingModifierLettersintheUnicodeStandard:\nLengthmarks,namely:\n<\u25cc\u02d0>modifierlettertriangularcolonatU+02D0\n<\u25cc\u02d1>modifierletterhalftriangularcolonatU+02D1\nToneletters,includingbutnotlimitedto:\n<\u02e5>modifierletterextra-hightonebaratU+02E5\n<\u02e8>modifierletterlowtonebaratU+02E8\nSuperscriptletters,includingbutnotlimitedto:12\n<\u25cc\u02b0>modifierlettersmallhatU+02B0\n<\u25cc\u02e4>modifierlettersmallreversedglottalstopatU+02E4\n<\u25cc\u207f>superscriptlatinsmallletternatU+207F\nTherhotichook:13\n<\u25cc\u02de>modifierletterrhotichookatU+02DE\nAlthoughlinguistsmightexpectthesecharacterstobelongtogetherwiththe\ncharacterinfrontofthem,atleastfortoneletters,stresssymbolsand<\u02b0>modi-\n12TheUnicodeStandarddefinesthePhoneticExtensionsblockthatdefinessymbolsusedinpho-\nneticnotationsystems,includingtheUralicPhoneticAlphabet,AmericanistandRussianist\nphoneticnotations,OxfordEnglishandAmericandictionaries,etc.Amongothersymbols,the\nPhonetic Extensions block includes the superscript letters <m,\u014b,b>, which are not valid IPA\ncharacters,althoughwehaveseenthemusedinlinguisticpractice.\n13ItisreallyunfortunatethattherhotichookinUnicodeisclassifiedasaSpacingModifier,and\nnotasaCombiningDiacriticalMark.Althoughtherhotichookisplacedtotherightofitsbase\ncharacter(andnotaboveorbelow),itstillisalwaysconnectedtothecharacterinfront,even\nphysicallyconnectedtoit.Wecannotfindanyreasonforthistreatment,andconsideritan\nerrorinUnicode.Wehopeitwillbepossibletochangethisclassificationinthefuture.\n63 5IPAmeetsUnicode\nfierlettersmallhatU+02B0theUnicodeConsortium\u2019sdecisiontotreatitas\naseparatecharacterisalsolinguisticallycorrect.\n\u2022 According to the IPA, <\u02b0> can be used both as <\u25cc\u02b0> for post-aspiration\n(following the base character) and as <\u02b0\u25cc> for pre-aspiration (preceding\nthe base character), so there is no consistent direction in which this dia-\ncritic should bind. Note that there is yet another homoglyph, namely the\ncombining latin small letter h at U+036A. We propose not to use this\ncombiningdiacriticalmark,buttostandardizeonUnicodemodifierletters\nforallsuperscriptlettersinIPA.\n\u2022 Tone letters <\u02e5, \u02e6, \u02e7, \u02e8, \u02e9> from U+02E5\u2013U+02E9 are normally written at\nthe end of the syllable,possibly occurring immediately adjacent to a con-\nsonantinthecodaofthesyllable.Suchtonemarkersshouldofcoursenot\nbetreatedasbelongingtothisconsonant,soweproposetotreattonelet-\ntersasseparatesegments.\n\u2022 Stress markers <\u02c8\u25cc> at U+02C8 and <\u02cc\u25cc> at U+02CC have a very similar\ndistribution in that they normally are written at the start of the stressed\nsyllable.Inasense,theythusbelongtothecharactersfollowingthestress\nmarker, but it would be wrong to cluster them together with whatever\nsegment is at the start of the syllable. So, like tone letters, we propose to\ntreatstressmarkersasseparatesegments.\nIfintended,thenanydefaultcombinationofSpacingModifierswiththepreced-\ningcharactercanbespecifiedinorthographyprofiles(seeChapter7).\n5.10 Pitfall: No unique diacritic ordering\nAlso related to diacritics is the question of ordering. To our knowledge, the In-\nternationalPhoneticAssociationdoesnotspecifyanorderingfordiacriticsthat\ncombinewithphoneticbasesymbols;thisexerciseislefttothereasoningofthe\ntranscriber. However, such marks have to be explicitly ordered if sequences of\nthem are to be interoperable and compatible computationally. An example is a\nlabialized aspirated alveolar plosive: <t\u02b7\u02b0>. There is nothing holding linguists\nback from using <t\u02b0\u02b7> instead (with exactly the same intended meaning). How-\never, from a technical standpoint, these two sequences are different; if both se-\nquencesareusedinadocument,searchingfor<t\u02b7\u02b0>willnotfindanyinstances\nof <t\u02b0\u02b7>, and vice versa. Likewise, a creaky voiced syllabic dental nasal can be\nencodedinvariousorders,e.g.<n\u0330\u032a \u0329>,<n\u0330\u032a\u0329>or<n \u0330\u032a\u0329>.\n64 5.10Pitfall:Nouniquediacriticordering\nCanonicalcombiningclasses\nIn accordance with the absence of any specification of ordering in the IPA, the\nUnicodeStandardlikewisedoesnotproposeanystandardizedorders.Bothleave\nittotheusertobeconsistent;thisapproachnaturallyinvitesinconsistencyacross\ndifferentauthoredresources.\nThereisone(minor)aspectoforderingforwhichtheUnicodeStandarddoes\npresentacanonicalsolution.Fortunately,thisisuncontroversialfromalinguistic\nperspective.DiacriticsintheUnicodeStandard(i.e.CombiningDiacriticalMarks,\nseeSection5.9)areclassifiedinso-calledcanonicalcombiningclasses.Inprac-\ntice,thediacriticsaredistinguishedbytheirpositionrelativetothebasecharac-\nter.14WhenapplyingaUnicodenormalization(NFCorNFD,seeSection3.9),the\ndiacritics in different positions are put in a specified order. This process there-\nfore harmonizes the difference between different encodings in some situations,\nforexampleinthecaseofanextra-shortcreakyvoicevowel<\u1e1b\u0306>.Thisgrapheme\nclustercanbeencodedeitheras<e>+<\u25cc\u0306>+<\u25cc\u0330>oras<e>+<\u25cc\u0330>+<\u25cc\u0306>.Toprevent\nthis twofold encoding, the Unicode Standard specifies the second ordering as\ncanonical(namely,diacriticsbelowareputbeforediacriticsabove).\nWhenencodingastringaccordingtotheUnicodeStandard,itispossibletodo\nthiseitherusingtheNFC(composition)orNFD(decomposition)normalization\n(see Section 3.9). Decomposition implies that precomposed characters (like <\u00e1>\nlatin small letter a with acute at U+00E1) will be split into its parts. This\nmight sound preferable for a linguistic analysis, as the different diacritics are\nseparatedfromthebasecharacters.However,notethatmostattachedelements\nlikestrokes(e.g.inthe<\u0268>),retroflexhooks(e.g.in<\u0290>)orrhotichooks(e.g.in\n<\u025d>)willnotbedecomposed.Ingeneral,Unicodedecompositiondoesnotbehave\nlikeafeaturedecompositionasexpectedfromalinguisticperspective.Itisthus\nimportanttoconsiderUnicodedecompositiononlyasatechnicalprocedure,and\nnotassumethatitislinguisticallysensible.\nProposalfordiacriticordering\nFacingtheproblemofspecifyingaconsistentorderingofdiacriticswhiledevel-\noping a large database of phonological inventories from the world\u2019s languages,\nMoran (2012: 540) defined a set of diacritic ordering conventions. The conven-\ntions are influenced by the linguistic literature, though some ad-hoc decisions\nhad to be taken given the vast variability of phonological segments described\n14Foradetaileddescription,see:http://unicode.org/reports/tr44/#Canonical_Combining_Class_\nValues.\n65 5IPAmeetsUnicode\nby linguists. The most recent version of the conventions is published online\nbyMoran&McCloy(2014).15\nAccording to Unicode Canonical Combining Classes, overlay diacritics like\n<\u25cc\u0334>(CombiningClassnumber1)alwayscomebeforediacriticsbelow(Combin-\ningClassnumber220),whichinturnalwayscomebeforediacriticsabove(Com-\nbining Class number 230), which in turn come before diacritics over multiple\ncharacters like the tie bar <\u25cc\u0361\u25cc> (Combining Class number 233). We follow this\norder, but add the other IPA diacritics (which are not diacritics in the Unicode\nsense) between diacritics below and the tie bar. Further, within all these classes\nofdiacriticsthereisnocanonicalorderingspecifiedbyUnicode,sowepropose\nanexplicitorderinghere.\nStartingwiththediacriticsbelow:ifacharactersequencecontainsmorethan\none diacritic below the base character, then the place features are applied first\n(linguolabial, dental, apical, laminal, advanced, retracted), followed by the man-\nner features (raised, lowered, advanced and retracted tongue root), then sec-\nondaryarticulations(moreround,lessround),laryngealsettings(creaky,breathy,\nvoiced, devoiced), and finally the syllabic or non-syllabic marker. So, the order\nthatisproposedisthefollowing,where<|>indicatesor and<\u2192>indicatespre-\ncedes.Notethatthegroupsofalternatives(asmarkedby<|>)aresupposednever\ntooccurtogetherwiththesamebasecharacter.Ineffect,thisrepresentsyetan-\notherrestrictiononpossiblediacriticsequences.\nCombiningDiacriticalMarks(below)ordering:\n\u2192 linguolabial<\u25cc\u033c>|dental<\u25cc\u032a>|apical<\u25cc\u033a>|laminal<\u25cc\u033b>\n\u2192 advanced<\u25cc\u031f>|retracted<\u25cc\u0320>\n\u2192 raised<\u25cc\u031d>|lowered<\u25cc\u031e>\n\u2192 advancedtongueroot<\u25cc\u0318>|retractedtongueroot<\u25cc\u0319>\n\u2192 morerounded<\u25cc\u0339>|lessrounded<\u25cc\u031c>\n\u2192 creakyvoiced<\u25cc\u0330>|breathyvoiced<\u25cc\u0324>|voiced<\u25cc\u032c>|voiceless<\u25cc\u0325>\n\u2192 syllabic<\u25cc\u0329>|non-syllabic<\u25cc\u032f>\nNext, if a character sequence contains more than one diacritic above the base\ncharacter,weproposethefollowingorder:\nCombiningDiacriticalMarks(above)ordering:\n\u2192 nasalized<\u25cc\u0303>\n\u2192 centralized<\u25cc\u0308>|mid-centralized<\u25cc\u033d>\n15http://phoible.github.io/conventions/\n66 5.11Pitfall:RevisionstotheIPA\n\u2192 extrashort<\u25cc\u0306>\n\u2192 noaudiblerelease<\u25cc\u031a>\nThen,whenacharactersequencecontainsmorethanonecharacteroftheSpac-\ningModifierLetters,thesewillbeplacedafterallcombiningdiacriticalmarksin\nthefollowingorder:\nSpacingModifierLettersordering:\n\u2192 rhotichook<\u25cc\u02de>\n\u2192 lateralrelease<\u25cc\u02e1>|nasalrelease<\u25cc\u207f>\n\u2192 labialized<\u25cc\u02b7>\n\u2192 palatalized<\u25cc\u02b2>\n\u2192 velarized<\u25cc\u02e0>\n\u2192 pharyngealized<\u25cc\u02e4>\n\u2192 aspirated<\u25cc\u02b0>|ejective<\u25cc\u02bc>\n\u2192 long<\u25cc\u02d0>|half-long<\u25cc\u02d1>\nFinally,thetiebarfollowsattheveryendofanysuchsequence:\nTiebar:\n\u2192 tiebar<\u25cc\u0361\u25cc>\n5.11 Pitfall: Revisions to the IPA\nWitheachrevisionoftheIPA,manydecisionsneedtobemadebytheAssociation\nastowhichsymbolsshouldbeadded,removedorchanged.Forexample,inthe\n1989revisionoftheIPAattheKielConvention,changestospecificsymbols(in\npreviouscharts)weredebatedandtheAssociation\u2019smembersmadecertaindeci-\nsions.Theprevailingmoodattheconventionwasnottochangespecificsymbols\nunlessastrongcasewasmade(Ladefoged1990).Forexample,twosuchdecisions\nincluded:\n\u2022 Symbolsforclickswerechangedfrom<\u0287\u0296\u0297>to<\u01c0\u01c1\u01c3>becausethelatter\nwerethesymbolsusedbynearlyallKhoisanistsandBantuists.\n\u2022 TheAmericanisttraditionofusingusing<\u25cc\u030c>,acombiningcaron\nat U+030C for all postalveolar sounds, like in <\u0161 \u017e \u010d \u01f0>, was not adopted\nbecausetheAssociationmembersattheconvention\u201cwerenotsufficiently\nimpressedbyarguments\u2026totheeffectthatthesesoundsformedanatural\nclass,andthusiswouldbeappropriatetorecognizethisbymaintaininga\ncommonaspecttotheirsymbolism\u201d(Ladefoged1990:62).\n67 5IPAmeetsUnicode\nThesedecisionshavepracticalconsequencesfortranscribersofIPA,particularly\nthosewhowishtofollowcurrentrecommendedpracticesofencodingelectronic\ntextintheUnicodeStandard.Forexample,theUnicodeStandardcontainslatin\nsmallletterturnedt<\u0287>atU+0287,whichisnolongerpartoftheIPA.Itstill\nexists,however,intheUnicodeIPAExtensionsblock,withthecomment\u201cdental\nclick(soundof\u2018tsktsk\u2019)\u201d.Insuchcases,theIPAtranscribermustknowthestatus\noflegacysymbolsinthecurrentversionoftheIPAandthecorrectcharactersin\ntheUnicodeStandard.\nThemostcontroversialissueregardingsymbolsdebatedattheconventionwas\nthe representation for voiceless implosives (Ladefoged 1990: 62). In accordance\nwith the principles of the IPA, as outlined in Section 4, distinct symbols are fa-\nvored for cases of phonological contrast. Further, convenience of display in the\nchartmustalsobetakenintoaccountwhenarguingfororagainsttheinclusion\nordeletionofIPAsymbolsintheIPAchart.Finally,theinclusionordeletionof\nsymbolsshouldconsiderthecurrentstateofphoneticknowledgeoftheworld\u2019s\nlanguages.\nLadefoged (1990) argued against the inclusion of the symbols < \u01a5, \u01ad, \u0188, \u0199, \u02a0 >\nfor voiceless implosives, noting (i) that they are not contrastive (e.g. in Mayan\nlanguages); (ii) that there is no instrumental evidence supporting voiceless im-\nplosivesinAfrica;and(iii)thatthesoundsaresufficientlyraresoasnottoneed\na whole new row of symbols in the chart. Ladefoged favored symbolizing the\nsounds using a voiceless diacritic ring below voiced implosives, e.g. <\u0253\u0325>. Nev-\nertheless, in the 1989 IPA chart there is indeed a row for implosives containing\nvoicelessandvoicedpairs.16 Butinthenextrevision,in1993(withanupdatein\n1996), the voiceless implosives were dropped. The implosives row from the IPA\nconsonantalchartdisappearedandvoicedimplosivesweregivenacolumninthe\nnon-pulmonic consonants table (which is still reflected in the latest revision to\ndate,IPA2005).\nTheJournaloftheInternationalPhoneticAssociationfollowsitsownpublished\nstandard for the IPA at the time of publication, even when it may conflict with\ntheAssociation\u2019sprincipleofusingdifferentsymbolsforcontrastivesoundsand\ndiacriticsforphoneticvariation.Forexample,inthecaseofvoicelessimplosives,\nMcLaughlin(2005)showsthatSeereer-Siin(Niger-Congo,Atlantic;ISO639-3srr)\nhasaphonologicallycontrastivesetofvoicedandvoicelessimplosivestopsatthe\nlabial, coronal and palatal places of articulation. These symbols are transcribed\ninanIllustrationsoftheIPAarticleintheIPAjournalas<\u0253\u0325,\u0257\u0325,\u0284\u0325>.\n16https://en.wikipedia.org/wiki/File:IPA_as_of_1989.png\n68 5.12AdditionstotheIPA\nThepoint of this pitfall isto highlight that revisionstothe IPAwill continue\ninto the future, albeit infrequently. Nevertheless, given the Unicode Standard\u2019s\nprincipleofmaintainingbackwardscompatibility(atallcosts),transcribersand\nconsumers of IPA cannot rely solely on remarks in the Unicode Standard to re-\nflect current standard IPA usage. There is the possibility that at a later revision\noftheIPA,symbolsthatarenotcurrentlyencodedintheUnicodeStandardwill\nbeaddedtotheIPA\u2013althoughwethinkthisisunlikely.\n5.12 Additions to the IPA\nInthecourseofcollectingalargesampleofphonemesystemsacrosstheworld\u2019s\nlanguages, Moran et al. (2014) found that in order to preserve distinctions both\nwithin and across language descriptions, additions to the approved IPA glyph\nsetwereneeded.WhereverpossibletheseadditionsweredrawnfromtheextIPA\nsymbols for disordered speech (Duckworth et al. 1990).17 This section describes\ntheseproposedadditionstotheIPAglyphset.Theadditionsarenotpartofthe\nofficialIPArecommendations,sotheyshouldbeusedwithcaution.\n\u2022 Retroflexclick\nRetroflexclickscanberepresentedby<\u203c>doubleexclamationmarkat\nU+203C.Notethatthe(post-)alveolarclick<\u01c3>atU+01C3isconfusinglyre-\nferredtoaslatinletterretroflexclickintheUnicodeStandard,which\nisprobablybestconsideredanerror.\n\u2022 Voicedretrofleximplosive\nAlthough the IPA includes a series of voiced implosives (marked with a\nhook on top, see Section 5.8), there is no voiced retroflex implosive. Fol-\nlowingthespiritoftheIPA,weproposetouse<\u1d91>latinsmallletterd\nwithhookandtailatU+1D91forthissound.\n\u2022 Fortis/lenis\nLanguages described as having a fortis/plain/lenis distinction that corre-\nspondspoorlywiththetraditionalvoiced/voiceless-unaspirated/voiceless-\naspiratedcontinuumcanbemarkedusingthevoicelessglyphfortheplain\nphoneme,andthen<\u25cc\u0348>combiningdoubleverticallinebelowat\nU+0348tomarkthefortisarticulation,and/or<\u25cc\u0349>combiningleftangle\nbelowatU+0349forthelenisarticulation.\n\u2022 Frictionalization\nThediacritic<\u25cc\u0353>combiningxbelowatU+0353canbeusedtorepresent\n17https://www.internationalphoneticassociation.org/sites/default/files/extIPAChart2008.pdf\n69 5IPAmeetsUnicode\nthree types of frictionalized sounds: First, click consonants where the re-\nleaseoftheanteriorclosureinvolvesaningressivesuckingsoundsimilar\ntoafricative,forexample<k\u01c3\u02b0\u0353>;second,frictionalizedvowels(soundsthat\nare phonologically vocalic, but with sufficiently close closures to create\nbuzzing); and third, fricative sounds at places of articulation that do not\nhave dedicated fricative glyphs, for example sounds with voiceless velar\nlateralfrication,like<\u029f\u0325>\u0353 .\n\u2022 Derhoticization\nFor derhoticization we propose to use <\u25cc\u032e> combining breve below at\nU+032E.\n\u2022 Coronalnon-sibilant\nLanguages described as having a sibilant/non-sibilant distinction among\ncoronal fricatives and affricates can be handled using the subscript <\u25cc\u0347>\ncombiningeqalssignbelowatU+0347tomarkthenon-sibilant\nphoneme.\n\u2022 Glottalization\nGlottalizedsoundscanbeindicatedusing<\u25cc\u02c0>modifierletterglottal\nstopatU+02C0,unlessitisclearthateitherejectiveorcreakyvoicingare\ntheintendedsounds(inwhichcasesthestandardIPAdiacriticsshouldbe\nused). Pre-glottalized sounds can be marked with <\u02c0\u25cc> to the left of the\nbaseglyph,forexample<\u02c0t>.\n\u2022 Voicedpre-aspiration\nVoiced sounds having pre-aspiration can be marked with <\u02b1\u25cc> modifier\nletter small h with hook at U+02B1 to the left of the base glyph, for\nexample<\u02b1d>.\n\u2022 Epilaryngealphonation\nTherearesomerarearticulationsthatmakeuseofanepilaryngealphona-\ntionmechanism(e.g.the\u201csphinctericvowels\u201dof!X\u00f3\u00f5).Torepresentthese\nvowels, we propose to use the modifier <\u25cc\u1d31> modifier letter capital e\natU+1D31todenotesuchsphinctericphonation.\n5.13 Unicode IPA Recommendations\nSummarizingthepitfallsasdiscussedinthischapter,weproposetodefinethree\ndifferentIPAencodings:strict-IPA,valid-IPAandwidened-IPA.Informallyspeak-\ning,valid-IPArepresentsthecurrentstateoftheIPA(TheInternationalPhonetic\nAssociation2015).Strict-IPArepresentsamoreconstrainedversionofIPA,while\nwidened-IPAisaslightlyextendedversionofIPA,allowingafewmoresymbols.\n70 5.13UnicodeIPARecommendations\nStrict-IPA encoding is supposed to be used when interoperability of phonetic\nresources is intended. It is a strongly constrained subset of IPA geared towards\nuniqueness of encoding. Ideally, for each transcription there should be exactly\none possible strict-IPA encoding. For each phonetic feature there is only one\npossibility (see Section 5.5) and the IPA diacritics are forced into a canonical\nordering(seeSection5.10).\nValid-IPAdoesallowalternativesymbolswiththesamephoneticmeaning,as\nspecifiedintheofficialIPAspecifications.Also,valid-IPAdoesnotenforceaspe-\ncificorderingofdiacritics,becausetheIPAdoesnotproposeanysuchordering.\nThismeansthatinvalid-IPAthesamephoneticintentioncanbeencodedinmul-\ntiple ways. This is sufficient for phonetically trained human eyes, but it is not\nsufficientforautomaticinteroperability.\nFinally,widened-IPAincludesafewmoresymbolswhichseemtobeusefulfor\nvariousspecialcases(seeSection5.12).\nAt the end of this chapter we have added a few longish tables summarizing all\n159differentUnicodecodepointsthatformthebasisofstrict-IPAencoding(107\nletters,36diacriticsand16remainingsymbols).Wealsomakethesetablesavail-\nableonlineinCSVformat.18Eachofthesetablesshowsatypicalglyph,andthen\nliststheUnicodeCodepoint,UnicodeNameandIPAdescriptionforeachsymbol.\nFurther,thereisatablewiththeadditionaloptionsforvalid-IPAandatablewith\ntheadditionaloptionsforwidened-IPA.\n\u2022 strict-IPAletters\nThe107differentIPAlettersasallowedinstrict-IPAencodingarelistedin\nTable5.1startingonpage73.\n\u2022 strict-IPAdiacritics\nThe 36 different IPA diacritics and tone markers (both Unicode Modifier\nLettersandCombiningDiacriticalMarks)asallowedinstrict-IPAencoding\narelistedinTable5.2startingonpage76.\n\u2022 strict-IPAremainders\nThe 16 remaining IPA symbols (boundary, stress, tone letters and intona-\ntion markers) as allowed in strict-IPA encoding are listed in Table 5.3 on\npage77.\n18https://github.com/unicode-cookbook/cookbook/tree/master/book/tables\n71 5IPAmeetsUnicode\n\u2022 valid-IPAadditions\nThe 16 additional symbols as allowed in valid-IPA encoding are listed in\nTable5.4onpage78.\n\u2022 widened-IPAadditions\nThe10proposedadditionstotheIPAarelistedinTable5.5onpage79.\n72 5.13UnicodeIPARecommendations\nTable5.1:Strict-IPAletterswithUnicodeencodings\nCode Unicodename IPAname\na U+0061 latinsmalllettera openfrontunrounded\n\u00e6 U+00E6 latinsmallletterae raisedopenfrontunrounded\n\u0250 U+0250 latinsmallletterturneda loweredschwa\n\u0251 U+0251 latinsmallletteralpha openbackunrounded\n\u0252 U+0252 latinsmallletterturnedalpha openbackrounded\nb U+0062 latinsmallletterb voicedbilabialplosive\n\u0299 U+0299 latinlettersmallcapitalb voicedbilabialtrill\n\u0253 U+0253 latinsmallletterbwithhook voicedbilabialimplosive\nc U+0063 latinsmallletterc voicelesspalatalplosive\n\u00e7 U+00E7 latinsmalllettercwithcedilla voicelesspalatalfricative\n\u0255 U+0255 latinsmalllettercwithcurl voicelessalveolo-palatal\nfricative\nd U+0064 latinsmallletterd voicedalveolarplosive\n\u00f0 U+00F0 latinsmalllettereth voiceddentalfricative\n\u0256 U+0256 latinsmallletterdwithtail voicedretroflexplosive\n\u0257 U+0257 latinsmallletterdwithhook voiceddental/alveolarimplosive\ne U+0065 latinsmalllettere close-midfrontunrounded\n\u0259 U+0259 latinsmallletterschwa mid-centralschwa\n\u025b U+025B latinsmallletteropene open-midfrontunrounded\n\u0258 U+0258 latinsmallletterreversede close-midcentralunrounded\n\u025c U+025C latinsmallletterreversedopene open-midcentralunrounded\n\u025e U+025E latinsmallletterclosedreversed open-midcentralrounded\nopene\nf U+0066 latinsmallletterf voicelesslabiodentalfricative\n\u0261 U+0261 latinsmallletterscriptg voicedvelarplosive\n\u0262 U+0262 latinlettersmallcapitalg voiceduvularplosive\n\u0260 U+0260 latinsmalllettergwithhook voicedvelarimplosive\n\u029b U+029B latinlettersmallcapitalgwith voiceduvularimplosive\nhook\n\u0264 U+0264 latinsmallletterramshorn close-midbackunrounded\n\u0263 U+0263 latinsmalllettergamma voicedvelarfricative\nh U+0068 latinsmallletterh voicelessglottalfricative\n\u0127 U+0127 latinsmallletterhwithstroke voicelesspharyngealfricative\n\u029c U+029C latinlettersmallcapitalh voicelessepiglottalfricative\ncontinuedonnextpage\n73 5IPAmeetsUnicode\nTable5.1Strict-IPAletterswithUnicodeencodings\u2014continued\nCode Unicodename IPAname\n\u0266 U+0266 latinsmallletterhwithhook voicedglottalfricative\n\u0267 U+0267 latinsmallletterhengwithhook simultaneousvoiceless\npostalveolar+velarfricative\n\u0265 U+0265 latinsmallletterturnedh voicedlabial-palatal\napproximant\ni U+0069 latinsmallletteri closefrontunrounded\n\u026a U+026A latinlettersmallcapitali laxclosefrontunrounded\n\u0268 U+0268 latinsmallletteriwithstroke closecentralunrounded\nj U+006A latinsmallletterj voicedpalatalapproximant\n\u029d U+029D latinsmallletterjwithcrossedtail voicedpalatalfricative\n\u025f U+025F latinsmallletterdotlessjwith voicedpalatalplosive\nstroke\n\u0284 U+0284 latinsmallletterdotlessjwith voicedpalatalimplosive\nstrokeandhook\nk U+006B latinsmallletterk voicelessvelarplosive\nl U+006C latinsmallletterl voicedalveolarlateral\napproximant\n\u029f U+029F latinlettersmallcapitall voicedvelarlateralapproximant\n\u026c U+026C latinsmallletterlwithbelt voicelessalveolarlateral\nfricative\n\u026d U+026D latinsmallletterlwithretroflex voicedretroflexlateral\nhook approximant\n\u026e U+026E latinsmallletterlezh voicedalveolarlateralfricative\n\u028e U+028E latinsmallletterturnedy voicedpalatallateral\napproximant\nm U+006D latinsmallletterm voicedbilabialnasal\n\u0271 U+0271 latinsmalllettermwithhook voicedlabiodentalnasal\nn U+006E latinsmalllettern voicedalveolarnasal\n\u0274 U+0274 latinlettersmallcapitaln voiceduvularnasal\n\u0272 U+0272 latinsmallletternwithlefthook voicedpalatalnasal\n\u0273 U+0273 latinsmallletternwithretroflex voicedretroflexnasal\nhook\n\u014b U+014B latinsmalllettereng voicedvelarnasal\no U+006F latinsmalllettero close-midbackrounded\n\u00f8 U+00F8 latinsmallletterowithstroke close-midfrontrounded\n\u0153 U+0153 latinsmallligatureoe open-midfrontrounded\n\u0276 U+0276 latinlettersmallcapitaloe openfrontrounded\n\u0254 U+0254 latinsmallletteropeno open-midbackrounded\n\u0275 U+0275 latinsmallletterbarredo close-midcentralrounded\ncontinuedonnextpage\n74 5.13UnicodeIPARecommendations\nTable5.1Strict-IPAletterswithUnicodeencodings\u2014continued\nCode Unicodename IPAname\np U+0070 latinsmallletterp voicelessbilabialplosive\n\u0278 U+0278 latinsmallletterphi voicelessbilabialfricative\nq U+0071 latinsmallletterq voicelessuvularplosive\nr U+0072 latinsmallletterr voicedalveolartrill\n\u0280 U+0280 latinlettersmallcapitalr voiceduvulartrill\n\u0279 U+0279 latinsmallletterturnedr voicedalveolarapproximant\n\u027a U+027A latinsmallletterturnedrwith voicedalveolarlateralflap\nlongleg\n\u027b U+027B latinsmallletterturnedrwith voicedretroflexapproximant\nhook\n\u027d U+027D latinsmallletterrwithtail voicedretroflextap\n\u027e U+027E latinsmallletterrwithfishhook voicedalveolartap\n\u0281 U+0281 latinlettersmallcapitalinvertedr voiceduvularfricative\ns U+0073 latinsmallletters voicelessalveolarfricative\n\u0282 U+0282 latinsmallletterswithhook voicelessretroflexfricative\n\u0283 U+0283 latinsmallletteresh voicelesspostalveolarfricative\nt U+0074 latinsmalllettert voicelessalveolarplosive\n\u0288 U+0288 latinsmalllettertwithretroflex voicelessretroflexplosive\nhook\nu U+0075 latinsmallletteru closebackrounded\n\u0289 U+0289 latinsmallletterubar closecentralrounded\n\u026f U+026F latinsmallletterturnedm closebackunrounded\n\u0270 U+0270 latinsmallletterturnedmwith voicedvelarapproximant\nlongleg\n\u028a U+028A latinsmallletterupsilon laxclosebackrounded\nv U+0076 latinsmallletterv voicedlabiodentalfricative\n\u028b U+028B latinsmalllettervwithhook voicedlabiodentalapproximant\n\u2c71 U+2C71 latinsmalllettervwithrighthook voicedlabiodentaltap\n\u028c U+028C latinsmallletterturnedv open-midbackunrounded\nw U+0077 latinsmallletterw voicedlabial-velarapproximant\n\u028d U+028D latinsmallletterturnedw voicelesslabial-velarfricative\nx U+0078 latinsmallletterx voicelessvelarfricative\ny U+0079 latinsmalllettery closefrontrounded\n\u028f U+028F latinlettersmallcapitaly laxclosefrontrounded\nz U+007A latinsmallletterz voicedalveolarfricative\n\u0290 U+0290 latinsmallletterzwithretroflex voicedretroflexfricative\nhook\ncontinuedonnextpage\n75 5IPAmeetsUnicode\nTable5.1Strict-IPAletterswithUnicodeencodings\u2014continued\nCode Unicodename IPAname\n\u0291 U+0291 latinsmallletterzwithcurl voicedalveolo-palatalfricative\n\u0292 U+0292 latinsmallletterezh voicedpostalveolarfricative\n\u0294 U+0294 latinletterglottalstop voicelessglottalplosive\n\u0295 U+0295 latinletterpharyngealvoiced voicedpharyngealfricative\nfricative\n\u02a1 U+02A1 latinletterglottalstopwithstroke epiglottalplosive\n\u02a2 U+02A2 latinletterreversedglottalstop voicedepiglottalfricative\nwithstroke\n\u01c0 U+01C0 latinletterdentalclick voicelessdentalclick\n\u01c1 U+01C1 latinletterlateralclick voicelessalveolarlateralclick\n\u01c2 U+01C2 latinletteralveolarclick voicelesspalatoalveolarclick\n\u01c3 U+01C3 latinletterretroflexclick voiceless(post)alveolarclick\n\u0298 U+0298 latinletterbilabialclick voicelessbilabialclick\n\u03b2 U+03B2 greeksmallletterbeta voicedbilabialfricative\n\u03b8 U+03B8 greeksmalllettertheta voicelessdentalfricative\n\u03c7 U+03C7 greeksmallletterchi voicelessuvularfricative\nTable5.2:Strict-IPAdiacriticswithUnicodeencodings\nCode Unicodename IPAname\n\u25cc\u0334 U+0334 combiningtildeoverlay velarizedorpharyngealized\n\u25cc\u033c U+033C combiningseagullbelow linguolabial\n\u25cc\u032a U+032A combiningbridgebelow dental\n\u25cc\u033b U+033B combiningsqarebelow laminal\n\u25cc\u033a U+033A combininginvertedbridgebelow apical\n\u25cc\u031f U+031F combiningplussignbelow advanced\n\u25cc\u0320 U+0320 combiningminussignbelow retracted\n\u25cc\u031d U+031D combininguptackbelow raised\n\u25cc\u031e U+031E combiningdowntackbelow lowered\n\u25cc\u0318 U+0318 combininglefttackbelow advancedtongueroot\n\u25cc\u0319 U+0319 combiningrighttackbelow retractedtongueroot\ncontinuedonnextpage\n76 5.13UnicodeIPARecommendations\nTable5.2Strict-IPAdiacriticswithUnicodeencodings\u2014continued\nCode Unicodename IPAname\n\u25cc\u031c U+031C combininglefthalfringbelow lessrounded\n\u25cc\u0339 U+0339 combiningrighthalfringbelow morerounded\n\u25cc\u032c U+032C combiningcaronbelow voiced\n\u25cc\u0325 U+0325 combiningringbelow voiceless\n\u25cc\u0330 U+0330 combiningtildebelow creakyvoiced\n\u25cc\u0324 U+0324 combiningdiaeresisbelow breathyvoiced\n\u25cc\u0329 U+0329 combiningverticallinebelow syllabic\n\u25cc\u032f U+032F combininginvertedbrevebelow non-syllabic\n\u25cc\u0303 U+0303 combiningtilde nasalized\n\u25cc\u0308 U+0308 combiningdiaeresis centralized\n\u25cc\u033d U+033D combiningxabove mid-centralized\n\u25cc\u0306 U+0306 combiningbreve extra-short\n\u25cc\u031a U+031A combiningleftangleabove noaudiblerelease\n\u25cc\u02de U+02DE modifierletterrhotichook rhotacized\n\u25cc\u02e1 U+02E1 modifierlettersmalll lateralrelease\n\u25cc\u207f U+207F superscriptlatinsmalllettern nasalrelease\n\u25cc\u02b7 U+02B7 modifierlettersmallw labialized\n\u25cc\u02b2 U+02B2 modifierlettersmallj palatalized\n\u25cc\u02e0 U+02E0 modifierlettersmallgamma velarized\n\u25cc\u02e4 U+02E4 modifierlettersmallreversedglottalstop pharyngealized\n\u25cc\u02b0 U+02B0 modifierlettersmallh aspirated\n\u25cc\u02bc U+02BC modifierletterapostrophe ejective\n\u25cc\u02d0 U+02D0 modifierlettertriangularcolon long\n\u25cc\u02d1 U+02D1 modifierletterhalftriangularcolon half-long\n\u25cc\u0361\u25cc U+0361 combiningdoubleinvertedbreve tiebar\nTable5.3:OtherStrict-IPAsymbolswithUnicodeencodings\nCode Unicodename IPAname\ncontinuedonnextpage\n77 5IPAmeetsUnicode\nTable5.3OtherStrict-IPAsymbolswithUnicodeencodings\u2014continued\nCode Unicodename IPAname\n\u02c8 U+02C8 modifierletterverticalline primarystress\n\u02cc U+02CC modifierletterlowverticalline secondarystress\n\u02e5 U+02E5 modifierletterextra-hightonebar extrahightone\n\u02e6 U+02E6 modifierletterhightonebar hightone\n\u02e7 U+02E7 modifierlettermidtonebar midtone\n\u02e8 U+02E8 modifierletterlowtonebar lowtone\n\u02e9 U+02E9 modifierletterextra-lowtonebar extralowtone\n\u2191 U+2191 upwardsarrow globalrise\n\u2193 U+2193 downwardsarrow globalfall\n\u2197 U+2197 northeastarrow globalrise\n\u2198 U+2198 southeastarrow globalfall\nU+0020 space wordbreak\n. U+002E fullstop syllablebreak\n| U+007C verticalline minorgroupbreak(foot)\n\u2016 U+2016 doubleverticalline majorgroupbreak(intonation)\n\u203f U+203F undertie linking(absenceofabreak)\nTable5.4:Additionalcharactersforvalid-IPAwithUnicodeencodings\nCode Unicodename Phoneticdescription\n\u25cc\u030a U+030A combiningringabove voiceless(above)\ng U+0067 latinsmallletterg voicedvelarplosive\n\u25cc\u030b U+030B combiningdoubleacuteaccent extrahightone\n\u25cc\u0301 U+0301 combiningacuteaccent hightone\n\u25cc\u0304 U+0304 combiningmacron midtone\n\u25cc\u0300 U+0300 combininggraveaccent lowtone\n\u25cc\u030f U+030F combiningdoublegraveaccent extralowtone\n\u25cc\u0302 U+0302 combiningcircumflexaccent falling\n\u25cc\u030c U+030C combiningcaron rising\n\u25cc\u1dc4 U+1DC4 combiningmacron-acute highrising\ncontinuedonnextpage\n78 5.13UnicodeIPARecommendations\nTable5.4Additionalcharactersforvalid-IPAwithUnicodeencodings\u2014continued\nCode Unicodename Phoneticdescription\n\u25cc\u1dc5 U+1DC5 combininggrave-macron lowrising\n\u25cc\u1dc6 U+1DC6 combiningmacron-grave lowfalling\n\u25cc\u1dc7 U+1DC7 combiningacute-macron highfalling\n\u25cc\u1dc8 U+1DC8 combininggrave-acute-grave rising-falling\n\u25cc\u1dc9 U+1DC9 combiningacute-grave-acute falling-rising\n\u25cc\u035c\u25cc U+035C combiningdoublebrevebelow tiebar(below)\nTable5.5:Additionstowidened-IPAwithUnicodeencodings\nCode Unicodename Phoneticdescription\n\u203c U+203C doubleexclamationmark retroflexclick\n\u1d91 U+1D91 latinsmallletterdwithhookandtail voicedretrofleximplosive\n\u25cc\u0348 U+0348 combiningdoubleverticallinebelow fortis\n\u25cc\u0349 U+0349 combiningleftanglebelow lenis\n\u25cc\u0353 U+0353 combiningxbelow frictionalized\n\u25cc\u032e U+032E combiningbrevebelow derhoticized\n\u25cc\u0347 U+0347 combiningeqalssignbelow non-sibilant\n\u25cc\u02c0 U+02C0 modifierletterglottalstop glottalized\n\u02b1\u25cc U+02B1 modifierlettersmallhwithhook voicedpre-aspirated\n\u25cc\u1d31 U+1D31 modifierlettercapitale epilaryngealphonation\n79  6 Practical recommendations\nThischapterismeanttobeashortguidefornoviceuserswhoarenotinterested\nin the programmatic aspects presented in Chapters 7 & 8. Instead, we provide\nlinks to quickly find general information about the Unicode Standard and the\nInternationalPhoneticAlphabet(IPA).Wetargetordinaryworkinglinguistswho\nwanttoknowhowtoeasilyinsertspecialcharactersintotheirdigitaldocuments\nandapplications.\n6.1 Unicode\nWediscussedtheUnicodeConsortium\u2019sapproachtocomputationallyencoding\nwriting systems in Chapter 2. The common pitfalls that we have encountered\nwhenusingtheUnicodeStandardarediscussedindetailinChapter3.Together\nthesechaptersprovideuserswithanin-depthbackgroundaboutthehurdlesthey\nmayencounterwhenusingtheUnicodeStandardforencodingtheirdataorfor\ndevelopingmultilingualapplications.Forgeneralbackgroundinformationabout\nUnicodeandcharacterencodings,seetheseresources:\n\u2022 http://www.unicode.org/standard/WhatIsUnicode.html\n\u2022 https://en.wikipedia.org/wiki/Unicode\n\u2022 https://www.w3.org/International/articles/definitions-characters/\nForpracticalpurposes,usersneedawaytoinsertspecialcharacters(i.e.charac-\ntersthatarenoteasilyenteredviatheirkeyboards)intodocumentsandsoftware\napplications. There are a few basic approaches for inserting special characters.\nOne way is to use software-specific functionality, when it is available. For ex-\nample, Microsoft Word has an insert-special-symbol-or-character function that\nallowsuserstoscrollthroughatableofspecialcharactersacrossdifferentscripts.\nSpecial characters can be then inserted into the document by clicking on them.\nAnother way is to install a system-wide application for special character inser-\ntion.WehavelongbeenfansofthePopCharapplicationfromErgonisSoftware, 6Practicalrecommendations\nwhichisasmallprogramthatcaninsertmostUnicodecharacters(notehowever\nthatthefullversionrequiresapaidsubscription).1\nThere are also web-based Unicode character pickers available through the\nbrowser that allow for the creation and insertion of special characters, which\ncanthenbecopied&pastedintodocumentsorsoftwareapplications.Forexam-\nple,try:\n\u2022 https://unicode-table.com/en/\n\u2022 https://r12a.github.io/pickers/\nYet another option for special character insertion includes operating system-\nspecificshortcuts.ForexampleontheMac,holdingdownakeyonthekeyboard\nfor a second, say <u>, triggers a pop up with the options <\u00fb, \u00fc, \u00f9, \u00fa, \u016b> which\ncanthenbeinsertedbykeyingtheassociatednumber(1\u20135).Thismethodiscon-\nvenientforoccasionallyinsertingtypeaccentedcharacters,butthefullrangeof\nspecial characters is limited and this method is burdensome for rapidly insert-\ning many different characters. For complete access to special characters, Mac\nprovides a Keyboard Viewer application available in the Keyboard pane of the\nSystemPreferences.\nOnWindows,accentedcharacterscanbeinsertedbyusingalt-keyshortcuts,\ni.e.holdingdownthealt-keyandkeyinginasequenceofnumbers(whichtypi-\ncallyreflecttheUnicodecharacter\u2019sdecimalrepresentation).Forexample,latin\nsmall letter c with cedilla at U+00E7 with the decimal code 231 can be in-\nsertedbyholdingthealt-keyandkeyingthesequence0231.Again,thismethod\nisburdensomeforrapidlyinsertingcharacters.ForaccesstothefullrangeofUni-\ncodecharacters,theCharacterMapprogramcomespreinstalledonallMicrosoft\noperatingsystems.\nThere are also many third-party applications that provide custom keyboard\nlayouts.Theseprogramstypicallyoverridekeysorkeystrokesontheuser\u2019skey-\nboard allowing them to quickly enter special characters (once the layout of the\nnewkeyboardismastered).Theycanbelanguage-specificordevotedspecifically\ntoIPA.Twopopularprogramsare:\n\u2022 https://keyman.com/\n\u2022 http://scripts.sil.org/ipa-sil_keyboard\n1http://www.ergonis.com/products/popcharx/\n82 6.2IPA\n6.2 IPA\nInChapter4wedescribedindetailthehistoryandprinciplesoftheInternational\nPhoneticAlphabet(IPA)andhowitbecameencodedintheUnicodeStandard.In\nChapter5wedescribetheresultingpitfallsfromtheirmarriage.Thesetwochap-\ntersprovideadetailedoverviewofthechallengesthatusersfacewhenworking\nwiththetwostandards.\nForgeneralinformationabouttheIPA,thestandardtextistheHandbookofthe\nInternationalPhoneticAssociation:AGuidetotheUseoftheInternationalPhonetic\nAlphabet (TheInternationalPhoneticAssociation1999).Thehandbookdescribes\nin detail the principles and premises of the IPA, which we have summarized in\nSection 4.2. The handbook also provides many examples of how to use the IPA.\nTheAssociationalsomakesavailableinformationaboutitselfonline2 anditpro-\nvides the most current IPA charts.3 Wikipedia also has a comprehensive article\nabouttheIPA.4\nThere are several good Unicode IPA character pickers available through the\nbrowser,including:\n\u2022 https://r12a.github.io/pickers/ipa/\n\u2022 https://westonruter.github.io/ipa-chart/keyboard/\n\u2022 http://ipa.typeit.org/\nVarious linguistics departments also provide information about IPA fonts, soft-\nware,andinsertingUnicodeIPAcharacters.Twousefulresourcesare:\n\u2022 http://www.phon.ucl.ac.uk/resource/phonetics/\n\u2022 https://www.york.ac.uk/language/current/resources/freeware/ipa-fonts-and-\nsoftware/\nRegardingfontsthatdisplayUnicodeIPAcorrectly,manylinguiststurntothe\nIPA Unicode fonts developed by SIL International. The complete SIL font list is\navailableonline.5 ThereisalsoapagethatdescribesIPAtranscriptionusingthe\nSILfontsandprovidesaninformativediscussionondecidingwhichfonttouse.6\nTraditionally, IPA fonts popular with linguists were created and maintained by\nSIL International, so it is often the case in our experience that we encounter\n2https://www.internationalphoneticassociation.org/\n3https://www.internationalphoneticassociation.org/content/ipa-chart\n4https://en.wikipedia.org/wiki/International_Phonetic_Alphabet\n5http://scripts.sil.org/SILFontList\n6http://scripts.sil.org/ipahome\n83 6Practicalrecommendations\nlinguisticsdatainlegacyIPAfonts,i.e.pre-UnicodefontssuchasSILIPA93.7SIL\nInternationaldoesagoodjobofdescribinghowtoconvertfromlegacyIPAfonts\ntoUnicodeIPA.ThemostpopularUnicodeIPAfontsareDoulosSILandCharis\nSIL:\n\u2022 https://software.sil.org/doulos/\n\u2022 https://software.sil.org/charis/\nLastly,herearesomeonlineresourcesthatwefindparticularlyusefulforfind-\ningmoreinformationaboutindividualUnicodecharactersandalsoforconvert-\ningbetweenencodings:\n\u2022 http://www.fileformat.info/\n\u2022 https://unicodelookup.com/\n\u2022 https://r12a.github.io/scripts/featurelist/\n\u2022 https://r12a.github.io/app-conversion/\n6.3 For programmers and potential programmers\nIfyouhavemadeitthisfar,andyouareeagertoknowmoreaboutthetechnical\naspectsoftheUnicodeStandardandhowtheyrelatetosoftwareprogramming,\nwe recommend two light-hearted blog posts on the topic. The classic blog post\naboutwhatprogrammersshouldknowabouttheUnicodeStandardisJoelSpol-\nsky\u2019sTheAbsoluteMinimumEverySoftwareDeveloperAbsolutely,PositivelyMust\nKnow About Unicode and Character Sets (No Excuses!).8 A more recent blogpost,\nwith a bit more of the technical details, is by David C. Zentgraf and is titled,\nWhat Every Programmer Absolutely, Positively Needs To Know About Encodings\nAndCharacterSetsToWorkWithText.9Thispostisaimedatsoftwaredevelopers\nandusesthePHPlanguageforexamples.\nFor users of Python, see the standard documentation on how to use Unicode\nin your programming applications.10 For R users we recommend the stringi li-\nbrary.11 For LATEX users the TIPA package is useful for inserting IPA characters\nintoyourtypesetdocuments.Seetheseresources:\n7http://scripts.sil.org/FontFAQ_IPA93\n8https://www.joelonsoftware.com/2003/10/08/the-absolute-minimum-every-software-\ndeveloper-absolutely-positively-must-know-about-unicode-and-character-sets-no-excuses/\n9http://kunststube.net/encoding/\n10https://docs.python.org/3/howto/unicode.html\n11https://cran.r-project.org/web/packages/stringi/index.html\n84 6.3Forprogrammersandpotentialprogrammers\n\u2022 http://www.tug.org/tugboat/tb17-2/tb51rei.pdf\n\u2022 https://ctan.org/pkg/tipa\n\u2022 http://ptmartins.info/tex/tipacheatsheet.pdf\nButwefinditmucheasiertousetheUnicode-awareX\u018eTEXtypesettingsystem.12\nUnicode characters can be directly inserted into your TEX documents and com-\npiledintotypesetPDFwithX\u018eLATEX.\nLastly,weleaveyouwithsomeUnicodehumorformakingitthisfar:\n\u2022 https://xkcd.com/380/\n\u2022 https://xkcd.com/1137/\n\u2022 http://www.commitstrip.com/en/2014/06/17/unicode-7-et-ses-nouveaux-emoji/\n\u2022 http://www.i18nguy.com/humor/unicode-haiku.html\n12http://xetex.sourceforge.net/\n85  7 Orthography profiles\n7.1 Characterizing writing systems\nThe Unicode Standard offers a very detailed technical approach for characteriz-\ning writing systems computationally. As such, it is sometimes too complex for\nthe day-to-day practice of many linguists, as exemplified by the need to under-\nstandthecommonpitfallsthatwediscussedinChapters3&5.Therefore,inthis\nsectionweproposesomesimpleguidelinesforlinguistsworkinginmultilingual\nenvironments.\nOur aims for adopting a Unicode-based solution are: (i) to improve the con-\nsistency of the encoding of sources, (ii) to transparently document knowledge\naboutthewritingsystem(includingtransliteration),and(iii)todoallofthatina\nwaythatiseasyandquicktomanageformanydifferentsourceswithmanydif-\nferentwritingsystems.Thecentralconceptinourproposalistheorthography\nprofile, a simple delimited text file, that characterizes and documents a writ-\ningsystem.WealsoofferbasicimplementationsinPython andRtoassistwith\nthe production of such files, and to apply orthography profiles for consistency\ntesting, grapheme tokenization and transliteration. Not only can orthography\nprofiles be helpful in the daily practice of linguistics, they also succinctly docu-\nmenttheorthographicdetailsofaspecificsource,and,assuch,mightfruitfullybe\npublishedalongsidesources(e.g.indigitalarchives).Also,inhigh-levellinguistic\nanalysesinwhichthegraphemicdetailisofcentralimportance(e.g.phonotactic\norcomparative-historicalstudies),orthographyprofilescantransparentlydocu-\nmentthedecisionsthathavebeentakenintheinterpretationoftheorthography\ninthesourcesused.\nGiventhese goals, Unicode Locales (see Chapter 2) might seem likethe ideal\northographyprofiles.However,therearevariouspracticalobstaclespreventing\nthe use of Unicode Locales in the daily linguistic practice, namely: (i) the XML\nstructure1 is too verbose to easily and quickly produce or correct manually, (ii)\nUnicodeLocalesaredesignedforawidescopeofinformation(likedateformats\nornamesofweekdays)mostofwhichisnotapplicablefordocumentingwriting\n1http://unicode.org/reports/tr35/ 7Orthographyprofiles\nsystems, and (iii) most crucially, even if someone made the effort to produce a\ntechnically correct Unicode Locale for a specific source at hand, then it is well-\nnighimpossibletodeploythedescription.Thisisbecausealocaledescriptionhas\ntobesubmittedtoandacceptedbytheUnicodeCommonLocaleDataRepository.\nThe repository is (rightly so) not interested in descriptions that only apply to a\nlimitedsetofsources(e.g.descriptionsforonlyasingledictionary).\nThe major challenge,then, is developingan infrastructureto identify the ele-\nments that are individual graphemes in a source, specifically for the enormous\nvariety of sources using some kind of alphabetic writing system. Authors of\nsource documents (e.g. dictionaries, wordlists, corpora) use a variety of writ-\ning systems that range from their own idiosyncratic transcriptions to already\nwell-established practical or longstanding orthographies. Although the IPA is\nonepracticalchoiceasasound-basednormalizationforwritingsystems(which\ncanactasaninterlingualpivottoattaininteroperabilityacrosswritingsystems),\ngraphemes in each writing system must also be identified and standardized if\ninteroperability across different sources is to be achieved. In most cases, this\namounts to more than simply mapping a grapheme to an IPA segment because\ngraphemesmustfirstbeidentifiedincontext(e.g.isthesequenceonesoundor\ntwosoundsorboth?)andstringsmustbetokenized,whichmayincludetaking\northographic rules into account (e.g. a nasal sound may be transcribed as <n>\nwhenitappearsbetweentwovowels,butwhenitappearsbetweenavoweland\naconsonantitbecomesanasalizedvowel<\u1e7c>).\nInourexperience,datafromeachsourcemustbeindividuallytokenizedinto\ngraphemes so that its orthographic structure can be identified and its contents\ncan be extracted. To extract data for analysis, a source-by-source approach is\nrequiredbeforeanorthographyprofilecanbecreated.Forexample,almostevery\navailablelexiconontheworld\u2019slanguagesisidiosyncraticinitsorthographyand\nthus requires lexicon-specific approaches to identify graphemes in the writing\nsystemandtomapgraphemestophonemes,ifdesired.\nOurkeyproposalforthecharacterizationofawritingsystemistouseagraph-\nemetokenizationasaninter-orthographicpivot.Basically,anysourcedocument\nistokenizedbygraphemes,andonlythenamappingtoIPA(oranyotherortho-\ngraphic transliteration) is performed. An orthography profile then is a de-\nscriptionoftheunitsandrulesthatareneededtoadequatelymodelagraphemic\ntokenizationforalanguagevarietyasdescribedinaparticularsourcedocument.\nAnorthographyprofilesummarizestheUnicode(tailored)graphemesandortho-\ngraphic rules used to write a language(the details of the structureand assump-\ntionsofsuchaprofilewillbepresentedinthenextsection).\n88 7.2Informaldescription\nAs an example of graphemic tokenization, note the three different levels of\ntechnical and linguistic elements that interact in the hypothetical lexical form\n<ts\u02b0\u1e4d\u0330shi>:\n1. codepoints(10textelements):ts\u02b0o\u25cc\u0303\u25cc\u0330\u25cc\u0301shi\n2. graphemeclusters(7textelements):ts\u02b0\u1e4d\u0330 shi\n3. tailoredgraphemeclusters(4textelements):ts\u02b0\u1e4d\u0330 shi\nIn (1), the string <ts\u02b0\u1e4d\u0330shi> has been tokenized into ten Unicode code points\n(using NFD normalization), delimited here by space. Unicode normalization is\nrequired because sequences of code points can differ in their visual and logical\norders.Forexample,<\u00f5\u0330>isambiguoustowhetheritisthesequenceof<o>+<\u25cc\u0303>\n+<\u25cc\u0330>or<o>+<\u25cc\u0330>+<\u25cc\u0303>.Althoughthesetwovariantsarevisuallyhomoglyphs,\ncomputationallytheyaredifferent(seeSections5.3&5.4).Unicodenormalization\nshouldbeappliedtothisstringtoreorderthecodepointsintoacanonicalorder,\nallowingthedatatobetreatedforsearchandcomparison.\nIn(2),theUnicodecodepointshavebeenlogicallynormalizedandvisuallyor-\nganizedintographemeclusters,asspecifiedbytheUnicodeStandard.Thecom-\nbiningcharactersequence<\u00f5\u0330>isnormalizedandvisuallygroupedtogether.Note\nthatthemodifierlettersmallhatU+02B0isnotgroupedwithanyotherchar-\nacter.ThisisbecauseitbelongstotheSpacingModifierLetterscategory.TheUni-\ncodeStandarddoesnotspecifythedirectionthatthesecharactersmodifyahost\ncharacter.Forexample,itcanindicateeitherpre-orpost-aspiration(whereasthe\nnasalizationorcreakydiacriticisdefinedintheUnicodeStandardtoapplytoa\nspecifiedbasecharacter).\nFinally,toarriveatthegraphemictokenizationin(3),tailoredgraphemeclus-\ntersareneeded,possiblyasspecifiedinanorthographyprofile.Forexample,an\northography profile might specify that the sequence of characters <ts\u02b0> form a\nsinglegrapheme.Theorthographyprofilecouldalsospecifyorthographicrules,\ne.g. when tokenizing graphemes in English, the sequences <sh> in the forms\n<mishap> and <mishmash> should be treated as distinct sequences depending\nontheircontexts.\n7.2 Informal description\nAnorthographyprofiledescribestheUnicodecodepoints,characters,graphemes\nandorthographicrulesinawritingsystem.Anorthographyprofileisalanguage-\nspecific(andoftenevenresource-specific)descriptionoftheunitsandrulesthat\n89 7Orthographyprofiles\nare needed to adequately model a writing system. An important assumption is\nthatweassumearesourceisencodedinUnicodeorhasbeenconvertedtoUni-\ncode. Any data source that the Unicode Standard is unable to capture will also\nnotbecapturedbyanorthographyprofile.\nInformally,anorthographyprofilespecifiesthegraphemes\u2013inUnicodepar-\nlance tailored grapheme clusters \u2013 that are expected to occur in any data\nto be analyzed or checked for consistency. These graphemes are first identified\nthroughout the whole data, a step which we call tokenization, and simply re-\nturned as such, possibly including error messages about any parts of the data\nthatarenotspecifiedbytheorthographyprofile.Oncethegraphemesareiden-\ntified, they might also be changed into other graphemes \u2013 a step which we call\ntransliteration.Whenagraphemehasdifferentpossibletransliterations,then\nthesedifferencesshouldbeseparatedbycontextualspecification,possiblydown\ntolistingindividualexceptionalcases.\nThe crucial difference between our current proposal and traditional compu-\ntational approaches to transliteration is the strict separation between tokeniza-\ntion and transliteration. Most computational approaches to transliteration are\nbased on finite-state transducers (including the transliteration as described in\nthe Unicode Locale Data Markup Language).2 Finite-state transducers attempt\nto describe the mapping from input to output string directly as a set of rewrite\nrules.Althoughsuchsystemsarecomputationallywellunderstood,wefeelthat\ntheyarenotwell-suitedforday-to-daylinguisticpractice.First,byforcingafirst\nstepofgraphemetokenization,oursystemtriestokeepclosetothelogicofthe\nwriting system. Second, by separating tokenization from transliteration there\nis no problem with \u2018feeding\u2019 and \u2018bleeding\u2019 of rules, common with transducers\n(cf.Section8.4).\nNote that to deal with ambiguous parsing cases, it is still possible to use the\nUnicodeapproachofincludingthezero-widthnon-joinercharacteratU+200C\ninto the text. The idea is to add this character into the text to identify cases in\nwhichasequenceofcharactersisnotsupposedtobeacomplexgraphemecluster\n\u2013eventhoughthesequenceisintheorthographyprofile.\nIn practice, we foresee a workflow in which orthography profiles are itera-\ntively refined, while at the same time inconsistencies and errors in the data to\nbe tokenized are corrected. In some more complex use cases there might even\nbe a need for multiple different orthography profiles to be applied in sequence\n(see Sections 8.3 & 8.4 on various exemplary use cases). The result of any such\nworkflow will normally be a cleaned dataset and an explicit description of the\n2http://www.unicode.org/reports/tr35/\n90 7.3Formalspecification\northographicstructureintheformofanorthographyprofile.Subsequently,the\northography profiles can be easily distributed in scholarly channels alongside\nthecleaneddata,forexampleinsupplementarymaterialaddedtojournalpapers\norinelectronicarchives.\n7.3 Formal specification\nFileFormat\nTheformalspecificationsofanorthographyprofile(orsimplyprofileforshort)\narethefollowing:\nA1. A profile is a unicode utf-8 encoded text file that includes informa-\ntionpertinenttotheorthography.3\nA2. A profile is a delimited text file with an obligatory header line.\nA minimal profile must have a single column with the header Grapheme.\nForanyadditionalcolumns,thenameintheheadermustbespecified.The\nactual ordering of the columns is unimportant. The header list must be\ndelimited in the same way as the rest of the file\u2019s contents. Each record\nmust be kept on a separate line. Separate lines with comments are not\nallowed.Commentsthatbelongtospecificlinesmustbeputinaseparate\ncolumnofthefile,e.g.addacolumncalledcomments.\nA3. Metadata should be added in a separate utf-8 text file using the\nJSON-LDdialectspecifiedinMetadataVocabularyforTabularData.4 This\nmetadataformatallowsforeasyinclusionofDublinCoremetadata,5which\nshouldbeusedtospecifyinformationabouttheorthographicdescription\nintheorthographyprofile.6Theorthographyprofilemetadatashouldmin-\nimally include provenance information including: (i) author, (ii) date, (iii)\ntitleoftheprofile,and(iv)bibliographicdataforresource(s)thatillustrate\nthe orthography described in the profile. Crucially, the metadata should\n3SeeSection3.12inwhichwesuggesttouseNFC,no-BOMandLFlinebreaksbecauseofthepit-\nfallstheyavoid.Akeenreviewernotes,however,thatspecifyingaconventionforlineendings\nandBOMisoverlystrictbecausemostcomputingenvironments(now)transparentlyhandle\nbothalternatives.Forexample,usingPythonafilecanbedecodedusingtheencoding\u201cutf-8-\nsig\u201d,whichstripsawaytheBOM(ifpresent)andreadsaninputfullintextmode,sothatboth\nlinefeedvariants\u201cLF\u201dand\u201cCRLF\u201dwillbestripped.\n4https://www.w3.org/TR/tabular-metadata/\n5http://dublincore.org/\n6http://w3c.github.io/csvw/metadata/#dfn-common-property\n91 7Orthographyprofiles\nalsospecify(v)astablelanguageidentifierofthetargetlanguageofthepro-\nfileusingBCP47/ISO639-3orGlottocodeaspertheCLDFontology.7 Fur-\nther,themetadatafileshouldprovideinformationabouttheorthography\nprofile\u2019sstructureandcontents,including:(vi)itsdialectdescription,8and\n(vii) proper column descriptions,9 which describe how a column should\nbe interpreted and processed (e.g. whether they should be processed as\nregular expressions; see below). Finally, in accordance with the Metadata\nVocabularyforTabularData,themetadata\u2019sfilenameshouldconsistofthe\northographyprofile\u2019sfilenameappendedwith\u201c-metadata.json\u201d.10\nThe content of a profile consists of lines, each describing a grapheme of the or-\nthography,usingthefollowingcolumns:\nA5. A minimal profile consists of a single column with a header called\nGrapheme, listing each of the different graphemes in a separate line. The\nnameofthiscolumniscrucialforautomaticprocessing.\nA6. Optional columns can be used to specify the left and right con-\ntextofthegrapheme,tobedesignatedwiththeheadersLeftandRight\nrespectively. The same grapheme can occur multiple times with different\ncontextual specifications, for example to distinguish different pronuncia-\ntionsdependingonthecontext.\nA7. ThecolumnsGrapheme,LeftandRightcanuseregularexpression\nmetacharacters.Ifregularexpressionsareused,thentheymustbespeci-\nfiedinthemetadatafileassuch,andallliteralusageofthespecialsymbols,\nlikefullstops<.>ordollarsigns<$>(so-calledmetacharacters)haveto\nbe explicitly escaped by adding a backslash before them (i.e. use <\\.> or\n<\\$>).Notethatanyspecificationofcontextautomaticallyexpectsregular\nexpressions,soitisbettertoalwaysescapeallregularexpressionmetachar-\nacterswhenusedliterallyintheorthography.Thefollowingsymbolswill\nneedtobeprecededbyabackslash:[](){}| +*.-!?^$andthebackslash\n\\itself.\nA8. Anoptionalcolumncanbeusedtospecifyclassesofgraphemes,to\nbe identified by the header Class. For example, this column can be used\ntodefineaclassofvowels.Userscansimplyaddad-hocidentifiersinthis\n7http://cldf.clld.org/v1.0/terms.rdf\n8http://w3c.github.io/csvw/metadata/#dfn-dialect-descriptions\n9http://w3c.github.io/csvw/metadata/#dfn-datatype-description\n10JSON-LD metadata is also the choice for datasets conforming to the Cross-Linguistic Data\nFormatsstandard,see:http://cldf.clld.org/.\n92 7.3Formalspecification\ncolumntoindicateagroupofgraphemes,whichcanthenbeusedinthede-\nscriptionofthegraphemesorthecontext.Theidentifiersshouldofcourse\nbe chosen so that they do not conflate with any symbols used in the or-\nthography.Notethatsuchclassesonlyrefertothegraphemes,nottothe\ncontext.\nA9. Columns describing transliterations for each graphemes can be\nadded and named at will. Often more than a single possible translit-\neration will be of interest. Any software application using these profiles\nshould prompt the user to name any of these columns to select a specific\ntransliteration.\nA10. Any other columns can be added freely, but will be typically ig-\nnored by any software application using the profiles. As orthogra-\nphyprofilesarealso intended to be readand interpreted byhumans, it is\noftenveryusefultoaddextrainformationaboutthegraphemesinfurther\ncolumns, such as Unicode code points, Unicode names, frequency of oc-\ncurrence, examples of occurrence, explanation of contextual restrictions,\norcomments.\nProcessing\nFor the automated processing of the profiles, the following technical standards\nwillbeexpected:\nB1. Each line of a profile will be interpreted according to the con-\ntent type of the column as specified in the profile metadata. Con-\ntenttypesincludeliteralandregularexpression.\nB2. Theclasscolumnwillbeusedtoproduceexplicitorchainsofreg-\nular expressions, which will then be inserted in the Grapheme, Left and\nRightcolumnsatthepositionindicatedbytheclass-identifiers.Forexam-\nple,aclasscalledVasacontextspecificationmightbereplacedbyaregular\nexpressionlike:(au|ei|a|e|i|o|u).Onlythegraphemesthemselvesarein-\ncludedhere,notanycontextsspecifiedfortheelementsoftheclass.Note\nthat the ordering inside this regular expression is crucial (e.g. regular ex-\npressionsaregreedy,solongestmatchesshouldbeplacedbeforematching\nsubstrings).\nB3. Theleftandrightcontextswillbeincludedintotheregularex-\npressions by using lookbehind and lookahead. Basically, the actual\nregular expression syntax of lookbehind and lookahead is simply hidden\ntotheusersbyallowingthemtoonlyspecifythecontextsthemselves.In-\n93 7Orthographyprofiles\nternally,thecontextsinthecolumnsLeftandRightarecombinedwiththe\ncolumnGraphemetoformacomplexregularexpressionlike:\n(?<=Left)Grapheme(?=Right).\nB4. Theregularexpressionswillbeappliedintheorderasspecifiedin\nthe profile, from top to bottom. A software implementation can offer\nhelp in figuring out the optimal ordering of the regular expressions, but\nthenitshouldbemadeexplicitintheorthographyprofilebecauseregular\nexpressionsareexecutedinorderfromtoptobottom.\nThe actual implementation of the profile on some text-string will function as\nfollows:\nB5. Allgraphemesarematchedinthetextbeforetheyaretokenizedor\ntransliterated.Inthisway,thereisnonecessityfortheusertoconsider\nfeeding and bleeding situations, in which the application of a rule either\nchanges the text so another rule suddenly applies (feeding) or prevents\nanotherrulefromapplying(bleeding).\nB6. The matching of the graphemes can occur either globally or lin-\nearly.Fromacomputerscienceperspective,themostnaturalwaytomatch\ngraphemesfromaprofileinsometextisbywalkinglinearlythroughthe\ntext-stringfromlefttoright,andateachpositiongoingthroughallgraph-\nemesintheprofiletoseewhichonematches,thengotothepositionatthe\nendofthematchedgraphemeandstartover.Thisisbasicallyhowafinite\nstatetransducerworks,whichisawell-establishedtechniqueincomputer\nscience. However, from a linguistic point of view, our experience is that\nmost linguists find it more natural to think from a global perspective. In\nthisapproach,thefirstgraphemeintheprofileismatchedeverywherein\nthetext-stringfirst,beforemovingtothenextgraphemeintheprofile.The-\noretically, these approaches will lead to different results, though in prac-\ntice of actual natural language orthographies they almost always lead to\nthe same result. Still, we suggest that any software application using or-\nthography profiles should offer both approaches (i.e. global or linear)\nto the user. The approach used should be documented in the metadata as\ntokenizationmethod.\nB7. Thematchingofthegraphemescanoccureitherinnfcornfd.The\nUnicode Standard states that software is free to compose or decompose\nthe character stream from one representation to another. However, Uni-\ncodeconformantsoftwaremusttreatcanonicallyequivalentsequencesin\nNFCandNFDasthesame.Itisuptotheorthographyprofilecreatorhow\n94 7.3Formalspecification\nthey choose to encode their profile. Several sources suggest to use NFC\nwhenpossiblefortextencoding,11 includingSILInternationalwithregard\ntodataarchiving.12 Inourexperience,insomeusecasesitturnsouttobe\npracticaltotreatbothtextandprofileasNFD.Thistypicallyhappenswhen\nmanydifferentcombinationsofdiacriticsoccurinthedata.AnNFDprofile\ncanthenbeusedtofirstcheckwhichindividualdiacriticsareused,before\nturning to the more cumbersome inspection of all combinations. We sug-\ngestthatanysoftwareapplicationusingorthographyprofilesshouldoffer\nbothapproaches(i.e.NFCorNFD)totheuser.Theapproachusedcanbe\ndocumentedinthemetadataasunicodenormalization.\nB8. Thetext-stringisalwaysreturnedintokenizedformbyseparating\nthe matched graphemes by a user-specified symbols-string. Any translit-\nerationwillbereturnedontopofthetokenization.\nB9. Leftover characters, i.e. characters that are not matched by the\nprofile, should be reported to the user as errors. Typically, the un-\nmatched characters are replaced in the tokenization by a user-specified\nsymbol-string.\nSoftwareapplications\nAnysoftwareapplicationofferingtouseorthographyprofile:\n1. shouldofferuser-optionstospecify:\nC1. thenameofthecolumntobeusedfortransliteration(ifany).\nC2. the symbol-string to be inserted between graphemes. Option-\nally, a warning might be given if the chosen string includes charac-\ntersfromtheorthographyitself.\nC3. thesymbol-stringtobeinsertedforunmatchedstringsinthe\ntokenizedandtransliteratedoutput.\nC4. thetokenizationmethod,i.e.whetherthetokenizationshouldpro-\nceedasglobalorlinear(seeB6above).\nC5. unicodenormalization,i.e.whetherthetext-stringandprofileshould\nuseNFCorNFD.\n2. mightofferuser-options:\nC6. to assist in the ordering of the graphemes. In our experience\nworking with idiosyncratic transcriptions and orthographies from\n11http://www.win.tue.nl/~aeb/linux/uc/nfc_vs_nfd.html\n12http://scripts.sil.org/cms/scripts/page.php?item_id=NFC_vs_NFD\n95 7Orthographyprofiles\nlow-resourcelanguages,itishelpfultoidentifymulti-sequencegraph-\nemes before single graphemes, and to identify graphemes with con-\ntextbeforegraphemeswithout context.Further,frequently relevant\nrulesmightbeappliedafterrarelyrelevantrules(thoughfrequencyis\ndifficult to establish in practice, as it depends on the available data).\nAlso, if this all fails to give any decisive ordering between rules, it\nseemsusefultoofferlinguiststheoptiontoreversetheorderingfrom\nany manual specified ordering, because linguists tend to write the\nmoregeneralrulefirst,beforeturningtoexceptionsorspecialcases.\nC7. to assist in dealing with upper and lower case characters. It\nseemspracticaltooffersomebasiccasematching,socharacterslike\n<a> and <A> are treated equally. This will be useful in many con-\ncrete cases (such as search or collation), although the user should\nbe warned that case matching does not function universally in the\nsame way across orthographies.13 Ideally, users should prepare or-\nthographyprofileswithalllowercaseanduppercasevariantsexplic-\nitlymentioned,sobydefaultnocasematchingshouldbeperformed.\nC8. totreattheprofileliterally,i.e.tonotinterpretregularexpres-\nsionmetacharacters.Matchinggraphemesliterallyoftenleadstosig-\nnificantspeedincrease,andensuresthatusersdonothavetoworry\naboutescapingmetacharacters.However,inourexperienceallactu-\nally interesting use cases of orthography profiles include some con-\ntexts,whichautomaticallypreventsanyliteralinterpretation.\n3. shouldreturnthefollowinginformationtotheuser:\nC9. theoriginaltext-stringstobeprocessedinthespecifiedUnicode\nnormalization,i.e.ineitherNFCorNFDasspecifiedbytheuser.\nC10. thetokenizedstrings,withadditionallyanytransliteratedstrings,\niftransliterationisrequested.\nC11. a survey of all errors encountered, ideally both (i) in which\ntext-stringsanyerrorsoccurredand(ii)whichcharactersinthetext-\nstringsleadtoerrors.\nC12. areorderedprofile,whenanyautomaticreorderingisoffered.\n13Forexamplecomparethedifferentfirst-lettercapitalizationpracticesofthedigraphs<\u01cb>and\n<\u0132>(single-characterligaturesintheUnicodeStandard)intheLatin-basedscriptsofSouthern-\nSlaviclanguagesandDutch,respectively.\n96 8 Implementation\n8.1 Overview\nTo illustrate the practical applications of orthography profiles, we have imple-\nmentedtwoversionsofthespecificationspresentedinChapter7:oneinPython1\nandoneinR.2Inthischapter,weintroducethesetwosoftwarelibrariesandpro-\nvidepracticalstep-by-stepguidelinesforinstallingandusingthem.Varioussim-\nple and sometimes somewhat abstract examples will be discussed to show the\ndifferent options available, and to illustrate the intended usage of orthography\nprofilesingeneral.\nNote that our two libraries have rather different implementation histories,\nthus they may not give the same results in all situations (as discussed in Chap-\nter7).However,wedoprovideextensivetestsuitesforeachimplementationthat\nfollowstandardpracticestomakesurethatresultsarecorrect.Usersshouldrefer\ntothesetestsandtothedocumentationineachreleaseforspecificsabouteach\nimplementation. Note that due to the different naming convention practices in\nPythonandR,functionnamesdifferbetweenthetwolibraries.Also,theperfor-\nmance with larger datasets may not be comparable between the Python and R\nimplementations.Insum,ourtwolibrariesshouldbeconsideredasproofsofcon-\ncept and not as the final word on the practical application of the specifications\ndiscussed in the previous chapter. In our experience, the current versions are\nsufficientlyfastandstabletobeusefulforacademicpractice(e.g.checkingdata\nconsistency, or analyzing and transliterating small to medium sized data sets),\nbuttheyshouldprobablynotbeusedforfull-scaleindustryapplicationswithout\nadaptation.\nFirst,inSection8.2weexplainhowtoinstallPython3andR.4TheninSections\n8.3&8.4,wediscussourPythonandRsoftwarepackages,respectively.Inaddi-\ntiontothematerialpresentedheretogetusersstarted,wemaintainseveralcase\n1https://pypi.python.org/pypi/segments\n2https://github.com/cysouw/qlcData\n3https://www.python.org/\n4https://www.r-project.org/ 8Implementation\nstudiesonlinethatillustratehowtouseorthographyprofilesinaction.Forcon-\nvenience,wemaketheserecipesavailableasJupyterNotebooks5 inourGitHub\nrepository.6 In the final section in this chapter, we also briefly describe a few\nrecipesthatwedonotgointodetailinthisbook.\n8.2 How to install Python and R\nWhen one encounters problems installing software, or bugs in programming\ncode, search engines are your friend! Installation problems and incomprehen-\nsibleerrormessageshavetypicallybeenencounteredandsolvedbyotherusers.\nTry simply copying and pasting the output of an error message into a search\nengine;thesolutionisoftenalreadysomewhereonline.WearefansofStackEx-\nchange7 \u2013 a network of question-and-answer websites \u2013 which are extremely\nhelpfulinsolvingissuesregardingsoftwareinstallation,bugsincode,etc.\nSearching the web for \u201cinstall r and python\u201d returns numerous tutorials on\nhowtosetupyourmachineforscientificdataanalysis.Notethatthereisnosin-\nglecorrectsetupforaparticularcomputeroroperatingsystem.BothPythonand\nRareavailableforWindows,Mac,andUnixoperatingsystemsfromthePython\nandRprojectwebsites.Anotheroptionistouseaso-calledpackagemanager,i.e.\nasoftwareprogramthatallowstheusertomanagesoftwarepackagesandtheir\ndependencies.OnMac,weuseHomebrew,8 asimple-to-install(viatheTerminal\nApp)freeandopensourcepackagemanagementsystem.Followtheinstructions\non the Homebrew website and then use Homebrew to install R and Python (as\nwellasothersoftwarepackagessuchasGitandJupyterNotebooks).\nAlternatively for R, RStudio9 provides a free and open source integrated de-\nvelopmentenvironment(IDE).Thisapplicationcanbedownloadedandinstalled\n(forMac,WindowsandUnix)anditincludesitsownRinstallationandRlibraries\npackagemanager.FordevelopinginPython,werecommendthefreecommunity\nversionofPyCharm,10 anIDEwhichisavailableforMac,Windows,andUnix.\nOnceyouhaveRorPython(orboth)installedonyourcomputer,youareready\ntousetheorthographyprofilessoftwarelibrariespresentedinthenexttwosec-\ntions. As noted above, we make this material available online on GitHub,11 a\n5http://jupyter.org/\n6https://github.com/unicode-cookbook/\n7https://stackexchange.com/\n8https://brew.sh/\n9https://www.rstudio.com/\n10https://www.jetbrains.com/pycharm/\n11https://github.com/\n98 8.3Pythonpackage:segments\nweb-basedversion controlsystem for sourcecode management.GitHub reposi-\ntories can be cloned or downloaded,12 so that you can work through the exam-\nples on your local machine. Use your favorite search engine to figure out how\ntoinstallGitonyourcomputerandlearnmoreaboutusingGit.13 InourGitHub\nrepository,wemakethematerialpresentedbelow(andmoreusecasesdescribed\nbrieflyinSection8.5)availableasJupyterNotebooks.JupyterNotebooksprovide\nan interface where you can run and develop source code using the browser as\naninterface.ThesenotebooksareeasilyviewedinourGitHubrepositoryofuse\ncases.14\n8.3 Python package: segments\nThePythonpackagesegmentsisavailablebothasacommandlineinterface(CLI)\nandasanapplicationprogramminginterface(API).\nInstallation\nTo install the Python package segments (Forkel & Moran 2018) from the Python\nPackageIndex(PyPI)run:\n$ pip install segments\nonthecommandline.ThiswillgiveyouaccesstoboththeCLIandprogrammatic\nfunctionalityinPythonscripts,whenyouimportthesegmentslibrary.\nYoucanalsoinstallthesegmentspackagefromtheGitHubrepository,15inpar-\nticularifyouwouldliketocontributetothecodebase:16\n$ git clone https://github.com/cldf/segments\n$ cd segments\n$ python setup.py develop\nApplicationprogramminginterface\nThe segments API can be accessed by importing the package into Python. Here\nisanexampleofhowtoimportthelibrary,createatokenizerobject,tokenizea\n12https://help.github.com/articles/cloning-a-repository/\n13https://git-scm.com/\n14https://github.com/unicode-cookbook/recipes\n15https://github.com/cldf/segments\n16https://github.com/cldf/segments/blob/master/CONTRIBUTING.md\n99 8Implementation\nstring,andcreateanorthographyprofile.BeginbyimportingtheTokenizerfrom\nthesegmentslibrary.\n>>> from segments.tokenizer import Tokenizer\nNext, instantiate a tokenizer object, which takes optional arguments for an or-\nthographyprofileandanorthographyprofilerulesfile.\n>>> t = Tokenizer()\nThe default tokenization strategy is to segment some input text at the Unicode\nExtended Grapheme Cluster boundaries,17 and to return, by default, a space-\ndelimitedstringofgraphemes.Whitespacebetweeninputstringsequencesisby\ndefaultseparatedbyahashsymbol<#>,whichisalinguisticconventionusedto\ndenotewordboundaries.Thedefaultgraphemetokenizationisusefulwhenyou\nencounteratextthatyouwanttotokenizetoidentifypotentialorthographicor\ntranscriptionelements.\n>>> result = t('\u0109h\u00e1\u027e\u00e3c\u030c t\u02bc\u025b\u2197\u0290\u02d0| kp\u0361 ')\n>>> print(result)\n>>> '\u0109 h \u00e1 \u027e \u00e3\u030c c t \u02bc \u025b \u2197 \u0290 \u02d0 | # k\u0361 p'\n>>> result = t('\u0109h\u00e1\u027e\u00e3c\u030c t\u02bc\u025b\u2197\u0290\u02d0| kp\u0361 ', segment_separator='-')\n>>> print(result)\n>>> '\u0109-h-\u00e1-\u027e-\u00e3-\u030c c-t-\u02bc-\u025b-\u2197-\u0290-\u02d0-| # k\u0361 -p'\n>>> result = t('\u0109h\u00e1\u027e\u00e3c\u030c t\u02bc\u025b\u2197\u0290\u02d0| kp\u0361 ', separator=' // '))\n>>> print(result)\n>>> '\u0109 h \u00e1 \u027e \u00e3\u030c c t \u02bc \u025b \u2197 \u0290 \u02d0 | // k\u0361 p'\nTheoptionalipaparameterforcesgraphemesegmentationforIPAstrings.18Note\nherethatUnicodeSpacingModifierLetters,19 suchas<\u02d0>and<\u25cc\u0361\u25cc>,willbeseg-\nmented together with base characters (although you might need orthography\nprofiles and rules to correct these in your input source; see Section 5.9 for de-\ntails).\n>>> result = t('\u0109h\u00e1\u027e\u00e3c\u030c t\u02bc\u025b\u2197\u0290\u02d0| kp\u0361 ', ipa=True)\n>>> print(result)\n>>> '\u0109 h \u00e1 \u027e \u00e3\u030c c t \u02bc \u025b \u2197 \u0290\u02d0 | # kp\u0361 '\n17http://www.unicode.org/reports/tr18/tr18-19.html#Default_Grapheme_Clusters\n18https://en.wikipedia.org/wiki/International_Phonetic_Alphabet\n19https://en.wikipedia.org/wiki/Spacing_Modifier_Letters\n100 8.3Pythonpackage:segments\nYou can also load an orthography profile and tokenize input strings with it. In\nthe data directory,20 we\u2019ve placed an example orthography profile. Let\u2019s have a\nlookatitusingmoreonthecommandline.\n$ more data/orthography profile.tsv\nGrapheme IPA XSAMPA COMMENT\na a a\naa a\u02d0 a:\nb b b\nc c c\nch t\u0283 tS\n- NULL NULL \"comment with tab\"\non \u00f5 o~\nn n n\nih \u00ed i_H\ninh \u0129\u0301 i~_H\nAnorthographyprofileisadelimitedUTF-8textfile(hereweusetabasadelim-\niterforreadingease).ThefirstcolumnmustbelabeledGrapheme,asdiscussedin\nSection 7.3. Each row in the Grapheme column specifies graphemes that may be\nfoundintheorthographyoftheinputtext.Inthisexample,weprovideadditional\ncolumns IPA and XSAMPA, which are mappings from our graphemes to their IPA\nandX-SAMPAtransliterations.ThefinalcolumnCOMMENTisforcomments;ifyou\nwanttouseatab\u201cquotethatstring\u201d!\nLet\u2019sloadtheorthographyprofilewithourtokenizer.\n>>> from segments.tokenizer import Profile\n>>> t = Tokenizer('data/orthography profile.tsv')\nNow let\u2019s segment the graphemes in some input strings with our orthography\nprofile.Theoutputissegmentedgiventhedefinitionofgraphemesinourorthog-\nraphyprofile,e.g.wespecifiedthesequenceoftwo<aa>shouldbeasingleunit\n<aa>,andsoshouldthesequences<ch>,<on>and<ih>.\n>>> t('aabchonn-ih')\n>>> 'aa b ch on n - ih'\nThisexampleshowshowwecantokenizeinputtextintoourorthographicspecifi-\ncation.Wecanalsosegmentgraphemesandtransliteratethemintootherforms,\nwhich is useful when you have sources with different orthographies, but you\n20https://github.com/unicode-cookbook/recipes/tree/master/Basics/data\n101 8Implementation\nwant to be able to compare them using a single representation like IPA or X-\nSAMPA.\n>>> t('aabchonn-ih', column='IPA')\n>>> 'a\u02d0 b t\u0283 \u00f5 n \u00ed'\n>>> t('aabchonn-ih', column='XSAMPA')\n>>> 'a: b tS o~ n i_H'\nItisalsousefultoknowwhichcharactersinyourinputstringarenotinyouror-\nthographyprofile.Bydefault,missingcharactersaredisplayedwiththeUnicode\nreplacement character at U+FFFD, which appears below as a white question\nmarkwithinablackdiamond.\n>>> t('aa b ch on n - ih x y z')\n>>> 'aa b ch on n - ih \ufffd \ufffd \ufffd'\nYoucanchangethedefaultbyspecifyingadifferentreplacementcharacterwhen\nyouloadtheorthographyprofilewiththetokenizer.\n>>> t = Tokenizer('data/orthography-profile.tsv',\nerrors_replace=lambda c: '?')\n>>> t('aa b ch on n - ih x y z')\n>>> 'aa b ch on n - ih ? ? ?'\n>>> t = Tokenizer('data/orthography-profile.tsv',\nerrors_replace=lambda c: '<{0}>'.format(c))\n>>> t('aa b ch on n - ih x y z')\n>>> 'aa b ch on n - ih <x> <y> <z>'\nPerhapsyouwanttocreateaninitialorthographyprofilethatalsocontainsthose\ngraphemes <x>, <y>, and <z>? Note that the space character and its frequency\narealsocapturedinthisinitialprofile.\n>>> profile = Profile.from_text('aa b ch on n - ih x y z')\n>>> print(profile)\nGrapheme frequency mapping\n9\na 2 a\nh 2 h\nn 2 n\nb 1 b\n102 8.3Pythonpackage:segments\nc 1 c\no 1 o\n- 1 -\ni 1 i\nx 1 x\ny 1 y\nz 1 z\nCommandlineinterface\nFromthecommandline,accesssegmentsanditsvariousarguments.Forhelp,run:\n$ segments -h\nusage: segments [-h] [--verbosity VERBOSITY]\n[--encoding ENCODING]\n[--profile PROFILE]\n[--mapping MAPPING]\ncommand ...\nMain command line interface of the segments package.\npositional arguments:\ncommand tokenize | profile\nargs\noptional arguments:\n-h, --help show this help message and exit\n--verbosity VERBOSITY\nincrease output verbosity\n--encoding ENCODING input encoding\n--profile PROFILE path to an orthography profile\n--mapping MAPPING column name in ortho profile to map\ngraphemes\nUse 'segments help <cmd>' to get help about individual commands.\n103 8Implementation\nWehavecreatedsometestdata21withtheGermanwordSch\u00e4chtelchen,whichis\nthediminutiveformofSchachtel,meaning\u2018box\u2019,\u2018packet\u2019,or\u2018carton\u2019inEnglish.\n$ more sources/german.txt\nSch\u00e4chtelchen\nWecancreateaninitialorthographyprofileoftheGermantextbypassingitto\nthesegments profilecommand.TheinitialprofiletokenizesthetextonUnicode\ngraphemeclusters,liststhefrequencyofeachgrapheme,andprovidesaninitial\nmappingcolumnbydefault.\n$ cat sources/german.txt | segments profile\nGrapheme frequency mapping\nc 3 c\nh 3 h\ne 2 e\nS 1 S\n\u00e4 1 \u00e4\nt 1 t\nl 1 l\nn 1 n\nNext,weknowabitaboutGermanorthographyandwhichcharacterscombineto\nformGermangraphemes.Wecanusetheinformationfromourinitialorthogra-\nphyprofiletohand-curateamorepreciseGermanorthographyprofilethattakes\nintoaccountcapitalization(Germanorthographyobligatorilycapitalizesnouns)\nand grapheme clusters, such as <sch> and <ch>. We can use the initial orthog-\nraphy profile above as a starting point (note that, in large texts, the frequency\ncolumnmaysignalerrorsintheinput,suchastypos,ifagraphemeoccurswith\nverylowfrequency).Theinitialorthographyprofilecanbeeditedwithatexted-\nitor or spreadsheet program. As per the orthography profile specifications (see\nChapter 7), we can adjust rows in the Grapheme column and then add additional\ncolumnsfortransliterationsorcomments.\n$ more data/german orthography profile.tsv\nGrapheme IPA XSAMPA COMMENT\nSch \u0283 S German nouns are capitalized\n21https://github.com/unicode-cookbook/recipes/tree/master/Basics/sources\n104 8.4Rlibrary:qlcData\n\u00e4 \u025b\u02d0 E:\nch \u00e7 C\nt t t\ne e e\nl l l\nn n n\nUsingthecommandlinesegmentsfunctionandpassingitourorthographyprofile,\nwecannowsegmentourGermantextexampleintographemes.\n$ cat sources/german.txt | segments\n--profile=data/german-orthography-profile.tsv tokenize\n'Sch \u00e4 ch t e l ch e n'\nByprovidingsegmentsacolumnfortransliteration,wecanconvertthetextinto\nIPA.\n$ cat sources/german.txt | segments --mapping=IPA\n--profile=data/german-orthography-profile.tsv tokenize\n'\u0283 \u025b\u02d0 \u00e7 t e l \u00e7 e n'\nAndwecantransliteratetoX-SAMPA.\n$ cat sources/german.txt | segments --mapping=XSAMPA\n--profile=data/german-orthography-profile.tsv tokenize\n'S E: C t e l C e n'\nMoreexamplesareavailableonline.22\n8.4 R library: qlcData\nInstallation\nTheRimplementationisavailableinthepackageqlcData(Cysouw2018),whichis\ndirectlyavailablefromthecentralRrepositoryCRAN(ComprehensiveRArchive\nNetwork).TheRsoftwareenvironmentitselfhastobedownloadedfromitsweb-\nsite.23 After starting the included R program, the qlcData package for dealing\nwithorthographyprofilescanbesimplyinstalledasfollows:\n22https://github.com/unicode-cookbook/recipes\n23https://www.r-project.org\n105 8Implementation\n# download and install the qlcData software\ninstall.packages(\"qlcData\")\n# load the software, so it can be used\nlibrary(qlcData)\nTheversionavailablethroughCRANisthelateststableversion.Toobtainthe\nmost recent bug-fixes and experimental additions, please use the development\nversion,whichisavailableonGitHub.24 Thisdevelopmentversioncanbeeasily\ninstalledusingthegithub-installhelpersoftwarefromthedevtoolspackage.\n# download and install helper software\ninstall.packages(\"devtools\")\n# install the qlcData package from GitHub\ndevtools::install_github(\"cysouw/qlcData\", build_vignettes = TRUE)\n# load the software, so it can be used\nlibrary(qlcData)\nInside the qlcData package, there are two functions for orthography process-\ning,write.profileandtokenize.Thepackageincludeshelpfileswithillustrative\nexamples,andalsoaso-calledvignettewithexplanationsandexamples.\n# view help files\nhelp(write.profile)\nhelp(tokenize)\n# view vignette with explanation and examples\nvignette(\"orthography_processing\")\nBasically,theideaistousewrite.profiletoproduceabasicorthographypro-\nfile from some data and then tokenize to apply the (possibly edited) profile on\nsome data, as exemplified in the next section. This can of course be performed\nthoughR,butadditionallytherearetwomoreinterfacestotheRcodesupplied\nintheqlcDatapackage:(i)Bashexecutablesand(ii)Shinywebapps.\nThe Bash executables are little files providing an interface to the R code that\ncan be used in a shell on a UNIX-like machine. The exact location of these ex-\necutables is best found after installation of R the packages. The location can be\nfoundbythefollowingcommandinR.\n# show the path to the bash executables\nfile.path(find.package(\"qlcData\"), \"exec\")\nTheseexecutablescanbeusedintheresultingfilepath,ortheycanbelinked\nand/or copied to any location as wanted. For example, a good way to use the\nexecutablesinaterminalistomakesoftlinks(usingln)fromtheexecutablestoa\n24http://github.com/cysouw/qlcData\n106 8.4Rlibrary:qlcData\ndirectoryinyourPATH,e.g.to/usr/local/bin/.Thetwoexecutablesarenamed\ntokenize and writeprofile, and the links can be made directly by using Rscript\ntogetthepathstotheexecutableswithintheterminal.\n# get the paths to the R executables in bash\npathT=`Rscript -e 'cat(file.path(find.package(\"qlcData\"),\n\"exec\", \"tokenize\"))'`\npathW=`Rscript -e 'cat(file.path(find.package(\"qlcData\"),\n\"exec\", \"writeprofile\"))'`\n# make softlinks to the R executables in /usr/local/bin\n# you will have to enter your user's password!\nsudo ln -is $pathT $pathW /usr/local/bin\nAfterinsertingthissoftlinkitshouldbepossibletoaccessthetokenizefunction\nfromtheshell.Trytokenize --helptotestthefunctionality.\nTo make the functionality even more accessible, we have prepared webapps\nwith the Shiny frameworkfor the R functions. The webappsare included inside\ntheqlcDatapackageandcanbestartedwiththehelperfunction(inR):launch_-\nshiny('tokenize').\nProfilesanderrorreporting\nThe first example of how to use these functions concerns finding errors in the\nencoding of texts. In the following example, it looks as if we have two identi-\ncalstrings,AABB.However,thisisjustasurface-impressiondeliveredbythecur-\nrent font, which renders Latin and Cyrillic capitals identically. We can identify\nthis problem when we produce an orthography profile from the strings. Using\nthe R implementation of orthography profiles, we first assign the two strings\nto a variable test, and then produce an orthography profile with the function\nwrite.profile.Asitturnsout,someofthelettersareCyrillic.\n(test <- c(\"AABB\", \"A\u0410B\u0412\"))\n## [1] \"AABB\" \"A\u0410B\u0412\"\nwrite.profile(test)\n## Grapheme Frequency Codepoint UnicodeName\n## 1 A 3 U+0041 LATIN CAPITAL LETTER A\n## 2 B 3 U+0042 LATIN CAPITAL LETTER B\n## 3 \u0410 1 U+0410 CYRILLIC CAPITAL LETTER A\n## 4 \u0412 1 U+0412 CYRILLIC CAPITAL LETTER VE\n107 8Implementation\nThefunctionoferror-messagereportingcanalsonicelybeillustratedwiththis\nexample.SupposewemadeanorthographyprofilewithjustthetwoLatinletters\n<A>and<B>aspossiblegraphemes,thenthisprofilewouldnotbesufficientto\ntokenizethestrings.Therearegraphemesinthedatathatarenotintheprofile,\nsothetokenizationproducesanerror,whichcanbeusedtofixtheencoding(or\ntheprofile).Intheexamplebelow,wecanseethattheCyrillicencodingisfound\ninthesecondstringofthetestinput.\ntest <- c(\"AABB\", \"A\u0410B\u0412\")\ntokenize(test, profile = c(\"A\", \"B\"))\n## Warning in tokenize(test, profile = c(\"A\", \"B\")):\n## There were unknown characters found in the input data.\n## Check output$errors for a table with all problematic strings.\n## $strings\n## originals tokenized\n## 1 AABB A A B B\n## 2 A\u0410B\u0412 A \u2047 B \u2047\n##\n## $profile\n## Grapheme Frequency\n## 1 B 3\n## 2 A 3\n##\n## $errors\n## originals errors\n## 2 A\u0410B\u0412 A \u2047 B \u2047\n##\n## $missing\n## Grapheme Frequency Codepoint UnicodeName\n## 1 \u0410 1 U+0410 CYRILLIC CAPITAL LETTER A\n## 2 \u0412 1 U+0412 CYRILLIC CAPITAL LETTER VE\nDifferentwaystowriteaprofile\nThefunctionwrite.profilecanbeusedtoprepareaskeletonforanorthography\nprofilefromsomedata.Thepreparationofanorthographyprofilefromsomedata\nmightsoundlikeatrivialproblem,butactuallytherearevariousdifferentways\nin which strings can be separated into graphemes by write.profile. Consider\nthe following string of characters called example below. The default settings of\nwrite.profile separates the string into Unicode graphemes according to graph-\nemeclusters(calleduser-perceivedcharacters;seeChapter2foranexplanation).\n108 8.4Rlibrary:qlcData\nTheresultsareshowninTable8.1.Asitturnsout,someofthesegraphemesare\nsinglecodepoints,othersarecombinationsoftwocodepoints(seeSection3.2).\nexample <- \"\u00d9\u00da\u00db\u00d9\u00da\u00db\"\nprofile_1 <- write.profile(example)\nTable8.1:Profile1(defaultsettings,splittinggraphemeclusters)\nGr. Freq. Codepoint UnicodeName\n\u00da 1 U+00DA LATINCAPITALLETTERUWITHACUTE\n\u00da 1 U+0055,U+0301 LATINCAPITALLETTERU,COMBININGACUTEACCENT\n\u00d9 1 U+00D9 LATINCAPITALLETTERUWITHGRAVE\n\u00d9 1 U+0055,U+0300 LATINCAPITALLETTERU,COMBININGGRAVEACCENT\n\u00db 1 U+00DB LATINCAPITALLETTERUWITHCIRCUMFLEX\n\u00db 1 U+0055,U+0302 LATINCAPITALLETTERU,COMBININGCIRCUMFLEXACCENT\nByspecifyingthesplittingseparatorastheemptystringsep = \"\",itispossible\nto split the string into Unicode code points, thus separating the combining dia-\ncritics.Theideabehindthisoptionsepisthatseparatingbyacharacterallowsfor\nuser-determined separation. The most extreme choice here is the empty string\nsep = \"\",whichisinterpretedasseparationeverywhere.Theotherextremeisthe\ndefault setting sep = NULL, which means that the separation is not user-defined,\nbutrelegatedtotheUnicodegraphemedefinitions.TheresultisshowninTable\n8.2.\nprofile_2 <- write.profile(example, sep = \"\")\nTable8.2:Profile2(splittingbycodepoints)\nGrapheme Frequency Codepoint UnicodeName\n\u0301 1 U+0301 COMBININGACUTEACCENT\n\u0300 1 U+0300 COMBININGGRAVEACCENT\n\u0302 1 U+0302 COMBININGCIRCUMFLEXACCENT\nU 3 U+0055 LATINCAPITALLETTERU\n\u00da 1 U+00DA LATINCAPITALLETTERUWITHACUTE\n\u00d9 1 U+00D9 LATINCAPITALLETTERUWITHGRAVE\n\u00db 1 U+00DB LATINCAPITALLETTERUWITHCIRCUMFLEX\nSomecharacterslookidentical,althoughtheyareencodeddifferently.Unicode\noffers different ways of normalization (see Section 3.9), which can be invoked\nhereaswellusingtheoptionnormalize.NFCnormalizationturnseverythinginto\ntheprecomposedcharacters,whileNFDnormalizationseparateseverythinginto\nbasecharacterswithcombiningdiacritics.Splittingbycodepoints(i.e.sep = \"\")\nshowstheresultsofthesetwonormalizationsinTables8.3&8.4.\n109 8Implementation\n# after NFC normalization Unicode code points have changed\nprofile_3 <- write.profile(example, normalize = \"NFC\", sep = \"\")\n# NFD normalization gives another structure of the code points\nprofile_4 <- write.profile(example, normalize = \"NFD\", sep = \"\")\nTable8.3:Profile3(splittingbyNFCcodepoints)\nGrapheme Frequency Codepoint UnicodeName\n\u00da 2 U+00DA LATINCAPITALLETTERUWITHACUTE\n\u00d9 2 U+00D9 LATINCAPITALLETTERUWITHGRAVE\n\u00db 2 U+00DB LATINCAPITALLETTERUWITHCIRCUMFLEX\nTable8.4:Profile4(splittingbyNFDcodepoints)\nGrapheme Frequency Codepoint UnicodeName\n\u0301 2 U+0301 COMBININGACUTEACCENT\n\u0300 2 U+0300 COMBININGGRAVEACCENT\n\u0302 2 U+0302 COMBININGCIRCUMFLEXACCENT\nU 6 U+0055 LATINCAPITALLETTERU\nItisimportanttorealizethatforUnicodegraphemedefinitions,NFCandNFD\nnormalizationareequivalent.Thiscanbeshownbynormalizingtheexamplein\neitherNFDorNFC,asshowninTables8.5&8.6,byusingthedefaultseparation\ninwrite.profile.Tobeprecise,defaultseparationmeanssettingsep = NULL,but\nthathasnotbeaddedexplicitlybelow.\n# note that NFC and NFD normalization are identical\n# for Unicode grapheme definitions\nprofile_5 <- write.profile(example, normalize = \"NFD\")\nprofile_6 <- write.profile(example, normalize = \"NFC\")\nTable8.5:Profile5(splittingbygraphemesafterNFD)\nGr. Freq. Codepoint UnicodeName\n\u00da 2 U+0055,U+0301 LATINCAPITALLETTERU,COMBININGACUTEACCENT\n\u00d9 2 U+0055,U+0300 LATINCAPITALLETTERU,COMBININGGRAVEACCENT\n\u00db 2 U+0055,U+0302 LATINCAPITALLETTERU,COMBININGCIRCUMFLEXACCENT\n110 8.4Rlibrary:qlcData\nTable8.6:Profile6(splittingbygraphemesafterNFC)\nGr. Freq. Codepoint UnicodeName\n\u00da 2 U+00DA LATINCAPITALLETTERUWITHACUTE\n\u00d9 2 U+00D9 LATINCAPITALLETTERUWITHGRAVE\n\u00db 2 U+00DB LATINCAPITALLETTERUWITHCIRCUMFLEX\nThesedifferentprofilescanalsobeproducedusingthebashexecutablewriteprofile\n(seeaboveforhowtoinstalltheBashexecutable).Thisexampleisalsoincluded\ninthehelpfileoftheexecutable.\nUsinganorthographyprofileskeleton\nA common workflow to use these functions is to first make a skeleton for an\northography profile and then edit this profile by hand. For example, Table 8.7\nshows the profile skeleton after a few graphemes have been added to the file.\nNote that in this example, the profileis written to the desktop, and this file has\ntobeeditedmanually.WesimplyaddafewmultigraphstothecolumnGrapheme\nandleavetheothercolumnsempty.Thesenewgraphemesarethenincludedin\nthegraphemicparsing.\n# a few words to be graphemically parsed\nexample <- c(\"mishmash\", \"mishap\", \"mischief\", \"scheme\")\n# write a profile skeleton to a file\nwrite.profile(example, file = \"~/Desktop/profile_skeleton.txt\")\n# edit the profile, and then use the edited profile to tokenize\ntokenize(example, profile = \"~/Desktop/profile_skeleton.txt\")$strings\n## originals tokenized\n## 1 shampoo sh a m p oo\n## 2 mishap m i sh a p\n## 3 mischief m i sch ie f\n## 4 scheme sch e m e\nTo leave out the Unicode information in the profile skeleton, use the option\ninfo = FALSE.Itisalsopossiblenottouseaseparatefileatall,butprocessevery-\nthingwithinR.Insimplesituationsthisisoftenuseful(seebelow),butingeneral\nwe prefer to handle everything through a separately saved orthography profile.\nThis profile often contains highly useful information that is nicely coded and\nsaved inside this one file, and can thus be easily distributed and shared. Doing\nthesameasabovecompletelywithinRmightlookasfollows:\n111 8Implementation\nTable8.7:Manuallyeditedprofileskeleton\nGrapheme Frequency Codepoint UnicodeName\nsh\nch\nsch\nie\noo\na 2 U+0061 LATINSMALLLETTERA\nc 2 U+0063 LATINSMALLLETTERC\ne 3 U+0065 LATINSMALLLETTERE\nf 1 U+0066 LATINSMALLLETTERF\nh 4 U+0068 LATINSMALLLETTERH\ni 3 U+0069 LATINSMALLLETTERI\nm 4 U+006D LATINSMALLLETTERM\no 2 U+006F LATINSMALLLETTERO\np 2 U+0070 LATINSMALLLETTERP\ns 4 U+0073 LATINSMALLLETTERS\n# make a profile, just select the column 'Grapheme'\nprofile <- write.profile(example)[, \"Grapheme\"]\n# extend the profile with multigraphs\nprofile <- c(\"sh\", \"ch\", \"sch\", \"ie\", \"oo\", profile)\n# use the profile to tokenize\ntokenize(example, profile)$strings\n## originals tokenized\n## 1 shampoo sh a m p oo\n## 2 mishap m i sh a p\n## 3 mischief m i sch ie f\n## 4 scheme sch e m e\nRuleordering\nEverything is not yet correct with the graphemic parsing of the example dis-\ncussed previously. The sequence <sh> in \u2018mishap\u2019 should not be a digraph, and\nconversely thesequence <sch>in \u2018mischief\u2019should ofcourse beseparated into\n<s>and<ch>.Oneoftheimportantissuestogetthegraphemicparsingrightis\ntheorderinwhichgraphemesareparsed.Forexample,currentlythegrapheme\n<sch>isparsedbeforethegrapheme<ch>,leadingto<mischief>insteadofthe\nintended<mischief>.Thereasonthat<sch>isparsedbefore<ch>isthatbyde-\nfaultlongergraphemesareparsedbeforeshorterones.Ourexperienceisthatin\nmostcasesthisisexpectedbehavior.Youcanchangetheorderingbyspecifying\ntheoptionordering.SettingthisoptiontoNULLresultsinnopreferentialordering,\n112 8.4Rlibrary:qlcData\ni.e.thegraphemesareparsedintheorderoftheprofile,fromtoptobottom.Now\n\u2018mischief\u2019 is parsed correctly, but \u2018scheme\u2019 is wrong. So this ordering is not the\nsolutioninthiscase.\n# do not reorder the profile\n# just apply the graphemes from top to bottom\ntokenize( example\n, profile = \"~/Desktop/profile_skeleton.txt\"\n, ordering = NULL\n)$strings\n## originals tokenized\n## 1 shampoo sh a m p oo\n## 2 mishap m i sh a p\n## 3 mischief m i s ch ie f\n## 4 scheme s ch e m e\nThere are various additional options for rule ordering implemented. Please\ncheck the help description in R, i.e. help(tokenize), for more details on the pos-\nsible rule ordering specifications. In summary, there are four different ordering\noptions,thatcanalsobecombined:\n\u2022 size\nThis option orders the lines in the profile by the size of the grapheme,\nlargest first. Size is measured by number of Unicode characters after nor-\nmalizationasspecifiedintheoptionnormalize.Forexample,<\u00e9>hasasize\nof1withnormalize = \"NFC\",butasizeof2withnormalize = \"NFD\".\n\u2022 context\nThis option orders the lines by whether they have any context specified\n(seenextsection).Lineswithcontextwillthenbeusedfirst.Notethatthis\nonlyworkswhentheoptionregex = TRUEisalsochosen(otherwisecontext\nspecificationsarenotused).\n\u2022 reverse\nThisoptionordersthelinesfrombottomtotop.Reversingordercanbeuse-\nfulbecausehand-writtenprofilestendtoputgeneralrulesbeforespecific\nrules,whichmostlyshouldbeappliedinreverseorder.\n\u2022 freqency\nThis option orders the lines by the frequency with which they match in\nthe specified strings before tokenization,least frequent coming first. This\nfrequency of course depends crucially on the available strings, so it will\nlead to different orderings when applied to different data. Also note that\nthis frequency is (necessarily) measured before graphemes are identified,\n113 8Implementation\nso these ordering frequencies are not the same as the final frequencies\nshownintheoutput.Frequencyofcoursealsostronglydiffersonwhether\ncontextisusedforthematchingthroughregex = TRUE.\nByspecifyingmorethanoneordering,theseorderingsareusedtobreakties,\ne.g.thedefaultsettingordering = c(\"size\", \"context\", \"reverse\")willfirstor-\nder by size, and for those with the same size, it will order by whether there is\nany context specified or not. For lines that are still tied (i.e. have the same size\nandboth/neitherhavecontext)theorderwillbereversedcomparedtotheorder\nasattestedintheprofile,becausemosthand-writtenspecificationsofgraphemes\nwillfirstwritethegeneralrule,followedbymorespecificregularities.Togetthe\nrighttokenization,theserulesshouldinmostcasesbeappliedinreverseorder.\nNotethatdifferentorderingoftherulesdoesnotresultinfeedingandbleeding\neffectsfoundwithfinite-staterewriterules.25 Thegraphemicparsingadvocated\nhereiscruciallydifferentfromrewriterulesinthatthereisnothingbeingrewrit-\nten:eachlineinanorthographyprofilespecifiesagraphemetobecapturedinthe\nstring.Alllinesintheprofileareprocessedinaspecifiedorder(asdeterminedby\ntheoptionordering).Attheprocessingofaspecificline,allmatchinggraphemes\nin the data are marked as captured, but not changed. Captured parts cannot be\ncapturedagain,buttheycanstillbeusedtomatchcontextsofotherlinesinthe\nprofile.Onlywhenalllinesareprocessedthecapturedgraphemesareseparated\n(andpossiblytransliterated).Inthiswaytheresultoftheappliedrulesisrather\neasytopredict.\nTo document a specific case of graphemic parsing, it is highly useful to save\nallresultsofthetokenizationtofilebyusingtheoptionfile.out,forexampleas\nfollows:\n# save the results to various files\ntokenize( example\n, profile = \"~/Desktop/profile_skeleton.txt\"\n, file.out = \"~/Desktop/result\"\n)\nThiswillleadtothefollowingfourfilesbeingwritten.Crucially,anewprofile\nisproducedwiththere-orderedorthographyprofile.Toreproducethetokeniza-\ntion,thisre-orderedprofilecanbeusedwiththeoptionordering = NULL.\n25Bleedingistheeffectthattheapplicationofarulechangesthestring,soastopreventafol-\nlowingrulefromapplying.Feedingistheopposite:aspecificrulewillonlybeappliedbecause\na previous rule changed the string already. The interaction of rules with such feeding and\nbleedingeffectsisextremelydifficulttopredict.\n114 8.4Rlibrary:qlcData\n\u2022 result_strings.tsv:\nAtab-separatedfilewiththeoriginalandthetokenized/transliteratedstrings.\n\u2022 result_profile.tsv:\nAtab-separatedfilewiththegraphemeswithaddedfrequenciesofoccur-\nrenceinthedata.Thelinesinthefilearere-orderedaccordingtotheorder\nthatresultedfromtheorderingspecifications(seeSection8.4).\n\u2022 result_errors.tsv:\nAtab-separatedfilewithalloriginalstringsthatcontainunmatchedparts.\nUnmatched parts are indicated with the character as specified with the\noption missing. By default the character double qestion mark <\u2047> at\nU+2047isused.Whentherearenoerrors,thisfileisabsent.\n\u2022 result_missing.tsv:\nAtab-separatedfilewiththegraphemesthataremissingfromtheoriginal\northography profile, as indicated in the errors. When there are no errors,\nthenthisfileisabsent.\nContextuallyspecifiedgraphemes\nTorefineaprofile,itisalsopossibletoaddgraphemeswithcontextualspecifica-\ntions.AnorthographyprofilecanhavecolumnscalledLeftandRighttospecify\nthe context in which the grapheme is to be separated.26 For example, we are\naddinganextralinetotheprofilefromabove,resultingintheprofileshownin\nTable 8.8. The extra line specifies that <s> is a grapheme when it occurs after\n<mi>. Such contextually-specified graphemes are based on regular expressions\nso you can also use regular expressions in the description of the context. For\nsuchcontextuallyspecifiedgraphemestobeincludedinthegraphemicparsing\nwehavetospecifytheoptionregex = TRUE.Thiscontextuallyspecifiedgrapheme\nshould actually be handled first, so we could try ordering = NULL. However, we\ncan also explicitly specify that rules with contextual information should be ap-\npliedfirstbyusingordering = \"context\".Thatgivestherightresultsforthistoy\nexample,asshowninTable8.8.\n# add a contextual grapheme, and then use the edited\n# profile to tokenize\ntokenize( example\n, profile = \"~/Desktop/profile_skeleton.txt\"\n, regex = TRUE\n26ThecolumnnamesLeft,RightandGraphemearecurrentlyhard-coded,sotheseexactcolumn\nnamesshouldbeusedfortheseeffectstotakeplace.Thepositionofthecolumnsintheprofile\nisunimportant.SothecolumnLeftcanoccuranywhere.\n115 8Implementation\n, ordering = \"context\"\n)$strings\n## originals tokenized\n## 1 shampoo sh a m p oo\n## 2 mishap m i s h a p\n## 3 mischief m i s ch ie f\n## 4 scheme s ch e m e\nTable8.8:Orthographyprofilewithcontextualspecificationfor<s>\nLeft Grapheme Frequency Codepoint UnicodeName\nmi s\nsh\nch\nsch\nie\noo\na 2 U+0061 LATINSMALLLETTERA\nc 2 U+0063 LATINSMALLLETTERC\ne 3 U+0065 LATINSMALLLETTERE\nf 1 U+0066 LATINSMALLLETTERF\nh 4 U+0068 LATINSMALLLETTERH\ni 3 U+0069 LATINSMALLLETTERI\nm 4 U+006D LATINSMALLLETTERM\no 2 U+006F LATINSMALLLETTERO\np 2 U+0070 LATINSMALLLETTERP\ns 4 U+0073 LATINSMALLLETTERS\nNote that with the option regex = TRUE all content in the profile is treated as\nregular expressions, so the characters with special meaning in regular expres-\nsions should be either omitted or escaped (by putting a < \\ > reverse solidus\natU+005Cbeforethecharacter).Specifically,thisconcernsthefollowingcharac-\nters:\n<->hyphen-minusatU+002D\n<!>exclamationmarkatU+0021\n<?>qestionmarkatU+003F\n<.>fullstopatU+002E\n<(>leftparenthesisatU+0028\n<)>rightparenthesisatU+0029\n<[>leftsqarebracketatU+005B\n<]>rightsqarebracketatU+005D\n<{>leftcurlybracketatU+007B\n116 8.4Rlibrary:qlcData\n<}>rightcurlybracketatU+007D\n<|>verticallineatU+007C\n<*>asteriskatU+002A\n<\\>reversesolidusatU+005C\n<\u02c6>circumflexaccentatU+005E\n<+>plussignatU+002B\n<$>dollarsignatU+0024\nProfileskeletonwithcolumnsforediting\nWhenitisexpectedthatcontextmightbeimportantforaprofile,thentheprofile\nskeletoncanbecreatedwithcolumnspreparedforthecontextualspecifications.\nThisisdonebyusingtheoptionediting = TRUE(cf.Table8.9foratoyprofileof\nsomeItalianwords).\nexample <- c('cane', 'cena', 'cine')\nwrite.profile(example\n, file = \"~/Desktop/profile_skeleton.txt\"\n, editing = TRUE\n, info = FALSE\n)\nTable 8.9: Orthography profile with empty columns for editing con-\ntexts\nLeft Grapheme Right Class Replacement\na a\nc c\ne e\ni i\nn n\nBesidesthecolumnsLeft,Grapheme,andRightasdiscussedintheprevioussec-\ntions,therearealsocolumnsClassandReplacement.ThecolumnClasscanbeused\nto specify classes of graphemes that can then be used in the contextual specifi-\ncation.ThecolumnReplacementisjustacopyofthecolumnGrapheme,providing\naskeletontospecifytransliteration.ThenameofthecolumnReplacementisnot\nfixed\u2013therecanactuallybemultiplecolumnswithdifferentkindsoftransliter-\nationsinasingleprofile.\nTo achieve contextually determined replacements it is possible to use a reg-\nular expression in the contextual column. For example, consider the edited toy\n117 8Implementation\nTable8.10:Orthographyprofilewithregexascontext\nLeft Grapheme Right Class IPA\nc [ie] t\u0283\na a\nn n\nc k\ne e\ni i\nprofileforItalianinTable8.10(where<c>becomes/k/exceptbefore<i,e>,then\nitbecomes/t\u0283/).\nTo use this profile, you have to add the option regex = TRUE. Also note that\nwehavechangedthenameofthetransliterationcolumn,sowehavetotellthe\ntokenization process to use this column to transliterate. This is done by adding\ntheoptiontransliterate = \"IPA\".\n# add a contextual grapheme, and then use the edited\n# profile to tokenize\ntokenize( example\n, profile = \"~/Desktop/profile_skeleton.txt\"\n, regex = TRUE\n, transliterate = \"IPA\"\n)$strings\n## originals tokenized transliterated\n## 1 cane c a n e k a n e\n## 2 cena c e n a t\u0283 e n a\n## 3 cine c i n e t\u0283 i n e\nAnother equivalent possibility is to use a column Class to specify a class of\ngraphemes,andthenusethisclassinthespecificationofcontext.Thisisuseful\ntokeeptrackofrecurrentclassesinlargerprofiles.Youarefreetouseanyclass-\nnameyoulike,aslongasitdoesnotclashwiththerestoftheprofile.Theexample\nshowninTable8.11shouldgivethesameresultasobtainedpreviouslybyusing\naregularexpression.\n# add a class, and then use the edited profile to tokenize\ntokenize( example\n, profile = \"~/Desktop/profile_skeleton.txt\"\n, regex = TRUE\n, transliterate = \"IPA\"\n)$strings\n118 8.4Rlibrary:qlcData\nTable8.11:OrthographyprofilewithClassascontext\nLeft Grapheme Right Class IPA\nc Vfront t\u0283\na a\nn n\nc k\ne Vfront e\ni Vfront i\n## originals tokenized transliterated\n## 1 cane c a n e k a n e\n## 2 cena c e n a t\u0283 e n a\n## 3 cine c i n e t\u0283 i n e\nFormattinggraphemeseparation\nInallexamplesabovewehaveusedthedefaultformattingforgraphemesepara-\ntionusingspaceasaseparator,whichisobtainedbythedefaultsettingsep = \" \".\nItispossibletospecifyanyotherseparatorhere,includingtheemptystring,i.e.\nsep = \"\". This will not show the graphemic tokenization anymore (although it\nhasofcoursebeenusedinthebackground).\n# Use the empty string as separator\ntokenize( example\n, profile = \"~/Desktop/profile_skeleton.txt\"\n, regex = TRUE\n, transliterate = \"IPA\"\n, sep = \"\"\n)$strings\n## originals tokenized transliterated\n## 1 cane cane kane\n## 2 cena cena t\u0283ena\n## 3 cine cine t\u0283ine\nNormally, the separator specified should not occur in the data. If it does, un-\nexpectedthingsmighthappen,soconsiderremovingthechosenseparatorfrom\nyourstringsfirst.However,thereisalsoanoptionsep.replacetoreplacethesep-\naratorwithsomethingelse.Whensep.replaceisspecified,thismarkisinserted\ninthestringatthoseplaceswheretheseparatoroccurs.Typicalusageinlinguis-\ntics would be sep = \" \", sep.replace = \"#\" adding spaces between graphemes\nandreplacingspacesintheinputstringbyhashesintheoutputstring.\n119 8Implementation\n# Replace separator in string to be tokenized\ntokenize( \"test test test\"\n, sep = \" \"\n, sep.replace = \"#\"\n)$strings$tokenized\n## [1] \"t e s t # t e s t # t e s t\"\nRemainingissues\nGiven a set of graphemes, there are at least two different methods to tokenize\nstrings.Thefirstiscalledmethod = \"global\".Thisapproachtakesthefirstgraph-\nemeintheprofile,thenmatchesthisgraphemegloballyatallplacesinthestring,\nand then turns to process the next string in the profile. The other approach is\ncalled method = \"linear\". This approach walks through the string from left to\nright.Atthefirstcharacteritlooksthroughallgraphemeswhetherthereisany\nmatch,andthenwalksfurthertotheendofthematchandstartsagain.Thisap-\nproach is more akin to finite-state rewrite rules (though note that it still works\ndifferently from such rewrite rules, as previously stated). The global method is\nusedbydefaultintheRimplementation.\nInsomespecialcasesthesetwotokenizationmethodscanleadtodifferentre-\nsults,butthesespecialsituationsareveryunlikelytohappeninnaturallanguage.\nTheexamplebelowshowsthatastring'abc'canbeparseddifferentlyincaseof\naveryspecialprofilewithaveryspecialorderingofthegraphemes.\n# different parsing methods can lead to different results\n# the global method first catches 'bc'\ntokenize( \"abc\"\n, profile = c(\"bc\",\"ab\",\"a\",\"c\")\n, order = NULL\n, method = \"global\"\n)$strings\n## originals tokenized\n## 1 abc a bc\n# the linear method catches the first grapheme, which is 'ab'\ntokenize( \"abc\"\n, profile = c(\"bc\",\"ab\",\"a\",\"c\")\n, order = NULL\n, method = \"linear\"\n)$strings\n120 8.4Rlibrary:qlcData\n## originals tokenized\n## 1 abc ab c\nFurther, the current R implementation has a limitation when regular expres-\nsionsareused.Theproblemisthatoverlappingmatchesarenotcapturedwhen\nusing regular expressions.27 Everything works as expected without regular ex-\npressions,buttheremightbewarnings/errorsincaseofregex = TRUE.However,\njust as in the previous issue, this problem should only very rarely (when at all)\nhappeninnaturallanguagedata.\nThe problem can be exemplified by a sequence <bbbb> in which a grapheme\n<bb>shouldbematched.Withthedefaultregex = FALSEtherearethreepossible\nmatches,butwithregex = TRUEonlythefirsttwo<b>\u2019sorthelasttwo<b>\u2019sare\nmatched. The middle two <b>\u2019s are not matched because they overlap with the\nother matches. In the example below this leads to an error, because the second\n<bb>isnotmatched.However,wehavenotbeenabletoproducearealexample\ninanynaturallanguageinwhichthislimitationmightleadtoanerror.\n# Everything perfect without regular expressions\ntokenize( \"abbb\"\n, profile = c(\"ab\",\"bb\")\n, order = NULL\n, regex = FALSE\n)$strings\n## originals tokenized\n## 1 abbb ab bb\n# Matching with regular expressions does not catch overlap\ntokenize( \"abbb\"\n, profile = c(\"ab\",\"bb\")\n, order = NULL\n, regex = TRUE\n)$strings\n## Warning in tokenize(\"abbb\", profile = c(\"ab\", \"bb\"), order = NULL, regex = TRUE):\n## There were unknown characters found in the input data.\n## Check output$errors for a table with all problematic strings.\n## originals tokenized\n## 1 abbb ab \u2047 \u2047\n27ThisrestrictionisaneffectoftheunderlyinglyusedICUimplementationoftheUnicodeStan-\ndardasimplementedinRthroughthepackagestringi.\n121 8Implementation\n8.5 Recipes online\nWeprovideseveralusecasesonline\u2013whatwerefertoasrecipes\u2013thatillustrate\nthe applications of orthography profiles using our implementations in Python\nandR.28 Herewebrieflydescribetheseusecasesandweencourageuserstotry\nthemoutusingGitandJupyterNotebooks.\nFirst, as we discussed above, we provide a basic tutorial on how to use the\nPython segments29 and R qlcData30 libraries. This recipe simply shows the basic\nfunctionsofeachlibrarytogetyoustarted.31\nThetworecipesusingthePythonsegmentspackageincludeatutorialonhow\ntosegmentgraphemesinIPAtext:\n\u2022 https://github.com/unicode-cookbook/recipes/tree/master/JIPA\nand an example of how to create an orthography profile to tokenize fieldwork\ndatafromalargecomparativewordlist.\n\u2022 https://github.com/unicode-cookbook/recipes/tree/master/Dogon\nThe JIPA recipes uses excerpts from The North Wind and the Sun passages from\ntheIllustrationsoftheIPApublishedintheJournaloftheInternationalPhonetic\nAlphabet.ThustherecipeshowshowausermighttokenizeIPAproper.TheDo-\ngonrecipeusesfieldworkdatafromtheDogonlanguagesofMalilanguagedocu-\nmentationproject.32 Thisrecipeillustrateshowausermighttokenizefieldwork\ndatafromnumerouslinguistsusingdifferenttranscriptionpracticesbydefining\nthesepracticeswithanorthographyprofiletomaketheoutputunifiedandcom-\nparable.\nThe two recipes using the R qlcData library include a use case for tokenizing\nwordlistdatafromtheAutomatedSimilarityJudgmentProgram(ASJP):33\n\u2022 https://github.com/unicode-cookbook/recipes/tree/master/ASJP\nandfortokenizingacorpusoftextinDutchorthography:\n\u2022 https://github.com/unicode-cookbook/recipes/tree/master/Dutch\n28https://github.com/unicode-cookbook/recipes\n29https://pypi.python.org/pypi/segments\n30https://github.com/cysouw/qlcData\n31https://github.com/unicode-cookbook/recipes/tree/master/Basics\n32http://dogonlanguages.org/\n33http://asjp.clld.org/\n122 8.5Recipesonline\nTheASJPusecaseshowshowtodownloadthefullsetofASJPwordlists,tocom-\nbinethemintoasinglelargeCSVfile,andtotokenizetheASJPorthography.The\nDutchusecasetakesasinputthe10KcorpusforDutch(\u201cnld\u201d)fromtheLeipzig\nCorporaCollection,34 whichisthencleanedandtokenizedwithanorthography\nprofilethatcapturestheintricaciesofDutchorthography.\n34http://wortschatz.uni-leipzig.de/en/download/\n123  References\nAbercrombie,David.1964.Englishphonetictexts.London:Faber&FaberLTD.\nAnderson,LloydB.1984.Multilingualtextprocessinginatwo-bytecode.InPro-\nceedingsofthe10thInternationalConferenceonComputationalLinguistics,1\u20134.\nStanford,CA:AssociationforComputationalLinguistics.http://dx.doi.org/10.\n3115/980431.980492. DOI:10.3115/980431.980492\nAppleComputer.1985.Thefontmanager.InsideMachintosh1.215\u2013240.\nAppleComputer.1986.Thefontmanager.InsideMachintosh4.27\u201346.\nAppleComputer.1988.Thescriptmanager.InsideMachintosh5.293\u2013322.\nBecker,JosephD.1984.Multilingualwordprocessing.ScientificAmerican251(1).\n96\u2013107.http://www.jstor.org/stable/24969416.\nBeider, Alexander & Stephen P. Morse. 2008. Beider-Morse phonetic matching:\nAn alternative to Soundex with fewer false hits. Avotaynu: the International\nReviewofJewishGenealogy 24(2).12.\nBelongie,Serge,JitendraMalik&JanPuzicha.2002.Shapematchingandobject\nrecognition using shape contexts. IEEE Transactions on Pattern Analysis and\nMachineIntelligence 24(4).509\u2013522.http://www.dtic.mil/get-tr-doc/pdf?AD=\nADA640016. DOI:10.1109/34.993558\nBird, Steven & Gary F. Simons. 2003. Seven dimensions of portability\nfor language documentation and description. Language 79(3). 557\u2013582.\nDOI:https://doi.org/10.1353/lan.2003.0149\nBrindle, Jonathan. 2017. A dictionary and grammatical outline of Chakali. Vol. 2\n(African Language Grammars and Dictionaries). Berlin: Language Science\nPress. DOI:https://doi.org/10.5281/zenodo.344813\nBrown, Cecil H., Eric W. Holman & S\u00f8ren Wichmann. 2013. Sound\ncorrespondences in the world\u2019s languages. Language 89(1). 4\u201329.\nDOI:10.1353/lan.2013.0009\nChao,YuenRen.1930.Asystemoftoneletters.LeMa\u0131t\u0302 rePhon\u00e9tique 30.24\u201327.\nCysouw, Michael. 2018. cysouw/qlcData: Zenodo release (Version v0.2.1.0). Zen-\nodo. https : / / github . com / cysouw / qlcData / tree / v0 . 2 . 1 . 0.\nDOI:http://doi.org/10.5281/zenodo.1137278 References\nDaniels, Peter T. 1990. Fundamentals of grammatology. Journal of the Ameri-\ncan Oriental Society 110(4). 727\u2013731. http://www.jstor.org/stable/602899.\nDOI:10.2307/602899\nDaniels,PeterT.1996.Thestudyofwritingsystems.InP.T.Daniels&W.Bright\n(eds.),Theworld\u2019swritingsystems.NewYork,NY:OxfordUniversityPress.\nDaniels,PeterT.&WilliamBright.1996.Theworld\u2019swritingsystems.NewYork,\nNY:OxfordUniversityPress.\nDolgopolsky, Aharon B. 1986. A probabilistic hypothesis concerning the oldest\nrelationships among the language families of Northern Eurasia. In Vitalij V.\nShevoroshkin & Thomas L. Markey (eds.), Typology, relationship and time: a\ncollectionofpapersonlanguagechangeandrelationshipbysovietlinguists,27\u2013\n50.AnnArbor,MI:Karoma.\nDuckworth, Martin, George Allen, William Hardcastle & Martin Ball. 1990.\nExtensions to the International Phonetic Alphabet for the transcrip-\ntion of atypical speech. Clinical Linguistics & Phonetics 4(4). 273\u2013280.\nDOI:https://doi.org/10.3109/02699209008985489\nEsling,JohnH.1990.ComputercodingoftheIPA:supplementaryreport.Journal\noftheInternationalPhoneticAssociation20(1).22\u201326.\nEsling, John H. & Harry Gaylord. 1993. Computer codes for phonetic symbols.\nJournaloftheInternationalPhoneticAssociation23(2).83\u201397.\nEvans,Nicholas&StephenC.Levinson.2009.Themythoflanguageuniversals:\nlanguage diversity and its importance for cognitive science. Behavioral and\nBrainSciences32(5).429\u2013448.\nForkel, Robert & Steven Moran. 2018. cldf/segments: Unicode Standard tokeniza-\ntion (Version v1.2.2). Zenodo. https://github.com/cldf/segments/tree/v1.2.2.\nDOI:http://doi.org/10.5281/zenodo.1296127\nGaultney, J. Victor. 2002. Problems of diacritic design for Latin script text faces.\nReading,UKMAthesis.https://www.sil.org/resources/archives/9816.\nHieronymus, James L. 1993. ASCII phonetic symbols for the world\u2019s languages:\nWorldbet.JournaloftheInternationalPhoneticAssociation23.\nHuurdeman, Anton A. 2003. The worldwide history of telecommunications. New\nYork,NY:JohnWiley&Sons.\nKemp,Alan.2006.Phonetictranscription:history.TheEncyclopediaofLanguage\nandLinguistics6.396\u2013410.\nKnuth,DonaldE.1973.Theartofprogramming:sortingandsearching.Vol.3.Read-\ning,MA:Addison-Wesley.\n126 Kohrt,Manfred.1986.Theterm\u2018grapheme\u2019inthehistoryandtheoryoflinguis-\ntics.InGerhardAugst(ed.),Newtrendsingraphemicsandorthography,80\u201396.\nBerlin:deGruyter.\nLadefoged, Peter. 1990. Some reflections on the IPA. Journal of Phonetics 18(3).\n335\u2013346.\nList, Johann-Mattis. 2012. SCA: phonetic alignment based on sound classes. In\nDanielLassiter&MarijaSlavkovik(eds.),Newdirectionsinlogic,language,and\ncomputation,32\u201351.Berlin&Heidelberg:Springer.\nMaddieson,Ian.1984.Patternsofsounds.Cambridge,UK:CambridgeUniversity\nPress.\nMaddieson,Ian.1990.ThetranscriptionoftoneintheIPA.JournaloftheInterna-\ntionalPhoneticAssociation20(2).28\u201332.\nMaddieson, Ian & Kristin Precoda. 1990. Updating UPSID. In UCLA working pa-\npersinphonetics,vol.74,104\u2013111.DepartmentofLinguistics,UCLA.\nMaddieson,Ian&KristinPrecoda.1992.UPSIDandPHONEME.Usermanual.http:\n//phonetics.linguistics.ucla.edu/sales/UPSID-guide.pdf.\nMania,Hubert.2008.Gauss:eineBiographie.ReinbekbeiHamburg:Rowohlt.\nMcLaughlin, Fiona. 2005. Voicelessimplosivesin Seereer-Siin. Journalof the In-\nternationalPhoneticAssociation35(2).201\u2013214.\nMeinhof, Carl & Daniel Jones. 1928. Principles of practical orthography for\nAfrican languages. Africa: Journal of the International African Institute 1(2).\n228\u2013239.\nMeyer,Julien. 2015. Whistled languages: a worldwideinquiry on human whistled\nspeech.Berlin:Springer.\nMeyer,Julien,LaureDentel&FrankSeifart.2012.Amethodologyforthestudy\nof rhythm in drummed forms of languages: application to Bora Manguar\u00e9 of\nAmazon.InProceedingsofInterspeech,687\u2013690.\nMielke, Jeff. 2009. Segment inventories. Language and Linguistics Compass 3(2).\n700\u2013718. DOI:https://doi.org/10.1111/j.1749-818X.2008.00117.x\nMoran,Steven.2006.AgrammaticalsketchofWesternSisaala.Ypsilanti,MI:East-\nernMichiganUniversityMAthesis.http://commons.emich.edu/theses/73/.\nMoran,Steven.2012.Phoneticsinformationbaseandlexicon.UniversityofWash-\ningtondissertation.https://digital.lib.washington.edu/researchworks/handle/\n1773/22452.\nMoran, Steven & Daniel McCloy. 2014. PHOIBLE notational conventions. http://\nphoible.github.io/conventions/.\n127 References\nMoran, Steven, Daniel McCloy & Richard Wright (eds.). 2014. PHOIBLE online.\nLeipzig: Max Planck Institute for Evolutionary Anthropology. http://phoible.\norg/.\nOl\u00fam\u00fay\u0131\u0300w,T\u00e8m\u0131t\u0301 \u1ecd\u0301p\u1eb9\u0301.2013.Yorubawriting:standardsandtrends.JournalofArts\nand Humanities 2(1). 40\u201351. http://www.theartsjournal.org/index.php/site/\narticle/view/50.\nPostel,HansJ.1969.DieK\u00f6lnerPhonetik:einVerfahrenzurIdentifizierungvon\nPersonennamen auf der Grundlage der Gestaltanalyse. IBM-Nachrichten 19.\n925\u2013931.\nPowell,BarryB.2012.Writingtheoryandhistoryofthetechnologyofcivilization.\nNewYork,NY:JohnWiley&Sons.\nPullum,GeoffreyK.&WilliamA.Ladusaw.1986.Phoneticsymbolguide.Chicago,\nIL:UniversityofChicagoPress.\nRoach,P.J.1989.Reportonthe1989Kielconvention.JournaloftheInternational\nPhoneticAssociation19(2).67\u201380.\nRobinson,Andrew.1995.Thestoryofwriting.London:Thames&Hudson.\nSampson, Geoffrey. 1985. Writing systems. Stanford, CA: Stanford University\nPress.\nSimons, Gary F. 1989. Working with special characters. In Priscilla M. Kew &\nGaryF.Simons(eds.),Laptoppublishingforthefieldlinguist:anapproachbased\nonMicrosoftWord (OccasionalPublicationsinAcademicComputing),103\u2013118.\nDallas, TX: Summer Institute of Linguistics. https://www.sil.org/resources/\narchives/1483.\nSimons, Gary F. 1996. The nature of linguistic data and the requirements of a\ncomputingenvironmentforlinguisticresearch.DutchStudiesonNearEastern\nLanguagesandLiterature 2(1).111\u2013128.\nSingh,Simon.1999.Thecodebook.NewYork,NY:Doubleday.\nSproat,Richard.2000.Acomputationaltheoryofwritingsystems.Cambridge,UK:\nCambridgeUniversityPress.\nThe International Phonetic Association. 1949. The principles of the IPA. London:\nInternationalPhoneticAssociation.\nTheInternationalPhoneticAssociation.1999.HandbookoftheInternationalPho-\nneticAssociation:aguidetotheuseoftheInternationalPhoneticAlphabet.Cam-\nbridge,UK:CambridgeUniversityPress.\nTheInternationalPhoneticAssociation.2015.TheInternationalPhoneticAssocia-\ntion.https://www.internationalphoneticassociation.org.\n128 The Unicode Consortium. 2018. The Unicode Standard, version 11.0.0. Tech. rep.\nMountain View, CA: The Unicode Consortium. http://www.unicode.org/\nversions/Unicode11.0.0/.\nVidal,Alejandra.2001.Pilag\u00e1grammar(Guaykuruanfamily,Argentina).Univer-\nsityofOregondissertation.\nWells,JohnC.1987.Computer-codedphonetictranscription.JournaloftheInter-\nnationalPhoneticAssociation17(2).94\u2013114.\nWells,JohnC.1995.Computer-codingtheIPA:aproposedextensionofSAMPA.\nhttp://www.phon.ucl.ac.uk/home/sampa/ipasam-x.pdf.\nWells,JohnC.,WilliamBarry,MartineGrice,AdrianFourcin&DafyddGibbon.\n1992. Standard computer-compatible transcription. Esprit project 2589 (SAM),\nDoc.no.SAM-UCL37.\n129  Name index\nAbercrombie,David,41 Ladusaw,WilliamA.,44\nAnderson,LloydB.,44,48 Levinson,StephenC.,48\nAppleComputer,48 List,Johann-Mattis,8\nBecker,JosephD.,48 Maddieson,Ian,42,43,55,57\nBeider,Alexander,8 Mania,Hubert,5\nBelongie,Serge,27 McCloy,Daniel,66\nBird,Steven,13,46 McLaughlin,Fiona,68\nBright,William,10 Meinhof,Carl,9\nBrindle,Jonathan,56 Meyer,Julien,5\nBrown,CecilH.,8 Mielke,Jeff,55\nMoran,Steven,9,18,52,65,66,69\nChao,YuenRen,58 Morse,StephenP.,8\nDaniels,PeterT.,9,10 Ol\u00fam\u00fay\u0131\u0300w,T\u00e8m\u0131t\u0301 \u1ecd\u0301p\u1eb9\u0301,1\nDolgopolsky,AharonB.,8\nPostel,HansJ.,8\nDuckworth,Martin,69\nPowell,BarryB.,4\nEsling,JohnH.,43\u201345,48,49 Precoda,Kristin,42,43\nEvans,Nicholas,48 Pullum,GeoffreyK.,44\nGaultney,J.Victor,10 Roach,P.J.,39,44\nGaylord,Harry,43\u201345,48,49 Robinson,Andrew,4\nHieronymus,JamesL.,46 Sampson,Geoffrey,48\nHuurdeman,AntonA.,4 Simons,GaryF.,13,46\u201348\nSingh,Simon,4\nJones,Daniel,9 Sproat,Richard,10\nKemp,Alan,8,9 The International Phonetic Associa-\nKnuth,DonaldE.,8 tion,4,38\u201340,44,49,51,57,\nKohrt,Manfred,10 58,70,83\nTheUnicodeConsortium,4,7,14,33,\nLadefoged,Peter,38,67,68\n51 Nameindex\nVidal,Alejandra,55\nWells,JohnC.,43,46,47\n132  Did you like this\nbook?\nThis book was brought to you for\nfree\nPlease help us in providing free access to\nlinguistic research worldwide. Visit\nhttp://www.langsci-press.org/donate to\nprovide financial support or register as a\nlanguage\ncommunity proofreader or typesetter\nscience\npress\nat http://www.langsci-press.org/register.  The Unicode Cookbook\nfor Linguists\nThis text is a practical guide for linguists, and programmers, who work with data in\nmultilingual computational environments. We introduce the basic concepts needed to\nunderstandhowwritingsystemsandcharacterencodingsfunction,andhowtheywork\ntogether at the intersection between the Unicode Standard and the International Pho-\nnetic Alphabet. Although these standards are often met with frustration by users, they\nneverthelessprovidelanguageresearchersandprogrammerswithaconsistentcomputa-\ntionalarchitectureneededtoprocess,publishandanalyzelexicaldatafromtheworld\u2019s\nlanguages. Thus we bring to light common, but not always transparent, pitfalls which\nresearchersfacewhenworkingwithUnicodeandIPA.Havingidentifiedandovercome\nthesepitfallsinvolvedinmakingwritingsystemsandcharacterencodingssyntactically\nand semantically interoperable (to the extent that they can be), we created a suite of\nopen-sourcePythonandRtoolstoworkwithlanguagesusingorthographyprofilesthat\ndescribe author- or document-specific orthographic conventions. In this cookbook we\ndescribe a formal specification of orthography profiles and provide recipes using open\nsourcetoolstoshowhowuserscansegmenttext,analyzeit,identifyerrors,andtotrans-\nformitintodifferentwrittenformsforcomparativelinguisticsresearch.\nISBN 978-3-96110-090-3\n9 783961 100903"
}