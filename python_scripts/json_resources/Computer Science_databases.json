{"text":"INTRODUCTION TO\nDATABASES DATABASE\n\u2022 A database is a collection of data stored electronically, usually organized and\nstructured in some form.\n\u2022 Databases can be very simple \u2013 a text file or a CSV file, for example.\n\u2022 When they are complex, we use formal methods of design and engineering\nprinciples, to build, update and maintain these systems.\n\u2022 A DataBase Management System (DBMS) is the software used to interact between the\ndatabase and an application that uses the database.\n\u2022 Data in databases is usually stired as tables. DIFFERENCES BETWEEN TABLES AND\nDATABASES\n\u2022 When we think of databases, we often think of tables of information.\n\u2022 However, we encounter several types of tables in software, and they focus on different aspects.\n\u2022 HTML tables\n\u2022 Focus on display \u2013 tables have no basis of \u201cidentity\u201d for data\n\u2022 Spreadsheets\n\u2022 Focus on positional data \u2013 fields are arranged and calculated based on their position in the spreadsheet\n\u2022 Databases\n\u2022 Focus on the data itself \u2013 metadata is used to identify data fields.\n\u2022 Data stored in transience during program execution (classes, structs, etc) do not count,\nsince they do not offer permanence. DATA IN 3 LEVELS\n\u2022 Level 1 \u2013 The actual database\n\u2022 A file that stores all the information. The format depends on the type of the Database )text,\nrelational, graph, etc.)\n\u2022 Level 2 \u2013 The DataBase Management System (DBMS) \u2013 interaction between data and\nan application\n\u2022 A software package that helps to update, maintain and secure the data.\n\u2022 Level 3 \u2013 Application\n\u2022 Any software package that is built on top of the other 2 layers that provides interaction with\nthe user. A web app, a mobile app, BI\/ERP, etc. TYPES OF DATABASES\n\u2022 Flat Model\n\u2022 Navigational databases\n\u2022 \u25ab Hierarchical (tree) database model\n\u2022 \u25ab Network\/Graph model\n\u2022 Relational Model\n\u2022 Object model\n\u2022 Document model\n\u2022 Entity\u2013attribute\u2013value model\n\u2022 Star schema DISADVANTAGES OF FILE STORAGE\n\u2022 Redundancy \u2013 We might have multiple copies of the same data.\n\u2022 Inconsistency \u2013 Data on the same business entity may appear in different forms, for\nexample, state name, phone number, etc. This makes it hard to modify data and track\nchanges.\n\u2022 Mixture of data \u2013 No clear logical relationships between the data columns, making it\nhard to understand and manage complex structures.\n\u2022 Hard to maintain and manage\n\u2022 No concurrency support \u2013 limiting scalability HOW DO DATABASES HELP?\n\u2022 Self-describing data collection of related records (meta data, data about data)\n\u2022 Databases contains not just data, but also include the structure of data\n\u2022 At the application level, databases can also store other application related meta data.\n\u2022 This facilitates the personalization and customization of the application according to\na user\u2019s profile.\n\u2022 Two of the most important roles in defining metadata\n\u2022 Identify the type of data with a unique tag\n\u2022 Define the affinity of the data (tags enclose all data that is logically related) CONTENTS OF A DATABASE\n\u2022 User Data: The actual data used by the application\n\u2022 Meta data: The structure (schema) of the data, including\ntable names, column names and types, and constraints over\n\u2022 User data\nthe column(s)\n\u2022 Medadata\n\u2022 Application metadata\n\u2022 Index and other\n\u2022 Application meta data: Meta data on user settings or overhead\nfunctions of the application\n\u2022 Index and other overhead data: used for performance\nimprovement and maintenance. Logs, tracks, security, etc. 3 ACRONYMS\n\u2022 ACID\n\u2022 4 essential properties that a DBMS has to implement to effectively interact with a database\n\u2022 SQL \u2013 Structured Query Language\n\u2022 A query is a result of a request to the database for information or for modification.\n\u2022 SQL is the language most relational databases (the most common for of databases) use for\ninteraction with the data.\n\u2022 CRUD \u2013 Create, Read, Update, Delete\n\u2022 Self-explanatory\n\u2022 The 4 major operations performed on the database. ACID\n\u2022 Atomicity \u2013 transactions are either all or none (commit\/rollback)\n\u2022 Consistency \u2013 only valid data is saved\n\u2022 Isolation \u2013 transactions should not affect each other\n\u2022 Durability \u2013 written data will not be lost\n\u2022 Good example : Bank transactions\n\u2022 Most of the challenges related to ACID compliance come from multiple users\/concurrent\nuse of the database RELATIONAL DATABASES - RELATIONS\n\u2022 A relational database describes the relationships among different\nkinds of data\n\u2022 Captures ideas like those defined in the Affinity and Collection rules\n\u2022 Allows software to answer queries about them\n\u2022 Any relational DB can be described in XML\n\u2022 But it is not the case that every XML description defines a relational DB RELATIONS (TABLES)\n\u2022 Tables (formally called \u2018relations\u2019) \u2013 are the building blocks of relational databases.\n\u2022 Tables store data in 2D, where each row reflects one instance of a record, and each column\nreflects one aspect of the attributes for all instances.\n\u2022 Rows may also be called \u2018tuples\u2019.\n\u2022 Columns may also be called \u2018fields\u2019.\n\u2022 For example, a \u2018student\u2019 table may contain (student id, first name, last name, grade, school\nname, home address, \u2026), and each row may represent one student\u2019s information, and\neach column of the table represents one piece of information for all students. And this is\ncalled a \u2018relation\u2019. ENTITIES\n\u2022 Entities are theoretical constructs that help us in conceptualization of relations.\n\u2022 Anything that can de identified by a fixed number of its characteristics (attributes)\n\u2022 Attributes have names and values\n\u2022 Attributes have a data type\n\u2022 A relational database table can be empty (NULL instance)\n\u2022 The values are the data that's stored in the table\n\u2022 An entity could be defined by a relation (table) or be spread across several relations.\n\u2022 Instances are Unordered\n\u2022 Order of the rows and columns does not matter in databases\n\u2022 Freedom to move the data is limited to exchanging entire rows or exchanging entire\ncolumns PROPERTIES OF ENTITIES\n\u2022 Uniqueness\n\u2022 No two rows can be the same\n\u2022 Two rows can have the same value for some attributes, just not all attributes\n\u2022 Atomic Data\n\u2022 Values stored for attributes\n\u2022 Not decomposable into any smaller parts. Separate fields for street, city, state,\npostal code\n\u2022 \"Only atomic data\" rule relaxed for certain types of data. Dates, times, currency PROPERTIES OF ENTITIES\n\u2022 Keys\n\u2022 Any set of attributes for which all attribute values are different is called a\ncandidate key\n\u2022 Pick one and call it the primary key to decide uniqueness\n\u2022 Key must distinguish all potential and actual entities, not just those that happen to\nbe in the table at a given time\n\u2022 If no combination of attributes qualify as a candidate key, assign a unique ID to\neach entity KEYS - PRIMARY KEY AND FOREIGN KEY\n\u2022 Primary key: Unique Identifier made of one or more columns to\nuniquely identify rows in a table.\n\u2022 If the primary key contains more than one column, it can be called \u2018composite\nkey\u2019 as well.\n\u2022 Foreign Key: is the primary key of another table, which is referenced in\nthe current table.\n\u2022 It\u2019s the key to establish the relationship between the two tables, and through\nDBMS, to impose referential integrity. KEYS SURROGATE KEY\n\u2013\n\u2022 Surrogate key is a unique column\n\u2022 Added to a relation to use as the primary key when there is a lack of a natural\ncolumn that serves as the primary key, or when the composite key needs to be\nreplaced for various reasons.\n\u2022 Surrogate key is usually in the form of an auto increment numeric value, and of no\nmeaning to the user, and thus could often be hidden in the table, form. or other entity\nfor internal use.\n\u2022 Surrogate keys are often used in the place of composite keys to add more flexibility\nto the table. DATABASE SCHEMAS\n\u2022 Database schema \u2013 way to define a table\n\u2022 Collection of table definitions that gives the name of the table, lists the attributes and\ntheir data types, and identifies the primary key OPERATIONS ON TABLES\n\u2022 A database is a collection of database tables\n\u2022 Main use of database is to look up information\n\u2022 Users specify what they want to know and the database software finds it\n\u2022 We can perform operations on tables to produce new tables (that are not explicitly\npart of the schema)\n\u2022 The questions we ask of a database are answered with a whole table\n\u2022 Five fundamental operations that can be performed on tables: Select, Project, Union,\nDifference, Product SELECT OPERATION\n\u2022 Takes rows from one table to create a new table\n\u2022 Specify the table from which rows are to be taken, and the test for selection\n\u2022 For SQL Syntax, look at SQL Reference PROJECT OPERATION\n\u2022 Builds a new table from the columns of an existing table\n\u2022 Specify name of exiting table and the columns (field names) to be included in the\nnew table\n\u2022 The new table will have the number of columns given in the operation, and the same\nnumber of rows as the original table, unless\n\u2022 The new table eliminates a key field; if the new table has duplicate rows, the duplicates\nwill be eliminated\n\u2022 SQL does not implement projects. Instead it is handled as a variation of select, where\ncertain columns are selected. OTHER OPERATIONS\n\u2022 Union - Combines two tables (that have the same set of attributes)\n\u2022 Difference - Remove from one table the rows also listed in a second table (remove from\nTable1 any rows also in Table2)\n\u2022 Product \u2013 Gives the cartesian product of the two tables \u2013 one instance of a row in Table2\nadded to each instance of a row in Table1\n\u2022 The five basic operations (select, project,+, -, x ) are all we need to make any relational\ntable\n\u2022 Other operations we can imagine can be done with combinations of the basic 5\n\u2022 One combination is so commonly wanted and useful that we name it and provide it as a\ndirect operation: Join JOINS\n\u2022 Combines two tables (like the Product operation) but doesn't necessarily produce all pairings\n\u2022 If the two tables each have fields with a common data type, the new table combines only the\nrows from the given tables that match on the fields\n\u2022 When match is true for a row from each table it produces a result row that is their\nconcatenation\n\u2022 Lookup operation on tables\n\u2022 For each row in one table, locate a row (or rows) in the other table with the same value in the common\nfield; if found, combine the two; if not, look up the next row.\n\u2022 This match on equality is called a natural join\n\u2022 Possible to join using any relational operator, not just = (equality) to compare fields STRUCTURE OF A DATABASE\n\u2022 We want to arrange the information in a database in a way that users see a relevant-\nto-their-needs view of the data that they will use continually\n\u2022 Physical database (stored on disk)\n\u2022 Logical view of the database (made on the fly and customized for a user)\n\u2022 The point of the two-level system is to separate the management of the data\n(physical database) from the presentation of the data (logical view of the database)\n\u2022 All users work with the same physical database\n\u2022 Different users will work with different views, one for each NORMALIZATION\n\u2022 Database normalization, or simply normalization, is the process of restructuring a\nrelational database in accordance with a series of so- called normal forms in order to\nreduce data redundancy and improve data integrity.\n\u2022 It was first proposed by Edgar F. Codd as an integral part of his relational model.\n\u2022 Normalization entails organizing the columns (attributes)\n\u2022 and tables (relations) of a database to ensure that their dependencies are properly\nenforced by database integrity constraints. It is accomplished by applying some\nformal rules either by a process of synthesis (creating a new database design) or\ndecomposition (improving an existing database design). ADVANTAGES OF NORMALIZATION\n\u2022 No Redundancy\n\u2022 No Inconsistency \u2013 changes can only be made at one place and are consistent\n(because of the key constraints), in DB\n\u2022 Normalization is the process of decomposition, so all business concepts can be\nmodeled with clear logical relationships\n\u2022 The entire database system remains consistent over time as the database grows with\nleast redundancy and much durability.\n\u2022 Strong support to be ACID compliant "}