{"text":"M01_GADD7119_01_SE_C01.QXD 1\/30\/08 12:55 AM Page 1\nIntroduction to Computers\n1\nand Programming\nTOPICS\n1.1 Introduction 1.4 How a Program Works\n1.2 Hardware and Software 1.5 Using Python\n1.3 How Computers Store Data\n1.1 Introduction\nThink about some of the different ways that people use computers. In school, students use com-\nputers for tasks such as writing papers, searching for articles, sending email, and participating in\nonline classes. At work, people use computers to analyze data, make presentations, conduct busi-\nness transactions, communicate with customers and coworkers, control machines in manufac-\nturing facilities, and do many other things. At home, people use computers for tasks such as pay-\ning bills, shopping online, communicating with friends and family, and playing computer games.\nAnd don\u2019t forget that cell phones, iPods\u00ae, BlackBerries\u00ae, car navigation systems, and many\nother devices are computers too. The uses of computers are almost limitless in our everyday lives.\nComputers can do such a wide variety of things because they can be programmed. This means\nthat computers are not designed to do just one job, but to do any job that their programs tell\nthem to do. A programis a set of instructions that a computer follows to perform a task. For\nexample,Figure 1-1shows screens from two commonly used programs, Microsoft Word and\nAdobe Photoshop. Microsoft Word is a word processing program that allows you to create,\nedit, and print documents with your computer. Adobe Photoshop is an image editing program\nthat allows you to work with graphic images, such as photos taken with your digital camera.\nPrograms are commonly referred to as software. Software is essential to a computer because\nit controls everything the computer does. All of the software that we use to make our com-\nputers useful is created by individuals working as programmers or software developers. A\nprogrammer, or software developer, is a person with the training and skills necessary to\ndesign, create, and test computer programs. Computer programming is an exciting and\nrewarding career. Today, you will find programmers\u2019 work used in business, medicine, gov-\nernment, law enforcement, agriculture, academics, entertainment, and many other fields.\n1\nRETPAHC M01_GADD7119_01_SE_C01.QXD 1\/23\/08 5:19 PM Page 2\n2 Chapter 1 Introduction to Computers and Programming\nFigure 1-1 A word processing program and an image editing program\nThis book introduces you to the fundamental concepts of computer programming using the\nPython language. Before we begin exploring those concepts, you need to understand a few\nbasic things about computers and how they work. This chapter will build a solid founda-\ntion of knowledge that you will continually rely on as you study computer science. First,\nwe will discuss the physical components that computers are commonly made of. Next, we\nwill look at how computers store data and execute programs. Finally, we will get a quick\nintroduction to the software that you will use to write Python programs.\n1.2 Hardware and Software\nCONCEPT: The physical devices that a computer is made of are referred to as the\ncomputer\u2019s hardware. The programs that run on a computer are referred\nto as software.\nHardware\nThe term hardwarerefers to all of the physical devices, or components,that a computer is made\nof. A computer is not one single device, but a system of devices that all work together. Like the\ndifferent instruments in a symphony orchestra, each device in a computer plays its own part.\nIf you have ever shopped for a computer, you\u2019ve probably seen sales literature listing com-\nponents such as microprocessors, memory, disk drives, video displays, graphics cards, and\nso on. Unless you already know a lot about computers, or at least have a friend that does,\nunderstanding what these different components do might be challenging. As shown in\nFigure 1-2, a typical computer system consists of the following major components:\n\u2022 The central processing unit (CPU)\n\u2022 Main memory\n\u2022 Secondary storage devices\n\u2022 Input devices\n\u2022 Output devices M01_GADD7119_01_SE_C01.QXD 1\/24\/08 7:48 AM Page 3\n1.2 Hardware and Software 3\nFigure 1-2 Typical components of a computer system\nCentral Processing\nUnit\nOutput\nDevices\nInput\nDevices\nMain Memory\n(RAM)\nSecondary\nStorage Devices\nLet\u2019s take a closer look at each of these components.\nThe CPU\nWhen a computer is performing the tasks that a program tells it to do, we say that the com-\nputer is runningor executingthe program. The central processing unit,or CPU, is the part\nof a computer that actually runs programs. The CPU is the most important component in\na computer because without it, the computer could not run software.\nIn the earliest computers, CPUs were huge devices made of electrical and mechanical\ncomponents such as vacuum tubes and switches. Figure 1-3 shows such a device.\nThe two women in the photo are working with the historic ENIAC computer. The\nENIAC, which is considered by many to be the world\u2019s first programmable electronic\ncomputer, was built in 1945 to calculate artillery ballistic tables for the U.S. Army. This\nmachine, which was primarily one big CPU, was 8 feet tall, 100 feet long, and weighed\n30 tons.\nToday, CPUs are small chips known as microprocessors.Figure 1-4shows a photo of a lab\ntechnician holding a modern microprocessor. In addition to being much smaller than the\nold electromechanical CPUs in early computers, microprocessors are also much more\npowerful. M01_GADD7119_01_SE_C01.QXD 1\/23\/08 5:19 PM Page 4\n4 Chapter 1 Introduction to Computers and Programming\nFigure 1-3 The ENIAC computer (courtesy of U.S. Army Historic Computer Images)\nFigure 1-4 A lab technician holds a modern microprocessor (photo courtesy of Intel\nCorporation)\nMain Memory\nYou can think of main memory as the computer\u2019s work area. This is where the computer\nstores a program while the program is running, as well as the data that the program is\nworking with. For example, suppose you are using a word processing program to write an M01_GADD7119_01_SE_C01.QXD 1\/23\/08 5:19 PM Page 5\n1.2 Hardware and Software 5\nessay for one of your classes. While you do this, both the word processing program and the\nessay are stored in main memory.\nMain memory is commonly known as random-access memory, or RAM. It is called this\nbecause the CPU is able to quickly access data stored at any random location in RAM.\nRAM is usually a volatile type of memory that is used only for temporary storage while\na program is running. When the computer is turned off, the contents of RAM are\nerased. Inside your computer, RAM is stored in chips, similar to the ones shown in\nFigure 1-5.\nFigure 1-5 Memory chips (photo courtesy of IBM Corporation)\nSecondary Storage Devices\nSecondary storage is a type of memory that can hold data for long periods of time, even\nwhen there is no power to the computer. Programs are normally stored in secondary\nmemory and loaded into main memory as needed. Important data, such as word pro-\ncessing documents, payroll data, and inventory records, is saved to secondary storage\nas well.\nThe most common type of secondary storage device is the disk drive. A disk drive stores\ndata by magnetically encoding it onto a circular disk. Most computers have a disk drive\nmounted inside their case. External disk drives, which connect to one of the computer\u2019s\ncommunication ports, are also available. External disk drives can be used to create backup\ncopies of important data or to move data to another computer.\nIn addition to external disk drives, many types of devices have been created for copying\ndata, and for moving it to other computers. For many years floppy disk drives were popu-\nlar. A floppy disk driverecords data onto a small floppy disk, which can be removed from\nthe drive. Floppy disks have many disadvantages, however. They hold only a small amount\nof data, are slow to access data, and can be unreliable. The use of floppy disk drives has\ndeclined dramatically in recent years, in favor of superior devices such as USB drives. USB\ndrives are small devices that plug into the computer\u2019s USB (universal serial bus) port, and M01_GADD7119_01_SE_C01.QXD 1\/23\/08 5:19 PM Page 6\n6 Chapter 1 Introduction to Computers and Programming\nappear to the system as a disk drive. These drives do not actually contain a disk, however.\nThey store data in a special type of memory known as flash memory. USB drives, which are\nalso known as memory sticks and flash drives, are inexpensive, reliable, and small enough\nto be carried in your pocket.\nOptical devices such as the CD(compact disc) and the DVD(digital versatile disc) are also\npopular for data storage. Data is not recorded magnetically on an optical disc, but is encoded\nas a series of pits on the disc surface. CD and DVD drives use a laser to detect the pits and\nthus read the encoded data. Optical discs hold large amounts of data, and because recordable\nCD and DVD drives are now commonplace, they are good mediums for creating backup\ncopies of data.\nInput Devices\nInput is any data the computer collects from people and from other devices. The compo-\nnent that collects the data and sends it to the computer is called an input device. Common\ninput devices are the keyboard, mouse, scanner, microphone, and digital camera. Disk\ndrives and optical drives can also be considered input devices because programs and data\nare retrieved from them and loaded into the computer\u2019s memory.\nOutput Devices\nOutput is any data the computer produces for people or for other devices. It might be a\nsales report, a list of names, or a graphic image. The data is sent to an output device,which\nformats and presents it. Common output devices are video displays and printers. Disk\ndrives and CD recorders can also be considered output devices because the system sends\ndata to them in order to be saved.\nSoftware\nIf a computer is to function, software is not optional. Everything that a computer does,\nfrom the time you turn the power switch on until you shut the system down, is under the\ncontrol of software. There are two general categories of software: system software and\napplication software. Most computer programs clearly fit into one of these two categories.\nLet\u2019s take a closer look at each.\nSystem Software\nThe programs that control and manage the basic operations of a computer are generally\nreferred to as system software. System software typically includes the following types of\nprograms:\nOperating Systems An operating system is the most fundamental set of programs on a\ncomputer. The operating system controls the internal operations of the computer\u2019s\nhardware, manages all of the devices connected to the computer, allows data to be saved\nto and retrieved from storage devices, and allows other programs to run on the computer.\nFigure 1-6shows screens from three popular operating systems: Windows Vista, Mac OS\nX, and Linux. M01_GADD7119_01_SE_C01.QXD 1\/23\/08 5:19 PM Page 7\n1.2 Hardware and Software 7\nFigure 1-6 Screens from the Windows Vista, Mac OS X, and Fedora Linux operating systems\nWindows Vista Mac OS X\nFedora Linux\nUtility Programs A utility program performs a specialized task that enhances the com-\nputer\u2019s operation or safeguards data. Examples of utility programs are virus scanners,\nfile compression programs, and data backup programs.\nSoftware Development Tools Software development tools are the programs that pro-\ngrammers use to create, modify, and test software. Assemblers, compilers, and inter-\npreters are examples of programs that fall into this category.\nApplication Software\nPrograms that make a computer useful for everyday tasks are known as application soft-\nware. These are the programs that people normally spend most of their time running on\ntheir computers. Figure 1-1, at the beginning of this chapter, shows screens from two\ncommonly used applications: Microsoft Word, a word processing program, and Adobe\nPhotoshop, an image editing program. Some other examples of application software are\nspreadsheet programs, email programs, web browsers, and game programs.\nCheckpoint\n1.1 What is a program?\n1.2 What is hardware?\n1.3 List the five major components of a computer system.\n1.4 What part of the computer actually runs programs? M01_GADD7119_01_SE_C01.QXD 1\/23\/08 5:19 PM Page 8\n8 Chapter 1 Introduction to Computers and Programming\n1.5 What part of the computer serves as a work area to store a program and its data\nwhile the program is running?\n1.6 What part of the computer holds data for long periods of time, even when there is\nno power to the computer?\n1.7 What part of the computer collects data from people and from other devices?\n1.8 What part of the computer formats and presents data for people or other\ndevices?\n1.9 What fundamental set of programs control the internal operations of the\ncomputer\u2019s hardware?\n1.10 What do you call a program that performs a specialized task, such as a virus\nscanner, a file compression program, or a data backup program?\n1.11 Word processing programs, spreadsheet programs, email programs, web browsers,\nand game programs belong to what category of software?\n1.3 How Computers Store Data\nCONCEPT: All data that is stored in a computer is converted to sequences of 0s\nand 1s.\nA computer\u2019s memory is divided into tiny storage locations known as bytes. One byte is\nonly enough memory to store a letter of the alphabet or a small number. In order to do any-\nthing meaningful, a computer has to have lots of bytes. Most computers today have mil-\nlions, or even billions, of bytes of memory.\nEach byte is divided into eight smaller storage locations known as bits. The term bitstands\nfor binary digit. Computer scientists usually think of bits as tiny switches that can be either\non or off. Bits aren\u2019t actual \u201cswitches,\u201d however, at least not in the conventional sense. In\nmost computer systems, bits are tiny electrical components that can hold either a positive\nor a negative charge. Computer scientists think of a positive charge as a switch in the on\nposition, and a negative charge as a switch in the off position. Figure 1-7 shows the way\nthat a computer scientist might think of a byte of memory: as a collection of switches that\nare each flipped to either the on or off position.\nFigure 1-7 Think of a byte as eight switches\nON ON ON ON\nOFF OFF OFF OFF M01_GADD7119_01_SE_C01.QXD 1\/23\/08 5:19 PM Page 9\n1.3 How Computers Store Data 9\nWhen a piece of data is stored in a byte, the computer sets the eight bits to an on\/off pat-\ntern that represents the data. For example, the pattern shown on the left in Figure 1-8\nshows how the number 77 would be stored in a byte, and the pattern on the right shows\nhow the letter A would be stored in a byte. We explain below how these patterns are\ndetermined.\nFigure 1-8 Bit patterns for the number 77 and the letter A\nON ON ON ON ON ON\nOFF OFF OFF OFF OFF OFF OFF OFF OFF OFF\nThe number 77 stored in a byte. The letter A stored in a byte.\nStoring Numbers\nA bit can be used in a very limited way to represent numbers. Depending on whether the\nbit is turned on or off, it can represent one of two different values. In computer systems, a\nbit that is turned off represents the number 0 and a bit that is turned on represents the num-\nber 1. This corresponds perfectly to the binary numbering system. In the binary numbering\nsystem (or binary, as it is usually called) all numeric values are written as sequences of 0s\nand 1s. Here is an example of a number that is written in binary:\n10011101\nThe position of each digit in a binary number has a value assigned to it. Starting with the\nrightmost digit and moving left, the position values are 20, 21, 22, 23, and so forth, as shown\nin Figure 1-9. Figure 1-10 shows the same diagram with the position values calculated.\nStarting with the rightmost digit and moving left, the position values are 1, 2, 4, 8, and so\nforth.\nFigure 1-9 The values of binary digits as powers of 2\n1 0 0 1 1 1 0 1\n20\n21\n22\n23\n24\n25\n26\n27 M01_GADD7119_01_SE_C01.QXD 1\/23\/08 5:19 PM Page 10\n10 Chapter 1 Introduction to Computers and Programming\nFigure 1-10 The values of binary digits\n1 0 0 1 1 1 0 1\n1\n2\n4\n8\n16\n32\n64\n128\nTo determine the value of a binary number you simply add up the position values of all the\n1s. For example, in the binary number 10011101, the position values of the 1s are 1, 4, 8,\n16, and 128. This is shown in Figure 1-11. The sum of all of these position values is 157.\nSo, the value of the binary number 10011101 is 157.\nFigure 1-11 Determining the value of 10011101\n1 0 0 1 1 1 0 1\n1\n4\n8\n16\n128\n1 + 4 + 8 + 16 + 128 = 157\nFigure 1-12shows how you can picture the number 157 stored in a byte of memory. Each\n1 is represented by a bit in the on position, and each 0 is represented by a bit in the off\nposition.\nFigure 1-12 The bit pattern for 157\n11 1 1 1 1\n0 0 0\nPosition\n128 64 32 16 8 4 2 1\nvalues\n128 + 16 + 8 + 4 + 1 = 157 M01_GADD7119_01_SE_C01.QXD 1\/23\/08 5:19 PM Page 11\n1.3 How Computers Store Data 11\nWhen all of the bits in a byte are set to 0 (turned off), then the value of the byte is 0. When\nall of the bits in a byte are set to 1 (turned on), then the byte holds the largest value that\ncan be stored in it. The largest value that can be stored in a byte is 1 (cid:2)2 (cid:2)4 (cid:2)8 (cid:2)16 (cid:2)\n32 (cid:2) 64 (cid:2) 128 (cid:3) 255. This limit exists because there are only eight bits in a byte.\nWhat if you need to store a number larger than 255? The answer is simple: use more than\none byte. For example, suppose we put two bytes together. That gives us 16 bits. The posi-\ntion values of those 16 bits would be 20, 21, 22, 23, and so forth, up through 215. As shown\nin Figure 1-13, the maximum value that can be stored in two bytes is 65,535. If you need\nto store a number larger than this, then more bytes are necessary.\nFigure 1-13 Two bytes used for a large number\n1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1\nPosition 32768 16384 8192 4096 2048 1024 512 256 128 64 32 16 8 4 2 1\nvalues\n32768 + 16384 + 8192 + 4096 + 2048 + 1024 + 512 + 256 + 128 + 64 + 32 + 16 + 8 + 4 + 2 + 1 = 65535\nTIP: In case you\u2019re feeling overwhelmed by all this, relax! You will not have to actu-\nally convert numbers to binary while programming. Knowing that this process is tak-\ning place inside the computer will help you as you learn, and in the long term this\nknowledge will make you a better programmer.\nStoring Characters\nAny piece of data that is stored in a computer\u2019s memory must be stored as a binary num-\nber. That includes characters, such as letters and punctuation marks. When a character is\nstored in memory, it is first converted to a numeric code. The numeric code is then stored\nin memory as a binary number.\nOver the years, different coding schemes have been developed to represent characters in\ncomputer memory. Historically, the most important of these coding schemes is ASCII,\nwhich stands for the American Standard Code for Information Interchange. ASCII is a set\nof 128 numeric codes that represent the English letters, various punctuation marks, and\nother characters. For example, the ASCII code for the uppercase letter A is 65. When you\ntype an uppercase A on your computer keyboard, the number 65 is stored in memory (as a\nbinary number, of course). This is shown in Figure 1-14.\nFigure 1-14 The letter A is stored in memory as the number 65\n1 1\nA 65\n0 0 0 0 0 0 M01_GADD7119_01_SE_C01.QXD 1\/24\/08 7:48 AM Page 12\n12 Chapter 1 Introduction to Computers and Programming\nTIP: The acronym ASCII is pronounced \u201caskee.\u201d\nIn case you are curious, the ASCII code for uppercase B is 66, for uppercase C is 67,\nandso forth. Appendix C shows all of the ASCII codes and the characters they represent.\nThe ASCII character set was developed in the early 1960s, and was eventually adopted by\nmost all computer manufacturers. ASCII is limited however, because it defines codes for\nonly 128 characters. To remedy this, the Unicode character set was developed in the early\n1990s. Unicodeis an extensive encoding scheme that is compatible with ASCII, but can also\nrepresent characters for many of the languages in the world. Today, Unicode is quickly\nbecoming the standard character set used in the computer industry.\nAdvanced Number Storage\nEarlier you read about numbers and how they are stored in memory. While reading that\nsection, perhaps it occurred to you that the binary numbering system can be used to repre-\nsent only integer numbers, beginning with 0. Negative numbers and real numbers (such as\n3.14159) cannot be represented using the simple binary numbering technique we discussed.\nComputers are able to store negative numbers and real numbers in memory, but to do so\nthey use encoding schemes along with the binary numbering system. Negative numbers are\nencoded using a technique known as two\u2019s complement, and real numbers are encoded in\nfloating-point notation. You don\u2019t need to know how these encoding schemes work, only\nthat they are used to convert negative numbers and real numbers to binary format.\nOther Types of Data\nComputers are often referred to as digital devices. The term digitalcan be used to describe\nanything that uses binary numbers. Digital datais data that is stored in binary, and a digital\ndevice is any device that works with binary data. In this section we have discussed how\nnumbers and characters are stored in binary, but computers also work with many other\ntypes of digital data.\nFor example, consider the pictures that you take with your digital camera. These images\nare composed of tiny dots of color known as pixels. (The term pixel stands for picture\nelement.) As shown inFigure 1-15, each pixel in an image is converted to a numeric code\nthat represents the pixel\u2019s color. The numeric code is stored in memory as a binary number.\nFigure 1-15 A digital image is stored in binary format\n1 0 0\n101011\n1 0\n1\n0\n0\n010101101 M01_GADD7119_01_SE_C01.QXD 1\/23\/08 5:19 PM Page 13\n1.4 How a Program Works 13\nThe music that you play on your CD player, iPod or MP3 player is also digital. A digital\nsong is broken into small pieces known as samples. Each sample is converted to a binary\nnumber, which can be stored in memory. The more samples that a song is divided into,\nthe more it sounds like the original music when it is played back. A CD quality song is\ndivided into more than 44,000 samples per second!\nCheckpoint\n1.12 What amount of memory is enough to store a letter of the alphabet or a small number?\n1.13 What do you call a tiny \u201cswitch\u201d that can be set to either on or off?\n1.14 In what numbering system are all numeric values written as sequences of 0s and 1s?\n1.15 What is the purpose of ASCII?\n1.16 What encoding scheme is extensive enough to represent the characters of many of\nthe languages in the world?\n1.17 What do the terms \u201cdigital data\u201d and \u201cdigital device\u201d mean?\n1.4 How a Program Works\nCONCEPT: A computer\u2019s CPU can only understand instructions that are written in\nmachine language. Because people find it very difficult to write entire\nprograms in machine language, other programming languages have been\ninvented.\nEarlier, we stated that the CPU is the most important component in a computer because it\nis the part of the computer that runs programs. Sometimes the CPU is called the \u201ccomputer\u2019s\nbrain,\u201d and is described as being \u201csmart.\u201d Although these are common metaphors, you\nshould understand that the CPU is not a brain, and it is not smart. The CPU is an electronic\ndevice that is designed to do specific things. In particular, the CPU is designed to perform\noperations such as the following:\n\u2022 Reading a piece of data from main memory\n\u2022 Adding two numbers\n\u2022 Subtracting one number from another number\n\u2022 Multiplying two numbers\n\u2022 Dividing one number by another number\n\u2022 Moving a piece of data from one memory location to another\n\u2022 Determining whether one value is equal to another value\nAs you can see from this list, the CPU performs simple operations on pieces of data. The\nCPU does nothing on its own, however. It has to be told what to do, and that\u2019s the purpose\nof a program. A program is nothing more than a list of instructions that cause the CPU to\nperform operations.\nEach instruction in a program is a command that tells the CPU to perform a specific oper-\nation. Here\u2019s an example of an instruction that might appear in a program:\n10110000 M01_GADD7119_01_SE_C01.QXD 1\/23\/08 5:19 PM Page 14\n14 Chapter 1 Introduction to Computers and Programming\nTo you and me, this is only a series of 0s and 1s. To a CPU, however, this is an instruction\nto perform an operation.1It is written in 0s and 1s because CPUs only understand instruc-\ntions that are written in machine language,and machine language instructions always have\nan underlying binary structure.\nA machine language instruction exists for each operation that a CPU is capable of perform-\ning. For example, there is an instruction for adding numbers, there is an instruction for sub-\ntracting one number from another, and so forth. The entire set of instructions that a CPU\ncan execute is known as the CPU\u2019s instruction set.\nNOTE: There are several microprocessor companies today that manufacture CPUs.\nSome of the more well-known microprocessor companies are Intel, AMD, and\nMotorola. If you look carefully at your computer, you might find a tag showing a logo\nfor its microprocessor.\nEach brand of microprocessor has its own unique instruction set, which is typically\nunderstood only by microprocessors of the same brand. For example, Intel micro-\nprocessors understand the same instructions, but they do not understand instructions\nfor Motorola microprocessors.\nThe machine language instruction that was previously shown is an example of only one\ninstruction. It takes a lot more than one instruction, however, for the computer to do\nanything meaningful. Because the operations that a CPU knows how to perform are so\nbasic in nature, a meaningful task can be accomplished only if the CPU performs many\noperations. For example, if you want your computer to calculate the amount of inter-\nest that you will earn from your savings account this year, the CPU will have to\nperform a large number of instructions, carried out in the proper sequence. It is not\nunusual for a program to contain thousands or even millions of machine language\ninstructions.\nPrograms are usually stored on a secondary storage device such as a disk drive. When you\ninstall a program on your computer, the program is typically copied to your computer\u2019s disk\ndrive from a CD-ROM, or perhaps downloaded from a website.\nAlthough a program can be stored on a secondary storage device such as a disk drive,\nit has to be copied into main memory, or RAM, each time the CPU executes it. For\nexample, suppose you have a word processing program on your computer\u2019s disk. To\nexecute the program you use the mouse to double-click the program\u2019s icon. This causes\nthe program to be copied from the disk into main memory. Then, the computer\u2019s CPU\nexecutes the copy of the program that is in main memory. This process is illustrated in\nFigure 1-16.\n1The example shown is an actual instruction for an Intel microprocessor. It tells the microprocessor to move a\nvalue into the CPU. M01_GADD7119_01_SE_C01.QXD 1\/24\/08 7:48 AM Page 15\n1.4 How a Program Works 15\nFigure 1-16 A program is copied into main memory and then executed\nThe program is copied\nThe CPU executes\nfrom secondary storage\nthe program in\nto main memory.\nmain memory.\nMain memory\n(RAM)\nDisk drive CPU\nWhen a CPU executes the instructions in a program, it is engaged in a process that is known\nas the fetch-decode-execute cycle. This cycle, which consists of three steps, is repeated for\neach instruction in the program. The steps are:\n1. Fetch A program is a long sequence of machine language instructions. The first step of the\ncycle is to fetch, or read, the next instruction from memory into the CPU.\n2. Decode A machine language instruction is a binary number that represents a com-\nmand that tells the CPU to perform an operation. In this step the CPU decodes the\ninstruction that was just fetched from memory, to determine which operation it\nshould perform.\n3. Execute The last step in the cycle is to execute, or perform, the operation.\nFigure 1-17 illustrates these steps.\nFigure 1-17 The fetch-decode-execute cycle\n10100001\nFetch the next instruction\n1\nin the program.\n10100001\n10111000 Decode the instruction\n10011110 2 to determine which\noperation to perform.\n00011010\n11011100\nand so forth... CPU\nExecute the instruction\n3\n(perform the operation).\nMain memory\n(RAM)\nFrom Machine Language to Assembly Language\nComputers can only execute programs that are written in machine language. As previously\nmentioned, a program can have thousands or even millions of binary instructions, and writing\nsuch a program would be very tedious and time consuming. Programming in machine language\nwould also be very difficult because putting a 0 or a 1 in the wrong place will cause an error. M01_GADD7119_01_SE_C01.QXD 1\/23\/08 5:19 PM Page 16\n16 Chapter 1 Introduction to Computers and Programming\nAlthough a computer\u2019s CPU only understands machine language, it is impractical for people\nto write programs in machine language. For this reason, assembly languagewas created in the\nearly days of computing2as an alternative to machine language. Instead of using binary num-\nbers for instructions, assembly language uses short words that are known as mnemonics. For\nexample, in assembly language, the mnemonic addtypically means to add numbers, multyp-\nically means to multiply numbers, and movtypically means to move a value to a location in\nmemory. When a programmer uses assembly language to write a program, he or she can write\nshort mnemonics instead of binary numbers.\nNOTE: There are many different versions of assembly language. It was mentioned\nearlier that each brand of CPU has its own machine language instruction set. Each\nbrand of CPU typically has its own assembly language as well.\nAssembly language programs cannot be executed by the CPU, however. The CPU only\nunderstands machine language, so a special program known as an assembler is used to\ntranslate an assembly language program to a machine language program. This process is\nshown inFigure 1-18. The machine language program that is created by the assembler can\nthen be executed by the CPU.\nFigure 1-18 An assembler translates an assembly language program to a machine\nlanguage program\nAssembly language Machine language\nprogram program\nmov eax, Z 10100001\nadd eax, 2\nmov Y, eax 10111000\nAssembler\nand so forth... 10011110\nand so forth...\nHigh-Level Languages\nAlthough assembly language makes it unnecessary to write binary machine language\ninstructions, it is not without difficulties. Assembly language is primarily a direct substitute\nfor machine language, and like machine language, it requires that you know a lot about the\nCPU. Assembly language also requires that you write a large number of instructions for\neven the simplest program. Because assembly language is so close in nature to machine lan-\nguage, it is referred to as a low-level language.\nIn the 1950s, a new generation of programming languages known as high-level languages\nbegan to appear. A high-level language allows you to create powerful and complex programs\nwithout knowing how the CPU works, and without writing large numbers of low-level\ninstructions. In addition, most high-level languages use words that are easy to understand.\nFor example, if a programmer were using COBOL (which was one of the early high-level\n2The first assembly language was most likely that developed in the 1940s at Cambridge University for use with\na historic computer known as the EDSAC. M01_GADD7119_01_SE_C01.QXD 1\/23\/08 5:19 PM Page 17\n1.4 How a Program Works 17\nlanguages created in the 1950s), he or she would write the following instruction to display the\nmessage Hello worldon the computer screen:\nDISPLAY \"Hello world\"\nPython is a modern, high-level programming language that we will use in this book. In\nPython you would display the message Hello world with the following instruction:\nprint 'Hello world'\nDoing the same thing in assembly language would require several instructions, and an intimate\nknowledge of how the CPU interacts with the computer\u2019s output device. As you can see from this\nexample, high-level languages allow programmers to concentrate on the tasks they want to per-\nform with their programs rather than the details of how the CPU will execute those programs.\nSince the 1950s, thousands of high-level languages have been created. Table 1-1 lists several\nof the more well-known languages.\nTable 1-1 Programming languages\nLanguage Description\nAda Ada was created in the 1970s, primarily for applications used by the U.S.\nDepartment of Defense. The language is named in honor of Countess Ada\nLovelace, an influential and historic figure in the field of computing.\nBASIC Beginners All-purpose Symbolic Instruction Code is a general-purpose language\nthat was originally designed in the early 1960s to be simple enough for begin-\nners to learn. Today, there are many different versions of BASIC.\nFORTRAN FORmula TRANslator was the first high-level programming language. It was\ndesigned in the 1950s for performing complex mathematical calculations.\nCOBOL Common Business-Oriented Language was created in the 1950s, and was\ndesigned for business applications.\nPascal Pascal was created in 1970, and was originally designed for teaching program-\nming. The language was named in honor of the mathematician, physicist, and\nphilosopher Blaise Pascal.\nC and C++ C and C++ (pronounced \u201cc plus plus\u201d) are powerful, general-purpose lan-\nguages developed at Bell Laboratories. The C language was created in 1972\nand the C++ language was created in 1983.\nC# Pronounced \u201cc sharp.\u201d This language was created by Microsoft around the\nyear 2000 for developing applications based on the Microsoft .NET platform.\nJava Java was created by Sun Microsystems in the early 1990s. It can be used to develop\nprograms that run on a single computer or over the Internet from a web server.\nJavaScript JavaScript, created in the 1990s, can be used in web pages. Despite its name,\nJavaScript is not related to Java.\nPython Python, the language we use in this book, is a general-purpose language created\nin the early 1990s. It has become popular in business and academic applications.\nRuby Ruby is a general-purpose language that was created in the 1990s. It is increas-\ningly becoming a popular language for programs that run on web servers.\nVisual Basic Visual Basic (commonly known as VB) is a Microsoft programming language and\nsoftware development environment that allows programmers to create Windows-\nbased applications quickly. VB was originally created in the early 1990s. M01_GADD7119_01_SE_C01.QXD 1\/23\/08 5:19 PM Page 18\n18 Chapter 1 Introduction to Computers and Programming\nKey Words, Operators, and Syntax: an Overview\nEach high-level language has its own set of predefined words that the programmer must\nuse to write a program. The words that make up a high-level programming language are\nknown as key words or reserved words. Each key word has a specific meaning, and can-\nnot be used for any other purpose. You previously saw an example of a Python statement\nthat uses the key word printto print a message on the screen. Table 1-2shows all of the\nPython key words.\nTable 1-2 The Python key words\nand del from not while\nas elif global or with\nassert else if pass yiel\nbreak except import print\nclass exec in raise\ncontinue finally is return\ndef for lambda try\nIn addition to key words, programming languages have operators that perform various\noperations on data. For example, all programming languages have math operators that per-\nform arithmetic. In Python, as well as most other languages, the (cid:2)sign is an operator that\nadds two numbers. The following adds 12 and 75:\n12 + 75\nThere are numerous other operators in the Python language, many of which you will learn\nabout as you progress through this text.\nIn addition to key words and operators, each language also has its own syntax, which is a\nset of rules that must be strictly followed when writing a program. The syntax rules dictate\nhow key words, operators, and various punctuation characters must be used in a program.\nWhen you are learning a programming language, you must learn the syntax rules for that\nparticular language.\nThe individual instructions that you use to write a program in a high-level programming\nlanguage are called statements. A programming statement can consist of key words, oper-\nators, punctuation, and other allowable programming elements, arranged in the proper\nsequence to perform an operation.\nCompilers and Interpreters\nBecause the CPU understands only machine language instructions, programs that are writ-\nten in a high-level language must be translated into machine language. Depending on the\nlanguage that a program has been written in, the programmer will use either a compiler or\nan interpreter to make the translation. M01_GADD7119_01_SE_C01.QXD 1\/24\/08 7:48 AM Page 19\n1.4 How a Program Works 19\nA compiler is a program that translates a high-level language program into a separate\nmachine language program. The machine language program can then be executed any time\nit is needed. This is shown inFigure 1-19. As shown in the figure, compiling and executing\nare two different processes.\nFigure 1-19 Compiling a high-level program and executing it\nHigh-level language Machine language\nprogram program\nThe compiler is used print \"Hello 10100001\n1 to translate the high-level Earthling\" 10111000\nCompiler\nlanguage program to a 10011110\nmachine language program. and so forth... and so forth...\nMachine language\nCPU\nprogram\nThe machine language 10100001\n2 program can be executed 10111000\nat any time, without using\n10011110\nthe compiler. and so forth...\nThe Python language uses an interpreter, which is a program that both translates and\nexecutes the instructions in a high-level language program. As the interpreter reads each\nindividual instruction in the program, it converts it to machine language instructions\nand then immediately executes them. This process repeats for every instruction in\nthe program. This process is illustrated in Figure 1-20. Because interpreters combine\ntranslation and execution, they typically do not create separate machine language\nprograms.\nFigure 1-20 Executing a high-level program with an interpreter\nHigh-level language\nCPU\nprogram\nMachine language\ninstruction\nprint \"Hello\nEarthling\" Interpreter 10100001\nand so forth...\nThe interpreter translates each high-level instruction to\nits equivalent machine language instructions and\nimmediately executes them.\nThis process is repeated for each high-level instruction. M01_GADD7119_01_SE_C01.QXD 1\/23\/08 5:19 PM Page 20\n20 Chapter 1 Introduction to Computers and Programming\nThe statements that a programmer writes in a high-level language are called source code,\nor simply code. Typically, the programmer types a program\u2019s code into a text editor and\nthen saves the code in a file on the computer\u2019s disk. Next, the programmer uses a compiler\nto translate the code into a machine language program, or an interpreter to translate and\nexecute the code. If the code contains a syntax error, however, it cannot be translated. A\nsyntax error is a mistake such as a misspelled key word, a missing punctuation character,\nor the incorrect use of an operator. When this happens the compiler or interpreter displays\nan error message indicating that the program contains a syntax error. The programmer cor-\nrects the error and then attempts once again to translate the program.\nNOTE: Human languages also have syntax rules. Do you remember when you took\nyour first English class, and you learned all those rules about commas, apostrophes,\ncapitalization, and so forth? You were learning the syntax of the English language.\nAlthough people commonly violate the syntax rules of their native language when\nspeaking and writing, other people usually understand what they mean. Unfortunately,\ncompilers and interpreters do not have this ability. If even a single syntax error appears\nin a program, the program cannot be compiled or executed. When an interpreter\nencounters a syntax error, it stops executing the program.\nCheckpoint\n1.18 A CPU understands instructions that are written only in what language?\n1.19 A program has to be copied into what type of memory each time the CPU executes it?\n1.20 When a CPU executes the instructions in a program, it is engaged in what process?\n1.21 What is assembly language?\n1.22 What type of programming language allows you to create powerful and complex\nprograms without knowing how the CPU works?\n1.23 Each language has a set of rules that must be strictly followed when writing a\nprogram. What is this set of rules called?\n1.24 What do you call a program that translates a high-level language program into a\nseparate machine language program?\n1.25 What do you call a program that both translates and executes the instructions in a\nhigh-level language program?\n1.26 What type of mistake is usually caused by a misspelled key word, a missing\npunctuation character, or the incorrect use of an operator?\n1.5 Using Python\nCONCEPT: The Python interpreter can run Python programs that are saved in files,\nor interactively execute Python statements that are typed at the keyboard.\nPython comes with a program named IDLE that simplifies the process of\nwriting, executing, and testing programs. M01_GADD7119_01_SE_C01.QXD 1\/23\/08 5:19 PM Page 21\n1.5 Using Python 21\nInstalling Python\nBefore you can try any of the programs shown in this book, or write any programs of your\nown, you need to make sure that Python is installed on your computer and properly con-\nfigured. If you are working in a computer lab, this has probably been done already. If you\nare using your own computer, you can follow the instructions in Appendix A to install\nPython from the accompanying CD.\nThe Python Interpreter\nYou learned earlier that Python is an interpreted language. When you install the Python lan-\nguage on your computer, one of the items that is installed is the Python interpreter. The\nPython interpreteris a program that can read Python programming statements and execute\nthem. (Sometimes we will refer to the Python interpreter simply as the interpreter.)\nYou can use the interpreter in two modes: interactive mode and script mode. In interactive\nmode, the interpreter waits for you to type Python statements on the keyboard. Once you\ntype a statement, the interpreter executes it and then waits for you to type another state-\nment. In script mode,the interpreter reads the contents of a file that contains Python state-\nments. Such a file is known as a Python program or a Python script. The interpreter exe-\ncutes each statement in the Python program as it reads it.\nInteractive Mode\nOnce Python has been installed and set up on your system, you start the interpreter in interac-\ntive mode by going to the operating system\u2019s command line and typing the following command:\npython\nIf you are using Windows, you can alternatively click the Start button, then All\nPrograms. You should see a program group named something like Python 2.5. (The\n\u201c2.5\u201d is the version of Python that is installed. At the time this is being written, Python\n2.5 is the latest version.) Inside this program group you should see an item named\nPython (command line). Clicking this menu item will start the Python interpreter in\ninteractive mode.\nWhen the Python interpreter starts in interactive mode, you will see something like the fol-\nlowing displayed in a console window:\nPython 2.5.1 (r251:54863, Apr 18 2007, 08:51:08) [MSC v.1310 32 bit\n(Intel)] on win32\nType \"help\", \"copyright\", \"credits\" or \"license\" for more information.\n>>>\nThe >>> that you see is a prompt that indicates the interpreter is waiting for you to type a\nPython statement. Let\u2019s try it out. One of the simplest statements that you can write in Python\nis a printstatement, which causes a message to be displayed on the screen. For example, the\nfollowing statement causes the message Python programming is fun! to be displayed:\nprint 'Python programming is fun!'\nNotice that after the word print, we have written Python programming is fun!\ninside a set of single-quote marks. The quote marks are necessary, but they will not be M01_GADD7119_01_SE_C01.QXD 1\/23\/08 5:19 PM Page 22\n22 Chapter 1 Introduction to Computers and Programming\ndisplayed. They simply mark the beginning and the end of the text that we wish to display.\nHere is an example of how you would type this print statement at the interpreter\u2019s\nprompt:\n>>> print 'Python programming is fun!'\nAfter typing the statement you press the Enter key and the Python interpreter executes the\nstatement, as shown here:\n>>> print 'Python programming is fun!' [ENTER]\nPython programming is fun!\n>>>\nAfter the message is displayed, the >>> prompt appears again, indicating that the inter-\npreter is waiting for you to enter another statement. Let\u2019s look at another example. In the\nfollowing sample session we have entered two print statements.\n>>> print 'To be or not to be' [ENTER]\nTo be or not to be\n>>> print 'That is the question.' [ENTER]\nThat is the question.\n>>>\nIf you incorrectly type a statement in interactive mode, the interpreter will display an error\nmessage. This will make interactive mode useful to you while you learn Python. As you\nlearn new parts of the Python language, you can try them out in interactive mode and get\nimmediate feedback from the interpreter.\nTo quit the Python interpreter in interactive mode on a Windows computer, press Ctrl-Z\n(pressing both keys together) followed by Enter. On a Mac, Linux, or UNIX computer,\npress Ctrl-D.\nWriting Python Programs and Running\nThem in Script Mode\nAlthough interactive mode is useful for testing code, the statements that you enter in inter-\nactive mode are not saved as a program. They are simply executed and their results dis-\nplayed on the screen. If you want to save a set of Python statements as a program, you save\nthose statements in a file. Then, to execute the program, you use the Python interpreter in\nscript mode.\nFor example, suppose you want to write a Python program that displays the following three\nlines of text:\nNudge nudge\nWink wink\nKnow what I mean?\nTo write the program you would use a simple text editor like Notepad (which is installed\non all Windows computers) to create a file containing the following statements:\nprint 'Nudge nudge'\nprint 'Wink wink'\nprint 'Know what I mean?' M01_GADD7119_01_SE_C01.QXD 1\/23\/08 5:19 PM Page 23\n1.5 Using Python 23\nNOTE: It is possible to use a word processor to create a Python program, but you\nmust be sure to save the program as a plain text file. Otherwise the Python interpreter\nwill not be able to read its contents.\nWhen you save a Python program, you give it a name that ends with the .pyextension, which\nidentifies it as a Python program. For example, you might save the program previously shown\nwith the name test.py.To run the program you would go to the directory in which the file\nis saved and type the following command at the operating system command line:\npython test.py\nThis starts the Python interpreter in script mode and causes it to execute the statements in\nthe file test.py. When the program finishes executing, the Python interpreter exits.\nThe IDLE Programming Environment\nThe previous sections described how the Python interpreter can be started in interactive\nmode or script mode at the operating system command line. As an alternative, you can use\nan integrated development environment,which is a single program that gives you all of the\ntools you need to write, execute, and test a program.\nRecent versions of Python include a program named IDLE, which is automatically installed\nwhen the Python language is installed. (IDLE stands for Integrated DeveLopment Environment.)\nWhen you run IDLE, the window shown inFigure 1-21appears. Notice that the >>> prompt\nappears in the IDLE window, indicating that the interpreter is running in interactive mode. You\ncan type Python statements at this prompt and see them executed in the IDLE window.\nIDLE also has a built-in text editor with features specifically designed to help you write\nPython programs. For example, the IDLE editor \u201ccolorizes\u201d code so that key words and\nother parts of a program are displayed in their own distinct colors. This helps make pro-\ngrams easier to read. In IDLE you can write programs, save them to disk, and execute them.\nAppendix B provides a quick introduction to IDLE, and leads you through the process of\ncreating, saving, and executing a Python program.\nFigure 1-21 IDLE "}