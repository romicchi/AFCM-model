{"text":"Module_2 - Relationship Diagram for Data Analysis & SQL\n2.1 Introduction and Background\nERD stands for Entity Relationship Diagram. An ER diagram illustrates the logic within a\ndatabase and how individual components relate to one another (Visual Paradigm). Similar to a story\nboard for film, an ER diagram lays out the wireframe of internal database structures to aid in\nunderstanding, improving efficiency, and debugging logical errors. The key pieces of an ER diagram are\nthe entities, attributes, and the relationships between them. For example, within the complex systems of\nAmazon, they would have an entity for customer listing attributes such as name, address, payment, and\nemail. Once an order is placed and ready for shipment, the shipping database would access the customer\ndatabase to retrieve information to complete the order and ship out the package. An ER diagram would\nshow how the shipping department can access many customers within the database, and the information\nit would require to complete shipment.\nIn the 1960s and 1970s, there was a rise in data modeling needs and published works on different\nmodels. Peter Chen is attributed with inventing and promoting the entity-relationship model stemming\nfrom a paper he published in 1976, \u201cThe Entity-Relationship Model \u2013 Toward a Unified View of Data\u201d\n(Kempe, 2013). As databases and businesses grew more complex, a unified modeling system became\nmore important so that structures could be modeled across industries consistently. After the original ERD\nwas developed by Peter Chen, many of his colleagues adapted and made small alterations to improve and\nsimplify the overall model. The key components are still present; the look has been simplified to\naccommodate more complex systems. Below we see examples of both the original and newer ERD\nmodels.\nFigure 1 \u2013 Original Style ERD (SmartDraw)\n(1) This is an example of an older ERD version depicting e-commerce Company.\nWe can tell because there are action diamonds between entities, and attributes are each listed\nseparately in individual ovals. Figure 2 \u2013 New Style ERD (Lucidchart)\n(2) In this newer ERD e-commerce example, we see attributes listed within each entity, and no\nactions are present. If depicted in the older model, we would see 21 attribute ovals and a\nminimum of 8 actions. This would create visual clutter, making the ERD harder to examine,\ndetracting from its usefulness.\n2.2 Understanding the importance of data modeling\nKeeping a well-documented model of a database is important for overall business efficiency. ER\ndiagrams are easy to use and understand, allowing for simple cross-departmental understanding. As new\nchanges or expansions are proposed, an understanding of current workflow and capabilities is key to\nmanaging these projects. Also, as new team members join, an ERD allows for quick and efficient\ntraining. New and current team members can revisit this often as a reference while working on individual\npieces to understand the overall effect.\nWhile the foundation of an ERD is to show the relationship between entities, they can also be\nhelpful in other instances. Designing and debugging databases can be very complex tasks, but having ER\ndiagrams can simplify the process and reduce the chance of error. In designing an entirely new system, an\nER diagram can aid in planning the logic and requirements of a database before any part of it is built.\nThis can save money and hours, and it ultimately cuts down on redundancies and time spent on unneeded\nbuilds. Visualizing the overall structure allows programmers to locate any errors in logic or flaws in the\noverall design before creation. Once a system is already created, an ERD is still useful in debugging as\nerrors occur. Because developers can see how all entities and attributes are linked, it is easier to trace\ndown where any error stems from. In fixing the issue, the ERD also helps in seeing if any side effects\nmay occur (Visual Paradigm).\nER diagrams are especially useful in organizations with bigger and more complex database\nsystems that have many different entities, data points, and relationships between them. A good example\nof this can be found in any major hospital. All hospitals have doctors and patients, but the larger ones\ndeal with doctors across different specialized departments and all the components that interact. When a patient makes a yearly checkup appointment online, their appropriate insurance is checked and logged\ninto their profile. When they arrive, the doctor is able to access all previous medical records and current\nmedication, even if prescribed by a different doctor. Any samples taken are processed by the laboratory,\nwho have editing access to the patient profile in order to update the results.\nThe information is then posted to the account, and both the doctor and patient are notified.\nPatients have view-only capabilities, while doctors can edit and add on prescriptions as needed. If a\nprescription is added, the in-house pharmacy is able to view and notify patients when filled. While this\nprocess is going on, the billing department is able to see activities in all other departments as it relates to\nthe individual case, viewing insurance information to forward and process bills. They are able to\ncommunicate between both the insurance provider and the patient to fulfill total costs.\nIn this example, the process is not linear, and each department has different levels of access and\nediting capabilities. Not included in the example, but still present in the situation, are all of the back-end\nhuman resources for the hospital as an organization with employees. This becomes increasingly complex\nas more patients, doctors, specializations, and privacy concerns are added into the mix. In health care\nprofessions where certain situations can literally be life or death, efficiency is of the utmost importance.\nER diagrams are essential to keeping hospital databases well-organized and free from error. While the\nfigure below depicts a simplified and basic interaction with a doctor\u2019s office, we can already see many\nentities and complex relationships between them. A full-service hospital ER diagram would be much\nlarger.\n2.3 Naming and Definitions\nNow that we have covered what an ER diagram is, let\u2019s go into more detail regarding the finer\npoints of data modeling. ER diagrams are used to visually represent data relationships in many settings,\nbut they are most commonly used in business environments. These data representations allow many\nFigure 3 \u2013 Basic Hospital ERD (Createrly, 2008)\ncompanies to better use their resources and make well-informed decisions. These diagrams should be\neasily representable and understandable by a wide majority of employees, as they represent data and\/or\ninner functions of the company. Therefore, it is obvious that such diagrams must be easily readable and\nfunctional to allow quick decision-making. Speaking of readability, in these ER diagrams, naming values and objects is half the battle.\nSomething that shares this need is programming, as creating variables and methods with explanatory yet\nshort names helps to increase readability of the code. Understanding this, writing ER diagrams brings\nmany similar concepts, so writing an ER diagram is nearly the same as writing the code that drives it. The\nvalue of self-explanatory variable names cannot be understated, as they help keep the company and its\nemployees informed. However, explaining such concepts without an example is needlessly abstract, so\nlet\u2019s start by making a few tables and bringing them up to snuff.\nFigure 4 \u2013 Entity Relation Tables (Bartz, 2020)\nNow with these tables, we can start to fix problems, but first let\u2019s start with some baselines.\nFirstly, we can see an empty value in table 3, and with no relations, table names, or variable names these\ntables do not convey any meaningful information. Choosing an example set of data, we can display the\nrelationship between a Student, a College, and their Professors.\nFigure 5 \u2013 College, Professor, Student ER Diagram (Bartz, 2020) Now this table is still far from ideal. Tables share variables, and these names are terrible, and\nwould require a large amount of explanation to make sense. Let\u2019s start fixing it step by step. Our first\nobjective will be getting the data to a more readable state. The variable names currently in the table are\natrociously low on elaboration or are so general that anything could fit where they are. Other variables\nare even repeated, so if they were used as a unique identifier or a primary key the program would give\nirrelevant or hindering information. This would lead to many problems, both in coding and in viewing.\nLet\u2019s make some edits to the table to better represent the variables that are in there right now.\nFigure 6 \u2013 ER Diagram with Corrected Attribute Names (Bartz, 2020)\nNow that the variables have been clarified, we can begin fixing some finer details like the\nrelations between each table. The student and college relation is not indicative of the general format. A\nstudent at college will only have one college, and a college will have far more than one student enrolled.\nAdditionally, professors that teach generally tend to stay at one college, so changing that correlation will\nbetter fit the represented data. Fixing this will better clarify the tables\u2019 reliance on each other, as well as\nopening more relation options between them.\nFigure 7 \u2013 ER Diagram With Corrected Relation Types (Bartz, 2020) Now with the inter-table relations fixed, our focus can shift to the formatting of variables and\ntable names. Some variables have far too long a name to be practically used or understood. Be careful\nwhen fixing these names, however, as cutting off too much or using unorthodox acronyms can lead to the\nsame confusion regarding the variables. Also, no one wants to read super long variable names, and doing\nso in a conference or meeting puts an unnecessarily large amount of time spent explaining what a simple\ndiagram should be.\nIn programming, such variables would never be used, mainly because no one wants to type out\nstudent identification nnumber, and then find out they misspelled it. Additionally, such values are\nmemory inefficient, wasting space that could be used to make processes run faster. So, now to fix the\ntable, look for shorter variable names or acronyms to replace the names already there, but remember,\ngoing for shortness over functionality could lead to a similarly cryptic graph.\nFigure 8 \u2013 ER Diagram With Corrected Relation Formatting (Bartz, 2020)\nNow that these variable names are much shorter, let\u2019s format them more professionally.\nCapitalization is an easy way to better present data in a professional way. Capitalizing acronyms and one-\nword variables is one more layer to add to the credibility of the relation. Additionally, we can format\nvariables in a better way than just a long string of characters. There are many naming conventions\ncommon in programming that can be applied outside of code to ER diagrams, but for this example, we\nwill use the Camel case convention. Camel case uses capital letters after the first word to increase\nreadability of longer variable names (ex: numapplepie to numApplePie).\nFigure 9 \u2013 ER Diagram With Corrected Attribute Format (Bartz, 2020) This table has come a long way, and now that it is properly formatted, let\u2019s focus on details like\nthe primary key for each table. For formatting, the primary key should go at the top of the table variables\nto better represent its role. Adding to the layers of complexity, let\u2019s examine some of the variables and\ntheir use. What about student names? Attempting to separate the name down into 2-3 parts is a tactic that\nis required, as most universities and colleges order role via last name.\nSo let\u2019s add some clarification to that name. Remember if we apply some convention to the\nvisual, it should carry through, so if we edit studentName, we must edit the professorName variable as\nwell. Another topic to cover is sub tables, that is tables that elaborate on certain variables within another\nlinked table. In the next example, we will add the dependent variable to the Professor table as well as a\nsub table. One other topic to cover is useless data. Look at the college table and see that there are two\nemployee variables. That\u2019s a waste of both space and data, so they can be combined into one variable.\nFigure 10 \u2013 ER Diagram with Corrected Keys (Bartz, 2020)\nNow that all these edits have been applied, this table has been fixed from its confusing original\nstate to one that could be shown to a conference room of businesspeople. All the changes were meant to\nimprove both the appearance and readability of the data. Of course, some sacrifices were made to fit\ntables like these into this form. Ideally, an ER diagram should have a good bit of white space in between\nthe tables to better separate them from each other. But stepping away from the massive amount of\nrefining we had to do, these should not be applied after the table was written, but during the process. This\nallows for less overall time spent making the table, and more time available to improve or enhance the\nmodel or programming behind it. But let\u2019s step away from the complexity and formatting of these tables\nto better grasp the concept of modeling entities and their relationships.\nWhen modeling new or different entities, it is best to approach the problem step by step. Start by\nsplitting up the work into different categories: the initial entity, the attributes of that entity, and the\nentity\u2019s relationships to other values. Applying this logic to a new table, let\u2019s use a shipping company as\nan example. Firstly, let\u2019s identify the company\u2019s entities, which will be the tables necessary to understand\nits inner workings. Entities like orders and storage are very important, but there are far too many entities\nto model, so depending on what the meeting entails, tailoring the data to fit the occasion is a necessity.\nFor instance, showing what customer data you get in a meeting discussing storage employee importance\nis unimportant to the current topic.\nSpeaking of customer data, the next step in making a comprehendible ER diagram revolves\naround getting the attributes and variables that each entity has. Remember to make this data easily\nrecognizable by its name. That name should represent the data contained within, because while a variable named Ren_and_Stimpy is very recognizable, if it contained an order number, that would be\nterribly confusing. Customer data might include things like their name, address, and so forth. Customer\ndata should, however, not include extraneous details like their sex or skin color. While elaborating on\nwhat each entity has, be careful not to program personal details to be stored carelessly, as data leaks have\nbecome more and more common over the years. Keeping the data secure is important, but remember, the\nless you collect, the easier it is to encrypt or protect from outside influence.\n2.4 Modeling\nFinally, speaking of data, entities and variables might have relationships to other entities, so this\nshould be the last phase of ER diagram assembly. Take, for example, the order and customer entities in\nthe context of the company. The relationship is as such, for each customer, they may have multiple\norders, while each order will only have one customer who made it. The storage facility may have\nmultiple incoming orders or requests, but the order only references one facility.\nFigure 11 \u2013 Entity-to-Entity Relation (Bartz, 2020)\nThus we can see the importance of properly laying out and describing ER relations to better\nrepresent the data. However, let\u2019s address some smaller, more technical issues that may arise when\ncreating a diagram. Given a diagram, sometimes concepts or variables put onto the board that others are\nnot familiar with. Say you use some in-house acronyms at a large event, and then people ask questions\nabout those topics. That is wasted time that could have been spent asking better questions that you\nprepared to answer. Remember that while you want to inform your audience, it is important to present\nthat in an easily comprehendible way. Following some commonly used conventions, as well as using\nsome advice outlined above, will allow you to work smarter, not harder.\n2.5 Examples\nFigure 12 \u2013 Store ER Diagram (Bennett, 2020 2.6 Business Intelligence Systems and Data Warehouse\nBusiness Intelligence (BI) Systems are any database system that has data, programs, and\npersonnel and are specialized for the preparation of data for BI processing. A Data Warehouse is a\nsystem used for reporting and data analysis, and is considered a core component of business intelligence.\nThis includes day-to-day transactions and other internal data or external data from sources by the\nExtract, Transform, and load (ETL) System.\nDatabase SKUs (A stock-keeping unit (SKU) is a scannable bar code, most often seen printed on\nproduct labels in a retail store) where the primary key consists of one or more column will uniquely\nidentify each row or record in the table. Some tables may have one or more foreign keys that are used to\ncreate relationship between tables logically link the tables together.\n2.7 Introduction to Structure Query Language (SQL)\nSQL is the universal query language of relational database management systems (DBMS) that is\nalmost always behind user-friendly GUIs. In this section, we will briefly talk about SQL queries. We\nwill visit SQL in more detail in later chapters.\nSQL statements can also include a SQL comment, which is a block of text used to document the\nSQL statement but not executed as part of the statement. SQL comments are enclosed in the symbols \/*\nand *\/, and any text between these symbols is ignored when the SQL statement is executed. Here is an\nexample:\n\/* SQL-Quaery-Ch02 *\/\nThe fundamental statement of SQL query can apply to Microsoft Access, SQL Server, Oracle\nDatabase, and MySQL. The basic form of SQL queries uses SQL SLECT \u2013 FROM \u2013 WHERE\nframework. Here are some basic specifications:\n\u25aa The SQL SELECT statement specifies which columns are to be listed in the query results.\n\u25aa The SQL FROM statement specifies which tables are to be listed in the query results.\n\u25aa The SQL WHERE statement specifies which rows are to be listed in the query results.\nReading Specified Columns from Single Table \u2013 to obtain values from the SKU_Data table, we\nwrite a SQL SELECT statement that contains all of the column names in the table:\n\/* SQL-Query-Ch_02 *\/\nSELECT SKU, SKU_Description, Department, Buyer\nFROM SKU_DATA;\nBelow is a SQL queries from a single table, which obtains just the value of the Department and Buyer\ncolumns of the SKU_Data table:\nDepartment Buyer\nClothing Tyra Perry\nClothing Bradly Cooper\nClothing Cora Mathis\nSELECT Department, Buyer\nFROM SKU_DATA; The Catalog_SKU_2019 table shows DateOnWebSite. To see these items, we use the follow query:\n\/* SQL-Query-Ch_02 *\/\nSELECT *\nFROM CATALOG_SKU_2020\nWHERE DateOnWebSite = '10-Oct-2020';\n2.8 Submitting SQL Statement to the DBMS\nUsing SQL in Microsoft Access 2016, we can execute SQL statements and run Query windows in\nDesign view.\n1. Click the Create command tab to display the Create command groups, as shown in Figure 2-\n13.\n2. Click the Query Design button.\n3. The Query1 tabbed document window is displayed in Design view, along with the Show\nTable dialog box, as shown in Figure 2-10.\n4. Click the Close button on the Show Table dialog box. The Query1 document window now\nlooks as shown in Figure 2-11, with the Query Tools contextual command tab and the Design\ncommand tab displayed. This window is used for creating and editing Microsoft Access\nqueries in Design view and is used with Microsoft Access QBE (Query By Design).\nFigure 2-13- Microsoft Access 2016 Design view\n2.9 Concise Summary\nAn Entity Relationship Diagram, or ER diagram, is a visual representation of a database and the\ninteractions between its entities and attributes. The need for ER diagrams arose from the need to structure\ncomplex databases in the 1970s. Aspects of ER diagrams that are appealing include their not only being\neasy to understand but also easy to create and teach.\nOne of the earliest models was developed by Peter Chen, which included entities (rectangles),\nattributes (ovals) and their relationships (diamonds). Newer ER diagrams (using Unifying Modeling\nLanguage) simplify this by attaching attributes to their entities in a rectangle and by having relationships\ndesignated by lines with specific end-connection symbols that represent the following: \u2022 One-to-one\n\u2022 One-to-many\n\u2022 Many-to-one\n\u2022 Many-to-many\nAll four of the above relationships are also combined with a symbol for mandatory or optional\ncardinality.\nThere are a few naming conventions that have evolved since Chen\u2019s original model. Entity names\nare typically one word, bolded, and put in the upper rectangle (the case can be interchangeable, but most\nuse either Pascal or Camel). When keys are introduced, primary keys are camel-case and underlined, and\nsecondary keys are just camel-case; all keys must have the same name as their corresponding entities.\nAttributes are camel-case, unique, and as short as possible.\nER diagrams allow a prebuild for databases which saves time, effort, and confusion for\nprogramming teams. They are also a great tool when used to help diagnose errors in the database. These\nsimple diagrams are crucial when creating a database as efficiently and quickly as possible. "}