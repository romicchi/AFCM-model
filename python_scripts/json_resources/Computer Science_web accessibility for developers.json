{"text":"Introduction\nLearning Outcomes\nWelcome to Web Accessibility for Developers. We are glad that you\nare here and are taking the time to learn some very important,\nmarketable developer skills!\nBy the time you complete the instruction here, you should be able\nto:\n\u2022 Test web interactivity with a screen reader to ensure\naccessibility\n\u2022 Identify the differences between static and dynamic WAI-ARIA\n\u2022 Describe both graceful degradation and progressive\nenhancement development methods\n\u2022 State when and when not to use WAI-ARIA\n\u2022 Explain the limitations of WAI-ARIA\n\u2022 Apply WAI-ARIA landmarks and live regions to web content\n\u2022 Create accessible progress bars, suggestion boxes, and tooltips\nwith WAI-ARIA\n\u2022 Build accessible sliders, accordions, tab panels, and carousels\nwith WAI-ARIA\n\u2022 Implement effective design patterns for accessible menu bars,\ntree menus, and sortable lists with WAI-ARIA\nSuggested Prerequisites\nThe materials here are intended for web developers.\nIntroduction | 1 To get the most out of the instruction, you should have the following\nprerequisite knowledge:\n\u2022 JavaScript: You should have a functional understanding of the\nJavaScript scripting language and be familiar with using jQuery\nand jQuery plugins. Though you can follow along with basic\nknowledge of JavaScript and jQuery, it will be easier to\nunderstand if you are comfortable writing (or, at least, copying\nand pasting) JavaScript code and making adjustments.\n\u2022 HTML: You should have at least a functional understanding of\nHTML 5. Though most of the HTML will be provided, you\u2019ll\nneed to understand how it is used to produce the widgets\nyou\u2019ll be working on.\n\u2022 Git Version Control: We strongly recommend a GitHub\naccount (and a basic understanding of how it is used) in order\nto participate in the activities. Details will be provided in Unit 2\nif you need to set up an account, and basic Git commands will\nbe covered.\nSuggested Technology\nYou will need the following applications to complete the activities\nthat follow:\n\u2022 ChromeVox Screen Reader: Required for testing assignment\nsubmissions prior to submitting.\n\u2022 FireFox Developer Edition: Optional, but includes the FireBug\nDeveloper Tools, which are more helpful for debugging than\nthe default developer tools included with various browsers.\n\u2022 Git: (Optional) Though you can edit activity files and send\nthem to a web server, you\u2019ll be better off installing Git or a Git\nClient and working from your own local development\n2 | Introduction environment.\n\u2022 Plain Text Editor: Required for editing HTML and JavaScript,\nwhich is much easier with a good, colour-coded text editor,\nsuch as Visual Studio Code, Sublime Text, or Atom.\nSuggested Reading\nSuggested Reading:\n\u2022 Accessible Rich Internet Applications (WAI-ARIA) 1.1\n\u2022 WAI-ARIA Authoring Practices 1.1\nYou might also look ahead to the next version by reviewing WAI-\nARIA 1.2, currently available as an editor\u2019s draft.\nThese readings are more references than they are readings. At\na minimum, scan through these documents to understand what\nthey contain and refer back to them when you encounter scenarios\nwhere WAI-ARIA could or should be used.\nBeyond What You\u2019ll Learn Here\nFor those who would like to go beyond what they\u2019ve learned in the\nmaterials here, The Chang School has created a series of resources\non web accessibility for different audiences:\n\u2022 Digital Accessibility as a Business Practice (web ebook version)\nIntroduction | 3 \u2022 Professional Web Accessibility Auditing Made Easy (web ebook\nversion)\n\u2022 Introduction to Web Accessibility (web ebook version)\n\u2022 Understanding Document Accessibility (web ebook version)\nDisclaimer\nThe information presented here is for instructional purposes only\nand should not be construed as legal advice on any particular issue,\nincluding compliance with relevant laws. We specifically disclaim\nany liability for any loss or damage any participant may suffer as\na result of the information contained. Furthermore, successful\ncompletion of activities does not result in formal accreditation or\nrecognition within or for any given field or purpose.\n4 | Introduction Choosing Your Learning Path\nWe highly recommend reading online. While the materials here\nare available for download in various formats (ePub, HTML, and\nPDF), the interactive elements in the readings and activities are best\nviewed online in Pressbooks.\nThroughout the pages here, you\u2019ll see the various coloured boxes\ndescribed below to help you organize how you engage with the\ncontent.\nToolkit\nThroughout the content, we identify items for you to collect and\nadd to your WAI-ARIA Developer Toolkit. These items will include\nlinks to resource documents and online tools used during\ndevelopment activities, as well as software or browser plugins that\nyou may need to install.\nThese will be identified in a green Toolkit box like the following:\nToolkit: Provides useful tools and resources for your future\nreference.\nKey Points\nImportant or notable information is highlighted and labelled in Key\nPoint boxes such as the one that follows. These will include \u201cmust\nknow\u201d information, as well as less obvious considerations and\ninteresting points.\nChoosing Your Learning Path | 1 Key Point: Essential information and interesting points.\nTry This\nBrief activities are highlighted in in the Try This boxes.\nThese activities are designed to get you thinking or give you\nfirsthand experience with something you\u2019ve just read about.\nTry This: Usually a quick activity to help you understand a\ntopic being discussed.\nSuggested Reading\nLinks listed in these Suggested Reading boxes act more as\nreferences than readings. At a minimum, scan through these\ndocuments to understand what they contain and refer back to\nthem when you encounter scenarios where WAI-ARIA could or\nshould be used.\nSuggested Reading: Links to various web resources for\noptional reading on the topics being discussed.\nActivity Elements\nWhen the widget coding activities are introduced in Unit 4, each of\n2 | Choosing Your Learning Path the elements in the example activity are described using the Activity\nElement box.\nActivity Element: A brief description of each section of an\nactivity.\nSelf-Tests\nThe first few units include Self-Tests, which will help reinforce key\ntopics discussed in a unit. For questions that have multiple answers,\nbe sure to select all the correct answers and no incorrect answers\nin order for the question to be marked \u201ccorrect.\u201d Multiple answer\nquestions can be challenging, and they typically require a thorough\nunderstanding of the topic to answer correctly. Questions will only\nreference topics covered in the content itself. They will not test\nyour knowledge of content referred to on external resource sites\nthat may be linked from the content.\nTry This: Skip ahead to the end and read through the\nContent Recap for a high-level summary of the topics\ncovered here.\nChoosing Your Learning Path | 3  The Information Here Will\nBe Helpful To...\nAs much as we would like to teach WAI-ARIA to everyone \u2014\nincluding how it is used to make web interactivity accessible to\npeople with disabilities \u2014 the topic is very much a technical one.\nWhile you do not necessarily need to be a web developer to\nunderstand where and when WAI-ARIA should be used, in order to\nimplement it you must be able to write code or, at a very minimum,\nbe able to read code and understand what it is doing.\nNon\u2013web developers can still benefit from the information\nprovided here, but they will likely find the activities very challenging\nwithout the prerequisite background knowledge. This background\nknowledge is beyond the scope of the materials here, so there is\nlittle to help with basic HTML formatting or JavaScript\nprogramming. The focus here is on using WAI-ARIA, not on using\nHTML and JavaScript.\nThe Information Here Will Be Helpful\nTo... | 1 Accessibility Statement\nThough we attempt to make all elements of the instruction here\nconform with international accessibility guidelines, we must\nacknowledge a few accessibility issues that are out of our control or\nare done on purpose to demonstrate barriers.\n\u2022 Some external resources may not conform with accessibility\nguidelines.\n\u2022 Though possible to navigate the JSFiddle code samples\nembedded throughout, JSFiddle itself is a complex interface\nthat can be difficult to navigate with a screen reader. Working\nin JSFiddle is not a requirement but has been provided as a\nplace to experiment with the code samples provided.\n\u2022 The rendered JSFiddle embedded examples found under the\nresult tab are intentionally made inaccessible.\n\u2022 Prior to each embedded JSFiddle is a hidden bypass link to skip\nover the fiddle iframe.\n\u2022 The JSFiddle interface will extend beyond the width of a mobile\nscreen and, thus, require scrolling.\n\u2022 Throughout the widget descriptions in Units 4 to 6, we present\ncode examples embedded from PasteBin. Though the code\nitself is readable with a screen reader, the highlighted\nsolutions they contain are not distinguishable from other code\nin these samples when listening with a screen reader. Where\npossible, we have described the changes in the text preceding\nthese code samples.\n\u2022 The GitHub website, which contains the activity files, is\nrelatively accessible but can be difficult to navigate and use\nwith a screen reader.\n\u2022 Third-party video content may not be captioned or may be\ncaptioned poorly.\n2 | Accessibility Statement BACKGROUND\nBackground | 3  Types of Disabilities and\nBarriers\nIn order to understand why web accessibility is necessary, it is\nhelpful to have a basic understanding of the range of disabilities\nand their related barriers with respect to the consumption of web\ncontent.\nKey Point: Those who have taken our other courses will have\nencountered this content already. Read again or skim for a\nrefresher.\nNot all people with disabilities encounter barriers on the Web, and\nthose with different types of disabilities encounter different types\nof barriers. For instance, if a person is in a wheelchair they may\nencounter no barriers at all in web content. A person who is blind\nwill experience different barriers than a person with limited vision.\nDifferent types of disabilities and some of their commonly\nassociated barriers are described here.\nWatch the following video to see how students with disabilities\nexperience the Internet.\nVideo: Experiences of Students with Disabilities (1:59)\nTypes of Disabilities and Barriers | 5 A YouTube element has been excluded from this version of the\ntext. You can view it online here:\nhttps:\/\/pressbooks.library.ryerson.ca\/wafd\/?p=813\n\u00a9 Jared Smith. Released under the terms of a Standard YouTube License. All rights\nreserved.\nIn this video, David Berman talks about types of disabilities and\ntheir associated barriers.\nVideo: Web Accessibility Matters: Difficulties and Technologies:\nAvoiding Tradeoffs (9:52)\n6 | Types of Disabilities and Barriers A YouTube element has been excluded from this version of the\ntext. You can view it online here:\nhttps:\/\/pressbooks.library.ryerson.ca\/wafd\/?p=813\n\u00a9 davidbermancom. Released under the terms of a Standard YouTube License. All rights\nreserved.\nPeople Who Are Blind\nPeople who are blind tend to face many barriers in web content,\ngiven the visual nature of the Web. They will often use a screen\nreader to access their computer or device and may use a refreshable\nBraille display to convert text to Braille.\nCommon barriers for this group include:\n\u2022 Visual content that has no text alternative\n\u2022 Functional elements that cannot be controlled with a keyboard\n\u2022 Overly complex or excessive amounts of content\nTypes of Disabilities and Barriers | 7 \u2022 Inability to navigate within a page of content\n\u2022 Content that is not structured\n\u2022 Inconsistent navigation\n\u2022 Time limits (insufficient time to complete tasks)\n\u2022 Unexpected actions (e.g., redirect when an element receives\nfocus)\n\u2022 Multimedia without audio description\nFor a quick look at how a person who is blind might use a screen\nreader like JAWS to navigate the Web, watch the following video.\nVideo: Accessing the web using screen reading software (3:07)\nA YouTube element has been excluded from this version of the\ntext. You can view it online here:\nhttps:\/\/pressbooks.library.ryerson.ca\/wafd\/?p=813\n\u00a9 rscnescotland. Released under the terms of a Standard YouTube License. All rights\nreserved.\n8 | Types of Disabilities and Barriers People with Low Vision\nPeople with low vision are often able to see web content if it is\nmagnified. They may use a screen magnification program to\nincrease the size and contrast of the content to make it more visible.\nThey are less likely to use a screen reader than a person who is\nblind, though in some cases they will. People with low vision may\nrely on the magnification or text customization features in their\nweb browser, or they may install other magnification or text reading\nsoftware.\nCommon barriers for this group include:\n\u2022 Content sized with absolute measures, so it is not resizable\n\u2022 Inconsistent navigation\n\u2022 Images of text that degrade or pixelate when magnified\n\u2022 Low contrast (inability to distinguish text from background)\n\u2022 Time limits (insufficient time to complete tasks)\n\u2022 Unexpected actions (e.g., redirect when an element receives\nfocus)\nSee the following video for a description of some of the common\nbarriers for people with low vision.\nVideo: Creating an accessible web (AD) (4:39)\nTypes of Disabilities and Barriers | 9 A YouTube element has been excluded from this version of the\ntext. You can view it online here:\nhttps:\/\/pressbooks.library.ryerson.ca\/wafd\/?p=813\n\u00a9 Centre for Inclusive Design. Released under the terms of a Standard YouTube License.\nAll rights reserved.\nPeople Who Are Deaf or Hard of Hearing\nFor most people who are deaf the greatest barrier on the Web\nis audio content that is presented without text-based alternatives.\nThey encounter relatively few barriers on the Web otherwise. Those\nwho are deaf and blind will face many more barriers, including those\ndescribed for people who are blind. For those who communicate\nwith American Sign Language (ASL) or other sign languages, such\nas langue des signes qu\u00e9b\u00e9coise (LSQ), the written language of a\nwebsite may produce barriers similar to those faced when reading\nin a second language.\n10 | Types of Disabilities and Barriers Common barriers for this group include:\n\u2022 Audio without a transcript\n\u2022 Multimedia without captions or a transcript\n\u2022 Lack of ASL interpretation (for ASL\/Deaf community)\nPeople with Mobility-Related Disabilities\nMobility-related disabilities are quite varied. As mentioned earlier,\none could be limited to a wheelchair for getting around and face\nno significant barriers in web content. Those who have limited use\nof their hands or who have fine motor impairments that limit their\nability to target web content elements with a mouse pointer may\nnot use a mouse at all. Instead, they might rely on a keyboard\nor perhaps their voice to control movement through web content\nalong with switches to control mouse clicks.\nCommon barriers for this group include:\n\u2022 Clickable areas that are too small\n\u2022 Functional elements that cannot be controlled with a keyboard\n\u2022 Time limits (insufficient time to complete tasks)\nPeople with Some Types of Learning or Cognitive\nDisabilities\nLearning and cognitive-related disabilities can be as varied as\nmobility-related disabilities, perhaps more so. These disabilities can\nrange from a mild reading-related disability to very severe cognitive\nimpairments that may result in a limited use of language and\ndifficulty processing complex information. For most of the\nTypes of Disabilities and Barriers | 11 disabilities in this range, there are some common barriers and\nothers that only affect those with more severe cognitive disabilities.\nCommon barriers for this group include:\n\u2022 Use of overly complex\/advanced language\n\u2022 Inconsistent navigation\n\u2022 Overly complex or excessive amounts of content\n\u2022 Time limits (insufficient time to complete tasks)\n\u2022 Unstructured content (no visible headings, sections, topics,\netc.)\n\u2022 Unexpected actions (e.g., redirect when an element receives\nfocus)\nMore specific disability-related issues include:\n\u2022 Reading: Text justification (inconsistent spacing between\nwords)\n\u2022 Reading: Images of text (not readable with a text reader)\n\u2022 Visual: Visual content with no text description\n\u2022 Math: Images of math equations (not readable with a math\nreader)\nEveryone\nWhile we generally think of barriers in terms of access for people\nwith disabilities, there are some barriers that impact all types of\nusers, though these are often thought of in terms of usability.\nUsability and accessibility go hand-in-hand. Adding accessibility\nfeatures improves usability for others. Many people, including those\nwho do not consider themselves to have a specific disability (such as\nthose over the age of 50), may find themselves experiencing typical\nage-related loss of sight, hearing, or cognitive ability. Those with\nvarying levels of colour blindness may also fall into this group.\n12 | Types of Disabilities and Barriers Some of these usability issues include:\n\u2022 Link text that does not describe the destination or function of\nthe link\n\u2022 Overly complex content\n\u2022 Inconsistent navigation\n\u2022 Low contrast\n\u2022 Unstructured content\nTo learn more about disabilities and associated barriers, read the\nfollowing:\nSuggested Reading: How People with Disabilities Use the\nWeb\nTypes of Disabilities and Barriers | 13 Why Learn About Accessible\nWeb Development\nKey Point: Those who have taken our other courses, or read\nour other books, will have read through this content already.\nRead again or skim for a refresher.\nCurb Cuts\nCurb cuts are a great example of universal design. Originally, curb\ncuts were added to sidewalks to accommodate those in wheelchairs,\nso they could access the road from the sidewalk and vice versa.\nHowever, curb cuts are helpful for many people \u2014 not just those\nin wheelchairs \u2014 including a person pushing a baby stroller, a\ncyclist, or an elderly person using a walker. The addition of a smooth\ngradient ramp allows anyone, who may have difficulty stepping or\nwho may be pushing something, to smoothly enter the sidewalk via\na ramp, rather than having to climb a curb. Although curb cuts were\ninitially designed to help those in wheelchairs, they have come to\nbenefit many more people.\nFrom a web accessibility perspective, most of the accessibility\nfeatures you might add to a website will have that so-called \u201ccurb\ncut effect.\u201d For example, the text description one might include\nwith an image to make the image\u2019s meaning accessible to a person\nwho is blind also makes it possible for search engines to index the\nimage and make it searchable. It allows a person on a slow Internet\nconnection to turn images off and still get the same information. Or,\nit allows a person using a text-based browser (on a cell phone, for\ninstance) to access the same information as those using a typical\n14 | Why Learn About Accessible\nWeb Development visual browser. Virtually every such feature that might be put in\nplace in web content to accommodate people with disabilities will\nimprove access and usability for everyone else.\nKey Point: Think of accommodations to improve web\naccessibility for people with disabilities as \u201ccurb cuts.\u201d These\naccommodations will very likely improve usability for\neveryone.\nThe Business Case for Web Accessibility\nVideo: The Business Case for Accessibility (3:29)\nA YouTube element has been excluded from this version of the\ntext. You can view it online here:\nhttps:\/\/pressbooks.library.ryerson.ca\/wafd\/?p=818\nWhy Learn About Accessible Web Development | 15 Karl Groves wrote an interesting series of articles in 2011 and 2012\nthat looked at the reality of business arguments for web\naccessibility. He points out that any argument needs to answer\naffirmatively at least one of the following questions:\n1. Will it make us money?\n2. Will it save us money?\n3. Will it reduce risk?\nHe outlines a range of potential arguments for accessibility:\n\u2022 Improved search engine optimization: Customers will be able\nto find your site more easily because search engines can index\nit more effectively.\n\u2022 Improved usability: Customers will have a more satisfying\nexperience, and thus spend more on or return more often to\nyour site.\n\u2022 Reduced website costs: Developing to standard reduces bugs\nand interoperability issues, reducing development costs and\nproblems integrating with other systems.\n\u2022 People with disabilities have buying power: They won\u2019t spend\nif they have difficulty accessing your site; they will go to the\ncompetition that does place importance on accessibility.\n\u2022 Reduced resource utilization: Building to standard reduces\nthe use of resources.\n\u2022 Support for low bandwidth: If your site takes too long to load,\npeople will go elsewhere.\n\u2022 Social responsibility: Customers will come if they see you\ndoing good for the world and you are thinking of people with\ndisabilities as full citizens.\n\u2022 Support for aging populations: Aging populations also have\nmoney to spend and will come to your site over the less\naccessible, less usable competition.\n\u2022 Reduced legal risk: You may be sued if you prevent equal\naccess for citizens\/customers or discriminate against people\n16 | Why Learn About Accessible Web Development with disabilities.\nWhat accessibility really boils down to is \u201cquality of work,\u201d as Groves\nstates. When approaching web accessibility, you may be better off\nnot thinking so much in terms of reducing the risk of being sued or\nlosing customers because your site takes too long to load. Rather, if\nthe work that you do is quality work, then the website you present\nto your potential customers is a quality website.\nIf you\u2019d like to learn more about business cases, here are a few\nreferences:\nSuggested Reading:\n\u2022 Developing a Web Accessibility Business Case for Your\nOrganization (W3C)\n\u2022 Chasing the Web Accessibility Business Case (Karl\nGroves, 2012), Part 1\n\u2022 Chasing the Web Accessibility Business Case (Karl\nGroves, 2012), Part 2\n\u2022 Chasing the Web Accessibility Business Case (Karl\nGroves, 2012), Conclusion\n\u2022 2 Seconds as the New Threshold of Acceptability for\neCommerce Web Page Response Times (Akamai, 2009)\n\u2022 Releasing Constraints: The Impacts of Increased\nAccessibility on Ontario\u2019s Economy (Summary)\n\u2022 Releasing Constraints: Projecting the Economic Impacts\nof Increased Accessibility in Ontario (Full Report)\nWhy Learn About Accessible Web Development | 17 AODA Background\nVideo: AODA Background (3:05)\nA YouTube element has been excluded from this version of the\ntext. You can view it online here:\nhttps:\/\/pressbooks.library.ryerson.ca\/wafd\/?p=820\nFor those in Ontario, Canada, we\u2019ll provide occasional references\nto the Accessibility for Ontarians with Disabilities Act (AODA). If\nyou\u2019re from outside Ontario, you might compare the AODA\u2019s web\naccessibility requirements with those in your local area. They will\nbe similar in many cases and likely based on the W3C WCAG 2.0\nGuidelines. The goal in Ontario is for all obligated organizations to\nmeet the Level AA accessibility requirements of WCAG 2.0 by 2021,\nwhich, ultimately, is the goal of most international jurisdictions.\nThe AODA provided the motivation to create this resource. All\nbusinesses and organizations in Ontario with more than 50\n18 | AODA Background employees (and all public sector organizations) are now required\nby law to make their websites accessible to people with disabilities\n(currently at WCAG 2.0 Level A). Many businesses still don\u2019t know\nwhat needs to be done in order to comply with the new rules. This\nresource hopes to fill some of that need.\nThe AODA has its roots in the Ontario Human Rights Code,\nintroduced in 1990. It essentially made it illegal to discriminate\nbased on disability (among other forms of discrimination). The\ndevelopment of the AODA began in earnest in 1994 with the\nemergence of the Ontarians with Disabilities Act (ODA). Its aim\nwas to legislate the removal and prevention of barriers that inhibit\npeople with disabilities from participating as full members of\nsociety, improving access to employment, goods and services, and\nfacilities. The act was secured as law in 2001.\nWith the election of a new government in 2003, the movement\nthat brought us the ODA sought to strengthen the legislation. The\nAccessibility Standards Advisory Council was established and the\nAODA was passed as law in 2005, and in July 2011, the Integrated\nAccessibility Standards Regulation (IASR) brought together the five\nstandards of the AODA, covering Information and Communication,\nEmployment, Transportation, and Design of Public Spaces, in\naddition to the original Customer Service standard.\nThe AODA sets out to make Ontario fully accessible by 2025, with\nan incremental roll-out of accessibility requirements over a period\nof 20 years. These requirements span a whole range of accessibility\nconsiderations \u2014 from physical spaces to customer service, the\nWeb, and much more.\nOur focus here is on access to the Web. The timeline set out in\nthe AODA requires government and large organizations to remove\nall barriers in web content between 2012 and 2021. The timeline\nfor these requirements is outlined in the table below. Any new or\nsignificantly updated information posted to the Web must comply\nwith the given level of accessibility by the given date. This includes\nboth Internet and intranet sites. Any content developed prior to\nJanuary 1, 2012 is exempt.\nAODA Background | 19 Level A Level AA\n\u2022 January 1,\n2016\n(except live\ncaptions\nand audio\ndescription)\n\u2022 January 1, 2012 (except live\nGovernment \u2022 January 1,\ncaptions and audio description)\n2020\n(including\nlive\ncaptions\nand audio\ndescription)\n\u2022 January 1,\n\u2022 Beginning January 1, 2014, new\n2021\nwebsites and significantly\nDesignated (except live\nrefreshed websites must meet\nOrganizations* captions\nLevel A (except live captions and\nand audio\naudio description)\ndescription)\n*Designated organizations means every municipality and every person\nor organization as outlined in the Public Service of Ontario Act 2006 Reg.\n146\/10, or private companies or organizations with 50 or more\nemployees, in Ontario.\nFor more about the AODA you can review the following references:\nSuggested Reading:\n\u25e6 History of the Ontarians with Disabilities Act (ODA)\n(David Lepofsky)\n\u25e6 Integrated Accessibility Standards Regulation\n\u25e6 Reg. 146\/10: Public Bodies and Commission Public\nBodies \u2013 Definitions\n20 | AODA Background About WCAG and\nWAI-ARIA\nBefore we get into details, some background information on the\nrelevant W3C specifications will help provide some context for why\ndevelopers should learn to use WAI-ARIA when they are developing\ncustom interactivity for the Web.\nWCAG\nThe Web Content Accessibility Guidelines (i.e., WCAG 2.0 and the\nrecent WCAG 2.1, pronounced wuh-kag) is the primary specification\nadopted around the world and describes how web content should\nbe created so it will be accessible to people with disabilities. WAI-\nARIA can help developers create content that conforms with\nrecommendations in WCAG. WCAG is covered in more detail in\nIntroduction to Web Accessibility, so we will just provide a basic\nintroduction here. For those who are not already familiar with\nWCAG, follow the link to the W3C WCAG Specification for details.\nSuggested Reading:\n\u2022 The Web Content Accessibility Guidelines (WCAG 2.0)\n\u2022 The Web Content Accessibility Guidelines (WCAG 2.1)\nWCAG revolves around four principles that help group guidelines\nAbout WCAG and WAI-ARIA | 21 with common characteristics. The acronym POUR can be used to\nremember the principles, described below.\nContent must be:\n1. Perceivable: It must be possible to perceive web content\nthrough multiple senses so that those who have lost a sense\nare able to perceive the content through another sense. Some\ngood examples of making content perceivable are alternative\ntext with images, so people who are blind can perceive images,\nand captions with audio or video, so people who are deaf are\nable to perceive sounds and speech.\n2. Operable: Content needs to operate with both a mouse and a\nkeyboard. There are many people who are unable to use a\nmouse effectively or not at all. When content is not keyboard\noperable, most people who are blind (among others) will\nexperience barriers. Some good examples include using\nonKeyPress alongside onClick for JavaScript, and using both\n:hover and :focus in CSS so effects are possible with both\nmouse and keyboard.\n3. Understandable: Content needs to be understood by a range\nof people, which includes people with cognitive disabilities,\nsensory disabilities, people reading in a second language, and\neven typically able users. Some good examples include making\nlink text meaningful (\u201cclick here\u201d tells one nothing about the\nlink\u2019s destination) and consistent navigation elements (so users\nonly have to learn the navigation structure of a website once).\n4. Robust: Content needs to work across multiple platforms, and\nit needs to continue to work into the future as technology\nevolves. This generally means developing content based on\nstandards. And, when non-standard uses of HTML, etc. are\nprovided, a standard version is available as a backup. Some\nuses of WAI-ARIA fall into this category of guidelines.\nWCAG also introduces conformance levels. Conformance levels can\nbe thought of in terms of their importance toward removing\n22 | About WCAG and WAI-ARIA barriers, with Level A being the most important. It is helpful to think\nof levels as things you must do, should do, and could do.\n\u2022 Level A: These issues must be resolved or some group will not\nbe able to access the content. The issues at this level represent\nsignificant barriers that may not be overcome with\nworkarounds. An example of a Level A barrier is missing\nalternative text to describe an image. There is little a person\nwho is blind can do on their own to understand the content of\nan image without a text description.\n\u2022 Level AA: These issues should be resolved or some group will\nfind it difficult to access or use the content. These issues can\noften be circumvented with some effort but will make using or\nunderstanding web content more effortful. An example of a\nLevel AA barrier is not being able to follow the focus of the\ncursor when navigating through content with a keyboard. For a\nperson with low vision navigating with a keyboard, or a fully\nable keyboard user for that matter, navigating through content\ncan be very difficult if he or she cannot see where the cursor is\nlocated and is unable to tell when to press the Enter key to\nactivate a link or button.\n\u2022 Level AAA: These issues could be resolved to improve usability\nfor all groups. Web content may be technically accessible, but\nusability can be improved by resolving these issues. An\nexample of a Level AAA barrier would be presenting acronyms\nor abbreviations without providing their full wording. For a\nperson who is blind, an acronym pronounced by a screen\nreader may sound like gibberish. For a fully able user who is\nnot familiar with a short form, an acronym or abbreviation may\nhave no useful meaning, at least not without having to search\nout the meaning elsewhere.\nLevel AA is the generally accepted level of conformance most\nwebsites should aim for, with perhaps a few Level AAA items\naddressed. Very few websites will comply at Level AAA, apart from\nAbout WCAG and WAI-ARIA | 23 the most basic of sites. Level AAA compliance is generally\nunattainable, and in some cases undesirable.\nThe following suggested readings provide links to additional\nWCAG\u2013related resources.\nSuggested Reading:\n\u2022 Understanding WCAG 2.0 (see Success Criteria and\nTechniques)\n\u2022 How to Meet WCAG 2\nWAI-ARIA\nThe instruction here focuses on the WAI-ARIA specification and\nhow it is used to ensure interactive web content is accessible to\npeople with disabilities. The acronyms stand for Web Accessibility\nInitiative, the W3C subgroup that developed the specification, and\nAccessible Rich Internet Applications, the specification itself. It is\ntypically referred to as WAI-ARIA, rather than ARIA, to distinguish\nit from other uses of the acronym. WAI-ARIA can be used to help\ndevelopers create widgets, applications, and web interactivity in\ngeneral that meet WCAG recommendations.\nThe WAI-ARIA specification was initially released as a\nrecommendation in March 2014 (WAI-ARIA 1.0). WAI-ARIA 1.1 was\nreleased in December 2017 and is the current stable version, with\nWAI-ARIA 1.2 in the works, available as an editor\u2019s draft.\nWAI-ARIA itself is not a solution on its own for making interactive\nweb content accessible. It is generally used with JavaScript, which\ndynamically injects WAI-ARIA attributes into HTML to provide\nsemantics that are recognized by assistive technologies and\n24 | About WCAG and WAI-ARIA understandable by end users. For example, if a series of nested lists\nare assembled as a menu, WAI-ARIA menu attributes can be added\nto replace the list semantics with menu semantics.\nFor now introduce yourself to WAI-ARIA, if you are not already\nfamiliar, by scanning over the specification to develop a general\nunderstanding of why it is needed, how it is used, and when to use\nit. We will go into much more detail as we proceed through the\nactivities.\nSuggested Reading:\n\u2022 Accessible Rich Internet Application (WAI-ARIA 1.1)\n\u2022 WAI-ARIA 1.2 Editor\u2019s Draft\nAbout WCAG and WAI-ARIA | 25  1. INTRODUCTION\n1. Introduction | 27  Objectives and Activities\nObjectives\nBy the end of this unit, you will be able to:\n\u2022 Save a local copy of the activity files\n\u2022 Get set up to submit assignments (if you are reading here as\npart of a course) on GitHub, raw.githack.com, or your own web\nserver (optional)\nActivities\n\u2022 Set up a site for future activity assignments and submit a URL\nto it (optional)\nObjectives and Activities | 29 Submitting Coding\nAssignments and Using\nGitHub\nNote: If you are here as part of a course, please read on. Otherwise,\nsubmitting coding assignments is not required.\nMost assignments that follow are various inaccessible web page\nwidgets that we will ask you to make accessible by rewriting their\ncode (HTML, CSS, or JavaScript). If you are participating here as\npart of a course, you will need the link to a live web page with your\nsolution. Before the code is reviewed, the page will be checked for\naccessibility (using ChromeVox and other tools).\nIt is your decision where you want to host the pages that you\nwill submit for review. If you have your own domain and server\nspace, you can upload completed assignments there and submit\nthe URL. Another option is to submit the URL of a file on GitHub\nto GitHack (https:\/\/raw.githack.com), then submit the URL to the\noutput it generates as your assignment submission.\nFeel free to download the activity files from our repository now,\nor if you are going to use GitHub, keep reading for instructions on\nhow to fork it to your own account.\nIf you don\u2019t have a website, we recommend using GitHub as your\nplatform for submitting assignments. Below we describe GitHub and\nGitHub Pages. If you are familiar with using GitHub or you have your\nown web server, you can skip the rest of this page or just scan it.\n30 | Submitting Coding Assignments\nand Using GitHub Set Up a GitHub Account\nIf you do not already have one, you should create a GitHub account.\nFor any developer, it is an invaluable tool for sharing and\ncollaborating on code development. A GitHub account is free.\nThough you can download the activity files from GitHub, then unzip\nthem and work from a local directory on your hard drive, we\nrecommend creating a fork of the activity files to your own account\nand cloning your fork into a local directory. Follow the link below to\nset up an account, then read on.\nToolkit: Join GitHub\nSet Up a Local Git Environment\nDepending on the operating system you are using, there are specific\nversions of Git for each platform. You may choose to use a Git client,\nor you may choose to use Git from the command line. Here we will\npresent command line options. If you choose to use a client, see\nthe documentation associated with the client for details on cloning,\ncommitting, pulling, and pushing.\nFor Windows and Mac users, if you are going to use a client\ninstead of working from a command line, we suggest installing\nSourceTree. GitHub Desktop is a good alternative if you prefer to\nuse an open source client. Feel free to choose another Git client if\nyou like.\nToolkit: Download SourceTree or GitHub Desktop if you\nneed a desktop Git client application.\nFor Linux users you can use your system\u2019s package manager to\nSubmitting Coding Assignments and Using GitHub | 31 install Git for command line use. On Ubuntu, for instance, at the\ncommand prompt you can run apt-get as the root user to install\nGit:\n#> sudo apt-get install git\nSuggested Reading: For more about Git setup on Ubuntu see\nthe tutorial on DigitalOcean.\nIf you are using another Linux distribution, use Google to find\ndetails on installing Git on your version of Linux.\nSuggested Reading: For details on installing Git, see the Git\nBook.\nAssignment Submissions via GitHub\nMost of the assignments that follow require submitting a URL to a\npublicly accessible version of the widgets that are the focus of the\nactivities.\nIf you need a place to post your activity assignments, GitHub\nPages can be a good option. Or, you may just prefer to use GitHub\nPages to organize your files so they are not cluttering your web\nserver. You will create a fork of the activity files (learnaria.github.io),\nrename the repository to create your own version, and either\nupload it to a site of your choosing or use GitHub Pages. The GitHub\nPages option is outlined here.\nSuggested Reading: Using GitHub Pages.\nIf you choose to use GitHub Pages, follow these steps to create a\ncopy of the files under your own GitHub account.\n32 | Submitting Coding Assignments and Using GitHub 1. Logged into GitHub, find your way to the activity files, and\nfork that repository. The fork button is at the top right of\nthe GitHub screen while viewing a repository. This creates\na copy of the repository under your own GitHub account\nwhere you will work from.\n2. After you have forked the activity files, go into the settings\nfor that repository and change the name from\nlearnaria.github.io to [username].github.io, where\nusername is your GitHub account username. This will\nautomatically create your GitHub Pages website at\nhttps:\/\/[username].github.io.\n3. Now you will want to create a clone of your forked activity\nfiles repository on your computer, through which you will\ndo your work. From the command line issue the following\ncommand to create a clone of the forked version of the\nactivity files you created, where [username] is your GitHub\naccount username. You can also copy the https link from a\nfield that opens when you click on the \u201cClone or\ndownload\u201d button in your repo.\n#>git clone\n4. If you are using SourceTree, click on \u201c+ New Repository\u201d\nand choose \u201cClone from URL\u201d and enter the above URL\ninto the \u201cSource URL\u201d field. Set the \u201cDestination Path\u201d to\nyour preferred work directory.\nSuggested Reading: Cloning a repository.\nYou should now have a copy of the activity files available locally that\nyou can edit and commit back as your assignment updates, which\nbecome part of your GitHub Pages website.\nNote that it can take a few seconds or a minute for changes\ncommitted to your GitHub Pages repository to actually show up on\nthe website.\nSubmitting Coding Assignments and Using GitHub | 33 If You Already Have a GitHub Pages Site\nTo add the files to an existing GitHub Pages site, open the settings\nfor the forked repository you created. In the GitHub Pages section\nshown in the screenshot below, choose the Source (typically, the\nmaster branch) and click Save. This will create a subdirectory under\nyour existing GitHub Pages site with the name of the forked\nrepository (i.e., learnaria.github.io).\nYou may want to rename the repository to something shorter\n(e.g., learnaria) before enabling it in GitHub Pages. This would\nproduce a URL to the activity files, something like:\nhttps:\/\/[username].github.io\/learnaria\/\nFigure: A\nscreenshot of\nthe GitHub\nPages\nsettings\nBasic Git Commands\nYou do not need to be an expert Git user, but you should know a few\nbasic commands if you are working from a command prompt. The\ncommands you\u2019ll likely use are the following:\ngit status (displays a list of changed and untracked files)\ngit add [filename] (prepares a files for committing)\n34 | Submitting Coding Assignments and Using GitHub git commit -m \u201c[message]\u201d (describe the nature of the\ncommit)\ngit push [origin master] (sends the committed change to\nyour GitHub repository master branch)\ngit diff [filename] (shows the changes in a file)\nOf course there are many other potential commands, but these are\nthe most common. If you are using a Git client, such as SourceTree,\nthese commands will be clickable in the UI buttons and menus. For\nmore about using Git from the command line, see the Git Book.\nSuggested Reading: The Git Book.\nWhat the Activity Files Look Like\nHere is what to expect once you have successfully set up the activity\nfiles. You\u2019ll note that the widgets are inaccessible. Your job\nthroughout the activities will be to fix the accessibility of each\nwidget.\nSubmitting Coding Assignments and Using GitHub | 35 An interactive or media element has been excluded\nfrom this version of the text. You can view it online\nhere:\nhttps:\/\/pressbooks.library.ryerson.ca\/wafd\/?p=172\n36 | Submitting Coding Assignments and Using GitHub Activity 1: How to Submit\nAssignments\nHow to Submit Assignments\nIf you are submitting assignments, the first task is to get setup\nto submit them. This can be done through GitHub Pages\n(recommended), another public location on the Web, or on GitHack.\nRefer back to Using GitHub for details on setting up GitHub Pages.\nAlternatives to GitHub Pages\n\u2022 If you choose not to use GitHub Pages for your assignments,\nsubmit the URL to the index.html file of your copy of the\nactivity files at an alternate location where you have set up\nyour files.\n\u2022 Or, submit the URL to the index.html file of your GitHub\nrepository generated through raw.githack.com.\nActivity 1: How to Submit\nAssignments | 37 Requirements\nIf you are taking a moderated course, your instructor will provide\ninformation on how and where to submit the URLs to your various\nassignment submissions.\nGrading Rubric\nCriteria Points\nURL to Course Files:\n10.0\nURL submitted to your copy of all the course files either in\npts\nGitHub Pages or on a web server of your choosing.\nTotal Points: 10.0\n38 | Activity 1: How to Submit Assignments Introduction to the jQuery\nPlugin\nThough we have chosen to focus around jQuery, much of what\nyou\u2019ll learn here will be applicable to JavaScript in general and to\nother JavaScript frameworks you may be using in your work. Much\nof the effort here will be on creating device independent code\n(works with keyboard and mouse) and using script to inject WAI-\nARIA into HTML as needed to dynamically manage roles, states, and\nproperties of various interactive widgets and applications you\u2019ll be\nintroduced to.\nThroughout the activities you will be building a jQuery-ARIA\nplugin. We will first provide some background in the first few units,\nthen introduce static WAI-ARIA, then move into building the plugin\nin Unit 4 and onward.\nAs you go through the activities you will be building pieces of the\nlibrary one widget at a time. At the end of the activities, when you\nhave submitted all of the assignments, we will provide you with a\nlink to the full library that you can continue to use and build upon.\nDisclaimer\nWhen creating the activities and building the jQuery plugin, we\nhave optimized plugin widgets to work with ChromeVox, the screen\nreader you\u2019ll be introduced to shortly. You may find some\ninconsistencies in functionality and presentation when using NVDA\nor JAWS (i.e., other screen readers). Compatibility or limitations\nacross screen readers will be discussed as they come up.\nIntroduction to the jQuery\nPlugin | 39 Other WAI-ARIA Libraries\nThough we\u2019ll focus on using the open source WAI-ARIA jQuery\nlibrary we have created for the activities here, there are a couple\nother resources you can review that provide similar capabilities.\nToolkit: jQuery UI Accessibility Enhancements. Developed by\nHans Hillen at the Paciello Group.\nToolkit: Accessible MooTools Widgets. Developed by\nFraunhofer as part of an AEGIS project (no longer available\nthrough the creator).\nThe above libraries have been pulled apart and set up as individual\ndemos. These demos can be found through The Chang School\u2019s\nDistance Education website, as part of a set of resources for a local\nworkshop run at the university.\nToolkit: WAI-ARIA Workshop Resources\nAnother great resource for WAI-ARIA code and examples is the\nW3C\u2019s WAI-ARIA Authoring Practices site. Within the\ndocumentation are many demonstrations of how WAI-ARIA can be\nused. We will typically follow the best practices recommended by\nW3C, though, we may vary from those on occasion when more\npractical solutions are possible. These variations will be\ndocumented in the code comments.\nToolkit:\n40 | Other WAI-ARIA Libraries \u2022 WAI-ARIA Authoring Practices 1.1\n\u2022 ARIA Techniques for WCAG 2.0\n\u2022 Using WAI-ARIA\nOther WAI-ARIA Libraries | 41 ChromeVox Screen Reader\nInstall and Setup\nWe introduce you to ChromeVox early on, so you\u2019ll have an\nopportunity to practice using the screen reader we will be using\nthroughout the activities. It will be a key tool in your toolkit that\nyou\u2019ll use to test your work, and it will be the tool the instructors\nuse when marking assignments.\nThough there are other more popular screen readers, like JAWS\nand NVDA to name a couple, for day-to-day screen reader testing,\nChromeVox (particularly the ChromeVox Plugin for the Chrome web\nbrowser) is our screen reader of choice because it is simple to install\nand configure, easy to use, free and open source, and works across\ncomputer platforms.\nAnother reason ChromeVox works well for accessibility testing is\nits good support for WAI-ARIA. WAI-ARIA is still a relatively new\ntechnology, and, as of mid-2018, it is still being supported\ninconsistently across available browsers and screen readers. When\ndeveloping for the Web, do use WAI-ARIA as it is intended to be\nused as documented in the WAI-ARIA specification and test it with\nChromeVox. You will still want to test with JAWS or perhaps NVDA\nfor production testing, as these are more likely to be used by blind\nusers. For the activities here, however, we will only be using\nChromeVox.\nWhile a relatively small number of screen reader users currently\nuse ChromeVox, it is a highly effective tool for developers when\ntesting web content. Also, ChromeVox is tailored to work with\nfeatures of Google Drive, so even for users of other screen readers,\nChromeVox may be preferable when working with Google Docs,\nSheets, and Slides, etc.\n42 | ChromeVox Screen Reader\nInstall and Setup Toolkit: Visit the Chrome store while using the Chrome web\nbrowser to install the ChromeVox screen reader. It will be a\nkey element of your Toolkit.\nHow to Set Up the ChromeVox Screen Reader\n1. Open the Chrome web browser (install Chrome, if needed).\n2. Type \u201cChromevox\u201d into Chrome\u2019s address bar, or into Google\nsearch.\n3. Follow the ChromeVox link to the Chrome Web Store (the first\nlink in the search results).\n4. Click the \u201cAdd to Chrome\u201d button.\n5. In the dialog box that opens, click \u201cAdd extension.\u201d\n6. Now installed, find the ChromeVox icon near the top right of\nChrome to review its options.\n7. In the Options, set the ChromeVox modifier key to Alt or Ctrl\nor both (referred to here as CVox).\n8. In the Options, choose your preferred voice from the Voices\nmenu.\n9. Done, turn ChromeVox on or off by pressing and holding the\nmodifier key then pressing the letter \u201cA\u201d twice (i.e., CVox + A +\nA).\nIf you would rather see ChromeVox installed, the video below\ndescribes how to install and begin using ChromeVox.\nVideo: Installing ChromeVox\nChromeVox Screen Reader Install and Setup | 43 A YouTube element has been excluded from this version of the\ntext. You can view it online here:\nhttps:\/\/pressbooks.library.ryerson.ca\/wafd\/?p=190\nChromeVox Testing and Associated Key\nCommands\nToolkit: Download the ChromeVox_Key_Commands file\n(Word), outlined in the table below, print it or keep it nearby\nwhen completing the first few activities.\nKey Point: Be sure you have the modifier key set in\n44 | ChromeVox Screen Reader Install and Setup ChromeVox Options, or you are going to have difficulty with\nthe activities.\n*The ChromeVox modifier key (i.e., Cvox) is set in Chrome\u2019s\nSettings > Extensions > ChromeVox > Options, typically set to\nAlt or Ctrl.\nKey Point: When you are navigating with ChromeVox, it will\nadd its own highlighting around elements when they receive\nfocus. Test for focus visibility (WCAG 2 Guideline 2.4.7) when\nChromeVox is not running. For a complete list of key\ncommands see the ChromeVox Options, accessible through\nthe ChromeVox button that gets added to Chrome in the top\nright corner of the browser during installation. Default\ncommands are listed and can be changed if needed.\nChromeVox Screen Reader Install and Setup | 45 Keyboard\nTask Task Description\nCommand\nToggle\nTo turn ChromeVox on or off without having\nChromeVox Cvox+A+A\nto go into the ChromeVox Settings\nOn\/Off\nStop\nStop ChromeVox from reading Ctrl\nReading\nWhen a web page loads, ChromeVox will\nread the element that takes focus on the\npage. Use the Cvox+Arrow keys to read Cvox+Up\nDefault\nthrough content. Listen to the spoken and Down\nReading\noutput and note any inconsistencies from Arrows\nwhat one might expect to hear based on\nwhat is visible on the screen.\nWhen a page has loaded, press the Tab key\nto navigate through operable elements of\nthe page like links and forms. Listen to the\noutput when these elements are in focus,\nTab and note any elements that are clickable but Tab, Shift +\nNavigation not focusable with the keyboard. Tab\nAlso listen for hidden elements such as\nbypass links or other elements that are not\nvisible but are read aloud by ChromeVox.\nStep through all the headings on a page.\nCvox+L+H\nNavigate Note whether all headings are announced as\nthen Up\/\nthrough expected. Note the heading level announced.\nDown\nHeadings Are they sequenced to create semantic\nArrows\nstructure (i.e., nested in the proper order)?\nCvox+L+;\nStep through the landmarks, key navigation\nNavigate (semi-colon)\npoints on a page. Are all areas of the page\nthrough then Up\/\ncontained in a landmarked region? Note any\nLandmarks Down\nmissing landmarks.\nArrows\nList the links and navigate through them Cvox+L+L\nusing the Arrow keys, listen for then Up\/\nList Links\nmeaningfulness, or listen for context when Down\nlinks are otherwise meaningless. Arrows\nNavigate to forms on a page, then press the Cvox+L+F\nNavigate\nTab or F keys to listen to each of the fields. then Up\/\nthrough\nAre fields announced effectively, including Down\nForms\nrequired fields? Arrows\n46 | ChromeVox Screen Reader Install and Setup Cvox+L+T\nthen Up\/\nDown\nNavigate to Tables on a page, press Enter to\nArrows then\ngo to a table, press Up\/Down Arrow keys to\nEnter to\nmove through cells in sequence (left to right,\nselect Table\nNavigate top to bottom), press Ctrl+Alt+Arrow to\nthrough move to adjacent cells, press Ctrl+Alt and 5\nCvox+Arrow\nTables on the number pad to list column and row\nto move\nheaders where applicable. Note whether\nwithin table\nheader cells are read or not. Are Fieldset\nCvox+TH\nlabels announced, where applicable?\nto\nannounce\nheaders\nChromeVox Screen Reader Install and Setup | 47 Activity 2: Set Up and Use\nChromeVox\nSet Up and Use ChromeVox\nKey Point:\n\u2022 If you are blind and use a screen reader other than\nChromeVox, complete the activity using your preferred\nscreen reader. Be sure to state the name of the screen\nreader you are using.\n\u2022 If you are not blind, regardless of whether you use\nanother screen reader to test accessibility for instance,\nplease use ChromeVox. What\u2019s important is how\nChromeVox interacts with the activity files you will be\nupdating in the activities.\nIn this activity, you will navigate through\na website using only a keyboard. Describe how the screen reader\nbehaves. For a challenge, navigate with your monitor turned off (or\ndarkened so you can\u2019t see what you are doing). The aim of this\n48 | Activity 2: Set Up and Use\nChromeVox exercise is to discover how WAI-ARIA is making elements on the\npage understandable by listening alone, and to introduce screen\nreader review into your website testing regimen.\nRefer back to ChromeVox Screen Reader Install and Setup and set\nup ChromeVox, if you have not already.\nRequirements\nOpen the Web Accessibility Auditing Showcase website.\nNavigate the homepage only with your monitor darkened and\nwithout using your mouse. Describe what the screen reader\nannounces as you pass through the following elements:\n\u2022 Left side menu\n\u2022 Carousel at the top of the content area of the page\n\u2022 Accordion on the right\n\u2022 Tab panel in the centre of the page\n\u2022 Landmarks present on the page (list them)\nAlso, answer the following questions:\n\u2022 Are you able to navigate effectively?\n\u2022 What difficulties did you experience, if any?\n\u2022 What could be improved, if anything, to make navigation more\neffective?\nActivity 2: Set Up and Use ChromeVox | 49 Grading Rubric\nCriteria Points\nGood descriptions provided for each element listed 5.0 pts\nThree questions answered effectively 5.0 pts\nTotal Points: 10.0\n50 | Activity 2: Set Up and Use ChromeVox WAI-ARIA and HTML 5\nWAI-ARIA was released as a complement to HTML5. Its main\npurpose is to give developers more freedom to build custom web\ncontent, web applications, and interface controls created with\nHTML, JavaScript, and Ajax. WAI-ARIA provides a framework for\nadding semantics that make it possible for assistive technology\nusers to understand and operate these custom elements.\nMost HTML has built-in semantics and does not generally need\nWAI-ARIA. However, when HTML is being used in a non-standard\nway, like making a button out of a <div>, then WAI-ARIA can be\nadded to that <div> to make it appear as a button to a screen\nreader by adding the following: Add the role of \u201cbutton\u201d\n(i.e., role=\"button\"), add a null tabindex value\n(i.e., tabindex=\"0\"), which makes it focusable, then define its\nstate using the aria-pressed attribute, which is updated with\nJavaScript when the button is pressed. In the case of an actual\n<button> element, these properties are all already defined, so\nthere is no need to use WAI-ARIA.\n<div role=\"button\" aria-pressed=\"false\" tabindex=\"0\">Press Me<\/div>\nThough WAI-ARIA is typically used with HTML5, it can also be used\nwith XHTML and HTML4. You may find, however, that HTML\nvalidators see WAI-ARIA as broken markup in older versions of\nHTML, but don\u2019t worry about that. Any WAI-ARIA related errors that\na validator might identify in older HTML can generally be ignored\n(assuming it has been used correctly). By now though, you should be\nusing HTML5. If you are retrofitting older code, then go ahead and\nadd WAI-ARIA to it. If you are developing something new, then go\nwith HTML5.\nWAI-ARIA and HTML 5 | 51 Self-Test 1\nComplete the following questions to test your understanding of\nsome key lessons in the Introduction and Unit 1.\nAn interactive or media element has been excluded\nfrom this version of the text. You can view it online\nhere:\nhttps:\/\/pressbooks.library.ryerson.ca\/wafd\/?p=205\n52 | Self-Test 1 2. INTRODUCTION TO\nWAI-ARIA\n2. Introduction to WAI-ARIA | 53  Objectives and Activities\nObjectives\nBy the end of this unit, you will be able\nto:\n\u2022 Explain how WAI-ARIA works\n\u2022 Distinguish between static vs. dynamic WAI-ARIA\n\u2022 Identify WAI-ARIA roles, states, and properties\n\u2022 Recognize browser and screen reader support for WAI-ARIA\n\u2022 Compare and contrast graceful degradation vs progressive\nenhancement\n\u2022 Outline the WAI-ARIA taxonomy\nActivities\n\u2022 WAI-ARIA Scavenger Hunt (Showcase)\nObjectives and Activities | 55 What is WAI-ARIA?\nW3C definition of WAI-ARIA\n\u201cWAI-ARIA provides a framework for adding attributes\nto identify features for user interaction, how they relate\nto each other, and their current state.\u201d\nSource: W3C\nWAI-ARIA provides web authors with the following:\n\u2022 Roles to describe the type of widget presented, such as\n\u201cmenu\u201d, \u201ctreeitem\u201d, \u201cslider\u201d, and \u201cprogressmeter\u201d\n\u2022 Roles to describe the structure of the web page, such as\nheadings, regions, and tables (grids)\n\u2022 Properties to describe the state widgets are in, such as\n\u201cchecked\u201d for a check box, or \u201chaspopup\u201d for a menu.\n\u2022 Properties to define live regions of a page that are likely to\nget updates (such as stock quotes), as well as an\ninterruption policy for those updates \u2014 for example,\ncritical updates may be presented in an alert dialog box\nand incidental updates occur within the page\n\u2022 Properties for drag-and-drop that describe drag sources\nand drop targets\n\u2022 A way to provide keyboard navigation for the web objects\nand events, such as those mentioned above\nSource: W3C\n56 | What is WAI-ARIA? Some elements of the framework can be used on their own to add\naccessibility to web content (e.g., landmarks). More often, they are\ncombined with scripting that is used to dynamically add or remove\nWAI-ARIA attributes depending on the context.\nWAI-ARIA provides semantics for custom widgets and web\napplications that can be understood by assistive technologies (ATs)\nand conveyed to users in a \u201chuman understandable\u201d form. For\nexample, HTML list markup might be used to create a navigation\nbar with menus and submenus. Without WAI-ARIA a screen reader\nwould simply recognize the navigation bar as a collection of nested\nlists. Adding WAI-ARIA menu attributes (e.g., menubar, menu,\nmenuitem, aria-haspopup, aria-expanded) can give the nested list\na whole new meaning, more easily understood as a means of\nnavigation than the list would be understood.\nW3C definition of semantics\n\u201cThe meaning of something as understood by a\nhuman, defined in a way that computers can process a\nrepresentation of an object, such as elements and\nattributes, and reliably represent the object in a way\nthat various humans will achieve a mutually consistent\nunderstanding of the object.\u201d\nSource: W3C\nThis definition of semantics in programming is much like the\ncommon definition of the word: \u201cthe meaning, or an interpretation\nof the meaning\u201d (dictionary.com). Semantics in the context of web\naccessibility refers to the defining of meaning as it applies to\nfunctional elements of web content, and how that functionality is\nconveyed to assistive technology users, especially, screen reader\nusers.\nWhat is WAI-ARIA? | 57 When and When Not to Use WAI-ARIA\nWAI-ARIA is supposed to be used when semantics are required to\nmake a web application or widget understandable. For example, if\nyou are using a <div> to create a checkbox, along with some\nscripting you can assign the WAI-ARIA role \u201ccheckbox\u201d to that\n<div> to make it appear as a checkbox.\nThat said though, when there is a native HTML element available,\nlike a checkbox, it is almost always better to use the native version\nthan creating your own. The native version will already have all\nthe associated semantics by default. Since the native versions are\nstandardized, they are more likely to be supported across browsers\nand assistive technologies.\nFor native HTML elements, it is not necessary to use WAI-ARIA.\nFor an HTML <form> element for instance, there is no need to\ninclude role=\"form\" with the element. There are a few\nexceptions to this rule, however. For some of the newer HTML5\nelements, like <nav> and <main> for instance, it does not hurt\nto include the WAI-ARIA equivalent role=\"navigation\" and\nrole=\"main\" in these elements for the time being, to\naccommodate some of the inconsistent support for these elements\nacross browsers and ATs. HTML validators will still give you\nwarnings about the redundant roles, but you can safely ignore these.\nYou should also be careful when using WAI-ARIA with HTML\nelements that already have semantics. For example, if you use <h3\nrole=\"button\">something<\/h3>, the semantics associated\nwith the heading will be overridden, thus, potentially breaking the\nstructure of a document. In a case like this, a better approach would\nbe to wrap the heading in a <div> then assign role=\"button\"\nto the <div> to preserve the structural semantics of the heading,\nas seen in the examples below.\n58 | What is WAI-ARIA? An interactive or media element has been excluded\nfrom this version of the text. You can view it online\nhere:\nhttps:\/\/pressbooks.library.ryerson.ca\/wafd\/?p=259\nWhat is WAI-ARIA? | 59 Roles, States, and Properties\nThe semantics described earlier are created by adding roles, states,\nand properties to HTML elements.\nRoles\nW3C definition of roles\n\u201cMain indicator of type. This semantic association\nallows tools to present and support interaction with the\nobject in a manner that is consistent with user\nexpectations about other objects of that type.\u201d\nSource: W3C\nExamples of roles include menu, alert, banner, tree, tabpanel,\ntextbox, and so on. Once assigned to an element, roles must not\nchange over time or with user input. If, for instance, you wanted\nto change from a \u201cmenubar\u201d while viewing in full screen mode to a\ntoggle \u201cmenu\u201d when viewed on a mobile device, the entire block of\nmarkup would change, rather than switching menubar for menu.\nRoles are categorized into six groupings. Here are the groups with\na few examples of each type:\n\u2022 Abstract role (not to be used by authors in content, the base\nfor the WAI-ARIA ontology)\n\u2022 Widget roles (e.g., button, link, menuitem)\n\u2022 Document structure roles (e.g., article, feed, list, table)\n60 | Roles, States, and Properties \u2022 Landmark roles (e.g., banner, navigation, main, complementary)\n\u2022 Live region roles (e.g., alert, log, timer)\n\u2022 Window roles (e.g., alertdialog, dialog)\nRoles are typically added to HTML elements using the role attribute\nas follows. In the example below, an unordered list is given a role\nof menubar. Typically, this is used when creating a horizontal\nnavigation bar across the top of a user interface. Each list item is\ngiven a role of menuitem.\nAn interactive or media element has been excluded\nfrom this version of the text. You can view it online\nhere:\nhttps:\/\/pressbooks.library.ryerson.ca\/wafd\/?p=267\nSuggested Reading: Here is the full list of roles in WAI-ARIA\n1.1.\nStates\nW3C definition of states\n\u201cA state is a dynamic property expressing\ncharacteristics of an object that may change in response\nto user action or automated processes. States do not\naffect the essential nature of the object, but represent\nRoles, States, and Properties | 61 data associated with the object or user interaction\npossibilities. See: clarification of states versus\nproperties.\u201d\nSource: W3C\nStates are used along with roles, typically, to define its functional\nstatus. States are much like properties, though they typically change\nwhile an application or widget is being used (e.g., aria-checked\nchanges between true and false). Properties typically do not change\n(e.g., aria-labelledby keeps the same value). States and\nproperties are all \u201caria-\u201d prefixed, unlike roles.\nHere are a few examples of states:\n\u2022 aria-busy\n\u2022 aria-checked\n\u2022 aria-expanded\n\u2022 aria-disabled\n\u2022 aria-hidden\nProperties\nW3C definition of properties\n\u201cAttributes that are essential to the nature of a\ngiven object, or that represent a data value associated\nwith the object. A change of a property may significantly\n62 | Roles, States, and Properties impact the meaning or presentation of an object.\nCertain properties (for example, aria-multiline) are less\nlikely to change than states, but note that the frequency\nof change difference is not a rule. A few properties, such\nas aria-activedescendant, aria-valuenow, and aria-\nvaluetext are expected to change often. See clarification\nof states versus properties.\u201d\nSource: W3C\nProperties, as mentioned above, are much like states in how they\nare used along with roles. However, unlike states that change,\nproperties tend to remain the same (though this is not a rule).\nIntuitively, you may notice the changing nature of states listed\nabove, and the static nature of properties listed below.\nHere are a few examples of properties:\n\u2022 aria-describedby\n\u2022 aria-atomic\n\u2022 aria-autocomplete\n\u2022 aria-colcount\n\u2022 aria-colspan\n\u2022 aria-controls\nSuggested Reading: See the WAI-ARIA Specification for a\nfull list of states and properties.\nRoles, States, and Properties | 63 Static vs. Dynamic\nWAI-ARIA\nEven if you don\u2019t use JavaScript, there is a good amount you can\ndo with static WAI-ARIA to improve the accessibility of a website or\nweb application. You may have already gathered from the discussion\nof states and properties that some WAI-ARIA can be written right\ninto the HTML of a web page (e.g., properties and landmarks).\nOthers need to be dynamically updated based on user input or\ncontext (e.g., states and some properties).\nSome of the static WAI-ARIA attributes you are likely to use are\nlisted below, with their descriptions from W3C.\nGlobal Static Properties\n\u2022 aria-describedby: Identifies the element (or elements) that\ndescribes the object.\n\u2022 aria-labelledby: Identifies the element (or elements) that labels\nthe current element.\n\u2022 aria-label: Defines a string value that labels the current\nelement.\n\u2022 aria-controls: Identifies the element (or elements) whose\ncontents or presence are controlled by the current element.\n\u2022 aria-owns: Identifies an element (or elements) in order to\ndefine a visual, functional, or contextual parent\/child\nrelationship between DOM elements where the DOM\nhierarchy cannot be used to represent the relationship.\n\u2022 aria-details: Identifies the element that provides a detailed,\nextended description for the object.\n64 | Static vs. Dynamic WAI-ARIA Below is an example of some of these attributes in action. Though\nthis example would need some scripting to handle the submenu\nopening and closing, and dynamically updating aria-expanded to\nfalse when the submenu is closed, and update the active element\nreferenced in aria-activedescendant, you can get an idea of\nthe semantics that are being applied to make the nested list\nannounce itself as a menu. Watch or listen to the screen reader\noutput in the video that follows the code box below to understand\nhow the WAI-ARIA attributes are read. Examine the code in the code\nbox to understand what WAI-ARIA is being used to produce that\noutput.\nStatic vs. Dynamic WAI-ARIA | 65 An interactive or media element has been excluded\nfrom this version of the text. You can view it online\nhere:\nhttps:\/\/pressbooks.library.ryerson.ca\/wafd\/?p=272\nHow Does the Above Markup Work?\n1. Navigating with the Tab key, focus first goes to the\n\"menu_container\" div, which is made keyboard focusable\nwith the tabindex=\"0\" attribute.\n66 | Static vs. Dynamic WAI-ARIA 2. There the screen reader reads the content of the \u201cchooser\u201d div,\nidentified by aria-details, describing what the menu is\nused for. This div is hidden from view but available to screen\nreaders. This div could be made visible to make it available for\neveryone.\n3. Next, the \u201cofferings\u201d UL receives focus, also made focusable\nwith tabindex=\"0\".\n4. There, the screen reader reads the content of the \u201cnavhowto\u201d\ndiv, identified by aria-describedby, explaining how to\nnavigate the menu. This div is hidden from view for most users.\n5. Next, using the Arrow keys as instructed by the \u201cnavhowto\u201d div,\nthe \u2018Home\u2019 menuitem takes focus, announcing \u201cmenubar\nexpanded with submenu, Home, menu\u201d. Probably a little more\nverbose in this case than it needs to be, but that\u2019s how\nChromeVox handles menu items.\n6. Using the Down Arrow key, focus is moved to the \u201cCourses\u201d\nmenu item, announcing \u201cCourses, menu expanded with\nsubmenu.\u201d The aria-haspopup attribute is what causes a\nscreen reader to announce a submenu.\naria-expanded=\"true\" causes the screen reader to\nannounce that the menu is expanded.\n7. Using the Down Arrow, focus moves into the submenu,\nannouncing \u201cMenu with two items, Economics, menuitem 1 of\ntwo.\u201d The submenu is announced as a menu of its own,\nidentified by adding role=\"menu\" to the UL containing the\ntwo submenu items.\n8. Finally, using the Down Arrow, the screen reader announces\n\u201cComputer Science, menuitem two of two.\u201d\nHere\u2019s a video that shows how ChromeVox would read out the menu\ndescribed above:\nVideo: Example Menu with WAI-ARIA (0:33)\nStatic vs. Dynamic WAI-ARIA | 67 A YouTube element has been excluded from this version of the\ntext. You can view it online here:\nhttps:\/\/pressbooks.library.ryerson.ca\/wafd\/?p=272\nMost of the WAI-ARIA elements described in the above series of\nsteps can be used statically by typing the attributes right into the\nHTML. The aria-activedescendant would typically be\ndynamically updated with script as the menuitems are selected.\nThe aria-expanded would also be updated dynamically\nswitching between true and false when the submenu is toggled\nopened or closed.\nHere are some more static WAI-ARIA attributes, which we\u2019ll look\nat in a little more detail later as you complete the activities.\nWidget Static Attributes\n\u2022 aria-haspopup: Indicates the availability and type of\n68 | Static vs. Dynamic WAI-ARIA interactive popup element, such as menu or dialog, that can be\ntriggered by an element.\n\u2022 aria-modal: Indicates whether an element is modal when\ndisplayed\n\u2022 aria-readonly: Indicates that the element is not editable but is\notherwise operable.\n\u2022 aria-required: Indicates that user input is required on the\nelement before a form may be submitted.\nLive Static Regions\n\u2022 aria-live: Indicates that an element will be updated and\ndescribes the types of updates the user agents, assistive\ntechnologies, and user can expect from the live region.\n\u2022 aria-atomic: Indicates whether assistive technologies will\npresent all, or only parts of, the changed region based on the\nchange notifications defined by the aria-relevant attribute.\n\u2022 aria-relevant: Indicates what notifications the user agent will\ntrigger when the accessibility tree within a live region is\nmodified.\nToolkit: For a full list of roles, see section 1 in the The ARIA\nRole Matrices.\nStatic vs. Dynamic WAI-ARIA | 69 Browser and Screen Reader\nSupport for WAI-ARIA\nBecause WAI-ARIA is relatively new, its support across browsers and\nassistive technologies is still somewhat inconsistent. That should\nnot, however, discourage you from using it. Be aware that\nworkarounds may be needed in some cases, at least for the short\nterm as browsers and assistive technologies progress to implement\nsupport for the full WAI-ARIA specification.\nFor now, it is advisable to test WAI-ARIA implementations across\nmultiple browsers and screen readers.\nLook over the following references and add them to your Toolkit.\nToolkit:\n\u2022 WAI-ARIA Screen Reader Compatibility (Dec 27, 2017)\nNote: This resource does not include ChromeVox.\n\u2022 WAI-ARIA Browser Compatibility\n\u2022 ARIA Alert Support\n\u2022 User Agent Support Notes for ARIA Techniques\n70 | Browser and Screen Reader\nSupport for WAI-ARIA Graceful Degradation vs.\nProgressive Enhancement\nGiven the range of support for WAI-ARIA across current screen\nreaders and browsers, strategies like graceful degradation and\nprogressive enhancement are useful for accommodating varying\nimplementations and ensuring that tools developed with WAI-ARIA\nare accessible regardless of support.\nDepending on your situation, one development method may be\npreferable over the other, though in general progressive\nenhancement is preferred over graceful degradation. That is,\ncreating base functionality that works for everyone is preferred,\nrather than providing enhancements when they are supported by\nthe browser and\/or assistive technology. Graceful degradation, on\nthe other hand, starts with the enhancement, then provides\nalternatives where the enhancements are not supported. While they\nmay sound equivalent, the latter typically requires less effort, even\nthough it is more of a Band-Aid solution to correct an\nincompatibility. The former takes a little more effort and is more\nabout providing enhancements when they are supported while\nalways providing a base functionality that works for everyone.\nDefinitions\nIn his article, \u201cGraceful degradation versus progressive\nenhancement,\u201d Christian Heilman provides some useful definitions\nthat help distinguish between the two methods:\nGraceful Degradation vs. Progressive\nEnhancement | 71 \u201cGraceful degradation \u2013 Providing an alternative\nversion of your functionality or making the user aware\nof shortcomings of a product as a safety measure to\nensure that the product is usable.\u201d\n\u201cProgressive enhancement \u2013 Starting with a baseline\nof usable functionality, then increasing the richness of\nthe user experience step by step by testing for support\nfor enhancements before applying them.\u201d\n\u201cDegrading gracefully means looking back whereas enhancing\nprogressively means looking forward whilst keeping your feet on\nfirm ground.\u201d\nSuggested Reading: These definitions come from: Graceful\ndegradation versus progressive enhancement (Christian\nHeilman, CC-BY NC-SA).\nWhen to Use Which Method with WAI-ARIA\nThough progressive enhancement and graceful degradation are\ndevelopment methods that might be followed on any web project,\nhere, we talk about them as they relate to the use of WAI-ARIA.\nSupport for WAI-ARIA is improving constantly, but there are still\nmany inconsistencies between browsers and assistive technologies.\nAnd there will still be those using older assistive technologies that\n72 | Graceful Degradation vs. Progressive Enhancement were around before WAI-ARIA support was added. Because assistive\ntechnologies tend to be expensive, users tend to upgrade less often,\nthus it is important to support technologies that may be five years\nold or somewhat older.\nBrowsers, on the other hand, are typically free, and readily\navailable. However, that does not necessarily mean developers can\nrely on users having the latest or even a current browser. It is\nnot uncommon, particularly in large organizations, to restrict\nemployees\u2019 ability to upgrade their own systems.\nA simple example of progressive enhancement (though it could\nalso be seen as graceful degradation) is in within\u2013web page\nnavigation for screen reader and keyboard-only users. Before the\nadvent of WAI-ARIA landmarks, the way to provide this within-\npage navigation was to provide bypass links, which would typically\nbe located at the top left of the page. These bypass links lead to\nstrategically placed anchors, often next to navigation elements and\nat the top of the main content area. These links are standard HTML\nand will work for everyone. WAI-ARIA landmarks are relatively new,\nthough support for them in current browsers and assistive\ntechnologies is good. But, given some users will be using older\ntechnologies, at least for the short term, it is advisable to provide\nlandmarks as an enhancement and continue using bypass links to\nensure there is always a way to navigate effectively through web\ncontent.\nSimilarly, when using the newer HTML elements that may not be\nsupported by current assistive technologies, it is a good idea to use\nredundant roles, at least in the short term. For example, <nav>\nand <main> are new HTML elements, which are supposed to be\nequivalent to the navigation and main WAI-ARIA roles. However, not\nall ATs support the new tags at present. Thus, it\u2019s advisable to use\nredundant roles with these elements, as seen in the markup below,\neven though HTML validators will flag them as a warning.\nGraceful Degradation vs. Progressive Enhancement | 73 An interactive or media element has been excluded\nfrom this version of the text. You can view it online\nhere:\nhttps:\/\/pressbooks.library.ryerson.ca\/wafd\/?p=275\n74 | Graceful Degradation vs. Progressive Enhancement Validating WAI-ARIA\nThere are a number of tools that can be used to validate WAI-ARIA\nto ensure it is being used correctly. Watch the following video for a\nquick look at WAI-ARIA validation with Lighthouse and aXe. Install\nthese tools in your browser, so you have them available for testing\nas you complete the activities in the coming units.\nVideo: WAI-ARIA Validation\nA YouTube element has been excluded from this version of the\ntext. You can view it online here:\nhttps:\/\/pressbooks.library.ryerson.ca\/wafd\/?p=281\nToolkit:\nValidating WAI-ARIA | 75 Web-Based Validator\n\u2022 W3C HTML Validator (validates WAI-ARIA as part of\nHTML5)\nChrome\n\u2022 Chrome Developer Tools (comes with Chrome)\n\u2022 Lighthouse (extends Chrome Developer Tools with an\nAudit tab)\n\u2022 ARIA Validator\n\u2022 aXe (for Chrome)\nFirefox\n\u2022 aXe (for Firefox)\n76 | Validating WAI-ARIA WAI-ARIA Taxonomy\nIn addition to the full list of WAI-ARIA attributes in the specification,\nthe visual presentation of that list in the WAI-ARIA taxonomy can be\nhelpful in understanding the relationships between elements. This\nimage can also help those who are visual learners to see how WAI-\nARIA is organized. Click on the thumbnail below to open the full\nvisual taxonomy.\nFigure: WAI-\nARIA\ntaxonomy\nthumbnail.\nClick to open\nfull-sized\nimage.\nAlso, see the SVG version of the WAI-ARIA taxonomy\nA UML-XMLversion and an RDF version are also available to\nimport into systems that support those formats.\nSuggested Reading: A representation or the WAI-ARIA\ntaxonomy as a cheat sheet.\nWAI-ARIA Taxonomy | 77 Activity 3: WAI-ARIA\nScavenger Hunt\nWAI-ARIA Scavenger Hunt\nThe overall goal of the instruction here is to provide the tools and\nknowledge needed to make web interactivity accessible to screen\nreader users. In this activity, you will use ChromeVox and code\nreview to identify WAI-ARIA used throughout the Web Accessibility\nAuditing Showcase home page.\nRequirements\nAlthough we have only touched on the details of WAI-ARIA, in this\nactivity, you will be spending some time examining the homepage\nof the Web Accessibility Auditing Showcase website. Use a\ncombination of the following to determine how the WAI-ARIA\nelements are being used:\n\u2022 Test with ChromeVox to hear what WAI-ARIA sounds like with\na screen reader.\n\u2022 Review the source code.\n78 | Activity 3: WAI-ARIA Scavenger\nHunt For full marks on this activity, list at least five static and five\ndynamic WAI-ARIA enabled elements in your answer. Include a brief\ndescription for each. Here\u2019s a few made-up examples of what you\nmight report in your findings:\n\u2022 aria-describedby: used in the outer div of the side menu,\nto announce instructions on how the side menu works with a\nkeyboard\n\u2022 tabindex=\"0\": used to give keyboard access to the custom\nbuttons in the User Survey\n\u2022 role=\"menu\": used to make the main navigation list appear\nas a menu to screen readers\nFinally, here is the Web Accessibility Auditing Showcase website.\nReview only the home page.\nKey Point: There is static and dynamic WAI-ARIA used in this\npage. You may View Source to find any static WAI-ARIA being\nused. Use your browser\u2019s Inspect tool to find dynamic WAI-\nARIA. Interact with the site to produce changes to the\ndynamic WAI-ARIA, and note those changes.\nNote: Not all ARIA-related markup starts with the \u201caria-\u201d prefix.\nScan through the WAI-ARIA documentation introduced in this unit\nfor a listing of all potential WAI-ARIA markup you might come\nacross. Also, not all accessibility enhancements are WAI-ARIA. For\nexample, alt is an accessibility feature of the HTML img element.\nYou can mention these other accessibility features; however, they\nwill not count toward your mark on this activity.\nActivity 3: WAI-ARIA Scavenger Hunt | 79 Grading Rubric\nCriteria Points\nAt least five instances of static WAI-ARIA being used in the page 5.0\nare listed. pts\nAt least five instances of dynamic WAI-ARIA being used in the 5.0\npage are listed. pts\nTotal Points: 10.0\n80 | Activity 3: WAI-ARIA Scavenger Hunt Self-Test 2\nAnswer the following questions to test your understanding of key\nlessons in this unit.\nAn interactive or media element has been excluded\nfrom this version of the text. You can view it online\nhere:\nhttps:\/\/pressbooks.library.ryerson.ca\/wafd\/?p=289\nSelf-Test 2 | 81  3. BASIC WAI-ARIA\n3. Basic WAI-ARIA | 83  Objectives and Activities\nObjectives\nBy the end of this unit, you will be able to:\n\u2022 Identify WAI-ARIA landmarks\n\u2022 Describe common static roles\n\u2022 Create accessible alerts and feedback\n\u2022 Use WAI-ARIA to add keyboard access\n\u2022 Identify when and where to use WAI-ARIA application and\npresentation roles\n\u2022 Use live regions for live updating information\nActivities\n\u2022 Update the landmarks activity file with appropriate landmarks\n\u2022 Provide live alerts for screen readers when feedback or error\nmessages are presented\nObjectives and Activities | 85 WAI-ARIA Landmarks\nWAI-ARIA landmarks are used to define regions on a web page.\nThey provide a means for assistive technology users to effectively\nnavigate the various areas of a page. WAI-ARIA landmarks should be\nused with other means of within-page navigation, such as bypass\nlinks and page headings. These two latter means of navigating have\nbeen around for much longer, and many will continue to use these\nelements as their primary method of moving around within a web\npage.\nThere are eight landmark roles.\nFollow the links below to read about each type of landmark:\n\u2022 banner\n\u2022 complementary\n\u2022 contentinfo\n\u2022 form\n\u2022 main\n\u2022 navigation\n\u2022 region\n\u2022 search\nIn the following short video, you will see how ChromeVox interacts\nwith landmarked regions for the next activity coming up in this unit.\nUse it as a model for implementing your own landmarks. Aim to have\nyour activity submission operate the same as it does in the video.\nVideo: WAI-ARIA Landmarks Demo (1:07)\n86 | WAI-ARIA Landmarks A YouTube element has been excluded from this version of the\ntext. You can view it online here:\nhttps:\/\/pressbooks.library.ryerson.ca\/wafd\/?p=303\nTo help visualize landmarked regions, the figure below presents\nwell-defined areas on the page, each of which serves a different\npurpose. Banner areas, the element that contains the content of\neach banner region, would be assigned role=\"banner\". The\nmenu on the left would have its container assigned\nrole=\"navigation\", as would other navigation bars or menus if\nthey were present. The main content area, assigned role=\"main\",\nis where the primary content of the page appears. There should only\nbe one main region. The region on the right containing secondary\ninformation, assigned role=\"complementary\", is where you\nmight find advertising or related resources. And, finally, the\ncontainer around the footer area would be assigned\nrole=\"contentinfo\". This is where details such as copyright, a\nprivacy statement, contact information, etc., would be located.\nWebsites may be laid out in a multitude of ways; this particular\nWAI-ARIA Landmarks | 87 layout is just an example. The landmarks assigned to any given\nregion should reflect the function of that particular region,\nregardless of where it might appear on the page. If advertising were\nspread across a region at the bottom of the page, for example, then\nthat region would be assigned role=\"complementary\".\nExample of landmarked regions of a web page:\nCustom Regions\nWhile most of the landmarks are relatively self-explanatory in terms\nof what they should contain, role=\"region\" needs some\nexplanation. This landmark role can be used to contain specific\ninformation that is not effectively described by one of the other\n88 | WAI-ARIA Landmarks landmark roles and is important enough that a user might want to\nnavigate directly to that area of the page. When it is used, it must\nbe accompanied by aria-label or aria-labelledby if there is\nan existing element on the page that describes the region (such as a\nheading).\nFor example, you may want to define a specific area on each\npage where contact information or a contact form is located. The\nfollowing markup might be used to define a \u201ccontact region.\u201d\nAn interactive or media element has been excluded\nfrom this version of the text. You can view it online\nhere:\nhttps:\/\/pressbooks.library.ryerson.ca\/wafd\/?p=303\nOther Considerations When Using Landmarks\n\u2022 The whole page defined in regions: When landmarks are used,\nit is considered best practice to contain all information\npresented on a page within a region, so no information is\norphaned outside the defined regions.\n\u2022 Duplicate roles: For landmarks that may be used for multiple\nregions, such as role=\"navigation\", these regions should\nbe distinguished from one another. For instance, use aria-\nlabel or aria-labelledby to describe a \u201cmain\nnavigation\u201d bar and a \u201ccontent menu.\u201d Both are considered\nnavigation features, even though they serve different purposes.\nSuggested Reading:\nWAI-ARIA Landmarks | 89 \u2022 Using ARIA landmarks to identify regions of a page\n\u2022 Page Regions (WAI Web Accessibility Tutorials)\n\u2022 ARIA Landmarks Example\n90 | WAI-ARIA Landmarks Common Static WAI-ARIA\nMuch of the WAI-ARIA introduced so far is static. That is, it can\nbe written directly into HTML elements as attributes, their values\ntypically do not change, and they do not require scripting to control\ntheir behaviour. Landmarks and roles, for example, are all static.\nAnyone who knows how to read and write HTML can make use of\nthese attributes by simply adding them to HTML elements. WAI-\nARIA properties are also typically static, though not always.\nAs discussed earlier, static WAI-ARIA often consists of properties\ngiven to define specific characteristics of an HTML element that\nhas a particular functional role. For example, a nested list may be\ndefined as a menu using role=\"menubar\" to define the top-level\nlist and role=\"menu\" to define sublists.\nList items in the top-level list that have a nested sublist would\nbe given the attribute aria-haspopup=\"true\" (or aria-\nhaspopup=\"menu\"). Thus, when encountered by assistive\ntechnology, a list item with this attribute will announce that a\nsubmenu is present (e.g., \u201cmenu with submenu\u201d when using\nChromeVox).\nTry This: Using ChromeVox, navigate through the menu bar\nwidget example below, created by Hans Hillen at the Paciello\nGroup, to hear how submenus are announced. Open this\ndemo in a new window.\nFrequently Used WAI-ARIA Attributes\nYou have already been introduced to a few static attributes. Those\nand a handful of others you are likely to use regularly are listed\nCommon Static WAI-ARIA | 91 here. This is not a full list. Follow the links and read through their\ndescriptions.\n\u2022 aria-describedby\n\u2022 aria-labelledby\n\u2022 aria-label\n\u2022 aria-required\n\u2022 aria-controls\n\u2022 aria-details\n\u2022 aria-haspopup\n\u2022 aria-live\n\u2022 aria-owns\n\u2022 aria-relevant\n\u2022 aria-roledescription\n92 | Common Static WAI-ARIA WAI-ARIA Alert and\nMessage Dialogs\nProviding feedback after a user completes an action is a critical\naccessibility feature. Feedback can be an error message when\nsomething has gone wrong. Additionally, it can be a confirmation\nor warning, after which a user has to make a decision before\nproceeding. Or, it could be completion feedback that is presented\nafter a particular action has occurred to indicate it was successful.\nThe latter is often overlooked by developers. However, for people\nusing a screen reader, notification that an action was successful\ncan be as important as providing error messages. When completion\nfeedback is provided, screen reader users do not need to search\nthrough the content of the screen to be sure the action they just\ncompleted was successful \u2014 the process can be quite time-\nconsuming.\nIn each type of feedback, it is critical that messages be easy\nto access. The best strategy for making feedback accessible is to\nuse the WAI-ARIA alert or alert-dialog roles. These are both types\nof live regions. When the content of the container element with\nrole=\"alert\" changes, the content that appears is automatically\nread aloud by screen readers. A WAI-ARIA alert has an implicit\naria-live=\"assertive\" and aria-atomic=\"true\" (to be\ncovered in more detail in the section on live regions). This means\nthat, when the message appears, it will interrupt whatever the\nscreen reader is in the middle of reading, and the entire content of\nthe element will be read, as opposed to just the new content added\n(i.e., aria-atomic=\"false\").\nTry This: In the following example of a WAI-ARIA alert, start\nChromeVox, then press the \u201cSay Something\u201d button to hear\nWAI-ARIA Alert and Message\nDialogs | 93 how ChromeVox handles the message that appears. Examine\nthe script and HTML below to see how it was done.\nAn interactive or media element has been excluded\nfrom this version of the text. You can view it online\nhere:\nhttps:\/\/pressbooks.library.ryerson.ca\/wafd\/?p=308\nAn interactive or media element has been excluded\nfrom this version of the text. You can view it online\nhere:\nhttps:\/\/pressbooks.library.ryerson.ca\/wafd\/?p=308\nalert vs. alertdialog\nError, warning, and completion feedback will typically be created\nwith role=\"alert\", while confirmation feedback will often use\nrole=\"alertdialog\". Use role=\"alert\" when no user input\n94 | WAI-ARIA Alert and Message Dialogs is needed. Use role=\"alertdialog\" when user input is\nexpected, with focus sent to the dialog. At least one element in the\ndialog must be focusable when using role=\"alertdialog\".\nWatch and listen to the following video to understand how\nChromeVox handles WAI-ARIA alerts.\nVideo: WAI-ARIA Alerts (1:09)\nA YouTube element has been excluded from this version of the\ntext. You can view it online here:\nhttps:\/\/pressbooks.library.ryerson.ca\/wafd\/?p=308\nSuggested Reading: Using ARIA role=\u201dalert\u201d or Live Regions\nto Identify Errors\nWAI-ARIA Alert and Message Dialogs | 95 Modal Dialogs\nModal dialogs interrupt users and require an action. They are\nappropriate when users\u2019 attention needs to be directed toward\nimportant information.\nModal dialogs are defined using role=\"alertdialog\" and\naria-modal=\"true\". Be aware what WAI-ARIA is used for\nmodals, and be aware that when a modal dialog is displayed, focus\nmust be sent to the dialog, and it must remain in the dialog until\nwhatever interaction is complete (e.g., clicking the confirmation\nbutton) and the dialog closes. When the dialog closes, focus must be\nreturned to the location from where the dialog was opened.\nDialogs\nDialogs are used like modal dialogs are, except it is still possible to\ninteract with the other content of the page. These are defined using\nrole=\"dialog\".\nSuggested Reading:\n\u2022 Using the Dialog Role (Mozilla)\n\u2022 Modal and Nonmodal Dialogs: When (and When Not) to\nUse Them\n96 | WAI-ARIA Alert and Message Dialogs Using Tabindex\nAs you may know, the HTML tabindex attribute is a way to order\nthe path the cursor takes as users use the Tab key to navigate\nthrough a website or web application. In general, however, you want\nto avoid using tabindex in this way, particularly when it disrupts the\ndefault tab order, which may end up creating confusion when the\ncursor does not follow an expected path (i.e., left to right, top to\nbottom). That\u2019s not to say don\u2019t ever use them, but be careful.\nWith HTML5 and the introduction of WAI-ARIA, tabindex=\"0\"\nis added to make it possible for developers to add keyboard\naccessibility to an element that would not normally have keyboard\nfunctionality. For example, it might be used to make a <div>\nfocusable. Likewise, tabindex=\"-1\" is added to remove keyboard\naccessibility from an element. The two are likely to be used with\nscripting to dynamically add and remove keyboard access to\nelements when focus needs to be strategically placed within a\nwidget or web application. When the tabindex attribute is used\nin this way, it is referred to as a roving tabindex.\nTry This: Take a look at the tab panels throughout the\nShowcase site to see how the tabs in the tabpanels toggle\nbetween values \u201c-1\u201d and \u201c0\u201d to control which tab has focus,\nusing your browser\u2019s Inspect feature. This demo works better\non a wide screen, before responsiveness kicks in. Either\nreduce the zoom level, or drag your browser window wider\nuntil the menu appears at the side, instead of above the\ncontent.\nOpen demo in a new window.\nYou can also use tabindex=\"0\" in a static way when context is\nneeded to describe how to use a menu, for instance. A <div> can\nUsing Tabindex | 97 be wrapped around the menu, given tabindex=\"0\" to make it\nfocusable, so, when a user navigates to the <div>, it announces\ninstructions for using the keyboard to navigate within the menu.\nThe following example demonstrates using tabindex, along with\naria-label, to provide context information. If you navigate\nthrough the Showcase site above with ChromeVox, you\u2019ll notice this\nstrategy with the side menu, announcing how to operate the menu\nwith a keyboard.\nAn interactive or media element has been excluded\nfrom this version of the text. You can view it online\nhere:\nhttps:\/\/pressbooks.library.ryerson.ca\/wafd\/?p=310\n98 | Using Tabindex Keyboard Interaction\nKeyboard access is perhaps the most important accessibility feature\nthat can go into a website, widget, or web application. However, it is\noften overlooked by developers, who are typically mouse users and\nmay not have keyboard usability as a part of their testing regimen.\nPeople who are blind are typically unable to use a mouse, so any\nfeature that relies on a mouse alone to function will likely be\ninaccessible to them. Fortunately, it is relatively easy to include\nkeyboard access. It\u2019s more a matter of remembering to add it when\nmouse access is added.\nThe following is a simple example of including both mouse and\nkeyboard events when defining interaction for a widget or web\napplication. Examine the JavaScript to see how mouse and keyboard\nevents are handled, then under the Result tab, try operating the\nbutton with a keyboard and mouse while using ChromeVox. How\nyou go about implementing both mouse and keyboard doesn\u2019t really\nmatter, as long as it is possible to interact with both.\nYou may notice some inconsistencies in ChromeVox support for\nthe live region used to present the messages in the example, more\nspecifically the aria-atomic attribute. Live regions will be\ncovered more thoroughly later in this unit.\nKeyboard Interaction | 99 An interactive or media element has been excluded\nfrom this version of the text. You can view it online\nhere:\nhttps:\/\/pressbooks.library.ryerson.ca\/wafd\/?p=312\nPredictability, Consistency, and Convention\nHere we will introduce the basics of keyboard interaction, and we\u2019ll\ngo into greater detail when we start looking more closely at\nparticular widgets and design patterns as they are introduced in the\nunits that follow.\nAs the heading for this section suggests, keyboard interaction\nneeds to be predictable, consistent, and should follow convention.\nThat is, users should have a good idea of the path that the focus\nwill follow (predictable). When navigating with the Tab key, that\npath should be the same throughout an application or website\n(consistent). Finally, it should be like it is in other applications,\nwebsites, or operating systems (convention).\n100 | Keyboard Interaction Suggested Reading: Developing a Keyboard Interface\nTake for example a combo box (aka, a select menu). Regardless of\nthe operating system being used, combo boxes work the same way.\nIf you are developing a widget out of divs that function like a combo\nbox, it should operate like a standard HTML combo box.\nConventional keyboard interaction for a combo box:\n\u2022 Tab to navigate into the combo box\n\u2022 While in focus, tab to navigate beyond the combo box\n\u2022 While in focus, Shift + Tab to navigate before the combo box\n\u2022 While in focus, Down Arrow to show next option\n\u2022 While in focus, Up Arrow to show previous option\n\u2022 While in focus, Alt + Down Arrow to display options list\n\u2022 While options list is open, Alt + Up Arrow to close the options\nlist\n\u2022 While options list is open, Esc to close the options list and\nreturn to default state\n\u2022 While an option is in focus, Enter to select that option\nWhen developing a custom combobox \u2014 typically, a text box and\nlist of options \u2014 a grid, a tree, or a dialog are combined into a\nfunctional unit that should operate like a standard HTML select\nmenu. Functionality in addition to that described above may be\nadded to the custom combobox, e.g., to add autocompletion. As\nthe user types letters into the text box, options beginning with the\nstring type are displayed below as a list or the first option with\nthose letters is displayed inline in the text box.\nTry This: Using your keyboard, try the keyboard interactions\ndescribed above to confirm whether or not the combobox\nfunctions in a conventional way. Try it with a few different\nKeyboard Interaction | 101 browsers and notice any variations in how different browsers\nhandle combobox interaction.\nAn interactive or media element has been\nexcluded from this version of the text. You can\nview it online here:\nhttps:\/\/pressbooks.library.ryerson.ca\/wafd\/?p=312\nSuggested Reading: For detailed discussion of combobox\ndesign patterns, see: WAI-ARIA Authoring Practices 1.1\n(Combo Boxes)\nToolkit: For a list of design patterns, and keyboard interaction\nconventions, review the following widget development best\npractices. Scan for now. They will be covered more\nthoroughly in later units.\n\u2022 Combobox\n\u2022 Grid\n\u2022 Listbox\n\u2022 Menu or menu bar\n\u2022 Radiogroup\n\u2022 Tabs\n\u2022 Toolbar\n\u2022 Tree View\n102 | Keyboard Interaction Application and Presentation\nRoles\nThe application and presentation roles in WAI-ARIA change the way\nassistive technologies interact with web content. Both have \u201cuse\nwith caution\u201d warnings. Their use and where and when to use them\nare described here.\nApplication Role\nThe application role is used when there is not a corresponding\nwidget interaction pattern available to provide semantics for a\ncustom widget.\nImagine, for instance, a file manager application embedded in a\nweb page, which does not have widget roles specifically defined. It\nmay have many of the functions a typical file manager might have on\na Windows, Mac, or Linux system. It might have the typical File, Edit,\nand View menus that most applications have, including browsers.\nThose menus in the file manager should function like these same\nmenus in other applications. When the application role is used in\na container containing the embedded file manager, keystrokes are\nintercepted and repurposed to operate the file manager, instead of\nthe browser and the assistive technology.\nWhen in the file manager application, this behaviour may be\ndesirable. But, defined with the application role, all of the standard\nscreen reader shortcut keys are also disabled, so the user is no\nlonger able to navigate the pages by headings, or landmarks, for\ninstance, while inside the application. This may be fine in such a\ncase because the screen reader user will likely temporarily want\nApplication and Presentation\nRoles | 103 shortcut keys to file manager functions, and not those of the\nbrowser or screen reader.\nIf, however, the application role is used to contain a carousel\nwidget, for example, then browser and assistive technology\nfunctionality may be unnecessarily disabled, potentially creating\nbarriers. A carousel widget typically has limited functionality. For\nexample, carousels may contain scripted Arrow keys to move back\nand forth between slides, between headings within each slide for\nadded structure, or link to another section of the site presented in a\nslide. In such cases, screen reader users would be unable to navigate\nthrough the slides by listing headings or links, using their screen\nreader\u2019s default heading and link list functionality. By removing the\napplication role, the scripted next\/previous link, as well as the\nheading and the links could be used to navigate the carousel.\nThe bottom line is to use the application role carefully. Be sure it\nis not creating more barriers than it is intended to prevent.\nPresentation Role\nMuch like the application role disables default keyboard\nfunctionality, the presentation role (and its synonym\nrole=\"none\"), theoretically, removes the default semantics from\nchildren of the element it applies to.\nSo, for instance, if you have a list with role=\"presentation\",\nit should not announce as a list, and its list items should not\nannounce as list items. However, nested lists within those\nsuppressed list items will announce as usual.\nThere are a couple of intended exceptions where the presentation\nrole will not remove default semantics:\n\u2022 When role=\"presentation\" is not applied to elements\nthat have tab focus, such as links, form elements, and elements\nthat have tabindex defined, or\n104 | Application and Presentation Roles \u2022 Where an element has been modified with any of the 21 global\nstates or properties\nWhere role=\"presentation\" is applied to a parent element,\nall of its child elements should inherit that role, but not all of its\ngrandchildren. For example, if <ul role=\"presentation\"> is\nused then the semantics for each of its <li> elements will be\nignored. But, if an <li> contains a sublist, that list would be\nannounced as usual.\nIt should be noted that current support for the presentation role\nis spotty across browsers and assistive technologies, and you are\nlikely to find it not all that useful if you\u2019re trying to develop with\ncross browser compatibility. Typically, tables, images, and headings\nare affected by the presentation role, while other elements like\nlists, forms, and links are not, or only partially affected. If you are\ntrying to hide elements completely from screen readers, you might\nconsider using either aria-hidden or CSS display:none.\nThree common uses for role=\"presentation\" include:\n1. Hiding a decorative image. It is equivalent to giving the image\nnull alt text.\n2. Suppressing table semantics for tables used for layout in\ncircumstances where the table semantics do not convey\nmeaningful relationships.\n3. Eliminating semantics of intervening orphan elements in the\nstructure of a composite widget, such as a tablist, menu, or\ntree as demonstrated in the example above.\nSource: WAI-ARIA Authoring Best Practices\nThere are also a number of WAI-ARIA roles that act like the\npresentation role, and these suppress the default semantics for the\nelements to which they are applied. For instance, if a tablist\nis created from a <ul>, and role=\"tab\" is applied to each of\nthe list items within that <ul>, their default listitem role will\nApplication and Presentation Roles | 105 be replaced with the tab role, without the need to set them as\npresentational.\nThe following JSFiddle examples have been created for cross\nbrowser testing of the presentation role. Navigate through each\nexample with ChromeVox + Chrome. If you have them available, also\nnavigate them with JAWS + IE and NVDA + FF to understand the\nvaried support for the presentation role. Below, the fiddle is a listing\nof support for current versions of these screen readers.\n106 | Application and Presentation Roles An interactive or media element has been excluded\nfrom this version of the text. You can view it online\nhere:\nhttps:\/\/pressbooks.library.ryerson.ca\/wafd\/?p=314\nApplication and Presentation Roles | 107 Screen Reader Output from the Above Demo\nNVDA (2018.1.1) + Edge (41.16299.248.0)\nBy keyboard, only the link is announced. Mouseover, though, and all\nelements are announced.\n\u2022 Link: not announced\n\u2022 List: not announced or keyboard focusable\n\u2022 Headings: not announced or keyboard focusable\n\u2022 Table: not announced or keyboard focusable\n\u2022 Image: not announced or keyboard focusable\n\u2022 Form: \u201cCombo box opt three collapsed\u201d\nNVDA (2018.1.1) + FireFox (59.0.2)\n\u2022 Link: announces as usual\n\u2022 List: values announced but not bullets or the list itself\n\u2022 Headings: announce as usual\n\u2022 Table: not announced.\n\u2022 Image: not announced\n\u2022 Form: announces opts but not the combobox\nJAWS (18) + Edge (41.16299.248.0)\n\u2022 Link: focusable, but not announced\n\u2022 List: not focusable, not announced\n\u2022 Headings: does not announce first heading, but does announce\nsecond heading\n\u2022 Table: not announced\n\u2022 Image: not announced\n108 | Application and Presentation Roles \u2022 Form: not focusable, not announced\nChromeVox (53.0.2784.5)\n\u2022 Link: focusable, but not read (using Tab key) Announces as\nusual when using CVOX + Arrows\n\u2022 List: Skips over list (using Arrow key) except when link receives\nfocus first, then Arrow key announces the numbers in the list.\nAnnounces numbers but not as a list when using CVOX +\nArrows\n\u2022 Headings: Does not announce the first heading, but does\nannounce the second (Arrows and CVOX+Arrows)\n\u2022 Table: not announced.\n\u2022 Image: reads alt text \u201cRyerson Chang School\u201d both Arrow and\nCVOX + Arrow\n\u2022 Form: focusable, not announced (using Tab key), Arrow keys\nannounces \u201cCombobox. Opt 3, 3 of 3.\u201d\nSuggested Reading:\n\u2022 WAI-ARIA Presentation Role\n\u2022 PowerMapper: Screen Reader Compatibility (Updated\nDec 2017)\n\u2022 Mozilla: ARIA Test Cases\nApplication and Presentation Roles | 109 Live Regions\nLive regions are used to present changes in web content that occur\nafter a web page has loaded. Typical uses include presenting news\nfeeds, feedback and error messages, or live chat output to screen\nreaders, which would otherwise not know about this content\nchanging or being added to a web page already rendered. Live\nregions can also be used to announce feedback and error messages\nwhen a page loads, so screen reader users do not need to search\nthrough a web page to find feedback. It reads automatically when a\npage finishes loading.\nTypes of Live Regions\nA typical live region can be created by adding aria-\nlive=\"polite\" to any element in which content is updated after\na web page has loaded. The \u201cpolite\u201d value indicates the priority\nof the content being updated. In this case, a screen reader will\nwait for a break in its audio output before announcing the change\nthat occurred. You may also use aria-live=\"assertive\" to\ninterrupt whatever the screen reader is reading, and instead read\nthe changed content before continuing. Typically, \u201cassertive\u201d should\nbe avoided. Only use it in cases where critical information is being\nupdated, such as an error message or critical feedback.\nNormally, aria-live would not be used to present feedback\nor error messages, though it is possible. Instead role=\"alert\",\nintroduced earlier, would be used. Using role=\"alert\" creates\nan assertive live region that interrupts a screen reader to present\nits content. They can be used within rendered content to present\nmessages without reloading the page, or they can be used after a\npage loads, to present the message before any of the other content\non the page is read.\n110 | Live Regions In addition to the commonly used role=\"alert\", there are\nother less commonly used roles that also act as live regions. These\nare:\n\u2022 role=\u201dlog\u201d\n\u2022 role=\u201dmarquee\u201d\n\u2022 role=\u201dtimer\u201d\n\u2022 role=\u201dstatus\u201d\nHere is the full list of live region attributes:\n\u2022 aria-live: polite, assertive, off\n\u2022 aria-relevant: additions, removals, text, all\n\u2022 aria-atomic: true, false\n\u2022 aria-busy: true, false\n\u2022 role=\u201dalert\u201d\n\u2022 role=\u201dlog\u201d\n\u2022 role=\u201dmarquee\u201d\n\u2022 role=\u201dtimer\u201d\n\u2022 role=\u201dstatus\u201d\nSuggested Reading: More details on these other Live Region\nRoles can be found in the WAI-ARIA 1.1 specification.\nCare When Using Live Regions\nThere are a few cases where using a live region (aria-live) to\nread changing content can create a barrier. Take, for instance, a\ncarousel that presents a series of panels that rotate at a particular\nfrequency. It can be helpful to set up a carousel as a live region, so\nas each panel slides into view, a screen reader reads the content.\nHowever, this behaviour could present a barrier, interfering with the\nLive Regions | 111 screen reader when it is focused elsewhere, reading other content\non the page. If a live region is used with a carousel, it should only\nbe active when the carousel has focus. While typically a live region\nis created as a static WAI-ARIA attribute, in this case, it should be\ndynamically added on focus and dynamically removed on blur.\nFor carousels, it is also important to consider the rate at which\npanels rotate, ensuring that screen readers have enough time to\nread the content of the panel before rotating on to the next. This\ntiming can be difficult to predict. It depends on the amount of\ncontent on each panel, which can vary significantly, and the rate at\nwhich users have their reading rate set on their screen reader. One\nsolution to this issue may be to make the carousel manually rotate\nwhen it has focus so users can proceed to the next panel only when\nthey are ready.\nAnother case where live regions can be problematic is with\ntimers. Timers counting by seconds can essentially render the rest\nof the content on a page unusable for a screen reader user. As the\nscreen reader announces every second, it interrupts the reading of\nthe other content on a page. Timers that increment each minute, for\ninstance, would not have this problem.\nOther places where live regions may be problematic are with very\nactive news or Twitter feeds. Though live regions can be useful\nfor this type of updating content, if there is a constant stream of\nupdates or updates occur frequently, screen reader users may have\ndifficulty comprehending other page content with the frequent\ninterruptions.\nTry This: To experience the aggravation of a constantly\nupdating live region, open ChromeVox and give focus to the\ntimer below. In this case, the timer is in an iframe, so you can\nsimply set focus outside the iframe to stop it from reading.\nIf the timer were embedded in the content of the page itself,\nyou would not have this option, and the rest of the page would\n112 | Live Regions become unusable with a screen reader. The only option would\nbe to leave the page.\nAn interactive or media element has been\nexcluded from this version of the text. You can\nview it online here:\nKey Point: Be aware of potential barriers that can be created\nwhen live regions are used with high-frequency content\nupdates.\nLive Regions | 113 Activity 4: WAI-ARIA\nLandmarks and Alerts\nWAI-ARIA Landmarks and Alerts\nLandmarks were added to the WAI-ARIA\nspecification as a way of providing easy navigation within a web\npage for assistive technology users. Prior to landmarks, bypass links\nwere often used (and still are) that would allow a screen reader user\nto jump from the top of a page, typically, to an anchor strategically\nplaced further down the page. In the first part of this activity you\nwill add a set of landmark roles to a website user interface (UI).\nLive regions were introduced in WAI-ARIA as a way to present\nchanging content to assistive technology users. Feedback messages\nare good candidates for a live region, so the content of a feedback\nmessage is read to the user automatically when it appears without\nthe need to search the page to determine whether an action\ncompleted successfully or, alternately, if an action produced an\nerror message. The WAI-ARIA \u201calert\u201d role is a type of live region\nideal for presenting error or success feedback messages. In Part 2\nof this activity, you\u2019ll add role=\"alert\" to the error messages\nwhen the form in the landmarks.html file is submitted with missing\nor invalid required fields, and when it is submitted successfully.\n114 | Activity 4: WAI-ARIA Landmarks\nand Alerts In your copy of the activity files, open and edit the landmarks.html\nfile. When you have completed both parts of the activity, commit\nthe file back to your GitHub Pages repository, or upload it to the\nlocation you have chosen to post your activity files for marking or\nsubmit a GitHack URL.\nRequirements\nPart 1: Landmarks\nAdd the appropriate landmark roles to elements within the page. Be\nsure all content within the page is contained within a landmarked\nregion and, depending on the type of content on the page, apply the\ncorrect landmark for that type of content.\nWhen you have added all the appropriate landmarks, test the file\nwith ChromeVox (keys: Cvox + L + semicolon) to be sure they are all\nfunctioning properly.\nPart 2: Live Error and Feedback Messages\nThe form on the page has three required fields. If you submit the\nform without valid input for these fields, an error message is\ngenerated below each field that has invalid input. Add\nrole=\"alert\" to the first error message, so, when it appears, it\nis automatically read by ChromeVox along with sending focus to\nthe first field in error so it can be corrected. Do the same for the\nfeedback message that appears when the form is submitted without\nerrors.\nHINT: look in join.lib.js in the activity files.\nActivity 4: WAI-ARIA Landmarks and Alerts | 115 Grading Rubric\nCriteria Points\nContent Contained: 2.0\nAll content is contained within a landmarked region. pts\nCorrect Landmarks: 3.0\nAppropriate landmarks have been used for each region. pts\nMessages Announced:\nThe first Error\/Feedback message is announced when the form\nis submitted with and without invalid input. When the first 4.0\nrequired field is corrected, the next Error\/Feedback message is pts\nannounced, and so on, so any field with invalid content is read\naloud.\nLandmarks Distinguishable:\nLandmark regions with the same role are distinguishable from 1.0 pts\neach other.\nTotal Points: 10.0\n116 | Activity 4: WAI-ARIA Landmarks and Alerts Self-Test 3\nAnswer the following questions to test your understanding of key\nlessons in this unit. This quiz is not being marked.\nAn interactive or media element has been excluded\nfrom this version of the text. You can view it online\nhere:\nhttps:\/\/pressbooks.library.ryerson.ca\/wafd\/?p=321\nSelf-Test 3 | 117  4. INTERACTIVE WAI-ARIA\n(BASIC)\n4. Interactive WAI-ARIA (Basic) | 119  Objectives and Activities\nObjectives\nBy the end of this unit, you will be able to:\n\u2022 Identify elements of an accessible suggestion box\n\u2022 Describe the function of accessible tooltips\n\u2022 Identify the elements of an accessible progress bar\nActivities\n\u2022 Create the following accessible elements:\n\u25e6 Suggestion box\n\u25e6 Tooltips\n\u25e6 Progress bar\nObjectives and Activities | 121 Toggle Buttons (Activity\nExample)\nThe remainder of the instruction here is hands-on. You\u2019ll be taking\ninaccessible widgets, like the example of toggle buttons described\nhere, and making them accessible by adding appropriate WAI-ARIA\nand keyboard operability. The toggle buttons widget demonstrated\nhere is provided as an example for the ten widgets you will be\nworking on over the next three units, describing the Activity\nElements you will find in each exercise.\nActivity Element: Following the short introduction to the\nwidget above, a list of the WAI-ARIA roles, states, and\nproperties used with the widget are listed.\nRoles, states, and properties for toggle buttons\n\u2022 role=\u201dbutton\u201d\n\u2022 tabindex=\u201d0\u2033\n\u2022 aria-label=\u201d[button name]\u201d\n\u2022 aria-pressed=\u201d[true|false]\u201d\nActivity Element: Where available, a Suggested Reading is\nincluded that provides additional information about\n122 | Toggle Buttons (Activity\nExample) accessibility features for the widget being discussed, often\nlinking to the W3C WAI-ARIA 1.1 Authoring Practice\ndocumentation, or to a similar resource. These readings are\noptional but recommended.\nSuggested Reading: Read more about buttons in the WAI-\nARIA 1.1 Authoring Practices.\nActivity Element: Each widget will have an inaccessible\nJSFiddle version provided, like the one below. You can\nexamine the JavaScript and HTML to observe how the widget\nwas created. Under the Result tab, view and try out the\nwidget to see how it functions. CSS is also provided, though\nyou will not be working with CSS as part of the activities.\nIn the JSFiddle here, the accessibility elements are included\nbut commented out so you can see how the code snippets\nbelow have been applied. In the activities that follow, the\naccessibility elements will not be present. Your task will be\nto apply the code snippets yourself to make the inaccessible\nversion provided in the activity file accessible.\nAt the top right, you may choose to \u201cEdit in JSFiddle\u201d and\ntest the code snippets that will be provided below, to\nunderstand how they add accessibility to the widget. You\ncan start by uncommenting the accessibility elements for the\ntoggle buttons, and testing the resulting version with\nChromeVox.\nThe following JSFiddle presents a typical toggle button. Review the\nJavaScript and HTML markup. Test the buttons present under the\nResult tab with ChromeVox to understand how it functions without\nany accessibility features added (if it functions at all). You can work\nToggle Buttons (Activity Example) | 123 in JSFiddle itself by clicking \u201cEdit in JSFiddle\u201d and copying the\naccessibility\/WAI-ARIA code described below to fix the accessibility\nof the toggle buttons, before completing the Activity on the page\nthat follows (there is no activity that follows in this example case).\nKey Point: The code that appears under the JavaScript tab is\nnot exactly as it appears in the activity files. The\n$(document.ready{}) function at the top is copied from the\nassociated HTML file for the widget, and the contents of\nik_util.js have been appended, so the widget will function in\nJSFiddle. You will not need to include these in the JavaScript\nfile from the activity files that you will be editing for each\nwidget.\n124 | Toggle Buttons (Activity Example) An interactive or media element has been excluded\nfrom this version of the text. You can view it online\nhere:\nhttps:\/\/pressbooks.library.ryerson.ca\/wafd\/?p=324\nActivity Element: Following the JSFiddle will be a collection\nToggle Buttons (Activity Example) | 125 of code snippets hosted in PasteBin. These code snippets can\nbe applied to the code presented in the JSFiddle and applied\nto the code in the activity files, which you will be submitting\nfor marking.\nAdd a tabindex to each button to make them keyboard focusable,\ndefine the role=\"button\", and add a label with aria-\nlabel=\"[button name]\" and set the default state to \u201cnot\npressed\u201d with aria-pressed=\"false\".\nAn interactive or media element has been excluded\nfrom this version of the text. You can view it online\nhere:\nhttps:\/\/pressbooks.library.ryerson.ca\/wafd\/?p=324\nAdd in equivalent keyboard access where mouse access is provided,\nreferencing the onActivate() function, described below, with\njQuery .on('keydown').\nAn interactive or media element has been excluded\nfrom this version of the text. You can view it online\nhere:\nSet aria-pressed=\"[true|false]\" for buttons when activated\nor deactivated to announce the button\u2019s state to screen readers.\n126 | Toggle Buttons (Activity Example) An interactive or media element has been excluded\nfrom this version of the text. You can view it online\nhere:\nhttps:\/\/pressbooks.library.ryerson.ca\/wafd\/?p=324\nAdding Keyboard Operability\nKeyboard access for the buttons is fairly simple, with no special key\npress events needing to be defined.\nActivity Element: When the WAI-ARIA 1.1 Authoring\nPractices has a set of recommended keyboard interactions,\nthey will be reproduced here. Widgets will typically follow\nthe recommended practice, though in some cases keyboard\ninteraction may vary.\nToggle Buttons (Activity Example) | 127 Keyboard Interaction for Toggle Buttons\nWhen the button has focus:\n\u2022 Space: Activates the button.\n\u2022 Enter: Activates the button.\n\u2022 Following button activation, focus is set\ndepending on the type of action the button\nperforms. For example:\n\u25e6 If activating the button opens a dialog, the\nfocus moves inside the dialog (see dialog\npattern).\n\u25e6 If activating the button closes a dialog,\nfocus typically returns to the button that\nopened the dialog unless the function\nperformed in the dialog context logically\nleads to a different element. For example,\nactivating a cancel button in a dialog returns\nfocus to the button that opened the dialog.\nHowever, if the dialog were confirming the\naction of deleting the page from which it\nwas opened, the focus would logically move\nto a new context.\n\u25e6 If activating the button does not dismiss\nthe current context, then focus typically\nremains on the button after activation, e.g.,\nan Apply or Recalculate button.\n\u25e6 If the button action indicates a context\nchange, such as move to next step in a\n128 | Toggle Buttons (Activity Example) wizard or add another search criteria, then\nit is often appropriate to move focus to the\nstarting point for that action.\n\u25e6 If the button is activated with a shortcut\nkey, the focus usually remains in the context\nfrom which the shortcut key was activated.\nFor example, if Alt + U were assigned to an\n\u201cUp\u201d button that moves the currently\nfocused item in a list one position higher in\nthe list, pressing Alt + U when the focus is in\nthe list would not move the focus from the\nlist.\nSource: W3C WAI-ARIA 1.1 Authoring Practices\nActivity Element: Though this widget requires no keyboard\ninteraction beyond that provided in ik_utils.js to handle\nspace bar and Enter keys, other widgets will have a custom\nfunction provided here that defines possible keyboard\ninteractions for those widgets. In most cases, that code can\nbe copied as is into the widget\u2019s JavaScript file.\nNo added keyboard interaction is required for the toggle buttons\nbeyond the standard Space bar and Enter key defined in the\nik_utils.js file. Reference to these key events is added to the\nonActivate() function.\nToggle Buttons (Activity Example) | 129 An interactive or media element has been excluded\nfrom this version of the text. You can view it online\nhere:\nhttps:\/\/pressbooks.library.ryerson.ca\/wafd\/?p=324\n130 | Toggle Buttons (Activity Example) Accessible Toggle Buttons in Action\nActivity Element: Each widget will have a short video of it\ninteracting with ChromeVox. When completing the activities,\naim to have your activity submission function as presented in\nthe video.\nThe buttons are accessed initially with the Tab key, and the Tab key\nis used to move between buttons. The Space bar or Enter keys are\nused to activate and deactivate buttons. Aim to have the widget you\nedit in the associated activity function like that presented in the\nvideo (there is no associated activity for this example).\nVideo: Accessible Toggle Buttons\nToggle Buttons (Activity Example) | 131 A YouTube element has been excluded from this version of the\ntext. You can view it online here:\nhttps:\/\/pressbooks.library.ryerson.ca\/wafd\/?p=324\n132 | Toggle Buttons (Activity Example) Suggestion Boxes\nA suggestion box (aka, combo box or autocomplete box) is a type\nof selection menu that helps users enter a correct choice. They are\ntypically made up of a text entry field and a list of choices based on\na number of characters entered into the text field. In the example\nprovided here, entering a few characters brings up a list of countries\nthat contain those characters.\nBecause the text entry field is a standard form text input field,\nit will be accessible by default. No additional coding is required to\nmake it accessible. What needs the most attention is the list of\nchoices, which needs to announce itself when it appears and needs\nto be keyboard navigable.\nWAI-ARIA roles, states, and properties used in a\nsuggestion box\n\u2022 role=\u2019region\u2019\n\u2022 aria-live=\u2019polite\u2019\n\u2022 aria-describedby='[id of instructions div]\u2019\nSuggested Reading: For details on constructing accessible\nsuggestion boxes, refer to: WAI-ARIA Best Practices: Combo\nBox.\nThe following JSFiddle presents a typical suggestion box. Review\nthe JavaScript and HTML markup, and test the suggestion box\npresented under the Result tab with ChromeVox to understand how\nit functions without any accessibility features added. You can work\nSuggestion Boxes | 133 in JSFiddle itself by clicking \u201cEdit in JSFiddle\u201d, copying the\naccessibility\/WAI-ARIA code described below to fix the accessibility\nof the suggestion box, before completing Activity 5, on the page that\nfollows.\n134 | Suggestion Boxes An interactive or media element has been excluded\nfrom this version of the text. You can view it online\nhere:\nhttps:\/\/pressbooks.library.ryerson.ca\/wafd\/?p=330\nDefine some instructions to make it clear there will be suggestions\nappearing when text is entered into the text input field.\nSuggestion Boxes | 135 An interactive or media element has been excluded\nfrom this version of the text. You can view it online\nhere:\nhttps:\/\/pressbooks.library.ryerson.ca\/wafd\/?p=330\nWhen the suggestion box receives focus, generate the instructions\nfor it by adding the notify() function to the onFocus()\nfunction to produce a live region with the instruction text. This\ninstruction text is then read automatically when a screen reader\nencounters the suggestion box text field.\nAn interactive or media element has been excluded\nfrom this version of the text. You can view it online\nhere:\nhttps:\/\/pressbooks.library.ryerson.ca\/wafd\/?p=330\nWithin the init() function, create a <div> to use as a live\nregion, adding aria-live=\"polite\" to announce the list usage\ninstructions defined above when the text field receives focus. Also,\ngive it a role=\"region\" so it can be found in the landmarks list.\n136 | Suggestion Boxes An interactive or media element has been excluded\nfrom this version of the text. You can view it online\nhere:\nhttps:\/\/pressbooks.library.ryerson.ca\/wafd\/?p=330\nProvide additional instructions when the suggestion box is\npopulated, adding to the getSuggestions() function.\nAn interactive or media element has been excluded\nfrom this version of the text. You can view it online\nhere:\nhttps:\/\/pressbooks.library.ryerson.ca\/wafd\/?p=330\nAdding Keyboard Operability\nWAI-ARIA best practices defines all recommended suggestion box\nkeyboard functionality, listed below. In our example, only the\nrequired keyboard events are included.\nSuggestion Box Keyboard Interaction\nWhen focus is in the textbox:\nSuggestion Boxes | 137 \u2022 Down Arrow: If the popup is available, moves\nfocus into the popup:\n\u25e6 If the autocomplete behaviour\nautomatically selected a suggestion before\nDown Arrow was pressed, focus is placed on\nthe suggestion following the automatically\nselected suggestion.\n\u25e6 Otherwise, places focus on the first\nfocusable element in the popup.\n\u2022 Up Arrow (Optional): If the popup is available,\nplaces focus on the last focusable element in the\npopup.\n\u2022 Esc: Dismisses the popup if it is visible.\nOptionally, clears the textbox.\n\u2022 Enter: If an autocomplete suggestion is\nautomatically selected, accepts the suggestion\neither by placing the input cursor at the end of the\naccepted value in the textbox or by performing a\ndefault action on the value. For example, in a\nmessaging application, the default action may be\nto add the accepted value to a list of message\nrecipients and then clear the textbox so the user\ncan add another recipient.\n\u2022 Printable Characters: Type characters in the\ntextbox. Note that some implementations may\nregard certain characters as invalid and prevent\ntheir input.\n\u2022 Standard single line text editing keys\nappropriate for the device platform (see note\nbelow).\n138 | Suggestion Boxes \u2022 Alt+Down Arrow (Optional): If the popup is\navailable but not displayed, displays the popup\nwithout moving focus.\n\u2022 Alt+Up Arrow (Optional): If the popup is\ndisplayed:\n\u25e6 If the popup contains focus, returns focus\nto the textbox.\n\u25e6 Closes the popup.\nNote: Standard single line text editing keys\nappropriate for the device platform:\n1. include keys for input, cursor movement,\nselection, and text manipulation.\n2. Standard key assignments for editing\nfunctions depend on the device operating\nsystem.\n3. The most robust approach for providing\ntext editing functions is to rely on browsers,\nwhich supply them for HTML inputs with\ntype text and for elements with the\ncontenteditable HTML attribute.\n4. IMPORTANT: Be sure that JavaScript does\nnot interfere with browser-provided text\nediting functions by capturing key events\nfor the keys used to perform them.\nSource: W3C WAI-ARIA 1.1 Best Practices\nSuggestion Boxes | 139 The most significant effort in making the suggestion box accessible\nis adding keyboard operability. In our case, we\u2019ll add Up and Down\nArrow operability to the list box. Create a switch that captures the\nkeypress event. If it\u2019s a Down Arrow, select the next item down\nin the list. If it\u2019s an Up Arrow, select the previous item. If it\u2019s any\ncharacter key, enter the value in the text field. Add this to the\nonKeyUp() function, while integrating the existing functionality in\nthe function into the default for the switch statement.\n140 | Suggestion Boxes An interactive or media element has been excluded\nfrom this version of the text. You can view it online\nhere:\nhttps:\/\/pressbooks.library.ryerson.ca\/wafd\/?p=330\nSuggestion Boxes | 141 Accessible Suggestion Box in Action\nWatch the following video to see how ChromeVox interacts with\na suggestion box. When the suggestion box receives focus,\ninstructions are read. When the second letter is typed into the text\nfield a list of suggestions appears below. Additional instructions are\nprovided on how to make a selection from the list. Arrow keys are\nused to navigate through the suggestions, and the Enter key is used\nto select one of them. Aim to have the suggestion box you update in\nActivity 5 on the following page operate and announce like the one\nin the video.\nVideo: Accessible Suggest Box\n142 | Suggestion Boxes A YouTube element has been excluded from this version of the\ntext. You can view it online here:\nhttps:\/\/pressbooks.library.ryerson.ca\/wafd\/?p=330\nSuggestion Boxes | 143 Activity 5: Accessible\nSuggestion Box\nAccessible Suggestion Box\nBased on the Suggestion Box details on\nthe previous page, apply what you have learned to the associated\nactivity files to make the suggestion box provided accessible.\nFiles for this activity include:\n\u2022 \/suggest.html\n\u2022 \/assets\/ik_suggest.js\nUse the surroundings of the highlighted code on the previous page\nas a guide to find where the fixes should be applied. Repair the\naccessibility of the suggestion box by applying the highlighted code\nto the \/assets\/ik_suggest.js file.\nNote: While we suggest using the highlighted code we\u2019ve\nprovided, you are free to come up with your own solutions provided\nthey produce the expected results listed in the marking rubric\nbelow.\nTest your updated suggestion box with ChromeVox to ensure\n144 | Activity 5: Accessible\nSuggestion Box each element described in the marking rubric below is functioning\nas suggested.\nRequirements\nApply your changes and test to be sure your suggestion box\nfunctions as described. Then, submit the URL of your suggest.html\nfile located on your GitHub site, on the web server you are using to\nhost your copy of the activity files, or a GitHack URL.\nGrading Rubric\nCriteria Points\nInitial Instructions:\n2.0 pts\nInstructions are provided when the country field receives focus.\nAnnounce Suggestions Present:\nThe suggestion list is announced when suggestions are 2.0 pts\navailable.\nSuggestion Instructions\n1.0 pts\nInstructions are provided when suggestions are available.\nKeyboard Access: 5.0\nA country selection can be made using only the keyboard pts\nTotal Points: 10.0\nActivity 5: Accessible Suggestion Box | 145 Tooltips\nA tooltip is typically used to display some information about its\nowning element when a user hovers a mouse pointer over or gives\nkeyboard focus to an element. Tooltips might include a definition\nfor a word, perhaps full wording for an acronym or abbreviation, or\nmaybe instructions on how to operate a tool or widget. There are\nmany possibilities.\nTooltips are an enhancement for the default \u201ctitle text\u201d standard\nwith HTML. They provide much more flexibility in the presentation\nand types of information that can be presented than a standard title\ntext tooltip.\nWAI-ARIA roles, states, and properties used in a\ntooltip\n\u2022 role=\"tooltip\"\n\u2022 aria-hidden:[true|false]\n\u2022 aria-live=\"polite\"\n\u2022 tabindex = [0|-1]\nSuggested Reading: For details on constructing accessible\ntooltips, refer to: WAI-ARIA Best Practices: Tooltips.\nThe following JSFiddle presents a typical tooltip. Review the\nJavaScript and HTML markup. Test the tooltip presented under\nthe Result tab with ChromeVox to understand how it functions\nwithout any accessibility features added. You can work in JSFiddle\nby clicking \u201cEdit in JSFiddle\u201d, copying the accessibility\/WAI-ARIA\n146 | Tooltips code described below to fix the accessibility of the tooltip before\ncompleting Activity 6 on the page that follows.\nAn interactive or media element has been excluded\nfrom this version of the text. You can view it online\nhere:\nhttps:\/\/pressbooks.library.ryerson.ca\/wafd\/?p=336\nTooltips | 147 The first thing to add to the init() function, where the tooltip\n<span> element is defined, are the WAI-ARIA attributes. First,\ndefine the tooltip with role=\"tooltip\". Hide the tooltip by\ndefault with aria-hidden=\"true\". Also, add a live region with\naria-live=\"polite\", so screen readers automatically read the\ntooltip when it appears. Note, the WAI-ARIA 1.1 best practices\nrecommend using aria-describedby within the owning element\nto reference the content of a tooltip, which does not announce as\nexpected with current versions of Chrome. Instead, we use aria-\nlive, which announces correctly across all current browsers.\nAn interactive or media element has been excluded\nfrom this version of the text. You can view it online\nhere:\nhttps:\/\/pressbooks.library.ryerson.ca\/wafd\/?p=336\nNext, add keyboard focus to the element the tooltip belongs to with\ntabindex=\"0\", and add focus to .on('mouseover'), so both\na mouse hover and keyboard focus open the tooltip.\n148 | Tooltips An interactive or media element has been excluded\nfrom this version of the text. You can view it online\nhere:\nhttps:\/\/pressbooks.library.ryerson.ca\/wafd\/?p=336\nAlso, further down in the owning element\u2019s definition, add aria-\nhidden=\"false\" so the hidden-by-default tooltip becomes visible\nwhen the mouse hover or keyboard focus occurs.\nAn interactive or media element has been excluded from this\nversion of the text. You can view it online here:\nhttps:\/\/pressbooks.library.ryerson.ca\/wafd\/?p=336\nAlso, added here is aria-hidden=\"true\" to be sure the tooltip\nis hidden from screen readers, should a mouseout event close the\ntooltip, adding it to .on(mouseout) chained to the element\n($elem) definition.\nAn interactive or media element has been excluded from this\nversion of the text. You can view it online here:\nhttps:\/\/pressbooks.library.ryerson.ca\/wafd\/?p=336\nAdding Keyboard Operability\nWAI-ARIA best practices defines keyboard interaction for a tooltip\nas follows:\nTooltips | 149 Recommended Keyboard Interaction for\na Tooltip\nTooltip widgets do not receive focus. A hover that\ncontains focusable elements can be made using a non-\nmodal dialog.\n\u2022 Esc: Dismisses the Tooltip.\nNote:\n1. Focus stays on the triggering element\nwhile the tooltip is displayed.\n2. If the tooltip is invoked when the trigger\nelement receives focus, then it is dismissed\nwhen it no longer has focus (onBlur). If the\ntooltip is invoked with mouseIn, then it is\ndismissed with mouseOut.\nSource: W3C WAI-ARIA Best Practices 1.1\nKeyboard operability for a tooltip or, rather, the owning element is\nrelatively simple. As a keyboard equivalent for the\n.on(mouseout) described above, .on(blur) is chained to the\n$elem element and within it aria-hidden=\"true\" hides the\ntooltip again, if the mouse pointer is not over the element.\nAn interactive or media element has been excluded from this\n150 | Tooltips version of the text. You can view it online here:\nhttps:\/\/pressbooks.library.ryerson.ca\/wafd\/?p=336\nAlso, if the Esc key is used, add aria-hidden=\"true\" to hide the\ntooltip, even if the mouse is hovering, or the owning element has\nfocus.\nAn interactive or media element has been excluded from this\nversion of the text. You can view it online here:\nhttps:\/\/pressbooks.library.ryerson.ca\/wafd\/?p=336\nAccessible Tooltip in Action\nWatch the following video to see how ChromeVox interacts with a\ntooltip. The Tab key is used to navigate to the first tooltip, which\nopens a live region when its content is read aloud. Pressing the Tab\nkey once again, move focus to the text input field, and a second\ntooltip opens and its content is read aloud. Aim to have the tooltips\nyou update in Activity 6 on the following page operate and\nannounce like the one in the video.\nVideo: Accessible Tooltips\nTooltips | 151 A YouTube element has been excluded from this version of the\ntext. You can view it online here:\nhttps:\/\/pressbooks.library.ryerson.ca\/wafd\/?p=336\n152 | Tooltips Activity 6: Accessible\nTooltips\nAccessible Tooltips\nBased on the Tooltip details on the\nprevious page, apply what you have learned to the associated\nactivity files to make the tooltips there accessible.\nFiles for this activity include:\n\u2022 \/tooltip.html\n\u2022 \/assets\/ik_tooltip.js\nUse the surroundings of the highlighted code on the previous page\nas a guide to find where the fixes should be applied. Repair the\naccessibility of the tooltips by applying the highlighted code to the\n\/assets\/ik_tooltip.js file.\nNote: While we suggest using the highlighted code we\u2019ve\nprovided, you are free to come up with your own solutions provided\nthey produce the expected results listed in the marking rubric\nbelow.\nTest your updated tooltips with ChromeVox to ensure each\nActivity 6: Accessible Tooltips | 153 element described in the marking rubric below is functioning as\nsuggested.\nRequirements\nWhen you have applied your changes and tested to be sure your\ntooltips function as described, submit the URL to your tooltip.html\nfile on your GitHub Pages site, to the file on the web server you are\nusing to host your copy of the activity files, or to a Githack URL.\nGrading Rubric\nCriteria Points\nTooltips Open:\nTooltips open when their owning element receives keyboard 3.0 pts\nfocus or mouseover.\nTooltips Read:\nTooltips read aloud when their owning element receives 3.0 pts\nkeyboard focus or mouseover.\nTooltips Hides:\n2.0 pts\nTooltips hide when focus is removed or on mouseout.\nTooltips Escape:\n2.0 pts\nTooltips hide when the Esc key is pressed.\nTotal Points: 10.0\n154 | Activity 6: Accessible Tooltips Progress Bars\nProgress bars are typically implemented when a user has to wait for\na process to complete, whether that may be waiting for an upload\nto finish, data to be compiled, a report to be generated, or any other\nprocess that takes more than a few seconds to complete.\nFor most users, there is generally a visual representation of\nprogress, such as a status bar or a circular progress indicator. As a\nprocess progresses, a viewer can estimate when it will be complete.\nFor blind users, however, the visual presentation provides no useful\ninformation, so they will need to be able to retrieve the current\nvalue some other way.\nRoles, states, and properties in a progress bar\n\u2022 role=\"progressbar\"\n\u2022 tabindex = [0|-1]\n\u2022 aria-valuenow = \"0\"\n\u2022 aria-valuemin = \"0\"\n\u2022 aria-valuemax = \"[max value define in default\noptions]\"\n\u2022 aria-describedby = \"[instruction ID]\"\n\u2022 role = \"region\"\n\u2022 aria-live = \"assertive\"\n\u2022 aria-atomic = \"additions\"\n\u2022 aria-hidden = \"[true|false]\"\nSuggested Reading: For more about accessible progress\nbars, see WAI-ARIA 1.1: Progressbar\nProgress Bars | 155 The following JSFiddle presents a typical progress bar widget.\nReview the JavaScript and HTML markup and test the progress bar\npresented under the result tab with ChromeVox to understand how\nit functions without any accessibility features added. You can work\nin JSFiddle itself by clicking the Edit in \u201cJSFiddle\u201d at the top, right-\nhand side. Copy the accessibility\/WAI-ARIA code described below\nto fix the accessibility of the progress bar before completing Activity\n7 on the page that follows.\nAn interactive or media element has been excluded from this\nversion of the text. You can view it online here:\nhttps:\/\/pressbooks.library.ryerson.ca\/wafd\/?p=341\nWAI-ARIA to Make the Progress Bar Accessible\nKey Point: For the exercise in Activity 7: Accessible Progress\nBar, aim to have the progress bar function in ChromeVox,\nbut, be aware that solutions described here will not work in\nother screen readers.\nIn this example, we have added WAI-ARIA to a progress bar, but due\nto limited support for the WAI-ARIA progressbar attributes by\nscreen readers other than ChromeVox, there is also a workaround\nusing the jQuery .data() function to output the current value\nfor users of JAWS or NVDA screen readers. You can refer to the\nik_progressbar_data.js file for the workaround. However,\nfor Activity 7, be sure to start from the ik_progressbar.js file for the\nassignment submission. To experiment with the .data() version\nof the progress bar JavaScript file, you can adjust the reference to\nthe file in the progressbar.html file.\nFirst, as is typical, create some instructions describing how to\n156 | Progress Bars operate the progress bar with a screen reader and keyboard and add\nthem to the default options.\nAn interactive or media element has been excluded\nfrom this version of the text. You can view it online\nhere:\nhttps:\/\/pressbooks.library.ryerson.ca\/wafd\/?p=341\nUpdate the init() function to add the required WAI-ARIA. First\nset tabindex=\"-1\" to be sure the bar itself is not keyboard\nfocusable by default, and associate the bar with the instructions\nso when the bar does receive focus the instructions are read. Set\nsome default values for aria-valuemin, aria-valuenow, and\naria-valuemax. Also, add keyboard access to the bar with an\non(keydown) reference to the onKeyDown() function,\ndescribed below.\nAdd to the notifications <div> live region attributes so when\nSpace\/Enter are pressed and the progress percent is added, or if\n\u201cLoading Complete!\u201d is added, they are read aloud by the screen\nreader.\nFinally, create the <div> with instructions referenced by its ID\nwith aria-describedby added to the bar <div> and hide it by\ndefault.\nProgress Bars | 157 An interactive or media element has been excluded\nfrom this version of the text. You can view it online\nhere:\nhttps:\/\/pressbooks.library.ryerson.ca\/wafd\/?p=341\n158 | Progress Bars Replace the data(value) in the getValue() function, used\nto retrieve the current value of the progress bar when the Space\nbar or Enter keys are pressed, with an aria-valuenow attribute.\nThis replaces the .data(value) needed to function with screen\nreaders other than ChromeVox.\nProgress Bars | 159 An interactive or media element has been excluded\nfrom this version of the text. You can view it online\nhere:\nhttps:\/\/pressbooks.library.ryerson.ca\/wafd\/?p=341\nIn the setValue() function, add in a tabindex=\"-1\" to remove\nkeyboard focus from the bar when the max value is reached and\nto add the \u201cLoading Complete\u201d message to the notification <div>.\nFinally, add either the current value of the progress on keypress\nor the max value (if progress is complete) to an aria-valuenow\nattribute. This replaces the .data() work-around, which is\nneeded to function with screen readers other than ChromeVox.\n160 | Progress Bars An interactive or media element has been excluded\nfrom this version of the text. You can view it online\nhere:\nhttps:\/\/pressbooks.library.ryerson.ca\/wafd\/?p=341\nProgress Bars | 161 Adding Keyboard Operability\nKeyboard access for a progress bar is relatively simple. There is\ntypically no mouse or keyboard interaction. One generally waits\nand, when progress is complete, continues on with some other\naction. For screen reader users, however, they will need to be able\nto get the current progress value using a keypress.\nTo allow the current value to be retrieved, set up the Enter and\nSpace bar keyboard controls with the onKeyDown() function. This\nalso triggers the notify() function. When one of those keys is\npressed, it outputs the value to the notification <div> that we have\nset up as a live region.\n162 | Progress Bars An interactive or media element has been excluded\nfrom this version of the text. You can view it online\nhere:\nhttps:\/\/pressbooks.library.ryerson.ca\/wafd\/?p=341\nAccessible Progress Bar in Action\nWatch the following video to see how ChromeVox interacts with a\nprogress bar. When the Run Demo button is pressed, instructions\nare provided on how to announce progress. Pressing the Space\nbar or Enter key announces the percentage progress at any given\nProgress Bars | 163 moment. When progress has finished, \u201cLoading Complete\u201d is\nannounced. Aim to have the progress bar you update in the activity\non the following page operate and announce like the one in the\nvideo.\nVideo: Accessible Progress Bar\nA YouTube element has been excluded from this version of the\ntext. You can view it online here:\nhttps:\/\/pressbooks.library.ryerson.ca\/wafd\/?p=341\n164 | Progress Bars Activity 7: Accessible\nProgress Bar\nAccessible Progress Bar\nBased on the Progress Bar details on the previous page, apply what\nyou have learned to the associated activity files to make the\nprogress bar there accessible.\nFiles for this activity include:\n\u2022 \/progressbar.html\n\u2022 \/assets\/ik_progressbar.js\nUse the surroundings of the highlighted code on the previous page\nas a guide to find where the fixes should be applied. Repair the\naccessibility of the progress bar by applying the highlighted code to\nthe \/assets\/ik_progressbar.js file.\nNote: While we suggest using the highlighted code we\u2019ve\nprovided, you are free to come up with your own solutions provided\nthey produce the expected results listed in the marking rubric\nbelow.\nActivity 7: Accessible Progress\nBar | 165 Test your updated progress bar with ChromeVox to ensure each\nelement described in the marking rubric below is functioning as\nsuggested.\nRequirements\nWhen you have applied your changes and tested to be sure your\nprogress bar functions as described, submit the URL to your\nprogressbar.html file on your GitHub Pages site, to the file on the\nweb server you are using to host your copy of the activity files, or to\na GitHack URL.\nGrading Rubric\nCriteria\nInstructions Provided:\nWhen the progress bar begins running, instructions are provided on how to announce progr\nKeyboard Announce Progress:\nThe keyboard can be used to announce progress percentage.\nAnnounce Complete:\nWhen progress finishes, Loading Complete is announced.\nTotal Points:\n166 | Activity 7: Accessible Progress Bar 5. INTERACTIVE WAI-ARIA\n(INTERMEDIATE)\n5. Interactive WAI-ARIA\n(Intermediate) | 167  Objectives and Activities\nObjectives\nBy the end of this unit, you will be able to:\n\u2022 Recognize the elements of an accessible slider\n\u2022 Identify what makes an accordion accessible\n\u2022 Identify the elements of an accessible tab panel\n\u2022 Explain the challenges of making a carousel accessible\nActivities\n\u2022 Create the following accessible elements:\n\u25e6 Slider\n\u25e6 Accordion\n\u25e6 Tab panel\n\u25e6 Carousel\nObjectives and Activities | 169 Sliders\nSliders typically allow users to select a value between minimum and\nmaximum values by dragging a slider thumb along a slider bar or\ntrack.\nWAI-ARIA roles, states, and properties used in a\nslider\n\u2022 tabindex=\"[0 | -1]\"\n\u2022 role=\"slider\"\n\u2022 aria-valuemin=\"[number]\"\n\u2022 aria-valuemax=\"[number]\"\n\u2022 aria-valuenow=\"[number]\"\nSuggested Reading: Additional information about creating\naccessible sliders can be found in the WAI-ARIA Best\nPractices.\nThe following JSFiddle presents a typical slider widget. Review the\nJavaScript and HTML markup. Test the slider presented under the\nResult tab with ChromeVox to understand how it functions without\nany accessibility features added. You can work in JSFiddle itself by\nclicking the \u201cEdit in JSFiddle\u201d at the top, right-hand side, copying\nthe accessibility\/WAI-ARIA code described below to fix the\naccessibility of the slider before completing Activity 8 on the page\nthat follows.\n170 | Sliders An interactive or media element has been excluded\nfrom this version of the text. You can view it online\nhere:\nhttps:\/\/pressbooks.library.ryerson.ca\/wafd\/?p=349\nDefine some instructions that describe how to use the slider for\nscreen reader users.\nSliders | 171 An interactive or media element has been excluded\nfrom this version of the text. You can view it online\nhere:\nhttps:\/\/pressbooks.library.ryerson.ca\/wafd\/?p=349\nAdd a tabindex=\"0\" to make the slider thumb keyboard\nfocusable. Assign a role=\"slider\" to the text box so it\nannounces as a slider instead of a text entry field. Set aria-\nvaluemin, aria-valuemax, and aria-valuenow values, and\nreference the instructions with aria-describedby. Using\n.on('keydown') reference the onKeyDown function to add\nkeyboard operability to the slider.\n172 | Sliders An interactive or media element has been excluded\nfrom this version of the text. You can view it online\nhere:\nhttps:\/\/pressbooks.library.ryerson.ca\/wafd\/?p=349\nCreate a <div> for the screen reader instructions.\nAn interactive or media element has been excluded\nfrom this version of the text. You can view it online\nhere:\nhttps:\/\/pressbooks.library.ryerson.ca\/wafd\/?p=349\nDynamically set the value of aria-valuenow based on the value\nat which the slider thumb is located.\nSliders | 173 An interactive or media element has been excluded\nfrom this version of the text. You can view it online\nhere:\nhttps:\/\/pressbooks.library.ryerson.ca\/wafd\/?p=349\nRemove keyboard access from the original text field.\nAn interactive or media element has been excluded\nfrom this version of the text. You can view it online\nhere:\nhttps:\/\/pressbooks.library.ryerson.ca\/wafd\/?p=349\nAdding Keyboard Operability\nWAI-ARIA authoring practices defines recommended keyboard\nfunctionality for a slider, listed below.\n174 | Sliders Keyboard Interaction for a Slider\n\u2022 Right Arrow: Increase the value of the slider by\none step.\n\u2022 Up Arrow: Increase the value of the slider by\none step.\n\u2022 Left Arrow: Decrease the value of the slider by\none step.\n\u2022 Down Arrow: Decrease the value of the slider by\none step.\n\u2022 Home: Set the slider to the first allowed value in\nits range.\n\u2022 End: Set the slider to the last allowed value in its\nrange.\n\u2022 Page Up (Optional): Increment the slider by an\namount larger than the step change made by Up\nArrow.\n\u2022 Page Down (Optional): Decrement the slider by\nan amount larger than the step change made by\nDown Arrow.\nNote:\n1. Focus is placed on the slider (the visual\nobject that the mouse user would move,\nalso known as the thumb).\n2. In some circumstances, reversing the\nSliders | 175 direction of the value change for the keys\nspecified above (e.g., having Up Arrow\ndecrease the value) could create a more\nintuitive experience.\nSource: W3C WAI-ARIA 1.1 Best Practices\nAdd keyboard event handling to our slider widget. In our case, we\nwill add Left and Right Arrow controls for moving the slider thumb\nalong the slider bar, and End and Home controls for moving the\nslider thumb between the start and end of the slider bar.\n176 | Sliders An interactive or media element has been excluded\nfrom this version of the text. You can view it online\nhere:\nhttps:\/\/pressbooks.library.ryerson.ca\/wafd\/?p=349\nSliders | 177 Accessible Slider in Action\nWatch the following video of ChromeVox interacting with a\nslider. The Arrow keys are used to move the slider thumb along the\nslider bar, and the Home and End keys are used to move the slider\nthumb between the start and the end of the slider bar. You may\nnotice that ChromeVox interprets \u201cmin\u201d as \u201cminute\u201d rather than min\nand max that define the range along the slider bar. Aim to have\nthe slider you update in the activity that follows on the next page\noperate and announce like the one in the video.\nVideo: Accessible Slider\n178 | Sliders A YouTube element has been excluded from this version of the\ntext. You can view it online here:\nhttps:\/\/pressbooks.library.ryerson.ca\/wafd\/?p=349\nSliders | 179 Activity 8: Accessible Slider\nAccessible Slider\nBased on the Slider details on the previous page, apply what you\nhave learned to the associated activity files to make the slider there\naccessible.\nFiles for this activity include:\n\u2022 \/slider.html\n\u2022 \/assets\/ik_slider.js\nUse the code surrounding the highlighted solutions on the previous\npage as a guide to find where the fixes should be applied. Repair\nthe accessibility of the slider by applying the highlighted code to the\n\/assets\/ik_slider.js file.\nNote: While we suggest using the highlighted solutions we\u2019ve\nprovided, you are free to come up with your own solutions as long\nas they produce the expected results listed in the marking rubric\nbelow.\nTest your updated slider with ChromeVox to ensure each element\ndescribed in the marking rubric below is functioning as suggested.\n180 | Activity 8: Accessible Slider Requirements\nWhen you have applied your changes and tested to be sure your\nslider functions as described, submit the URL to your slider.html file\non your GitHub Pages site, to the file on the web server you are\nusing to host your copy of the activity files, or to a GitHack URL.\nGrading Rubric\nCriteria\nSlider Focusable:\nSlider thumb is keyboard focusable.\nKeyboard Operable:\nSlider thumb moves using Left and Right Arrow keys, and the Home and End keys.\nMin\/Max Values Announced:\nMinimum and maximum values are announced.\nValue Announced:\nWhen the slider moves, its new value is announced.\nTotal Points:\nActivity 8: Accessible Slider | 181 Accordions\nAccordion widgets can come in single or multi-select formats, in\nwhich one or multiple panels can be opened at once, respectively.\nThey are typically used to reduce the space that content occupies\nand to reduce scrolling. Accordions are made up of Accordion\nHeaders and Accordion Panels. The accordion headers control the\ndisplay of their associated accordion panel.\nThe WAI-ARIA roles, states, and properties used in\nan accordion\n\u2022 aria-multiselectable =\u201d(true | false)\u201d\n\u2022 role=\u201dheading\u201d\n\u2022 role=\u201dbutton\u201d\n\u2022 aria-controls=\u201d[panel id]\u201d\n\u2022 tabindex=\u201d0\u2033\n\u2022 role=\u201dregion\u201d\n\u2022 aria-hidden= \u201c(true | false)\u201d\n\u2022 aria-expanded= \u201c(true | false)\u201d\nSuggested Reading: For details on constructing accessible\naccordions, refer to: WAI-ARIA Authoring Practices:\nAccordion\n182 | Accordions The following JSFiddle presents a typical accordion widget. Review\nthe JavaScript and HTML markup. Test the accordion presented\nunder the Result tab with ChromeVox to understand how it\nfunctions without any accessibility features added. You can work\nin JSFiddle itself by clicking \u201cEdit in JSFiddle\u201d, copying the\naccessibility\/WAI-ARIA code described below to fix the accessibility\nof the accordion before completing Activity 9 on the page that\nfollows.\nAccordions | 183 An interactive or media element has been excluded\nfrom this version of the text. You can view it online\nhere:\nhttps:\/\/pressbooks.library.ryerson.ca\/wafd\/?p=353\nFirst, add the accordion to the landmarked regions by assigning\nrole=\"region\" to the opening <DL> element when the\n184 | Accordions accordion is initialized, adding the region role to the init()\nfunction.\nAn interactive or media element has been excluded\nfrom this version of the text. You can view it online\nhere:\nNext, add the aria-multiselectable attribute to the <DL>,\nwhich will be dynamically set to true or false based on plugin\nconfiguration settings. This lets a user know that more than one\naccordion panel can be opened when set to TRUE or only a single\npanel when set to FALSE. Refer to the $(document).ready block\nin the HTML, where the assignment takes place.\nAn interactive or media element has been excluded\nThe semantics of the children of the <DL> element, which was\nassigned role=\"presentation\", will also have their definition\nlist semantics removed. Add the accordion semantics\nrole=\"heading\" to assign a heading role to the <DT> elements.\nThe aria-level attribute might be used to implement nested\naccordion panels, but for our purpose here a simplified version is\nsufficient.\nAn interactive or media element has been excluded\nfrom this version of the text. You can view it online\nAdd a <div> inside the header (i.e., DT) and define its role as a\nbutton. The button is given an aria-controls attribute to define\nwhich of the accordion panels it controls. By default the toggle\nstate is set to false with aria-expanded=\"false\" to be updated\ndynamically when the button is clicked or key pressed. Finally add\ntabindex=\"0\" to the button (<div>) to make it keyboard\nfocusable.\nAccordions | 185 An interactive or media element has been excluded\nfrom this version of the text. You can view it online\nhere:\nhttps:\/\/pressbooks.library.ryerson.ca\/wafd\/?p=353\nThe tabindex will make the button focusable, but it will not make\nit clickable. The .on() jQuery function adds a click event to the\nbutton, but a keypress event must also be added. Adding\n.on('keydown') activates the onKeyDown function, defined\nbelow, so the accordion headers operate with both a mouse click\nand a keypress.\nAn interactive or media element has been excluded\nfrom this version of the text. You can view it online\nhere:\nhttps:\/\/pressbooks.library.ryerson.ca\/wafd\/?p=353\nIn the togglePanel() function, before autoCollapse(), add\nin the toggle to add and update the aria-expanded attribute for\nthe panel headers, based on whether the associated panel is visible\nor not.\n186 | Accordions An interactive or media element has been excluded\nfrom this version of the text. You can view it online\nhere:\nhttps:\/\/pressbooks.library.ryerson.ca\/wafd\/?p=353\nWithin the autoCollapse() function, toggle aria-\nexpanded=\"false\" and aria-hidden=\"true\" for all accordion\ntabs that are not the current one. This ensures only one panel is\nopen at a time.\nAn interactive or media element has been excluded\nfrom this version of the text. You can view it online\nhere:\nhttps:\/\/pressbooks.library.ryerson.ca\/wafd\/?p=353\nFinally, the accordion panel semantics are added, defining the\n<DD> elements that had its semantics removed when\nrole=\"presentation\" was added to the parent <DL>. Panels\nare given a generic role=\"region\" to make the panel browsable\nin the landmarks list, set to be hidden by default with aria-\nhidden=\"true\" so all panels are closed when the page loads.\nFurther, tabindex=\"0\" is also added to make the panels keyboard\nfocusable so the content of the panel is read as the user navigates to\nthem.\nAccordions | 187 An interactive or media element has been excluded\nfrom this version of the text. You can view it online\nhere:\nhttps:\/\/pressbooks.library.ryerson.ca\/wafd\/?p=353\nAdding Keyboard Operability\nWAI-ARIA best practices defines all recommended accordion\nkeyboard functionality, listed below. In our example, only the\nrequired keyboard events are included.\nKeyboard Interaction for Accordions\n\u2022 Enter or Space:\n\u25e6 When focus is on the accordion header\nfor a collapsed panel, expands the\nassociated panel. If the implementation\nallows only one panel to be expanded, and if\nanother panel is expanded, collapses that\n188 | Accordions panel.\n\u25e6 When focus is on the accordion header\nfor an expanded panel, collapses the panel if\nthe implementation supports collapsing.\nSome implementations require one panel to\nbe expanded at all times and allow only one\npanel to be expanded; so they do not\nsupport a collapse function.\n\u2022 Down Arrow (Optional): If focus is on an\naccordion header, moves focus to the next\naccordion header. If focus is on the last accordion\nheader, either does nothing or moves focus to the\nfirst accordion header.\n\u2022 Up Arrow (Optional): If focus is on an accordion\nheader, moves focus to the previous accordion\nheader. If focus is on the first accordion header,\neither does nothing or moves focus to the last\naccordion header.\n\u2022 Home (Optional): When focus is on an accordion\nheader, moves focus to the first accordion header.\n\u2022 End (Optional): When focus is on an accordion\nheader, moves focus to the last accordion header.\n\u2022 Ctrl+Page Down (Optional): If focus is inside an\naccordion panel or on an accordion header, moves\nfocus to the next accordion header. If focus is in\nthe last accordion header or panel, either does\nnothing or moves focus to the first accordion\nheader.\n\u2022 Ctrl+Page Up (Optional): If focus is inside an\naccordion panel, moves focus to the header for\nAccordions | 189 that panel. If focus is on an accordion header,\nmoves focus to the previous accordion header. If\nfocus is on the first accordion header, either does\nnothing or moves focus to the last accordion\nheader.\nSource: WAI-ARIA Accordion Design Patterns\nThe following onKeyDown function has been created to add\nkeyboard operability to the header elements of the accordion,\nallowing both Space bar and Enter keys to operate the toggles (i.e.,\nheaders) that open and close panels, and the Arrow keys to move\nbetween the accordion headers. By default, users can navigate\nbetween headers, and between headers and panels using the Tab\nkey.\n190 | Accordions An interactive or media element has been excluded\nfrom this version of the text. You can view it online\nhere:\nhttps:\/\/pressbooks.library.ryerson.ca\/wafd\/?p=353\nAccordions | 191 Accessible Accordion in Action\nWatch the following video to see how ChromeVox interacts with\nan accordion. The Tab key is used to navigate into the accordions,\nmove between accordion headers, and move between accordion\nheaders and panels. Arrow keys can also be used to move between\naccordion headers, but not from headers to an associated panel.\nAim to have the accordion you update in the activity on the\nfollowing page operate and announce like the one in the video.\nVideo: Accessible Accordions\n192 | Accordions A YouTube element has been excluded from this version of the\ntext. You can view it online here:\nhttps:\/\/pressbooks.library.ryerson.ca\/wafd\/?p=353\nAccordions | 193 Activity 9: Accessible\nAccordion\nAccessible Accordion\nBased on the Accordion details on the previous page, apply what you\nhave learned to the associated activity files to make the accordion\nthere accessible.\nFiles for this activity include:\n\u2022 \/accordion.html\n\u2022 \/assets\/ik_accordion.js\nUse the surroundings of the highlighted code on the previous page\nas a guide to find where the fixes should be applied. Repair the\naccessibility of the accordion by applying the highlighted code to\nthe \/assets\/ik_accordion.js file.\nNote: While we suggest using the highlighted code we\u2019ve\nprovided, you are free to come up with your own solutions provided\nthey produce the expected results listed in the marking rubric\nbelow.\n194 | Activity 9: Accessible Accordion Test your updated accordion with ChromeVox to ensure each\nelement described in the marking rubric below is functioning as\nsuggested.\nRequirements\nWhen you have applied your changes and tested to be sure your\naccordion functions as described, submit the URL to your\naccordion.html file on your GitHub Pages site, to the file on the\nweb server you are using to host your copy of the activity files, or a\nGitHack URL.\nGrading Rubric\nCriteria\nHeader Focus:\nAccordion headers are keyboard focusable.\nHeaders as Buttons:\nAccordion headers are announced as buttons instead of list items.\nOpen Panels:\nAccordion headers open panels with a click or key press.\nExpand\/Collapse:\nAccordions announce expanded when a panel is opened and collapsed when closed.\nPanels Focusable:\nAccordion panels are focusable with a Tab key press when opened.\nHeader Navigation:\nNavigation between accordion headers with Up and Down Arrow keys, and the Tab key.\nTotal Points:\nActivity 9: Accessible Accordion | 195 Tab Panels\nTab panels, much like accordions, are often used to conserve space\nand reduce scrolling. They are typically made up of a tablist that\ncontains a series of tabs, each tab controlling the display of a panel.\nAs each tab is activated, its associated panel is displayed and other\npanels are hidden. When a tab is selected, it is highlighted to\nindicate which tab and panel are active.\nWAI-ARIA roles, states, and properties used in a tab\npanel\n\u2022 role=\"tablist\"\n\u2022 role=\"tabpanel\"\n\u2022 role=\"tab\"\n\u2022 aria-hidden=\"[true|false]\"\n\u2022 tabindex = [0 | -1]\n\u2022 aria-controls=\"[panel id]\"\n\u2022 aria-selected=\"[true|false]\"\nSuggested Reading: Additional information about creating\naccessible tab panels can be found in the WAI-ARIA\nAuthoring Practices.\nThe following JSFiddle presents a typical tab panel widget. Review\nthe JavaScript and HTML markup. Test the tab panel presented\nunder the Result tab with ChromeVox to understand how it\nfunctions without any accessibility features added. You can work\nin JSFiddle itself by clicking \u201cEdit in JSFiddle\u201d, copying the\n196 | Tab Panels accessibility\/WAI-ARIA code described below to fix the accessibility\nof the tab panel before completing Activity 10 on the page that\nfollows.\nAn interactive or media element has been excluded\nfrom this version of the text. You can view it online\nhere:\nhttps:\/\/pressbooks.library.ryerson.ca\/wafd\/?p=357\nTab Panels | 197 In our case, we are generating the tabs for each child <div>\ndefined in the HTML, though tabs and tab panels could be static\nHTML. The tablist is made up of a <ul> and child <li> elements.\nWe assign role=\"tablist\" to the <ul> to remove its list\nsemantics and replace it with tab panel semantics.\nAn interactive or media element has been excluded\nfrom this version of the text. You can view it online\nhere:\nhttps:\/\/pressbooks.library.ryerson.ca\/wafd\/?p=357\nNext, we add WAI-ARIA to the panels, assigning\nrole=\"tabpanel\" to each of the original <div> elements, hide\nthem by default with aria-hidden=\"true\", and finally adding\ntabindex=\"0\" to make the panels keyboard focusable.\nAn interactive or media element has been excluded\nfrom this version of the text. You can view it online\nhere:\nhttps:\/\/pressbooks.library.ryerson.ca\/wafd\/?p=357\nThe tabs themselves are now defined, replacing the list item\nsemantics with tab semantics adding role=\"tab\" to each of the\n<li> elements generated. We also need to define which tab\ncontrols which tabpanel, dynamically generating aria-\ncontrols=\"[panel_id]\" for each of the tabs.\n198 | Tab Panels An interactive or media element has been excluded\nfrom this version of the text. You can view it online\nhere:\nhttps:\/\/pressbooks.library.ryerson.ca\/wafd\/?p=357\nWhen a tab is selected, we want to remove selection from other\ntabs with aria-selected=\"false\", and remove keyboard access\ntemporarily by assigning tabindex=\"-1\" to the unselected tabs,\nso that that tabpanel becomes next in the tab order, and users can\nnavigate directly from the tab to the panel without having to pass\nthrough the other tabs in the tablist.\nAn interactive or media element has been excluded\nfrom this version of the text. You can view it online\nhere:\nhttps:\/\/pressbooks.library.ryerson.ca\/wafd\/?p=357\nLikewise, when a tab is selected we assign aria-\nselected=\"true\" so screen readers announce the selected tab,\nwe add tabindex=\"0\" as the roving tabindex to make that tab\nfocusable.\nTab Panels | 199 An interactive or media element has been excluded\nfrom this version of the text. You can view it online\nhere:\nhttps:\/\/pressbooks.library.ryerson.ca\/wafd\/?p=357\nAs the tabs change, hide all the panels with aria-\nhidden=\"true\" so screen readers do not see them, then open\nthe panel the current tab controls with aria-hidden=\"false\" so\nscreen readers can see the active panel. These are added to the end\nof the selectTab() function.\nAn interactive or media element has been excluded\nfrom this version of the text. You can view it online\nhere:\nhttps:\/\/pressbooks.library.ryerson.ca\/wafd\/?p=357\nAdding Keyboard Operability\nW3C describes authoring practices for tab panel keyboard\ninteractions as follows.\n200 | Tab Panels Keyboard Interaction for Tab Panels\nFor the tab list:\n\u2022 Tab: When focus moves into the tab list, places\nfocus on the active tab element. When the tab\nlist contains the focus, moves focus to the next\nelement in the page tab sequence outside the\ntablist, which is typically either the first focusable\nelement inside the tab panel or the tab panel\nitself.\n\u2022 When focus is on a tab element in a horizontal\ntab list:\n\u25e6 Left Arrow: moves focus to the previous\ntab. If focus is on the first tab, moves focus\nto the last tab. Optionally, activates the\nnewly focused tab (See note below).\n\u25e6 Right Arrow: Moves focus to the next tab.\nIf focus is on the last tab element, moves\nfocus to the first tab. Optionally, activates\nthe newly focused tab (See note below).\n\u2022 When focus is on a tab in a tablist with either\nhorizontal or vertical orientation:\n\u25e6 Space or Enter: Activates the tab if it was\nnot activated automatically on focus.\n\u25e6 Home (Optional): Moves focus to the first\ntab\nTab Panels | 201 \u25e6 End (Optional): Moves focus to the last\ntab.\n\u25e6 Shift + F10: If the tab has an associated\npop-up menu, opens the menu.\n\u25e6 Delete (Optional): If deletion is allowed,\ndeletes (closes) the current tab element and\nits associated tab panel. If any tabs remain,\nsets focus to the tab following the tab that\nwas closed and activates the newly focused\ntab. Alternatively, or in addition, the delete\nfunction is available in a context menu.\nNote:\n1. It is recommended that tabs activate\nautomatically when they receive focus as\nlong as their associated tab panels are\ndisplayed without noticeable latency. This\ntypically requires tab panel content to be\npreloaded. Otherwise, automatic activation\nslows focus movement, which significantly\nhampers users\u2019 ability to navigate efficiently\nacross the tab list. For additional guidance,\nsee 5.4 Deciding When to Make Selection\nAutomatically Follow Focus.\n2. If the tabs in a tab list are arranged\nvertically:\n1. Down Arrow performs as Right\n202 | Tab Panels Arrow is described above.\n2. Up Arrow performs as Left Arrow is\ndescribed above.\n3. If the tab list is horizontal, it does not\nlisten for Down Arrow or Up Arrow so those\nkeys can provide their normal browser\nscrolling functions even when focus is\ninside the tab list.\nAs usual, the tab panel needs to be keyboard operable to be\naccessible to screen readers. The onKeyDown() function is added\nto the functions, to add arrow key navigation between tabs, and\nbetween tabs and panels. Tab navigation and Enter keys are enabled\nby default and do not need to be defined here.\nTab Panels | 203 An interactive or media element has been excluded\nfrom this version of the text. You can view it online\nhere:\nhttps:\/\/pressbooks.library.ryerson.ca\/wafd\/?p=357\n204 | Tab Panels The onKeyDown function is then added to each tab, referenced\nwith jQuery\u2019s .on('keydown') function, added to the init()\nfunction\u2019s $tab definition.\nNow, with keyboard access and WAI-ARIA added to define the\nsemantics of the tab panel, it should be fully functional for screen\nreaders.\nAn interactive or media element has been excluded\nfrom this version of the text. You can view it online\nhere:\nhttps:\/\/pressbooks.library.ryerson.ca\/wafd\/?p=357\nAccessible Tab Panel in Action\nWatch the following video showing ChromeVox interacting with a\ntab panel. The Tab key is used to navigate into the tab panel and to\nthe first tab. The arrow keys are used to move between tabs and,\nwhen on a tab, the Tab key is used to navigate to the associated\npanel. While on a panel, Shift + Tab is used to return to the tablist.\nThere might also be Up and Down arrows enabled to move between\nTab Panels | 205 tabs and panels, though we have not enabled them here. Aim to have\nthe tab panel you update in the activity coming up on the next page\noperate and announce itself like the one in the video.\nVideo: Accessible Tab Panel\nA YouTube element has been excluded from this version of the\ntext. You can view it online here:\nhttps:\/\/pressbooks.library.ryerson.ca\/wafd\/?p=357\n206 | Tab Panels Activity 10: Accessible Tab\nPanel\nAccessible Tab Panel\nBased on the Tab Panel details on the previous page, apply what you\nhave learned to the associated activity files to make the tab panel\nthere accessible.\nFiles for this activity include:\n\u2022 \/tabs.html\n\u2022 \/assets\/ik_tabs.js\nUse the surroundings of the highlighted code on the previous page\nas a guide to find where the fixes should be applied. Repair the\naccessibility of the tab panel by applying the highlighted code to the\n\/assets\/ik_tabs.js file.\nNote: While we suggest using the highlighted code we\u2019ve\nprovided, you are free to come up with your own solutions provided\nthey produce the expected results listed in the marking rubric\nbelow.\nActivity 10: Accessible Tab\nPanel | 207 Test your updated tab panel with ChromeVox to be sure each\nelement described in the marking rubric below is functioning as\nsuggested.\nRequirements\nWhen you have applied your changes and tested to ensure your tab\npanel functions as described, submit the URL to your tabs.html file\non your GitHub Pages site, to the file on the web server you are\nusing to host your copy of the activity files, or a GitHack URL.\nGrading Rubric\nCriteria Points\nList to Tab Semantics: 2.0\nList semantics are replaced with tab panel semantics. pts\nTab Position:\n1.0 pts\nFocus position in the tablist is announced.\nTab Focus opens Panel:\n1.0 pts\nWhen a tab is in focus, its associated panel displays.\nArrow Key Between Tabs: 2.0\nArrow keys can be used to navigate between tabs. pts\nTab Key from Tab to Panel:\n2.0\nTab key can be used to move from a selected tab directly to its\npts\nassociated panel, Shift+Tab to move back to tabs.\nPanels Focusable: 2.0\nPanels are keyboard focusable. pts\nTotal Points: 10.0\n208 | Activity 10: Accessible Tab Panel Carousels\nCarousels are typically used to present a series of panels or images\nthat rotate at a particular frequency.\nWAI-ARIA roles, states, and properties used in\ncarousels\n\u2022 role=\"region\"\n\u2022 aria-live=\"polite\"\n\u2022 tabindex=\"0\"\n\u2022 aria-describedby=\"[id of div with instructions]\"\n\u2022 aria-hidden=\"(true|false)\"\nSuggested Reading: The Carousel Tutorial from the W3C\nprovides additional details on constructing accessible\ncarousels.\nThe following JSFiddle presents a typical carousel widget. Review\nthe JavaScript and HTML markup. Test the carousel presented\nunder the Result tab with ChromeVox to understand how it\nfunctions without any accessibility features added. You can work in\nJSFiddle itself by clicking \u201cEdit in JSFiddle.\u201d Copy the accessibility\/\nWAI-ARIA code described below to fix the accessibility of the\naccordion before completing Activity 11 on the page that follows.\nCarousels | 209 An interactive or media element has been excluded\nfrom this version of the text. You can view it online\nhere:\nhttps:\/\/pressbooks.library.ryerson.ca\/wafd\/?p=362\nThough instructions are not always required, they can be helpful\nfor screen reader users when there is non-standard keyboard\n210 | Carousels navigation. In our case, we\u2019ll add a few words and assign them to\nthe \u201cinstructions\u201d variable in the default settings of the init()\nfunction for the carousel. The instructions will be rendered in its\nown <div> and referenced with aria-describedby a little later\nin the code.\nAn interactive or media element has been excluded\nfrom this version of the text. You can view it online\nhere:\nhttps:\/\/pressbooks.library.ryerson.ca\/wafd\/?p=362\nWe\u2019ll define a few attributes when the carousel is initialized: give\nit a role=\"region\" to add it to the landmarks, add a tabindex\nto make it keyboard focusable, and reference the ID of the\ninstructions <div> with aria-describedby. Add keyboard\noperability with .on('keydown') and a reference to the\nonKeyDown function, described below.\nAn interactive or media element has been excluded\nfrom this version of the text. You can view it online\nhere:\nhttps:\/\/pressbooks.library.ryerson.ca\/wafd\/?p=362\nScreen reader users will not need the Next\/Previous controls, so\nhide them. They will be using the Arrow keys instead, defined in the\nonKeyDown function further below.\nCarousels | 211 An interactive or media element has been excluded\nfrom this version of the text. You can view it online\nhere:\nhttps:\/\/pressbooks.library.ryerson.ca\/wafd\/?p=362\nHide images from screen readers. Notice that the alt text for\nthe images are defined in the HTML but left empty so it is not read\nin this case. Screen readers will read the figcaptions.\nAn interactive or media element has been excluded\nfrom this version of the text. You can view it online\nhere:\nhttps:\/\/pressbooks.library.ryerson.ca\/wafd\/?p=362\nAdd screen reader instructions by generating a <div> that\ncontains the instruction text defined earlier and hide the <div>\nby default. The instructions are read when the carousel receives\nfocus, and the aria-describedby attribute is dynamically added\nto reference the instructions.\nAn interactive or media element has been excluded\nfrom this version of the text. You can view it online\nhere:\nhttps:\/\/pressbooks.library.ryerson.ca\/wafd\/?p=362\n212 | Carousels Add an aria-live attribute to the stopTimer function. Set its\nvalue to polite so content updating in the live region announces\nwhen a screen reader is not reading elsewhere on the page. The\ncontent of the visible carousel panel is read automatically when it is\nin focus, manually navigating between panels with the Arrow keys.\nAn interactive or media element has been excluded\nfrom this version of the text. You can view it online\nRemove the live region when focus on the carousel is removed\nin the startTimer function. By doing so, the live region stops\nreading when the timer is reactivated onblur, and it does not\ninterfere with the screen reader reading elsewhere on the page.\nAn interactive or media element has been excluded\nfrom this version of the text. You can view it online\nHide the active slide from screen readers with aria-\nhidden=\"true\". Then, make the next slide visible to screen\nreaders with aria-hidden=\"false\" in the gotoSlide\nfunction.\nCarousels | 213 An interactive or media element has been excluded\nfrom this version of the text. You can view it online\nhere:\nhttps:\/\/pressbooks.library.ryerson.ca\/wafd\/?p=362\nAdding Keyboard Operability\nAdd keyboard operations for the carousel, pulling keyboard events\nfrom ik_utils.js to use Left and Right arrows for moving between\npanels in the carousel, and the Esc key to exit the carousel and\nresume automatic rotation.\n214 | Carousels An interactive or media element has been excluded\nfrom this version of the text. You can view it online\nhere:\nhttps:\/\/pressbooks.library.ryerson.ca\/wafd\/?p=362\nCarousels | 215 Accessible Carousel in Action\nWatch the following video to see how ChromeVox interacts with\na carousel. The carousel rotates automatically when focus is\nelsewhere on the page. When it receives focus, rotation stops, and\nnavigation instructions are read. The Left and Right arrow keys are\nused to move manually between panels in the carousel while it has\nfocus. The contents of each panel are read through a live region,\ndynamically added to the main container <div> when the carousel\nhas focus. Using the Tab key while the carousel has focus sends\nfocus to any focusable element within the panel that is in view, a link\nto the person who shared the photo in this case. Aim to have the\ncarousel you update in the activity on the following page operate\nand announce like the one in the video.\nVideo: Accessible Carousel\nA YouTube element has been excluded from this version of the\ntext. You can view it online here:\nhttps:\/\/pressbooks.library.ryerson.ca\/wafd\/?p=362\n216 | Carousels Activity 11: Accessible\nCarousel\nAccessible Carousel\nBased on the Carousel details on the\nprevious page, apply what you have learned to the associated\nactivity files to make the carousel there accessible.\nFiles for this activity include:\n\u2022 \/carousel.html\n\u2022 \/assets\/ik_carousel.js\nUse the surroundings of the highlighted code on the previous page\nas a guide to find where the fixes should be applied. Repair the\naccessibility of the carousel by applying the highlighted code to the\n\/assets\/ik_carousel.js file.\nNote: While we suggest using the highlighted code we\u2019ve\nprovided, you are free to come up with your own solutions provided\nthey produce the expected results listed in the marking rubric\nbelow.\nTest your updated carousel with ChromeVox to ensure each\nActivity 11: Accessible Carousel | 217 element described in the marking rubric below is functioning as\nsuggested.\nRequirements\nWhen you have applied your changes and tested to ensure your\ncarousel functions as described, submit the URL to your\ncarousel.html file on your GitHub Pages site, to the file on the web\nserver you are using to host your copy of the activity files, or a\nGitHack URL.\nGrading Rubric\nCriteria\nInstructions Provided\nScreen reader instructions are provided when carousel receives focus.\nCarousel Focusable\nCarousel panels are keyboard focusable.\nCarousel Navigation\nNavigate between panels with the Left and Right Arrow keys.\nPanels Read Aloud\nWhile the carousel has focus, each panel reads aloud when it comes into view.\nManual while in Focus\nWhen in focus, or while a mouse pointer is hovering over the carousel, panels rotate manuall\nRotate when No Focus\nWhen the carousel is not in focus, panels rotate automatically.\nTotal Points:\n218 | Activity 11: Accessible Carousel 6. INTERACTIVE WAI-ARIA\n(ADVANCED)\n6. Interactive WAI-ARIA\n(Advanced) | 219  Objectives and Activities\nObjectives\nBy the end of this unit, you will be able to:\n\u2022 Describe the elements of an accessible menu bar\n\u2022 Identify tree menu accessibility features\n\u2022 Explain how an accessible sortable list functions\nActivities\n\u2022 Create the following accessible elements:\n\u25e6 Menu bar\n\u25e6 Tree menu\n\u25e6 Sortable list\nObjectives and Activities | 221 Menu Bars\nMenu bars are typically presented horizontally across the top of\na website or web application. They contain links to key areas of\nthe website or application. They function as toggles that open\nsubmenus or function as both links and toggles. Menu bars remain\nin view across the entire website or application.\nRoles, states, and properties used in a menu bar\n\u2022 aria-hidden = [true|false]\n\u2022 role = \"menubar\"\n\u2022 role = \"menu\"\n\u2022 role = \"menuitem\"\n\u2022 aria-labelledby = \"[instruction div id]\"\n\u2022 aria-label = [link text]\n\u2022 tabindex = [0 | -1]\n\u2022 aria-haspopup = \"true\"\n\u2022 aria-expanded = \"[true|false]\"\n\u2022 aria-selected = \"[true|false]\"\nSuggested Reading: For more about accessible menus, see\nWAI-ARIA Best Practice 1.1: Menus or Menu Bar.\nThe following JSFiddle presents a typical menu bar widget with a\nvariety of sub menus. Review the JavaScript and HTML markup.\nTest the menu bar presented under the Result tab with ChromeVox\nto understand how it functions without any accessibility features\nadded. You can work in JSFiddle itself by clicking the \u201cEdit in\n222 | Menu Bars JSFiddle\u201d link at the top, right-hand side, copying the accessibility\/\nWAI-ARIA code described below to fix the accessibility of the menu\nbar before completing Activity 12 on the page that follows.\nAn interactive or media element has been excluded\nfrom this version of the text. You can view it online\nhere:\nhttps:\/\/pressbooks.library.ryerson.ca\/wafd\/?p=368\nFirst, provide some instructions on how to use the menu with a\nkeyboard and add them to the default options.\nAn interactive or media element has been excluded\nfrom this version of the text. You can view it online\nhere:\nhttps:\/\/pressbooks.library.ryerson.ca\/wafd\/?p=368\nHide the instructions from screen readers until needed, adding\naria-hidden=\"true\" to the instructions <div> defined when\nthe menu is initialized.\nAn interactive or media element has been excluded\nfrom this version of the text. You can view it online\nhere:\nhttps:\/\/pressbooks.library.ryerson.ca\/wafd\/?p=368\nAdd role=\"menubar\" to the top level <ul> in the menu. Make\nMenu Bars | 223 that <ul> keyboard focusable with tabindex=\"0\", so it reads\nthe instructions while in focus and referenced with aria-\nlabelledby.\nAn interactive or media element has been excluded\nfrom this version of the text. You can view it online\nhere:\nhttps:\/\/pressbooks.library.ryerson.ca\/wafd\/?p=368\nFor all the menu items in the menu bar that have submenus,\nadd role=\"menu\" to their <ul> and hide them by default using\naria-hidden=\"true\". This can be located after the\n$elem.find('ul:eq(0)') block presented immediately above.\nAn interactive or media element has been excluded\nfrom this version of the text. You can view it online\nhere:\nhttps:\/\/pressbooks.library.ryerson.ca\/wafd\/?p=368\nHide the links in the menu items from screen readers by default\nusing tabindex=\"-1\" and setting aria-hidden=\"true\".\nAn interactive or media element has been excluded\nfrom this version of the text. You can view it online\nhere:\nhttps:\/\/pressbooks.library.ryerson.ca\/wafd\/?p=368\n224 | Menu Bars Set up the menu items throughout the menu using\nrole=\"menuitem\". Also, remove keyboard access by default with\ntabindex=\"-1\". Next, label each menu item with the text of the\nassociated link using aria-label=\"[$link.text]\".\nAn interactive or media element has been excluded\nfrom this version of the text. You can view it online\nhere:\nhttps:\/\/pressbooks.library.ryerson.ca\/wafd\/?p=368\nFor each of the menu items that has a submenu, add aria-\nhaspopup=\"true\" to announce the presence of the submenu, and\nset its default state to \u201ccollapsed\u201d by adding aria-\nexpanded=\"false\".\nAn interactive or media element has been excluded\nfrom this version of the text. You can view it online\nhere:\nhttps:\/\/pressbooks.library.ryerson.ca\/wafd\/?p=368\nWhen a menu item is marked selected, also add aria-\nselected=\"true\" and add keyboard access back to the menu\nitem with tabindex=\"0\".\nAn interactive or media element has been excluded\nfrom this version of the text. You can view it online\nMenu Bars | 225 here:\nhttps:\/\/pressbooks.library.ryerson.ca\/wafd\/?p=368\nAdd keyboard access back to menu items using tabindex=\"0\".\nAn interactive or media element has been excluded\nfrom this version of the text. You can view it online\nhere:\nhttps:\/\/pressbooks.library.ryerson.ca\/wafd\/?p=368\nReference the keyboard access class, where mouse events are\ndefined in the onKeyDown function, described below.\nAn interactive or media element has been excluded\nfrom this version of the text. You can view it online\nhere:\nhttps:\/\/pressbooks.library.ryerson.ca\/wafd\/?p=368\nIn the showSubMenu function, add aria-expanded=\"true\"\nsubmenus when they are expanded, remove keyboard access from\nthe submenu container with tabindex=\"-1\". Then, make the\nsubmenu visible with aria-hidden=\"false\".\n226 | Menu Bars An interactive or media element has been excluded\nfrom this version of the text. You can view it online\nhere:\nhttps:\/\/pressbooks.library.ryerson.ca\/wafd\/?p=368\nIn the hideSubMenu function, set aria-expanded=\"false\",\nhide submenus with aria-hidden=\"true\", and remove keyboard\naccess with tabindex=\"-1\" when a submenu is closed.\nAn interactive or media element has been excluded\nfrom this version of the text. You can view it online\nhere:\nhttps:\/\/pressbooks.library.ryerson.ca\/wafd\/?p=368\nWhen the collapseAll function is called, to collapse any open\nmenus, reverse all attributes defining the element as open, reverting\nto aria-hidden=\"true\", aria-expanded=\"false\" and re-\nadding keyboard access with tabindex=\"0\" so it can be opened\nagain.\nAn interactive or media element has been excluded\nfrom this version of the text. You can view it online\nhere:\nhttps:\/\/pressbooks.library.ryerson.ca\/wafd\/?p=368\nMenu Bars | 227 Adding Keyboard Operability\nMenu bar keyboard functionality can be complex, particularly with\nlarge menus with multiple levels of submenus, and they can include\nredundant keys that perform the same function. The W3C defines\nsuggested keyboard interaction for a menu bar as follows:\nMenu Bar Keyboard Interaction\nThis description of keyboard behaviours assumes the\nfollowing:\n1. A horizontal menubar containing several\nmenuitem elements.\n2. All items in the menubar have child submenus\nthat contain multiple vertically arranged items.\n3. Some of the menuitem elements in the\nsubmenus have child submenus with items that\nare also vertically arranged.\nWhen reading the following descriptions, also keep in\nmind these items:\n1. Focusable elements, which may have role\nmenuitem, menuitemradio, or\nmenuitemcheckbox, are referred to as items.\n2. If a behaviour applies to only certain types of\nitems, e.g., menuitem elements, the specific role\nname is used.\n228 | Menu Bars 3. Submenus, also known as pop-up menus, are\nelements with role menu.\n4. Except where noted, menus opened from a\nmenu button behave the same as menus opened\nfrom a menu bar.\n\u2022 When a menu opens, or when a menubar\nreceives focus, keyboard focus is placed on the\nfirst item. All items are focusable as described in\n5.6 Keyboard Navigation Inside Components.\n\u2022 Enter:\n\u25e6 When focus is on a menuitem that has a\nsubmenu, opens the submenu and places\nfocus on its first item.\n\u25e6 Otherwise, activates the item and closes\nthe menu.\n\u2022 Space:\n\u25e6 (Optional): When focus is on a\nmenuitemcheckbox, changes the state\nwithout closing the menu.\n\u25e6 (Optional): When focus is on a\nmenuitemradio that is not checked,\nwithout closing the menu, checks the\nfocused menuitemradio and unchecks\nany other checked menuitemradio\nelement in the same group.\n\u25e6 (Optional): When focus is on a menuitem\nthat has a submenu, opens the submenu and\nplaces focus on its first item.\nMenu Bars | 229 \u25e6 (Optional): When focus is on a menuitem\nthat does not have a submenu, activates the\nmenuitem and closes the menu.\n\u2022 Down Arrow:\n\u25e6 When focus is on a menuitem in a\nmenubar, opens its submenu and places\nfocus on the first item in the submenu.\n\u25e6 When focus is in a menu, moves focus to\nthe next item, optionally wrapping from the\nlast to the first.\n\u2022 Up Arrow:\n\u25e6 When focus is in a menu, moves focus to\nthe previous item, optionally wrapping from\nthe first to the last.\n\u25e6 (Optional): When focus is on a menuitem\nin a menubar, opens its submenu and\nplaces focus on the last item in the\nsubmenu.\n\u2022 Right Arrow:\n\u25e6 When focus is in a menubar, moves\nfocus to the next item, optionally wrapping\nfrom the last to the first.\n\u25e6 When focus is in a menu and on a\nmenuitem that has a submenu, opens the\nsubmenu and places focus on its first item.\n\u25e6 When focus is in a menu and on an item\nthat does not have a submenu, performs the\n230 | Menu Bars following 3 actions:\n1. Closes the submenu and any parent\nmenus.\n2. Moves focus to the next menuitem\nin the menubar.\n3. Either: (Recommended) opens the\nsubmenu of that menuitem without\nmoving focus into the submenu, or\nopens the submenu of that\nmenuitem and places focus on the\nfirst item in the submenu.\nNote that if the menubar were not\npresent, e.g., the menus were opened from a\nmenubutton, Right Arrow would not do\nanything when focus is on an item that does\nnot have a submenu.\n\u2022 Left Arrow:\n\u25e6 When focus is in a menubar, moves\nfocus to the previous item, optionally\nwrapping from the last to the first.\n\u25e6 When focus is in a submenu of an item in\na menu, closes the submenu and returns\nfocus to the parent menuitem.\n\u25e6 When focus is in a submenu of an item in\na menubar, performs the following 3\nactions:\n1. Closes the submenu.\n2. Moves focus to the previous\nMenu Bars | 231 menuitem in the menubar.\n3. Either: (Recommended) opens the\nsubmenu of that menuitem without\nmoving focus into the submenu, or\nopens the submenu of that\nmenuitem and places focus on the\nfirst item in the submenu.\n\u2022 Home: If arrow key wrapping is not supported,\nmoves focus to the first item in the current menu\nor menubar.\n\u2022 End: If arrow key wrapping is not supported,\nmoves focus to the last item in the current menu\nor menubar.\n\u2022 Any key that corresponds to a printable\ncharacter (Optional): Move focus to the next menu\nitem in the current menu whose label begins with\nthat printable character.\n\u2022 Escape: Close the menu that contains focus and\nreturn focus to the element or context, e.g., menu\nbutton or parent menuitem, from which the\nmenu was opened.\n\u2022 Tab: Moves focus to the next element in the tab\nsequence, and if the item that had focus is not in a\nmenubar, closes its menu and all open parent\nmenu containers.\n\u2022 Shift + Tab: Moves focus to the previous element\nin the tab sequence, and if the item that had focus\nis not in a menubar, closes its menu and all open\nparent menu containers.\n232 | Menu Bars Note:\n1. Disabled menu items are focusable but\ncannot be activated.\n2. A separator in a menu is not focusable or\ninteractive.\n3. If a menu is opened or a menu bar\nreceives focus as a result of a context\naction, Esc or Enter may return focus to the\ninvoking context. For example, a rich text\neditor may have a menu bar that receives\nfocus when a shortcut key, e.g., Alt+F10, is\npressed while editing. In this case, pressing\nEsc or activating a command from the menu\nmay return focus to the editor.\n4. Although it is recommended that authors\navoid doing so, some implementations of\nnavigation menu bars may have menuitem\nelements that both perform a function and\nopen a submenu. In such implementations,\nEnter and Space bar perform a navigation\nfunction, e.g., load new content, while Down\nArrow, in a horizontal menu bar, opens the\nsubmenu associated with that same\nmenuitem.\n5. When items in a menubar are arranged\nvertically and items in menu containers are\narranged horizontally:\nMenu Bars | 233 1. Down Arrow performs as Right\nArrow is described above, and vice\nversa.\n2. Up Arrow performs as Left Arrow is\ndescribed above, and vice versa.\nSource: W3C WAI-ARIA 1.1 Authoring Practices\nHere we have implemented a subset of the keyboard interaction\nW3C recommends in an onKeyDown() function that is called when\nevent handlers are set up for menu items. These keys include Left\nand Right arrows, Up and Down arrows, the Space bar and Enter\nkeys, and Tab and Esc keys. Copy the following function into the\nik_menu.js file, near the end, to add keyboard operability to the\nmenu.\nAn interactive or media element has been excluded\nfrom this version of the text. You can view it online\nhere:\nhttps:\/\/pressbooks.library.ryerson.ca\/wafd\/?p=368\nAccessible Menu Bar in Action\nWatch the following video showing ChromeVox interacting with a\n234 | Menu Bars menu bar. The Tab key is used to navigate into the menu bar, to\nthe first menu item, and to exit the menu bar. Left and Right arrow\nkeys are used to move across the top level menu items. Up and\nDown arrows are used to move into and out of a submenu and to\nmove between menu items in a submenu. The Space bar or Enter\nkey are used to activate a menu item. The Esc key closes the current\nsubmenu. Aim to have the menu bar you update in the activity on\nthe next page operate and announce itself like the one in the video.\nVideo: Accessible Menu Bar\nA YouTube element has been excluded from this version of the\ntext. You can view it online here:\nhttps:\/\/pressbooks.library.ryerson.ca\/wafd\/?p=368\nMenu Bars | 235 Activity 12: Accessible Menu\nBar\nAccessible Menu Bar\nBased on the Menu bar details on the\nprevious page, apply what you have learned to the associated\nactivity files to make the menu there accessible.\nFiles for this activity include:\n\u2022 \/menu.html\n\u2022 \/assets\/ik_menu.js\nUse the surroundings of the highlighted code on the previous page\nas a guide to find where the fixes should be applied. Repair the\naccessibility of the menu bar by applying the highlighted code to the\n\/assets\/ik_menu.js file.\nNote: While we suggest using the highlighted code we\u2019ve\nprovided, you are free to come up with your own solutions provided\nthey produce the expected results listed in the marking rubric\nbelow.\nTest your updated menu bar with ChromeVox to ensure each\n236 | Activity 12: Accessible Menu\nBar element described in the marking rubric below is functioning as\nsuggested.\nRequirements\nWhen you have applied your changes and tested to be sure your\nmenu bar functions as described, submit the URL to your menu.html\nfile on your GitHub Pages site, to the file on the web server you are\nusing to host your copy of the activity files, or a GitHack URL.\nGrading Rubric\nCriteria Points\nInstructions Provided:\nInstructions are announced on how to use the menu bar with a 1.0 pts\nkeyboard, when the menu bar first receives focus.\nMenu Bar Semantics: 2.0\nList item semantics are replaced with menu semantics. pts\nSubmenus Announced:\n2.0\nWhen a menu item with a submenu receives focus, the presence\npts\nof a submenu is announced.\nFocus Control:\n2.0\nOnly elements of the menu bar that are in view are able to\npts\nreceive focus.\nKeyboard Operable:\n3.0\nAs described in Adding Keyboard Operability for a menu bar, the\npts\nmenu bar functions using a keyboard (and mouse).\nTotal Points: 10.0\nActivity 12: Accessible Menu Bar | 237 Tree Menus\nTree menus often have the same underlying HTML structure as a\nmenu bar, but rather than being arranged in a horizontal layout,\nthey tend to be arranged vertically.\nWAI-ARIA roles, states, and properties used in a tree\nmenu\n\u2022 tabindex = [0 | -1]\n\u2022 aria-labelledby = [instruction div id | title div id]\n\u2022 aria-hidden = [true | false]\n\u2022 role = \"tree\"\n\u2022 role = \"treeitem\"\n\u2022 role = \"presentation\"\n\u2022 aria-level = [number of parent ULs]\n\u2022 aria-setsize = [number of LIs in a level]\n\u2022 aria-posinset = [position of each LI in a set]\n\u2022 aria-expanded = [true | false]\n\u2022 aria-selected = [true | false]\nSuggested Reading: For more about accessible tree menus,\nsee WAI-ARIA 1.1 Authoring Practices 1.1: Tree View\nThe following JSFiddle presents a typical tree menu widget with\na few submenus. Review the JavaScript and HTML markup. Test\nthe tree menu presented under the Result tab with ChromeVox\nto understand how it functions without any accessibility features\nadded. You can work in JSFiddle itself by clicking \u201cEdit in JSFiddle\u201d at\n238 | Tree Menus the top, right-hand side, copying the accessibility\/WAI-ARIA code\ndescribed below to fix the accessibility of the tree menu before\ncompleting Activity 13 on the page that follows.\nAn interactive or media element has been excluded\nfrom this version of the text. You can view it online\nhere:\nhttps:\/\/pressbooks.library.ryerson.ca\/wafd\/?p=374\nTree Menus | 239 First, define instructions on using the tree menu with a keyboard.\nAn interactive or media element has been excluded\nfrom this version of the text. You can view it online\nhere:\nhttps:\/\/pressbooks.library.ryerson.ca\/wafd\/?p=374\nWithin the init() function add keyboard focus to the tree\ncontainer by applying tabindex=\"0\" to it, and label the container\nwith the instructions created above, which gets read by screen\nreaders when the menu initially receives focus.\nAn interactive or media element has been excluded\nfrom this version of the text. You can view it online\nhere:\nhttps:\/\/pressbooks.library.ryerson.ca\/wafd\/?p=374\nWithin the init() function, hide the instructions <div> from\nscreen readers by default by setting aria-hidden=\"true\" when\nthe tree menu is initialized.\n240 | Tree Menus An interactive or media element has been excluded\nfrom this version of the text. You can view it online\nhere:\nhttps:\/\/pressbooks.library.ryerson.ca\/wafd\/?p=374\nWithin the init() function replace the unordered list\nsemantics with tree menu semantics using role=\"tree\", and give\nit a title using aria-labelledby to reference the title defined in\nthe default options.\nAn interactive or media element has been excluded\nfrom this version of the text. You can view it online\nhere:\nhttps:\/\/pressbooks.library.ryerson.ca\/wafd\/?p=374\nWithin the init() function, define menu items with\nrole=\"treeitem\", remove all keyboard access by default with\ntabindex=\"-1\", set the number of levels in the tree based on\nthe number of parent ULs with aria-level=[number of ULs],\nset the number of tree items on a given level with aria-\nsetsize=\"[number of LIs in a UL]\", and finally define\nthe position of each tree item within a level using aria-\nposinset=\"[child LI index]\".\nTree Menus | 241 An interactive or media element has been excluded\nfrom this version of the text. You can view it online\nhere:\nhttps:\/\/pressbooks.library.ryerson.ca\/wafd\/?p=374\nWithin the init() function, if a tree item has a submenu UL\nthat has been opened, set aria-expanded=\"true\", otherwise set\naria-expanded=\"false\".\nAn interactive or media element has been excluded\nfrom this version of the text. You can view it online\nhere:\nhttps:\/\/pressbooks.library.ryerson.ca\/wafd\/?p=374\nWithin the init() function, for each tree item use the text of\nthe associated span element as its label. To ensure both the label\n242 | Tree Menus and the contents of the span element are not both read, assign\nrole=\"presentation\" to the span.\nAn interactive or media element has been excluded\nfrom this version of the text. You can view it online\nhere:\nhttps:\/\/pressbooks.library.ryerson.ca\/wafd\/?p=374\nWithin the init() function, where mouse onclick\nfunctionality is used, provide equivalent keydown functionality,\nhere referencing the onKeyDown function, shown below, that\ndefines the keys to operate the menu.\nAn interactive or media element has been excluded\nfrom this version of the text. You can view it online\nWithin the init() function, right after adding keydown\noperability, make the first item in the tree menu focusable by adding\ntabindex=\"0\" to the first li.\nTree Menus | 243 An interactive or media element has been excluded\nfrom this version of the text. You can view it online\nhere:\nhttps:\/\/pressbooks.library.ryerson.ca\/wafd\/?p=374\nWithin the selectItem() function, set up a roving tabindex,\nwhile at the same time applying aria-selected=[true |\nfalse] when tree items receive or lose focus.\n244 | Tree Menus An interactive or media element has been excluded\nfrom this version of the text. You can view it online\nhere:\nhttps:\/\/pressbooks.library.ryerson.ca\/wafd\/?p=374\nTree Menus | 245 In the toggleSubmenu() function, announce the state of\nsubmenus to the screen reader by toggling the aria-\nexpanded=[true | false] attribute when a menu is opened or\nclosed.\nAn interactive or media element has been excluded\nfrom this version of the text. You can view it online\nhere:\nhttps:\/\/pressbooks.library.ryerson.ca\/wafd\/?p=374\nAdding Keyboard Operability\nMuch like the menu bar described in the previous activity, keyboard\noperability for a tree menu can be complex, with various operations\nusing multiple key strokes to perform the same function. W3C\n246 | Tree Menus describes potential keyboard operation in the WAI-ARIA Authoring\nPractices 1.1, reproduced below.\nTree Menu Keyboard Interaction\nFor a vertically oriented tree:\n\u2022 When a single-select tree receives focus:\n\u25e6 If none of the nodes are selected before\nthe tree receives focus, focus is set on the\nfirst node.\n\u25e6 If a node is selected before the tree\nreceives focus, focus is set on the selected\nnode.\n\u2022 When a multi-select tree receives focus:\n\u25e6 If none of the nodes are selected before\nthe tree receives focus, focus is set on the\nfirst node.\n\u25e6 If one or more nodes are selected before\nthe tree receives focus, focus is set on the\nfirst selected node.\n\u2022 Right Arrow:\n\u25e6 When focus is on a closed node, opens the\nnode; focus does not move.\n\u25e6 When focus is on a open node, moves\nfocus to the first child node.\nTree Menus | 247 \u25e6 When focus is on an end node, does\nnothing.\n\u2022 Left Arrow:\n\u25e6 When focus is on an open node, closes the\nnode.\n\u25e6 When focus is on a child node that is also\neither an end node or a closed node, moves\nfocus to its parent node.\n\u25e6 When focus is on a root node that is also\neither an end node or a closed node, does\nnothing.\n\u2022 Down Arrow: Moves focus to the next node that\nis focusable without opening or closing a node.\n\u2022 Up Arrow: Moves focus to the previous node\nthat is focusable without opening or closing a\nnode.\n\u2022 Home: Moves focus to the first node in the tree\nwithout opening or closing a node.\n\u2022 End: Moves focus to the last node in the tree\nthat is focusable without opening a node.\n\u2022 Enter: Activates a node, i.e., performs its default\naction. For parent nodes, one possible default\naction is to open or close the node. In single-\nselect trees where selection does not follow focus\n(see note below), the default action is typically to\nselect the focused node.\n\u2022 Type-ahead is recommended for all trees,\nespecially for trees with more than 7 root nodes:\n248 | Tree Menus \u25e6 Type a character: focus moves to the next\nnode with a name that starts with the typed\ncharacter.\n\u25e6 Type multiple characters in rapid\nsuccession: focus moves to the next node\nwith a name that starts with the string of\ncharacters typed.\n\u2022 * (Optional): Expands all siblings that are at the\nsame level as the current node.\n\u2022 Selection in multi-select trees: Authors may\nimplement either of two interaction models to\nsupport multiple selection: a recommended model\nthat does not require the user to hold a modifier\nkey, such as Shift or Ctrl, while navigating the list\nor an alternative model that does require modifier\nkeys to be held while navigating in order to avoid\nlosing selection states.\n\u25e6 Recommended selection model \u2013 holding\na modifier key while moving focus is not\nnecessary:\n\u25aa Space: Toggles the selection state of\nthe focused node.\n\u25aa Shift + Down Arrow (Optional):\nMoves focus to and toggles the\nselection state of the next node.\n\u25aa Shift + Up Arrow (Optional): Moves\nfocus to and toggles the selection\nstate of the previous node.\n\u25aa Shift + Space (Optional): Selects\nTree Menus | 249 contiguous nodes from the last\nselected node to the current node.\n\u25aa Ctrl + Shift + Home (Optional):\nSelects the node with focus and all\nnodes up to the first node.\n\u25aa Ctrl + Shift + End (Optional): Selects\nthe node with focus and all nodes\ndown to the last node.\n\u25aa Ctrl + A (Optional): Selects all nodes\nin the tree. Optionally, if all nodes are\nselected, it can also unselect all nodes.\n\u25e6 Alternative selection model \u2013 moving\nfocus without holding the Shift or Ctrl\nmodifier unselects all selected nodes except\nfor the focused node:\n\u25aa Shift + Down Arrow: Moves focus to\nand toggles the selection state of the\nnext node.\n\u25aa Shift + Up Arrow: Moves focus to\nand toggles the selection state of the\nprevious node.\n\u25aa Ctrl + Down Arrow: Without\nchanging the selection state, moves\nfocus to the next node.\n\u25aa Ctrl + Up Arrow: Without changing\nthe selection state, moves focus to the\nprevious node.\n\u25aa Ctrl + Space: Toggles the selection\nstate of the focused node.\n\u25aa Shift + Space (Optional): Selects\n250 | Tree Menus contiguous nodes from the most\nrecently selected node to the current\nnode.\n\u25aa Ctrl + Shift + Home (Optional):\nSelects the node with focus and all\nnodes up to the first node.\n\u25aa Ctrl + Shift + End (Optional): Selects\nthe node with focus and all nodes\ndown to the last node.\n\u25aa Ctrl + A (Optional): Selects all nodes\nin the tree. Optionally, if all nodes are\nselected, it can also unselect all nodes.\nNote:\n1. DOM focus (the active element) is\nfunctionally distinct from the selected state.\nFor more details, see this description of\ndifferences between focus and selection.\n2. The tree role supports the aria-\nactivedescendant property, which provides\nan alternative to moving DOM focus among\ntreeitem elements when implementing\nkeyboard navigation. For details, see\nManaging Focus in Composites Using aria-\nactivedescendant.\n3. In a single-select tree, moving focus may\noptionally unselect the previously selected\nnode and select the newly focused node.\nTree Menus | 251 This model of selection is known as\n\u201cselection follows focus\u201d. Having selection\nfollow focus can be very helpful in some\ncircumstances and can severely degrade\naccessibility in others. For additional\nguidance, see Deciding When to Make\nSelection Automatically Follow Focus.\n4. If selecting or unselecting all nodes is an\nimportant function, implementing separate\ncontrols for these actions, such as buttons\nfor \u201cSelect All\u201d and \u201cUnselect All\u201d,\nsignificantly improves accessibility.\n5. If the nodes in a tree are arranged\nhorizontally:\n1. Down Arrow performs as Right\nArrow is described above and vice\nversa.\n2. Up Arrow performs as Left Arrow is\ndescribed above and vice versa.\nSource: WAI-ARIA Authoring Practices 1.1\nFor the tree menu created here, we\u2019ve added in basic keyboard\noperability. Keyboard operation includes: Up and Down, and Left\nand Right Arrows for navigating within the tree, and the Enter or\nSpace bar keys to toggle submenus open or closed. The Tab key\nby default enters and exits the tree menu and does not need to be\ndefined as part of the keyboard operability of the tree menu.\n252 | Tree Menus An interactive or media element has been excluded\nfrom this version of the text. You can view it online\nhere:\nhttps:\/\/pressbooks.library.ryerson.ca\/wafd\/?p=374\nTree Menus | 253 254 | Tree Menus Accessible Tree Menu in Action\nWatch the following video showing ChromeVox interacting with a\ntree menu. The Tab key is used to navigate into the tree menu, to\nthe first tree item, and to exit the tree menu. The Up and Down\narrows are used to move between tree items. The Space bar or Enter\nkey are used to expand and collapse a tree item with a submenu.\nWhen a submenu is opened, focus moves to the first tree item in the\nmenu. Aim to have the tree menu you update in Activity 13 operate\nand announce itself like the one in the video.\nVideo: Accessible Tree Menu\nTree Menus | 255 A YouTube element has been excluded from this version of the\ntext. You can view it online here:\nhttps:\/\/pressbooks.library.ryerson.ca\/wafd\/?p=374\n256 | Tree Menus Activity 13: Accessible Tree\nNavigation\nBased on the Tree Menu details on the\nprevious page, apply what you have\nlearned to the associated activity files to\nmake the tree menu there accessible.\nFiles for this activity include:\n\u2022 \/tree.html\n\u2022 \/assets\/ik_treemenu.js\nUse the surroundings of the highlighted code on the previous page\nas a guide to find where the fixes should be applied. Repair the\naccessibility of the tree menu by applying the highlighted code to\nthe \/assets\/ik_treemenu.js file.\nNote: While we suggest using the highlighted code we\u2019ve\nprovided, you are free to come up with your own solutions provided\nthey produce the expected results listed in the marking rubric\nbelow.\nTest your updated tree menu with ChromeVox to ensure each\nelement described in the marking rubric below is functioning as\nsuggested.\nRequirements\nWhen you have applied your changes and tested to be sure your\ntree menu functions as described, submit the URL to your tree.html\nfile on your GitHub Pages site, to the file on the web server you are\nusing to host your copy of the activity files, or a GitHack URL.\nActivity 13: Accessible Tree\nNavigation | 257 Grading Rubric\nCriteria Points\nInstructions Provided:\nWhen the tree menu receives focus, instructions are 1.0 pts\nannounced on how to use the menu with a keyboard.\nTree Menu Semantics:\nWhen navigating through the tree menu with a keyboard, 2.0 pts\nelements are announced with tree menu semantics.\nTree Submenus:\nWhen a tree menu item with a submenu receive focus, the\n2.0 pts\nsubmenu state is announced as expanded when open or\ncollapsed when closed.\nFocus Control:\nOnly elements of the tree menu that are in view are able to 2.0 pts\nreceive focus.\nKeyboard Operable:\nTree menu functions with a keyboard as described in Adding 3.0 pts\nKeyboard Operability for tree menus.\nTotal Points: 10.0\n258 | Activity 13: Accessible Tree Navigation Sortable Lists\nOne of the more common types of widgets that present barriers for\nscreen reader users are drag and drop features. These can be set up\nin a grid, where draggable items can be rearranged horizontally or\nvertically by clicking on an item and moving it to a new position in\nthe grid. A drag and drop may also be a sortable list, where items\nin a list can be dragged vertically to perhaps position the more\nimportant list items near the top of the list. For drag and drop\nelements you may come across on the Web today, the vast majority\nonly function with a mouse, making them inaccessible to many\npeople who rely on a keyboard to navigate. Here, we will look at a\nsortable list, and the WAI-ARIA and associated keyboard operability\nrequired to make that list sortable while using only a screen reader\nand a keyboard.\nRole, states, and properties used in a sortable list\n\u2022 role = \u201clist\u201d\n\u2022 role = \u201clistitem\u201d\n\u2022 tabindex = \u201c[0 | -1]\u201d\n\u2022 aria-labelledby = \u201c[instruction div id]\u201d\n\u2022 aria-hidden = \u201c[true | false]\u201d\nSuggested Reading: 4 Major Patterns for Accessible Drag and\nDrop\nThe following JSFiddle presents a typical sortable list widget. Review\nthe JavaScript and HTML markup, and test the list presented under\nSortable Lists | 259 the Result tab with ChromeVox to understand how it functions\nwithout any accessibility features added. You can work in JSFiddle\nitself by clicking \u201cEdit in JSFiddle\u201d at the top, right-hand side,\ncopying the accessibility\/WAI-ARIA code described below to fix the\naccessibility of the menu bar before completing Activity 14 on the\npage that follows.\n260 | Sortable Lists An interactive or media element has been excluded\nfrom this version of the text. You can view it online\nhere:\nhttps:\/\/pressbooks.library.ryerson.ca\/wafd\/?p=379\nAs usual, create instructions on using the sortable list with a\nkeyboard. In this case, we also want to determine which modifier\nSortable Lists | 261 key to include in the instructions. For Mac, it will be the Command\nkey, otherwise it will be the Control key. Here, the standard\naccesskey key commands will also work as the modifier and can\npotentially be described as well (e.g., Ctrl + Alt on Mac, or Ctrl on\nWindows).\nAn interactive or media element has been excluded\nfrom this version of the text. You can view it online\nhere:\nhttps:\/\/pressbooks.library.ryerson.ca\/wafd\/?p=379\nAssign a redundant role=\"list\" to the opening ul, make the\nul keyboard focusable, and attach the instruction with aria-\nlabelledby=\"[instruction div id]\" so keyboard navigation\ndetails are announced when the list initially receives focus while\nusing a screen reader.\nAn interactive or media element has been excluded\nfrom this version of the text. You can view it online\nhere:\nhttps:\/\/pressbooks.library.ryerson.ca\/wafd\/?p=379\nWithin the init() function, generate the <div> that will\ncontain the instructions, and add aria-hidden=\"true\" to hide it\nfrom screen readers by default.\n262 | Sortable Lists An interactive or media element has been excluded\nfrom this version of the text. You can view it online\nhere:\nhttps:\/\/pressbooks.library.ryerson.ca\/wafd\/?p=379\nIn the items section of the init() function, where draggable\nis defined for each item in the list, add a redundant\nrole=\"listitem\", and generate a label for each item that\ndescribes the list item\u2019s current position and that that list item is\n\u201cmovable.\u201d Finally, set tabindex=\"0\" on the first list item, and\ntabindex=\"-1\" on the other list items in order to ensure a list\nitem is focusable by default.\nAn interactive or media element has been excluded\nfrom this version of the text. You can view it online\nhere:\nhttps:\/\/pressbooks.library.ryerson.ca\/wafd\/?p=379\nWhere the draggable attributes are defined near the end of the\ninit() function, attach a keydown reference to the\nonKeyDown() function to make the list draggable with a keyboard.\nSortable Lists | 263 An interactive or media element has been excluded\nfrom this version of the text. You can view it online\nhere:\nhttps:\/\/pressbooks.library.ryerson.ca\/wafd\/?p=379\nIn the resetNumbering() function, update the label for moved\nitems to reflect their new position in the list using aria-label =\n\"[new position]\".\nAn interactive or media element has been excluded\nfrom this version of the text. You can view it online\nhere:\nhttps:\/\/pressbooks.library.ryerson.ca\/wafd\/?p=379\nAdding Keyboard Operability\nKeyboard operation for a drag and drop sortable list is relatively\nsimple, compared to the menu bar and tree menu. Essentially, only\nthe Up and Down arrow keys are needed. The standard operating\nsystem modifier keys, typically used with tabindex (e.g., Crtl + Alt,\nAlt, or Ctrl), function as the modifier keys when using them in\naddition to the Up and Down arrows to grab, drag, and drop a list\nitem.\nThe onKeyDown() function for the sortable list presented\nbelow, defines just up and down arrow key operability, along with\n264 | Sortable Lists a roving tabindex. W3C has not yet created a best practice for\nauthoring keyboard interaction for drag and drop elements.\nSortable Lists | 265 An interactive or media element has been excluded\nfrom this version of the text. You can view it online\nhere:\nhttps:\/\/pressbooks.library.ryerson.ca\/wafd\/?p=379\n266 | Sortable Lists Sortable List in Action\nWatch the following video showing ChromeVox interacting with a\nsortable list. The Tab key is used to navigate into the list and to exit\nthe list. The Up and Down arrows are used to move between list\nitems. On a Mac, the Command key plus Up or Down arrow, selects\na list item and moves it to a new location. On windows the Ctrl key\nis used instead of Command, along with the Up or Down arrow keys\nto move list items. Aim to have the sortable list you update in the\nactivity on the next page operate and announce itself like the one in\nthe video.\nVideo: Accessible Sortable List\nSortable Lists | 267 A YouTube element has been excluded from this version of the\ntext. You can view it online here:\nhttps:\/\/pressbooks.library.ryerson.ca\/wafd\/?p=379\n268 | Sortable Lists "}