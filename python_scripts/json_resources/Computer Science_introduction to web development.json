{"text":"Chapter 1\nBrief History of the Internet\nAs far back as the early stirrings of the Cold War, the concept of a network connecting\ncomputers was under development by both government and university researchers looking\nfor a better means to communicate and share research. The military at the time relied in\npart on microwave transmission technology for communications. An unexpected attack on\nsome of these towers demonstrated how susceptible the technology was to failure of even\nsmall portions of the transmission path. This led the military to seek a method of commu-\nnicating that could withstand attack. At the same time, university researchers were trying\nto share their work between campuses, and were struggling with similar problems when\ntheir transmissions suffered drops in signal. Parties from both groups ended up at the same\nconference with presentations, and decided to collaborate in order to further their work.\nAt the time, computers were far from what we know them as today. A single computer\nwas a large, immobile assortment of equipment that took up an entire room. Data entry was\ndone by using punched cards of paper, or the newest method of the time, magnetic tapes.\nInteracting with the computer meant reserving time on the equipment and traveling to\nwhere it was. Most machines were owned by universities, large corporations, or government\norganizations due to the staffing demands, size, and cost to acquire and maintain them. The\nimage below depicts the UNIVAC 1, a system used by the United States Census Bureau\nand other large organizations like universities. One of the fastest machines at the time, it\ncould perform roughly 1000 calculations per second.\nUS Army, Public Domain, via Wikimedia\nFigure 1 UNIVAC Computer System\nIn comparison, the K computer, a super computer produced in 2012 by the Japanese\ncompany Fujitsu, was capable of 10 petaflops per second when it was launched. Before\n2 The Missing Link: An Introduction to Web Development and Programming Chapter 1\nyou reach for your dictionary or calculator, we will break that down. FLOPS stands for\nfloating point operations per second, or in basic terms, the number of calculations the\nsystem can finish in one second. A petaflop is a numerical indicator of how many 1015 (10\nwith 15 zeroes after it) calculations are completed per second. So, 10 petaflops means the\nK computer can complete 1015 calculations ten times in one second. If we fed the UNIVAC\n1 just a single petaflop of data the day it was turned on, it would still be working on the\nproblem today. In fact, it would barely be getting started, just a mere 60+ years into a\nroughly 317,098-year task!\nADDITIONAL NOTES\nYou may have heard of Moore\u2019s Law, commonly defined as the tendency of\ntechnology\u2019s capability to double every two years. Moore\u2019s actual prediction\nwas that this would apply to transistors, an element of circuits, and that it would\ncontinue for ten years after seeing its trend from 1958 to 1964. His prediction\nhas shown to be applicable to memory capacity, speed, storage space as well as\nother factors and is commonly used as a bench mark for future growth.\nAs cold war tensions grew and Sputnik was launched, the United States Department of\nDefense (DoD) began to seek additional methods of transmitting information to supple-\nment existing methods. They sought something that was decentralized, allowing better\nresiliency in case of attack, where damage at one point would not necessarily disrupt com-\nmunication. Their network, Arpanet, connected the DoD and participating universities\ntogether for the first time. In order to standardize the way networked systems commu-\nnicated, the Transfer Control Protocol\/Internetwork Protocol (TCP\/IP) was created. As\nvarious network systems migrated to this standard, they could then communicate with any\nnetwork using the protocol. The Internet was born.\nEmail was soon to follow, as users of the networks were interested in the timely trans-\nmission and notification of messages. This form of messaging fit one of their initial goals.\nAs time progressed, additional protocols were developed to address particular tasks, like\nFTP for file transfers and UDP for time-sensitive, error-resistant tasks.\nOngoing improvements in our ability to move more information, and move it faster,\nbetween systems progressed at a rate similar to the calculative power of the computers we\nsaw earlier. This brings us to where we are today; able to watch full-length movies, streamed\nin high quality right to our phones and computers, even while riding in a car.\nLEARN MORE\nKeywords, search terms: History of the Internet, Arpanet\nA Brief History of NSF and the Internet: http:\/\/www.nsf.gov\/od\/lpa\/news\/03\/fsnsf_internet.htm\nHow the Internet Came to Be: http:\/\/www.netvalley.com\/archives\/mirrors\/cerf-how-inet.html\n3 Chapter 2\nCurrent Trends\nAs important as it is to know how we reached where we are today, it is also important to\nstay current in web development. New products and innovations can greatly affect the\nlandscape in a short amount of time. We can look to the rapid rise in Facebook, Twitter,\nand the myriad of Google services now relied upon around the world as examples of how\nfast new technology is embraced.\nCloud Computing\nFigure 2 Cloud Computing Styles\nCloud computing can be loosely defined as the allocation of hardware and\/or software\nunder a service model (resources are assigned and consumed as needed). Typically, what we\nhear today referred to as cloud computing is the concept of business-to-business commerce\nrevolving around \u201cCompany A\u201d selling or renting their services to \u201cCompany B\u201d over the\nInternet. A cloud can be public (hosted on a public internet, shared among consumers) or\nprivate (cloud concepts of provisioning and storage are applied to servers within a fire wall\nor internal network that is privately managed), and can also fall into some smaller subsets\nin between, as depicted in the graphic above.\nUnder Infrastructure as a Service (IaaS) computing model, which is what is most com-\nmonly associated with the term cloud computing, one or more servers with significant\namounts of processing power, capacity, and memory, are configured through hardware and\/\n4 The Missing Link: An Introduction to Web Development and Programming Chapter 2\nor software methods to act as though they are multiple smaller systems that add up to their\ncapacity. This is referred to as virtualizing, or virtual servers. These systems can be \u201cright\nsized\u201d where they only consume the resources they need on average, meaning many systems\nneeding little resources can reside on one piece of hardware. When processing demands\nof one system expand or contract, resources from that server can be added or removed to\naccount for the change. This is an alternative to multiple physical servers, where each would\nneed the ability to serve not only the average but expected peak needs of system resources.\nSoftware as a Service, Platform as a Service, and the ever-expanding list of \u201cas-a-service\u201d\nmodels follow the same basic pattern of balancing time and effort. Platforms as a service\nallow central control of end user profiles, and software as a service allows simplified (and\/\nor automated) updating of programs and configurations. Storage as a service can replace\nthe need to manually process backups and file server maintenance. Effectively, each \u201cas-\na-service\u201d strives to provide the end user with an \u201cas-good-if-not-better\u201d alternative to\nmanaging a system themselves, all while trying to keep the cost of their services less than a\nself-managed solution.\nADDITIONAL NOTES\nOne of the best methods to keep current is by following trade magazines,\nindustry leader blogs, and simply browsing the internet looking for new items or\nsite features you have not noticed before. Content aggregators like Zite, Feedly,\nand Slashdot are some of my favorites.\nAs a micro-scale example, imagine you and four friends are all starting small businesses.\nFaced with the costs of buying servers and software for data storage, web hosting, and office\nprograms, each of you would invest funds into equipment and the staff to maintain it, even\nthough much of it may get little use in the early stages of your company. This high initial\ninvestment reduces available funding that may have been used elsewhere, and your return\non investment becomes longer. Instead, each of you would create an account with Amazon\u2019s\ncloud services for file storage and website hosting, which are private to you, but physically\nstored on servers shared by other users. Since these services are managed offsite by Amazon\nstaff, none of you need to hire IT staff to manage these servers, nor do you have to invest\nin the equipment itself. Just by not needing to hire a system administrator (estimated at\n$40,000 salary) you can pay for just over 3 years of Amazon service (calculated using Ama-\nzon\u2019s pricing calculator1 for basic web services and file storage). When you combine the\nsavings of that employee\u2019s fringe costs like health care, along with those of not purchasing\nyour own hardware, this approach can make your initial investment last longer.\nThese lowered costs are attractive to small businesses and startups for obvious reasons,\nbut are also attractive to large companies with highly fluctuating levels of need. For example,\na football team\u2019s website sees far more traffic on game days than the off-season. They do\nnot need the ability to serve the same amount of users all the time. Some tangible examples\nof \u201cas-a-service\u201d tools you may already be using are file hosting services like Dropbox2 or\nGoogle Drive.3 Your files are kept on servers along with those from other users that you do\nnot see (unless you share with them intentionally) and you can add or remove extra space\n1 http:\/\/calculator.s3.amazonaws.com\/index.html\n2 http:\/\/www.dropbox.com\n3 http:\/\/drive.google.com\n5 The Missing Link: An Introduction to Web Development and Programming Chapter 2\nto your account whenever you like. Similarly, services like Amazon Web Services4 offer the\nability to host your files, applications, and more to both home consumers and commercial\nclients.\nVirtualization\nServer virtualization is the act of running multiple operating systems and other software\non the same physical hardware at the same time, as we discussed in Cloud Computing.\nA hardware and\/or software element is responsible for managing the physical system re-\nsources at a layer in between each of the operating systems and the hardware itself. Doing\nso allows the consolidation of physical equipment into fewer devices, and is most beneficial\nwhen the servers sharing the hardware are unlikely to demand resources at the same time,\nor when the hardware is powerful enough to serve all of the installations simultaneously.\nThe act of virtualizing is not just for use in cloud environments, but can be used to\ndecrease the \u201cserver sprawl,\u201d or overabundance of physical servers, that can occur when\nphysical hardware is installed on a one-to-one (or few-to-one) scale to applications and\nsites being served. Special hardware and\/or software is used to create a new layer in between\nthe physical resources of your computer and the operating system(s) running on it. This\nlayer manages what each system sees as being the hardware available to it, and manages\nallocation of resources and the settings for all virtualized systems. Hardware virtualization,\nor the stand alone approach, sets limits for each operating system and allows them to\noperate independent of one another. Since hardware virtualization does not require a sepa-\nrate operating system to manage the virtualized system(s), it has the potential to operate\nfaster and consume fewer resources than software virtualization. Software virtualization, or\nthe host-guest approach, requires the virtualizing software to run on an operating system\nalready in use, allowing simpler management to occur from the initial operating system\nand virtualizing program, but can be more demanding on system resources even when the\nprimary operating system is not being used.\nUltimately, you can think of virtualization like juggling. In this analogy, your hands are\nthe servers, and the balls you juggle are your operating systems. The traditional approach of\nhosting one application on one server is like holding one ball in each hand. If your hands\nare both \u201cbusy\u201d holding a ball, you cannot interact with anything else without putting a ball\ndown. If you juggle them, however, you can \u201chold\u201d three or more balls at the same time.\nEach time your hand touches a ball is akin to a virtualized system needing resources, and\nhaving those resources allocated by the virtualization layer (the juggler) assigning resources\n(a hand), and then reallocating for the next system that needs them.\n4 http:\/\/aws.amazon.com\n6 The Missing Link: An Introduction to Web Development and Programming Chapter 2\nBy Daniel Hirschbach [CC-BY-SA-2.0 Germany] via Wikimedia\nFigure 3 Virtualization Styles\nThe addition of a virtual machine as shown above allows the hardware or software to see\nthe virtual machine as part of the regular system. The monitor itself divides the resources\nallocated to it into subsets that act as their own computers.\nNet Neutrality\nThis topic is commonly misconstrued as a desire for all Internet content to be free of\ncost and without restrictions based on its nature. In fact, net neutrality is better defined\nas efforts to ensure that all content (regardless of form or topic) and the means to access\nit, are protected as equal. This means Internet Service Providers (ISPs) like your cable or\ntelephone company cannot determine priority of one site over another, resulting in a \u201cpre-\nmium\u201d Internet experience for those able to pay extra. Additional concerns are that without\na universal agreement, a government may elect to restrict access to materials by its citizens\n(see North Korea censorship5), and similarly that corporations controlling the physical con-\nnections would be able to extort higher prices for privileged access or pay providers to deny\nequal access to their competitors.\nUSEFUL FEATURES\nLegislation continues to change regarding what is and is not legal or acceptable\ncontent on the internet. Laws change over time as well as across jurisdictions and\ncan greatly differ. Just because material is legal in your area does not mean it is in\nothers and you may still be in violation of laws applicable in the location of your\nserver.\nExisting laws vary around the world, some protecting the providers, some protecting\nthe user. The United States received considerable attention in 2012 for anti-piracy bills\n5 https:\/\/www.google.com\/search?q=north+korea+internet+censorship\n7 The Missing Link: An Introduction to Web Development and Programming Chapter 2\nthat were highly protested both with physical rallies and online petitions. Each bill drew\ndebate over what affects the stipulations would have not only within the United States, but\nover the Internet as a whole. Even though SOPA6 (introduced by the House) and PIPA7\n(introduced by the Senate after the failure of COICA8 in 2010) were not ultimately ratified,\nThe United States and other countries had at that point already signed ACTA9 in 2011,\nwhich contained provisions that placed the burden on ISPs to police their users regardless\nof sovereign laws in the user\u2019s location.\nLEARN MORE\nKeywords, search terms: Cloud computing, virtualization,\nvirtual machines (VMs), software virtualization, hardware virtualization\nXen and the Art of Virtualization: http:\/\/li8-68.members.linode.com\/~caker\/xen\/2003-xensosp.pdf\nVirtualization News and Community: http:\/\/www.virtualization.net\nCloud Computing Risk Assessment: http:\/\/www.enisa.europa.eu\/activities\/risk-management\/files\/\ndeliverables\/cloud-computing-risk-assessment\nWithout formal legislation, judges and juries are placed in positions where they establish\nprecedence by ruling on these issues, while having little guidance from existing law. As\nrecently as March 2012 a file sharing case from 2007 reached the Supreme Court, where\nthe defendant was challenging the constitutionality of a $222,000 USD fine for illegally\nsharing 24 songs on file sharing service Kazaa. This was the first case for such a lawsuit\nheard by a jury in the United States. Similar trials have varied in penalties up to $1.92\nmillion US dollars, highlighting a lack of understanding of how to monetize damages. The\nSupreme Court denied hearing the Kazaa case, which means the existing verdict will stand\nfor now. Many judges are now dismissing similar cases that are being brought by groups\nlike the Recording Industry Association of America (RIAA10), as these actions are more\noften being seen as the prosecution using the courts as a means to generate revenue and not\nrecover significant, demonstrable damages.\nAs these cases continue to move through courts and legislation continues to develop at\nthe federal level, those decisions will have an impact on what actions are considered within\nthe constructs of the law, and may have an effect on the contents or location of your site.\nCyber Warfare\nIntentional, unauthorized intrusion of systems has existed about as long as computers\nhave. While organized, coordinated attacks are not new, carrying them out in response to\ngeopolitical issues is now emerging, as was found in the brief 2008 war between Russia and\nGeorgia. Whether the attacks on each country\u2019s infrastructures were government sanc-\n6 http:\/\/thomas.loc.gov\/cgi-bin\/bdquery\/z?d112:h.r.3261:\n7 http:\/\/www.opencongress.org\/bill\/112-s968\/show\n8 http:\/\/www.govtrack.us\/congress\/bills\/111\/s3804\/text\n9 http:\/\/www.ustr.gov\/acta\n10 http:\/\/www.riaa.com\n8 The Missing Link: An Introduction to Web Development and Programming Chapter 2\ntioned or not is contested, but largely irrelevant. What is relevant is that these attacks will\nonly continue, and likely worsen, in future disputes.\nIn the United States and other countries, equipment that controls aging infrastructure\nfor utilities is increasingly connected, with control computers at facilities for electric, water,\ngas, and more being placed online to better facilitate monitoring and maintenance. How-\never, many of these systems were not developed with this level of connectivity in mind,\ntherefore security weaknesses inherent in the older equipment can result in exploits that\nallow Hackers to cause real, permanent damage to physical equipment, potentially dis-\nrupting the utilities we rely on every day.\nTehran\u2019s uranium enrichment development facilities were targeted in late 2010 by a\ncustom-created virus that focused on equipment used in the refining of nuclear material. The\nvirus would randomly raise or lower the speed of the equipment in a manner that would not\ncreate alarms, but enough to strain the equipment. This would lead to equipment failures,\nafter which the replacement hardware would be similarly infected. Eventually discovered,\nthe virus had been running for many months, delaying the project and increasing its costs.\nThis virus was intentionally designed to run in that particular environment and was based\non the specific SCADA hardware involved, and in this case was such a sophisticated attack\nthat it is widely believed to have been facilitated by the United States and Israel.\nFigure 4 10 Years of Known Cyber Attacks\nThe graph above, from foreignaffairs.com, provides an idea of how prevalent government\nto government attacks are becoming. We should keep in mind that the ninety-five incidents\ndepicted are only the known, reported incidents, and the true number is likely higher.\n9 The Missing Link: An Introduction to Web Development and Programming Chapter 2\nBotnets\nBotnets are not exactly a new threat to the Internet, but they remain one of the most\npersistent threats to the average user and their computer. The word botnet, an amalgama-\ntion of the words robot and network, is an accurate description of what it entails. Botnets\nare programs that use a network connection to communicate with each other to coordinate\nand perform tasks. Originally, botnets were created as part of programs for Internet Relay\nChat (IRC) to help establish and control channels people would log into to talk to each\nother. They are still in frequent use today for a number of legitimate, non-malicious tasks.\nWe have also seen a rise in malicious botnets, designed to work undetected in the\nbackground of your computer. The controller (typically referred to as the command and\ncontrol server) uses the infected machines to complete tasks that require large amounts of\nprocessing power and\/or bandwidth to complete, like finding or exploiting weaknesses in\nnetworks or websites, or to \u201cmine\u201d infected systems for personal data such as credentials,\ncredit card numbers, and other information that can then be used or sold to others.\nADDITIONAL NOTES\nIt did not take long for the first virus to enter the internet. Just two years after the\nfirst systems were connected, The Creeper (a self-replicating script) was created in\n1971, which did no harm but displayed \u201cI\u2019m the creeper, catch me if you can\u201d on\ninfected machines. It was immediately followed by The Reaper, the first anti-virus\nprogram, which too self-replicated, removing the Creeper wherever it was found.\nSome botnet controllers have grown so large and organized that they act as businesses\nin competition, typically \u201crenting\u201d their botnet out as a service or tool to others for agreed\nupon rates. Efforts by security researchers to detect and analyze botnets often involve close\ncoordination with government agencies and law enforcement as the size of an average\nbotnet typically involves computers from multiple countries. Simply shutting down or\nattempting to remove the malicious files from infected systems could cause unintended\ndamage to the machines, further complicating the process of eliminating a botnet.\n10 The Missing Link: An Introduction to Web Development and Programming Chapter 2\nBy Tom-B [CC-BY-SA-3.0], via Wikimedia\nFigure 5 Botnets\nLEARN MORE\nKeywords, search terms: Botnets, command and control system, malware, network security\nBuild Your Own Botnet: http:\/\/howto.wired.com\/wiki\/Build_your_own_botnet_with_\nopen_source_software\nHoneynet Project: http:\/\/www.honeynet.org\/papers\/bots\/\nInternet of Things\nIn much the same vein of the connection of older equipment to the networks of the\nmodern world, the newest devices emerging into the market can also be a bit more non-\ntraditional. This results in an internet that is soon to be awash with live connections from\neverything from cars to ovens and refrigerators, an explosion of devices no longer focused\non delivering information to the masses as much as aggregating many data sources of in-\nterest to a small set of recipients. Some cars now include the ability for consumer service\ncompanies to perform tasks like remotely shutting down your car if stolen; coordinating use\nof these tools with law enforcement allows them to stop a vehicle before or during a pursuit.\nWhile these are innovative tools with positive uses, they also add new vectors for a malicious\nperson to attack. Instead of the thief being thwarted, he might use a device to shut your car\ndown at an intersection, eliminating your ability to simply drive away when he approaches.\nThe very tool intended to stop him afforded him a means to gain access to your vehicle. This\n11 The Missing Link: An Introduction to Web Development and Programming Chapter 2\nis not merely waxing philosophically, either. It has been demonstrated as a proof of concept11\nbacked by researchers funded by DARPA.\nAs more devices are introduced to the Internet, the amount of interaction with things as\nsimple as small appliances is increasing. Comments like \u201cWe have to stop by the store on\nthe way home, the toaster report said we will need at least one loaf of bread for the week\u201d\nseem silly to us now, but could eventually exist in the same breath as \u201cThe fridge called, it\nordered our groceries for the week.\u201d For about $2,700 USD, Samsung already offers a fridge\nwith interactive features similar to these ideas.\nItems embedded with RFID tags contribute to the Internet of Things, as they can be\ntracked and provide information that can be aggregated and applied to processes. Shipping\ncrates with RFID expedite taking inventory as their tags can be scanned automatically in\ntransit. Access cards not only allow privileged access to restricted areas but also let us know\nwhere people (or, at least their cards) are located and where they have been. Home automa-\ntion systems allow lights, locks, cameras, and alarms to be managed by your smart phone to\nthe extent that your lights can come on, doors unlocked, and garage door opened, when it\ndetects that your phone has entered the driveway. All of these are items\u2014not people\u2014in-\nteracting with the Internet to fulfill a task, and are part of the emerging Internet of Things.\nProliferation of Devices\nAs reliance on the Internet and the drive for constant connection proliferate through\nour societies, and technology becomes more affordable and adaptable, we have not only\nleft the age of one computer per home, but meandered even past the point where everyone\nin the house has their own device, and now the average consumer has multiple devices.\nThe proliferation allows us to adjust technology to fit where we need it in our lives. I use\nmy desktop for hardware intensive applications at home, or for doing research and web\ndevelopment where multiple monitors eases my need to view several sources at once. Out\nof the house, my tablet allows me to consume information and is easily slid into a keyboard\nattachment that allows it to operate as a laptop, turning it into a content creation device by\nreducing the difficulty of interacting by adding back a keyboard and mouse.\nImprovements in software both in efficiency and ease of use allow older hardware to\nget second lives. My laptop, though ten years old, is still running happily (albeit without\na useful battery life) and is still capable of browsing the internet and being used as a word\nprocessor due to a lightweight Linux operating system that leaves enough of its aging\nresources available for me to complete these tasks. When the average lifespan of a laptop\nis typically considered to be only three years, many older devices like mine have not left\noperation, and are still finding regular use in our growing set of tech tools.\n11 http:\/\/www.forbes.com\/sites\/andygreenberg\/2013\/07\/24\/hackers-reveal-nasty-new-car-attacks-\nwith-me-behind-the-wheel-video\/\n12 Chapter 3\nWeb Servers\nWhile we could simply focus on how to create web pages and websites, none of this is pos-\nsible without the underlying hardware and software components that support the pages we\ncreate. Examining what these components are and how they interact helps us understand\nwhat our server is capable of.\nThe diagram below represents the basic elements of a web server. Hardware, an oper-\nating system, and an http server comprise the bare necessities. The addition of a database\nand scripting language extend a server\u2019s capabilities and are utilized in most servers as well.\nHTTP Scripting\nDatabase\nServer Language\nOperating System (Linux,\nWindows, Mac)\nHardware\nFigure 6 Web Server Software Structure\nHardware\nThe mention of phrases like data center, hosting provider, or even big name companies\nlike Microsoft and Google can invoke mental images of large, sterile rooms full of tall racks\nof hardware with blinking lights and a maze of wires. Those more familiar with such rooms\nwill also know the chill resulting from the heavily air conditioned atmosphere and droning\nwhir of fans that typically accompany them. This, however, is not a requirement nor an ac-\ncurate portrayal of a great deal of servers connected to the Internet. With the addition of\nthe right software (assuming you are consuming this text\ndigitally), the device you are using to read this with could HTTP Scripting\nDatabase\nbecome an internet connected server. While it would not Server Language\nsustain the demands made of domains like Amazon.com\nOperating System (Linux,\nor MSN.com, you would be able to perform the basic\nWindows, Mac)\nactions of a server with most of today\u2019s devices.\nEven though we have reached this point, it is difficult\nHardware\nto forget the mental picture conjured by the thoughts\n13 The Missing Link: An Introduction to Web Development and Programming Chapter 3\nof the data center. In the current \u201ctraditional\u201d model, thin, physically compact servers are\nstacked vertically. These are referred to as rack mount hardware. Many rack mount systems\ntoday contain hardware similar to what we have in our desktops, despite the difference in\nappearance.\nA number of companies, including Google, Yahoo, and Facebook, are looking to re-\ninvent this concept. Google for instance has already used custom-built servers in parts of\nits network in an effort to improve efficiency and reduce costs. One implementation they\nhave tried proved so efficient that they were able to eliminate large power backup units by\nplacing a 9 volt battery in each server\u2014giving it enough emergency power to keep running\nuntil the building\u2019s backup power source could kick in. They have also experimented with\nalternative cooling methods like using water from retention ponds, or placing datacenters\nwhere they can take advantage of natural resources like sea water for cooling or wind and\nsolar for energy.\nADDITIONAL NOTES\nTake note! While all of the programs we refer to in our LAMP stack have free,\nopen source versions, not all uses may be covered by those licenses (using them\nfor study and research purposes is covered).\nEven small, low powered devices are finding demand as servers in part to enable the\nInternet of Things. Devices like the Raspberry Pi12 and an explosion of similar products\nlike \u201candroid sticks\u201d can be purchased for as little as $25 USD. These small, \u201cjust-enough-\npower\u201d devices are used to connect data from the environment or other devices to the\nInternet, leaving the data center behind and living instead at the source of the data itself.\nSoftware\nA typical web server today contains four elements in addition to the physical hardware.\nThese are the operating system, web server, a database and a scripting language. One of the\nmost popular combinations of these systems has been abbreviated to LAMP, standing for\nLinux, Apache, MySQL, and PHP, named in the same order. There are many combinations\nof solutions that meet these features, resulting in a number of variations of the acronym,\nsuch as WAMP for Windows, Apache, MySQL, PHP or MAMP, identical with exception\nof Mac (or, rightfully, a Macintosh developed operating system). Among the plethora of\ncombinations, the use of LAMP prevails as the catch all reference to a server with these\ntypes of services.\nAll that is ultimately required to convey static pages to\nan end user are the operating system and HTTP server, HTTP Scripting\nDatabase\nServer Language\nthe first half of the WAMP acronym. The balance adds\nthe capability for interactivity and for the information to\nOperating System (Linux,\nchange based on the result of user interactions. Windows, Mac)\nHardware\n12 http:\/\/www.raspberrypi.org\n14 The Missing Link: An Introduction to Web Development and Programming Chapter 3\nOperating System\u2014Linux\nHTTP Scripting\nDatabase\nServer Language\nOperating System (Linux,\nWindows, Mac)\nHardware\nYour operating system is what allows you to interact with the applications and hardware\nthat make up your computer. It facilitates resource allocation to your applications, and\ncommunication between hardware and software. Typically, operating systems for servers\nfall under three categories: Linux-based, Windows-based, and Mac-based. Within each of\nthese categories are more options, such as various version of Mac and Windows operating\nsystems, and the wide variety of Linux operating systems. We will utilize Linux, the pre-\ndominant choice.\nDeveloped by Linus Torvalds in the early 1990s while he was a student, Linux was cre-\nated so Linus could access UNIX systems at his university without relying on an operating\nsystem. As his project became more robust, he decided to share it with others, seeking input\nbut believing it would remain a more personal endeavor. What he could not have predicted\nwas the community that would come together and participate in helping shape it into\nwhat is today. As the basis of a large number of Linux-based operating systems (or \u201cflavors\u201d\nof Linux), the Linux core can be found around the world, even in the server rooms of its\ncompetitors like Microsoft.\nHTTP Server\u2014Apache\nApache is an open source web server originally developed for UNIX systems. Now sup-\nported on most platforms including UNIX, Linux, Windows, and Mac, Apache is one of\nthe most utilized server applications. First developed in 1995, Apache follows a similar\nopen source approach as Linux, allowing users to expand on the software and contribute to\nthe community of users. The user group around Apache developed The Apache Foundation,\nwhich maintains a library of solutions for web services.\nIn a web server, Apache serves as the HTTP component, which compiles the results\nfrom scripting languages, databases, and HTML files to generate content that is sent to the\nuser. Apache (or any web service) will track which files\non the server do and do not belong to the website, and\nHTTP Scripting\nalso controls what options are available to the end user Database\nServer Language\nthrough its configuration files.\nApache and other HTTP servers allow us to share Operating System (Linux,\nWindows, Mac)\nour webpages, scripts, and files with our end users.\nAny output from our database and scripting languages\nis turned into HTML output that the client\u2019s browser Hardware\ndisplays as our webpage. While we can view HTML and\n15 The Missing Link: An Introduction to Web Development and Programming Chapter 3\nJavaScript files on a computer that is not a webserver, we need an http server to view them\nas a destination on a network.\nConfiguration Files\nWhen we create a new system, settings may not be exactly as we want them, or the time\nmay come where we want to add, remove, or change something about our server. To do this,\nwe will need to edit the configuration files that control the different pieces of our system.\nOur actual web server config file is called httpd.conf. For PHP settings, we need to refer to\nphp.ini, and for MySQL we refer to my.cnf. These files may be located in different places\ndepending on the operating system, and the version in use, so it is best to use your system\u2019s\nfile search tools to find where they are on your machine. Configuration (or setting) files are\ntypically a plain text format file with one setting on each line with comments near each\nvalue describing the setting\u2019s use. These files will also use the same commenting delimiter\nfor their notes to enable or disable individual settings. Typically the delimiter used is a semi\ncolon ; or pound sign #.\nIf you want to change settings about your server itself such as the port it listens on, what\nfolder it looks for files in, its name, or other related features, look to the httpd.conf file.\nFrom the php.in file you can control elements like which modules are installed and enabled\nfor your system, how much data scripts are allowed to consume, and more. Similarly your\nMySQL config file determines what port it listens on, which user it runs as on your server,\nwhat your admin account\u2019s credentials are, and more.\nChanges to these files typically require you to restart your web server (in our case, for\napache or PHP changes), or at least the service that you are changing (in our case, MySQL\nchanges). This can be done using the control panel if you are using a combination program\nlike Wamp 2, or by using your operating system\u2019s service tools or by using system commands\nat a command prompt. Restarting Wamp 2 in a GUI operating system like Windows can\nbe done be right clicking on Wamp\u2019s icon in the tray. In a Cent OS server, the same effect\ncan be achieved by typing \u201cservice httpd restart.\u201d If all else fails, you can always physically\nrestart the machine (referred to as \u201cbouncing\u201d), but this is something you will want to avoid\non a live system as it will cause a much longer period of down time.\nIf you use installer packages, or a combo installer like Wamp 2, you will probably get by\ninitially without making any changes to these files. Binary installers however will not know\nwhere or how to make changes to config files and you will need to follow the instructions\nto edit these files by hand to integrate all of your elements.\nWhy would I use a combination other than\nLinux, Apache, My SQL, and PHP?\nGiven the popularity of this particular combination of four, it is easy to wonder why it\nhas not simply become the system. However, needs and preferences may change why a par-\nticular approach is selected. Perhaps you are in an all Windows environment and feel more\ncomfortable with a Windows operating system. Maybe your data is already available in a\nflat file or XML format and you want a database that can use XML files, like MongoDB.13\n13 http:\/\/www.mongodb.org\/\n16 The Missing Link: An Introduction to Web Development and Programming Chapter 3\nOr, you might prefer the approach and packages available in Python to those found in PHP.\nEach system has its particular strengths and weaknesses, and should be chosen based on the\nneeds of the project.\nOpen Source\nAt this point, you have come across many references to terms like free, free to edit, and\nopen source throughout the text. In fact, all of the elements in our example LAMP are free,\nopen source solutions. Open source means the provider of the software allows the end user\naccess to the actual code of their software, allowing the end user to make changes anywhere\nin the program.\nThis differs from traditional software where you own a copy or license to use the program,\nbut cannot extend or change elements of the program beyond what the developer allows.\nAn executable in Windows for example is closed source. You cannot open the executable to\nread its code or make changes. If you wanted to change the program, the developer would\nhave to provide you with the files used to create it (called source code) so you could make\nchanges and compile your own, modified, executable program.\nOpen source is growing in popularity but the concept has existed for quite some time.\nRecently, larger governments have begun to embrace free, open source solutions as a means\nto reduce costs and achieve modifications that customize programs to fit their needs. His-\ntorically open source was viewed as a security risk as anyone could submit changes to the\nproject, and it was feared that vulnerabilities or malicious code would be inserted. In fact,\nwith so many users able to view and modify the files, it has actually made those with\nmalicious intent less able to hide their modifications (sometimes called the \u201cmany eyes\u201d\napproach to reliability). Development time has also been reduced as the community of\ndevelopers on a popular open source project can greatly exceed that of a closed source\nsolution with limited development staff.\nA popular acronym referring to these projects is FOSS\u2014Free, Open Source Software.\nAs not all open source programs are free in terms of purchasing or licensing, FOSS in-\ndicates solutions that are free of costs as well as free to change. These solutions may be\ndeveloped entirely by a community of volunteers, or may come from a commercial company\nwith developers dedicated to the project. While it is odd to think of a company giving away\nits creation for free, these companies generate revenue by building advertising into their\nsoftware or offering premium services such as product support or contracting with clients\nto customize the product. Many companies will also offer only some tools as open source\nalongside other products they sell, or offer a \u201cfreemium\u201d model where the open sourced\nplatform contains most of the features of their software. Here, additional features or add-\nons beyond the open source package carry additional licensing and costs.\nFTP\nWhile not included in LAMP acronyms, another important element to note is the\nexistence of a file transfer protocol (FTP) server. As you typically will want to perform\ndevelopment activities on private server before editing your live server, you will need a\n17 The Missing Link: An Introduction to Web Development and Programming Chapter 3\nmechanism that allows you to move files between the two. FTP is designed for moving\nfiles between systems, allowing you to synchronize items when you are ready. In addition to\nan FTP server, you will also likely want an FTP client application for the machine(s) that\ncontain the files you want to move. The client allows you to see files in both locations and\ninteract with them to determine which file is moved to which machine. There are a number\nof free file transfer programs available, some of which can even be integrated into browsers\nlike Chrome by using browser extensions.\n18 Chapter 4\nNetwork Basics\nIP Addresses\nAn IP (Internet Protocol) address is a unique code that identifies a piece of equipment\nconnected to a network. These addresses are used in messages between network devices like\nthe network or wireless card in your computer, the equipment from your ISP (internet\nservice provider), and all pieces of equipment between your machine and the one your\ncomputer needs to talk to.\nIP Addresses live in the network layer, which is one of seven layers in the protocol suite\ndefined in the OSI Model. The OSI model stands for Open Systems Interconnection, and\nwas created by the International Organization for Standardization, an international non-\ngovernmental group of professionals who strive to establish standards and best practices\nin a variety of fields. The OSI\nModel for networking breaks\nthe system of transmitting data\ninto the layers show below in\nan attempt to delineate where\ncertain actions should take place.\nBy User:Kbrose [CC-BY-SA-3.0] via Wikimedia\nFigure 7 Network Topology\n19 The Missing Link: An Introduction to Web Development and Programming Chapter 4\nBy MrsValdry [CC-By-SA 3.0] via Wikimedia\nFigure 8 OSI 7 Layer Model\nThe seven layers depicted above make up the OSI body\u2019s recommended protocol suite.\nIn the diagram, transmission of data crosses two routers and over the Internet to reach its\ndestination. By following the data along the arrows, we see it pass through various layers of\ncommunication and processing as it crosses the internal network, through the first router,\nacross the public network (internet connection), into the recipient\u2019s router, and then is\nreassembled into its original form.\nUntil recently, most network equipment has operated on IPv4, the fourth standard re-\nleased for IP addresses, which has been in place for about thirty years. Addresses in this\nformat are typically represented as a pattern of four blocks of up to three digits separated by\nperiods, with no block of numbers exceeding 255 such as 127.0.0.1 or 24.38.1.251. This is\nreferred to as dot-decimal representation, and although it is not the only way to express an\nIPv4 address it is the most recognized form. Segments of the addresses within the ranges\nof 192.168.xxx.xxx, 172.16.xxx.xxx to 172.31.xxx.xxx, and 10.0.xxx.xxx to 10.255.xxx.xxx\nare reserved for private networks, meaning they are used within a network in your house,\nat work, or anywhere else where a group of computers share a connection to the internet.\nEach of these networks uses one or more of these blocks of numbers for devices on that\nnetwork. Only the equipment connecting that local network to the Internet needs a unique\naddress from the rest of the world. That equipment will track which computer inside the\nnetwork to send data to and from by reading packets\u2014the individual pieces of messages\nthat are sent across networks. This means your computer might be 192.168.1.25 at home,\nand so might your computer at work, according to your home and work networks. The\nconnection between your house and office thought still have a different, unique number\nassigned to them.\n20 The Missing Link: An Introduction to Web Development and Programming Chapter 4\nThis separation of networks was done to reduce the speed at which unique addresses\nwere consumed. Although this scheme allows for almost 4.3 billion (accurately, 232) ad-\ndresses, the last one was officially assigned on February 4th, 2012. To sustain today\u2019s growing\nnumber of devices, IPv6 was created, which is depicted as eight blocks of four hexadecimal\ndigits now separated by colons. These new addresses might look like 2001:0db8:85a3:0042\n:1000:8a2e:0370:7334, and can support roughly 4 billion unique addresses. Since the new\nrange is so staggeringly large, additional protocols were created that specify when certain\nvalues or ranges are used in addresses. This allows additional information about the device\nto be conveyed just from the address.\nThe actual messages sent between machines are broken down into multiple pieces. These\npieces, called packets, are sent piece by piece from sender to recipient. Each packet is sent\nthe fastest way possible, which means some packets may take different routes\u2014picture a\nshort cut, or getting off a congested road to take a different one. This helps to ensure that\nthe message gets from sender to receiver as fast as possible, but also means packets may\narrive in a different order than they were sent.\nADDITIONAL NOTES\nHexadecimal is a number scheme that allows 0 through 9 and A through F as\nunique values, which means we can count to 15 with one character.\nTo account for this, each piece of the message, or payload, is wrapped in a header\u2014\nadditional information that describes how many other pieces there are, what protocol is\nbeing used, where the packet came from and is headed to, along with some other related\ninformation.\n21 The Missing Link: An Introduction to Web Development and Programming Chapter 4\nBy Nicolargo [ CC-BY-SA-3.0-2.5-2.0-1.0] via Wikimedia Commons\nFigure 9 IP 4 Packet\nAfter the packets are reassembled, the receiving computer sends any necessary responses,\nand the process repeats. This all takes place in fractions of a second, beginning with the\n\u201chello,\u201d or handshake packet to announce a communication request, to the last piece of the\npacket.\nURL\nSeeing as most of us would have a hard time remembering what IP address is needed to\nget to, say, Facebook (173.252.100.16) or the Weather Channel (96.8.80.132) we instead\nuse URLs, universal resource locators. This allows us to use www.facebook.com and www.\nweather.com to get to where we want to go without referring to a long list of IP addresses.\nSpecialized servers (called name servers) all around the world are responsible for responding\nto requests from computers for this information. When you type facebook.com into your\naddress bar, if your router does not have a note of its own as to where that is, it will \u201cask\u201d a\nname server, which will look it up in its records and reply.\nThere are three parts to a network address: the protocol, name, and resource id. The\nprotocol represents how we want to send and receive messages, for example we can use\nhttp:\/\/ for accessing websites and ftp:\/\/ for moving files. The name is what we associate\n22 The Missing Link: An Introduction to Web Development and Programming Chapter 4\nwith the site, like www.facebook.com, and the resource id, or URI, is everything after that,\nwhich points to the particular file we want to see.\nPorts\nWhile an IP address and a URL will bring you to a particular web server, there may be\nmore than one way you want to interact with it, or more than one thing you want it to do.\nMaybe you also want the server to provide email services, or you want to use FTP to update\nyour files. These ports act as different doors into your server, so different applications can\ncommunicate without getting in each other\u2019s way. Certain ports are typically used for cer-\ntain activities, for example port 80 is the standard port for web traffic (your browser viewing\na page), as opposed to ftp, which typically uses port 21. Using standard ports is not a rule,\nas applications can be configured to use any available port number, but it is recommended\nin most cases as firewalls and other security devices may require additional configuring to\nkeep them from blocking wanted traffic because it is arriving at an unusual, fire walled, or\n\u201clocked\u201d port.\nHosting Facilities\nIf you are using a server that is not under your physical care, and is managed by an off-\nsite third party, then you likely have an agreement with a hosting facility. Hosting facilities\nare typically for-profit companies that manage the physical equipment necessary to provide\naccess to websites for a number of clients. Many offer web development and management\nservices as well, but if you are still reading, then that tidbit is probably of little interest as\nyou are here to build it yourself.\nADDITIONAL NOTES\nUp Time is the average amount of time that all services on a server are\noperational and accessible to end users. It is a typical measurement of a hosting\ncompany\u2019s ability to provide the services they promise.\nThe benefit of using a hosting service falls under the same principles as other cloud\ncomputing services. You are paying to rent equipment and\/or services in place of investing\nin equipment and managing the server and Internet connection yourself. Additionally,\nhosting facilities are equipped with backup power sources as well as redundant connections\nto the internet, and may even have multiple facilities that are physically dispersed, ensuring\ntheir clients have the best up time as possible. Ads like the one below are common to these\nservices and often emphasize their best features. Price competition makes for relatively\naffordable hosting for those who are not looking for dedicated servers and are comfortable\nwith sharing their (virtual) server resources with other customers.\n23 The Missing Link: An Introduction to Web Development and Programming Chapter 4\nDomain Registrar\nDomain registrars coordinate the name servers that turn URLs into the IP addresses\nthat get us to our destinations. These companies are where you register available names in\norder to allow others to find your site. One of the most recognized registrars right now is\nGoDaddy\u2014you may know them from their ads, which feature racecar driver Danica Pat-\nrick. Like many registrars, GoDaddy also offers other services like web and email hosting\nas well as web development in an effort to solve all of your website needs.\nLEARN MORE\nKeywords, search terms: Networking, network topology, OSI, network architecture\nCisco Networking Example: http:\/\/docwiki.cisco.com\/wiki\/Internetworking_Basics\nList and description of all top level domains: http:\/\/www.icann.org\/en\/resources\/registries\/tlds\nOngoing comparison of hosting providers: http:\/\/www.findmyhosting.com\/\n24 Chapter 5\nWebsite Design\nWebsite design is a topic of study often neglected until after a programming background\nhas been developed. Worse, it may be entirely ignored or missed by computer science stu-\ndents when courses covering the topic are in other programs like graphic arts or media. This\nresults in programmers trying to understand how to write code meant for layout and design\nelements without understanding design. By studying these elements first, we can develop a\nbetter knowledge of the concepts of web design before we write code. Progressing through\nthe topics in this section during your site design will greatly ease your development efforts\nin the future, allowing stakeholders to understand the project and provide feedback early\non, reducing (re)development time.\nA number of factors affect design in web development, complicating what would oth-\nerwise appear to the end user to be a relatively simple process of displaying a picture or\ndocument. In truth, the development process involves not only the HTML and multimedia\nthat make up the visual aspects of the page but also considerations of software engineering,\nhuman-computer interaction, quality assurance and testing, project management, informa-\ntion and requirement engineering, modeling, and system analysis and design.\nToday\u2019s sites are now becoming more application centered than traditional sites. This\nfurther complicates our projects as we integrate with legacy software and databases, strive\nto meet real-time data demands, address security vulnerabilities inherent to the environ-\nment we are working in, and ongoing support and maintenance typical of robust software\napplications.\nIn response to these advances in complexity and capability, web development has grown\nto embrace many of the same development processes of software development. We will\nconsider some of these processes below, which you may wish to use depending on the size\nand complexity of a given project.\nPlanning Cycle\nWeb development is best achieved as a linear process, but is usually completed asyn-\nchronously. The planning process described is intended to build upon itself to refine project\nrequirements, look and feel, and development plans. However, limitations in timelines,\nmid-project revisions, and the extensive time that can be invested into the early stages of\ndesign lead many programmers to begin development while a project is still in design.\n25 The Missing Link: An Introduction to Web Development and Programming Chapter 5\nStarting early with programming during design planning can accelerate a project when\nthe elements created early on are unlikely to be affected by later changes in the scope.\nWhen done carefully, early programming also allows an opportunity to test concepts before\ninvesting time into an idea that may not work. It is important to avoid aspects that are as-\nsumed to change, like visual layout or particular pieces of content, instead focusing on data\nstructure, frameworks, and other components that are easily adapted to design changes.\nWhile you are planning, keep an eye out for indicators that things are going off-track.\nSome of the more important flags that should be resolved include:\n1. Vaguely defined use cases and inadequate project requirements\n2. Overly broad or undefined scope of features\n3. Unresolved disputes between stakeholders about project features\n4. Unrealistic time table, budget, or inadequate resources\nWhen considering your milestones, tasks, objectives, or whatever label you or your team\nplace on objectives, a handy acronym to reference is SMART. SMART stands for Specific,\nMeasurable, Attainable, Realistic, and Timely. The idea is to check all of your objectives\nagainst these criteria to determine if they are appropriate and well developed. By ensuring\nall of your objectives meet the SMART criteria, you will have a better chance of keeping\nyour project on time and well planned.\nSpecific:\nIs your objective specific enough to convey its full scope? While you do not want to\nspecify implementation of the objective, you should convey enough specific information\nthat the person assigned to the objective can begin their portion of implementation.\nGood Example: Deliver our standard proposal with adjusted price quotes to reflect cus-\ntomer\u2019s discount rate of 15%.\nBad Example: Deliver a proposal to the customer.\nMeasurable:\nYour objective should have a clear indicator of when it is complete.\nGood Example: Complete the first 15 pages identified in the site plan.\nBad Example: Complete the first 20% of the site.\nAttainable:\nIs it possible, at all, to complete the objective?\nGood Example: Get the server to a FedEx store by close of business on delivery date.\nBad Example: Drive the server from New York to California within 24 hours.\nRealistic:\nIs it possible to complete the objective given the timeline and resources on hand?\nGood Example: Have Team A (staff of 20) complete 10 pages by tomorrow.\n26 The Missing Link: An Introduction to Web Development and Programming Chapter 5\nBad Example: Have Bob the Intern complete 10 pages by tomorrow.\nTimely:\nWill the objective be useful if it is completed at (not near or before) its deadline?\nAssuming a proposal deadline of Friday morning:\nGood Example: Have draft sitemap completed by the end of Wednesday to include in\nthe proposal.\nBad Example: Have draft sitemap completed by the end of Friday to include in the\nproposal.\n\u201cBut, wait, Attainable and Realistic sound like the same thing!\u201d Well, yes they are quite\nsimilar. However the difference lies in what else you know about the project, timeline,\nresources and objectives. In our Realistic example this is highlighted by specifying the\nresources available for the objective. While our example company could assign sufficient\nresources to complete 10 pages in a day, it could never drive a server from New York to\nCalifornia in a day no matter how many people it has or how fast their car is given current\nspeed limits. In the same vein, the objective of creating 10 pages in a day is perfectly attain-\nable for our example company, but is not realistic if your company lacks enough manpower\nto complete the task.\nWhile we broke these examples down to highlight the particulars of each element of our\nlitmus test, real world objectives would contain all of these together in up to two or three\nbrief sentences:\nTeam A will complete the customer\u2019s proposal using our standard forms including their\ndiscount and a sample site plan by the 15th for delivery the 20th.\nNow we need to test it. Is the objective specific? Yes. We are not left needing basic ques-\ntions asked before we could work on the objective. Is it Measurable? Yes. We have a deadline\nof the 15th of the month for a specific list of items. Is it Attainable? Yes. With appropriate\nresources there is nothing impossible about the objective. Is it Realistic? Assuming Team\nA has enough time and manpower to complete the task by the deadline, yes. Is it Timely?\nThe work is due 5 days before delivery, allowing time for review, changes, or delays, and its\ndeadline does not extend beyond its useful life, so yes, we have a SMART objective.\nHow do we come up with our objectives? We extract them as the \u201cbig things\u201d that need\nto be done from the customer\u2019s request, the mission statement, or other sources of informa-\ntion that define the scope of your project.\nWhat do we do with our objectives? The individual(s) tasked to the objective will break\nit into actionable tasks, or individual items that need to be completed. For example, our hy-\npothetical objective of ten pages in a day could be broken down into ten tasks, one for each\npage. Helpful Hint: SMART can be applied to tasks, too (really any future planning\/goal).\nWhy bother with any of this? Why even create a scope document in the first place if we\nknow things will change? Well, we do it because things will change. New ideas will crop up,\nproblems might be found, or something might be forgotten in the mix. The planning stage\nwill define for us and our client exactly what we are going to do, and what our price, time,\nterms, etc. are meant to cover. As a project is in progress, especially if iterative meetings are\nheld with the client, new requests will come into play. These may be great ideas. They may\n27 The Missing Link: An Introduction to Web Development and Programming Chapter 5\nbe terrible. They may derail the project\u2019s success if they are not completed. However, each\nof them will affect your timeline and resources. The tendency to squeeze in \u201cone more idea\u201d\nover and over again is called Feature Creep, as it creeps into your project and eventually eats\naway at your resources and profit.\nLEARN MORE\nKeywords, search terms: Website planning, web development plan, planning templates, project\nmanagement\nGood Planning Worksheet: http:\/\/www.goodworkmarketing.com\/docs\/WebsitePlanningGuide.pdf\nBusinessBalls.com Guide to Project Management: http:\/\/www.businessballs.com\/project.htm\nThe Fold\nAs we begin to develop our pages, we need to begin to consider where we want to place\npieces of our content. If you look at newspapers, you will find that the most attractive story\nof the day (as decided, at least, by the publisher) is emblazoned in large letters near the\nmiddle or top of the front page, surrounded by the name of the paper, the date, and other\npieces of information that quickly lend to your decision of whether or not to purchase a\ngiven paper. This is done intentionally, to make the paper attract your attention and get you\nto buy their edition over their competitors. In the printed news industry, the prime retail\nspace in the paper is the top half of the front page, or what you see when the newspaper is\nfolded normally at a newsstand. This is referred to as \u201cabove the fold,\u201d and is crucial to get-\nting their audience\u2019s attention. This also applies to websites, except in our case, our \u201cabove\nthe fold\u201d is what the user sees on the landing page for our site, without having to scroll\ndown or use any links.\nWhat you typically find here is the name and or logo of the company, and what they feel\nis most important for you to see first. As you begin to analyze web pages in this light, you\nwill find it very easy to determine what kind of site they are, or what they want or expect\nfrom you as their guest. News sites will typically follow a similar setting to a printed paper,\nleading with headlines and links to other sections. Companies will lead with a featured\nproduct or sale to attract your attention, and search engines will make the search bar promi-\nnent, usually with ad space close by to increase their revenue streams.\nThe concept of \u201cThe Fold\u201d is another of the many highly argued concepts in web de-\nvelopment. Proponents are quick to point out the same example I used of traditional print\nmedia methods, while detractors will argue that if it were true, scrolling would never have\n28 The Missing Link: An Introduction to Web Development and Programming Chapter 5\nbeen created, or users would lose interest in following links. While I endorse \u201cThe Fold\u201d as\na useful approach to landing pages, I do not mean to imply that all of your pages should fit\non only one, non-scrolling screen.\nRecent trends on sites like Facebook and LinkedIn show us there are in fact places for\nscrolling. Indefinitely, as it were. Both sites now feature status pages where older content is\ncontinuously appended each time you near the bottom of the page. This is quite similar to\nthe concept of paging, but instead of clicking a link to the next page, the content is simply\nwritten in at the bottom creating a never-ending feel to the page. Ultimately, your design\nphase will help identify where following \u201cThe Fold\u201c is not really an option, or if there is\nenough content to warrant indefinite scrolling, and all other ranges in between.\nTypography\nTypography is the study of font. While an important topic in media arts, it has until\nrecently received little attention in web development. Utilizing unusual fonts used to be a\ncomplicated process that required the end user to have your font(s) installed in order to see\nthe site as you intended. Now, advances in CSS allow us to use unusual fonts by connecting\nto them through our styling. This allows us to use a tremendous variety of fonts in our sites\nto add to our look and feel, adding an aspect that has unlocked new approaches to design.\nSome of the elements of typography include the study of features like readability, conveying\nmeaning or emotion through impression, and the artistic effect of mixing styles.\nPublic Domain\u2014openclipart.org\nFigure 10 Typography\nFor ease of reading and to avoid a cluttered appearance, most sites keep to two or three\nfonts when creating their design. One for text, and one or two for headings, titles, and\ndistinguishing marks. All of these should be kept in the same family for a more congruous\nexperience, and each unusual font defined in your site should include fallback definitions in\ncase there are problems loading your primary style (we will see this in examples later on).\nYou may want to set your regular text as one of the standards supported by all browsers as\nusers are most familiar and usually comfortable with that set.\nWeb Fonts\nTo tap into this aspect of design, a great place to start is with the Google Fonts14 website.\nThis site is a repository of character sets for a great variety of fonts that you can link to or\n14 http:\/\/www.google.com\/fonts\/\n29 The Missing Link: An Introduction to Web Development and Programming Chapter 5\ndownload and include in your own site\u2019s files. We will look at connecting to these later, but\nbrowsing the site now will give you an initial look at the amount of variety that is available\nfor design.\nSite Maps\nA site map is a file that contains a master list of links to the pages on your site, and can\nprovide information about those pages like how often they are updated, how pages connect\nto each other, and how important it is relative to the other pages. It can be a reference tool\nto both Bots that index your site for search engines, as well as your visitors trying to find\nparticular content. Site map files are XML documents arranged in hierarchical format that\nbots read to gain understanding of your site layout, page relevance, and organization. The\nfile may also be a human readable page that diagrams how pages relate to one another, and\nserve as a master list of the pages in your site. Site maps are best kept in the root of your\nwebsite, at the same level as your initial index page.\nWhile a complete site map cannot be finalized until after your site is ready to be\npublished, I include site maps under development methods because laying out your site\u2019s\norganization on paper will help with developing your menu system, logically organizing\ncontent, and in defining the scope and purpose of your site. The more content or pages you\ncan define at the beginning of the process will reveal information that will help during your\ndesign phase.\nTo create a site map, you can start by creating a running list of all the content you wish\nto have on your site. Anyone involved in the production or validation of content should be\nin room! In each of these steps, it is important to identify your stakeholders. As you are\ncreating your running list, it is often helpful to use index cards so you can determine by\ncard color or pile where a particular piece of content should be. This will help you discover\nyour menu system, as you create names for piles of cards as your menu title. After, as you\ndiagram what cards are with what pile and where that pile is relative to others, your site\nmap will begin to take shape.\n30 The Missing Link: An Introduction to Web Development and Programming Chapter 5\nCreative Commons 2.0 Licensed by Kent Bye\nFigure 11 Site Map\nIf you are rebuilding an existing site, you may wish to adapt the existing menu system\nor scrap it entirely and start new. Larger sites or those with a large number of stakeholders\ninvolved will need more time to complete this step. To break larger projects down, you may\nwish to begin by defining what type(s) of content you do not want on your site. For example,\nif your target audience is casual shoppers looking for in-home plants, you can eliminate\ninformation on plants not suited for indoor living, or restrict the amount of information\nprovided to basic care and maintenance, as opposed to the greater detail professional land-\nscapers will look for. Distributing the process of identifying what material needs to be\npublished into several groups of stakeholders who share interests in certain categories will\nalso help streamline this process.\n31 The Missing Link: An Introduction to Web Development and Programming Chapter 5\nPhoto by Jonas Maal\u00f8e Jespersen (CC BY-SA 2.0)\nFigure 12 Website Planning\nThe sitemap you create should follow the URL standards RFC-398615 (notably the use\nof entity escape codes) and the standards for XML.16 Your character encoding must also be\nin UTF-8, which means some special characters and markings beyond those traditionally\nused in text will not be available. Once your sitemap is complete and uploaded, you can add\nit to your robots.txt file as:\nSitemap: http:\/\/www.yourwebsite.com\/yourfilename.xml\nYou can also submit your site (and sitemap) for crawling directly to the search engines.\nWhile this may not happen immediately, it lets them know that your site is new or has\nchanged. Some engines, like Google17 provide tools and reporting for a comprehensive\nexperience while others like Bing18 have quick entry forms that only require your site\u2019s main\nURL and a confirmation that you are, in fact, human (which seems amusing when you\nconsider the point of what you are doing is to trigger a bot).\nLet us plan a small site of just a few links: our index page, a contact page, an information\npage, and publications and research pages off of our information page. As an XML file, our\nvisual sitemap above would be expressed as the following:\n<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<urlset xmlns=http:\/\/www.sitemaps.org\/schemas\/sitemap\/0.9>\n<url>\n<loc>http:\/\/www.oursite.com\/<\/loc>\n<lastmod>2013-01-13<\/lastmod>\n15 http:\/\/asg.web.cmu.edu\/rfc\/rfc3986.php\n16 http:\/\/www.w3.org\/TR\/REC-xml\/\n17 https:\/\/www.google.com\/webmasters\/tool\n18 http:\/\/www.bing.com\/toolbox\/submit-site-url\n32 The Missing Link: An Introduction to Web Development and Programming Chapter 5\n<priority>0.8<\/priority>\n<url>\n<url>\n<loc>http:\/\/www.oursite.com\/contact.htm<\/loc>\n<lastmod>2013-01-13<\/lastmod>\n<priority>0.9<\/priority>\n<url>\n<url>\n<loc>http:\/\/www.oursite.com\/publications.htm<\/loc>\n<lastmod>2013-01-13<\/lastmod>\n<priority>0.5<\/priority>\n<changefreq>monthly<\/changefreq>\n<url>\n<url>\n<loc>http:\/\/www.oursite.com\/information.htm<\/loc>\n<lastmod>2013-01-13<\/lastmod>\n<priority>0.5<\/priority>\n<url>\n<url>\n<loc>http:\/\/www.oursite.com\/research.html<\/loc>\n<lastmod>2013-01-13<\/lastmod>\n<priority>0.7<\/priority>\n<url>\n<\/urlset>\nAs we are focusing on the sitemap aspects of this example at the moment (we will learn\nmore about XML later), just take note that the <loc>, <url>, and <urlset> tags for location\nare required. Everything else is optional, but adds more information for site crawlers. You\nwill also note that in this example you cannot deduce the menu or hierarchy that we saw\nin our visual diagram\u2014indexing services do not care about this. For a site visitor, we would\nstyle this page differently or create a sitemap optimized for our visitors to read.\nRobots.txt\nRobots are automated scripts typically used to index, or take inventory, of the content\nin a website for use in things like web searching sites or collecting statistics. A robots file is\na basic text file kept in the root folder of your website that instructs these robots on what\nsections or types of content in your site you do or do not want them to index. Legitimate\nrobots will read this file when they first arrive on your site to honor your request. Keep\nin mind this is an enforceable act, and malicious or less-than-reputable robots are still\nperfectly capable of reading through all non-privileged (i.e. no login required) content on\nyour site.\nThe simplest robots.txt file involves only two lines:\nUser-agent: *\nDisallow: \/\n33 The Missing Link: An Introduction to Web Development and Programming Chapter 5\nThe first specifies that the rules below apply to all robots that read the file. The second\nadds that nothing is allowed below (meaning deeper, or all the files and folders inside of)\nthe root folder ( \/ represents the main folder of the site). If we wanted to be more specific\nabout what sections we want to keep bots out of, we can identify them individually instead\nof the whole site:\nUser-agent: *\nDisallow: \/pictures\/reserved\/\nDisallow: \/index.php\nDisallow: \/media\nDisallow: \/scripts\nTo distinguish cases where a particular bot has a different set of permissions, we can use\nthe bot\u2019s name in place of our \u201call\u201d wildcard:\nUser-agent: BadBot\nAllow: \/About\/robot-policy.html\nDisallow: \/\nUser-agent: *\nDisallow: \/pictures\/reserved\/\nDisallow: \/index.php\nDisallow: \/media\nDisallow: \/scripts\nThe above settings tell BadBot that it is allowed to see the policy file, but nothing else.\nIt still specifies the blocked paths for the rest of the bots that might visit.\nWireframes\nWireframes in the web development world are not exactly their literal three dimensional\ncounterparts in the real world, but they bear a similar purpose. A wireframe may include\nthings like location and size of elements such as a login button, where banners and content\nsections will sit, and provide an overall idea of how a site will operate. When wire framing\na website, the idea is to create a mockup of one or more designs that portray how the\ninterface might appear to the user. By the end of your wire framing process, you should have\nan idea of how the site will operate, and have resolved questions over where users will find\nparticular features and elements.\nWireframes typically do not include color, actual content, or advanced design decisions\nlike typography. Some of these considerations will have been at least partly addressed when\ncreating your site map, and the rest will come once we begin storyboarding.\n34 The Missing Link: An Introduction to Web Development and Programming Chapter 5\nCreative Commons 2.0 Braden Kowitz\nFigure 13 Wireframe\nStoryboarding\nStoryboarding a website is quite similar to storyboarding a TV show, comic, or other\nforms of media. Using our wireframes, we can begin to add color, font, and rough images\nto our documents. Keep in mind at this point we are probably still in a graphics editor or\ndocument style program like PowerPoint, Photoshop, etc. Real code is coming soon, but we\ncan do more mock-ups faster without taking the time to make it function.\nAs you storyboard, you will create separate pages, or panels, for the screen a user would\nsee as they complete the most important processes on your site. If you are selling something,\nfor example, your storyboard may include examples of product pages, adding items to their\ncart, logging in, and completing their purchase.\nBy paging through these panels, you can see how the user experience will progress and\nidentify potential problems like a confusing check out process, or you may discover that\nyour shopping cart block from wire framing may be better off in a different, more predomi-\nnant location. This process may be repeated several times until a final version is accepted by\neveryone in the decision process.\n35 The Missing Link: An Introduction to Web Development and Programming Chapter 5\nCreative Commons 2.0 Rob Enslin\nFigure 14 Storyboarding\nColor Schemes\nThe process of determining the color(s) involved in your site could fill a book. In fact,\nit does.19 Regardless of the varying opinions of what emotions colors instill, or represent,\nthe quickest way to alienate a user is to give them a visual experience that is unappealing.\nThe layout, appearance, and cohesiveness of your site are something that are immediately\njudged when a user first visits. These elements influence everything from their impression\nof what the site represents, its reputability, and even its trustworthiness as an ecommerce\noption. If your site appears to be disorganized, dated and out of style, or seems too \u201cbusy\u201d\nor complicated, you can lose users in less than ten seconds.20\nYou can address this issue (even without an artistic eye) by following the techniques\nwe discussed earlier to plan out a simple, intuitive interface, and by using tools to help you\n19 https:\/\/www.google.com\/search?q=website+visual+design\n20 http:\/\/www.nngroup.com\/articles\/how-long-do-users-stay-on-web-pages\/\n36 The Missing Link: An Introduction to Web Development and Programming Chapter 5\nselect and compare color schemes like http:\/\/colorschemedesigner.com\/ or http:\/\/www.\ncolorsontheweb.com\/colorwizard.asp.\nWhether you choose to study other books on the subject or not, a great way to keep\ncurrent is to get ideas from what others are doing by following sites that list or rate sites by\nappearance such as the annual Times review21 and http:\/\/www.thebestdesigns.com\/.\nLEARN MORE\nKeywords, search terms: Web design, aesthetics, graphics, typography\nWeb Style Guide 3rd Edition: http:\/\/webstyleguide.com\/wsg3\/8-typography\/index.html\nTypeCulture: http:\/\/www.typeculture.com\/academic_resource\/\n21 http:\/\/techland.time.com\/2013\/05\/06\/50-best-websites-2013\n37 Chapter 6\nDevelopment\nBelow are just a few examples of different methods of programming found in the workplace. This\nis not an exhaustive list, but is meant to induce some personal analysis of what approaches might\nbe effective for you. We will look at examples of styles based on the number of programmers\u2014one,\ntwo, or many\u2014to demonstrate how programming can be approached as team sizes change.\nStaffing Styles\nSingle Developer\nAlso called The Lone Cowboy or Lone Wolf. Typically found in small companies, benefits\nof being a single developer are that you are intimately familiar with the entire code base (at\nleast while you are writing it\u2014we will get to that under Good Practices), do not have to\nagree on coding styles, branching, or integrating code, and your functions and classes are\nbuilt to what you specify.\nDownfalls however are also large. A second pair of eyes or fresh mind can help find bugs\nfaster, the workload burden is entirely yours, and any security issues or bugs you are not\naware of are likely to be found the hard way, by an end user or malicious visitor.\nPaired Programming\nSometimes referred to as Holmes and Watson programming, paired programming is\nthe practice of assigning two programmers to the same task, and having them (quite liter-\nally) work side by side. This allows one person to write while the other contemplates code\ninteractions, watches for bugs, and keeps track of tasks. By altering which programmer in\nthe pair is the lead at different intervals both programmers are able to contribute and learn\nfrom each other. Proponents of this model will highlight studies that show decreases in\nbugs, increased performance (it is, after all, harder to sneak in that Facebook post when\nco-workers are regularly using your screen), increased knowledge across staff members, and\nless distraction.\nThis approach may or may not work well depending on the culture present, and paying\ntwo staff members to complete one task can be more expensive, possibly offsetting reduced\nprogramming time. Poor pairing decisions (e.g., two programmers with little experience)\n38 The Missing Link: An Introduction to Web Development and Programming Chapter 6\nand other factors like addressing sick time and vacations that interrupt teams can also\nreduce the potential benefits of this approach.\nTeam Development\nTeam development allows the work involved in a project to be dispersed among a group\nof individuals (a necessary step for most large scale projects) and reduces overall develop-\nment time. A team with well-defined divisions of labor who adhere to an agreed upon set\nof methods can be a highly effective group.\nDetractors are found where agreements on labor or method are ill defined or not ad-\nhered to. They can also arise from personal issues or conflicts of personality, and physically\ndispersed teams may find issues with time zone differences, limitations of communica-\ntion methods, and increased \u201clag\u201d time caused by not being face-to-face for immediate\ncommunication.\nProject Management Methods\nOnce you move beyond programming alone and into groups, or have multiple parties\nworking on the same project, a management approach will be needed to determine pace,\ngoals, deadlines, and to maintain order and understanding of the project. There are a great\ndeal of approaches to this problem, and we will take a quick look at some of the currently\npopular solutions.\nAgile\nWhile some of the principles of agile development go against the planning process we\nexamined above, it can be effective in instances where fast turnaround is necessary and a\nhighly iterative release process is acceptable. Some of its tenets are frequent communication\nbetween parties, self-organized groups motivated for the project, and requirements that are\nchanged as ideas progress through the project. Changing requirements are driven by what\nis revealed through the iterative releases, and this fluidity is one of the strengths to be found\nin this approach.\nUltimately, the guiding principle here is to work in the mindset where you get the best\npeople, trust in them, and focus more on the customer\u2019s wishes and the project itself than\nlength contracts, internal processes, and bureaucracy. You are most likely to run into this\napproach in start-ups that are not burned by an internal bureaucracy and heavily structured\natmosphere.\nThe twelve principles of agile development, according to a published manifesto22 by\nseventeen software developers are as follows:\n1. Our highest priority is to satisfy the customer through early and continuous\ndelivery of valuable software.\n2. Welcome changing requirements, even late in development. Agile processes\nharness change for the customer\u2019s competitive advantage.\n3. Deliver working software frequently, from a couple of weeks to a couple of\n22 http:\/\/www.agilemanifesto.org\/\n39 The Missing Link: An Introduction to Web Development and Programming Chapter 6\nmonths, with a preference to the shorter timescale.\n4. Business people and developers must work together daily throughout the project.\n5. Build projects around motivated individuals. Give them the environment and\nsupport they need, and trust them to get the job done.\n6. The most efficient and effective method of conveying information to and within\na development team is face-to-face conversation.\n7. Working software is the primary measure of progress.\n8. Agile processes promote sustainable development. The sponsors, developers, and\nusers should be able to maintain a constant pace indefinitely.\n9. Continuous attention to technical excellence and good design enhances agility.\n10. Simplicity\u2014the art of maximizing the amount of work not done\u2014is essential.\n11. The best architectures, requirements, and designs emerge from self-organizing\nteams.\n12. At regular intervals, the team reflects on how to become more effective, then\ntunes and adjusts its behavior accordingly.\nScrum\nThe Scrum process is a more focused and organized approach than agile development.\nThe Scrum process maintains the defined roles of team members while pursuing the fast-\npaced development goals of agile. Daily meetings are held at the same time\/place, and\nare typically held standing, to encourage shorter meetings. Core team members lead the\n15-minute meeting by briefly reporting on what they did since the last meeting, their plans\nfor the day, and any obstacles they have come across. Stumbling blocks brought up in these\nreports are addressed by the Scrum Masters, who address obstacles in order to keep the rest\nof the team on task.\nScrum goals are organize into Sprints, blocks of time usually shorter than 30 days, in\nwhich certain tasks of the project should be completed. Sprints are kicked off with planning\nmeetings, and the goal is to have those portions of the project in full working order by the\nSprint\u2019s completion.\n24 h\n30 days\nWorking increment\nProduct Backlog Sprint Backlog Sprint\nof the software\nBy Lakeworks [CC-BY-SA-3.0-2.5-2.0-1.0], via Wikimedia Commons\nFigure 15 Scrum\n40 The Missing Link: An Introduction to Web Development and Programming Chapter 6\nWaterfall\nThe Waterfall approach to project management recognizes the projects are typically\ncyclical, and builds that recognition into its five stage approach to management:\nPaulsmith99 at en.wikipedia CC-BY-3.0, via Wikimedia Commons\nFigure 16 Waterfall Diagram\nRequirements\nRequirement gathering can be interactions with your users that generate feature re-\nquests, initial project definition like its scope, or discovery of other important information\nduring the planning phase of a project.\nDesign\nDevelopment of pseudo-code, storyboards, wireframes, or any other materials necessary\nto depict what will be implemented to satisfy the requirements. See sections: Pseudo-Code\nFirst!, Storyboarding, and Wireframes.\nImplementation\nThe actual programming and development phase to generate the working solution.\nVerification\nTesting and debugging the solution to ensure it meets the requirements and works as\nintended.\nMaintenance\nOngoing tasks such as database maintenance, modifications to support changing re-\nquirements, or new tasks created by the discovery of bugs.\n41 The Missing Link: An Introduction to Web Development and Programming Chapter 6\nItems discovered in this phase trigger the process to begin again in order to address\nthem. Eliminating a bug, for example, requires determining how to fix the problem, after\nwhich the bug resolution will move through the rest of the steps just like the project did\ninitially. New ideas or feature requests will also trigger the requirements stage to begin. As\nthese events will not occur at the same time, the waterfall effect occurs as individual items\nin the project will be in different phases as the cycle continues.\nStructural Patterns\nMore decisions! Now that we have our team(s), and an approach for managing the\nproject as a whole, we need to determine how to manage the development of the code as\nwell. How the code is organized contributes to how easy or difficult change management\nbecomes, how flexible the system is, and how portable it is. The options of how to approach\norganizing the actual code are called Architectural Patterns.\nModel View Controller\nIn the MVC approach, we create three distinct concepts in our code. The image\nbelow depicts a de-coupled approach to MVC, where the model and view have no direct\ncommunication.\nShane Brinkman-Davis, December 2012 CC-A 3.0\nFigure 17 Model View Controller\nModels\nOur models contain the logic, functions, and rules that manipulate our data. A model is\nthe only piece of the system that should interact directly with your data source. It should\nalso respond to a request with a consistently formatted reply, and not simply return mes-\nsages from the data source. This allows you to utilize multiple different sources for your\ndata, or easily change how it is stored, as you would only need to edit your model\u2019s interac-\ntions and connections instead of adjusting code throughout your entire site.\n42 The Missing Link: An Introduction to Web Development and Programming Chapter 6\nViews\nViews generate the output that is presented to the user. They request, or are given, the\ndata needed to complete the page by the model. In some interpretations of MVC, the con-\ntroller may also act as a mediator between the model and view\u2014the important fact is that\nyou should not see code in a view section that completes any actions other than formatting\nand presenting output. The view contains the images, tables, styling, and page formatting\nthat make up the site itself. By keeping these items isolated from the models and control-\nlers, we can easily duplicate our site\u2019s appearance somewhere else, or \u201cskin\u201d several sites\ndifferently, but have them all use the same data and models for interaction.\nControllers\nControllers recognize changes and events, such as user interaction and results of model\nresponses that drive other actions. The controller will then call the appropriate model(s) to\ninteract with data, and the appropriate view(s) to reflect the changes made. When control-\nlers also manage passing data from the model to the view, the system is considered passive,\nor de-coupled, as the models and views have no awareness of each other.\nVariations\nMVC was originally developed as a method for traditional software development. Mi-\ngrating it to web development is not a simple task, as the concepts become muddled when\ninteracting with multiple languages, and a client-server model of communication. Other\napproaches to interpreting the MVC method for web development such as model\/view\/\npresenter, model\/view\/adapter, and presentation\/abstraction\/control attempt to resolve and\nclarify implementing this approach online.\nService-Oriented Architecture\nSOA is a modular style approach to interaction. It is used in web services and Cloud\nComputing (APIs) as a method of providing tools, actions, and information to other sys-\ntems that allows for larger and\/or multiple systems to integrate into. Each item in an SOA\napproach is oblivious to the actions of other services. It only knows how to request informa-\ntion or actions contained in other services as they are needed.\nBy building in this approach, the programmers can specify and limit what actions are\navailable and under what conditions (end user\u2019s authentication level, nature of data, etc.) all\nwhile keeping the actual systems removed from direct interaction with the consumer. This\nhelps protect internal systems by limiting access to raw data and intellectual property while\nstill providing an organized platform from which developers can retrieve what they need.\nLarger companies might develop an API that provides information from multiple data\nsources from one place. By creating the common platform, their developers can connect to\nthe data from other applications or websites without having to connect to each data source.\nThese companies might also allow their partners to access their API in order to provide\nautomate communication between companies, create other add-on tools, or to contribute\ntheir own information. Walgreens recently opened a portion of their internal API for just\nthis reason. By allowing third parties access, outside vendors were able to create applica-\n43 The Missing Link: An Introduction to Web Development and Programming Chapter 6\ntions like printing from Instagram right at your local store, or refilling prescriptions from\na mobile device.\nUnit Testing\nUnit testing is an exercise in writing each element of your software to meet very specific\nrequirements. By reducing your project to its smallest testable component, each part can be\ntested individually. These modules are then connected together to form the larger whole.\nIt is included under methods instead of practices as it is an important approach that needs\nto be followed by each team member if it is to be used at all. Testing these units before in-\ncluding them in the software should reduce debugging, and more readily allows for testing\ncomponents before a full implementation has been assembled. This technique can also be\ncombined with other methods because it is more of a coding practice than an approach to\nproject implementation.\nUnit testing is frequently used in fast paced approaches like Scrum to help ensure a less\nerror prone product. Keep in mind that this is not a perfect solution. While individual units\nmay test fine, logical problems can still be created as these modules are combined. Con-\ntinued testing of the results of not only single units but also units working in combination\nwill help in addressing this potential point of failure.\nLEARN MORE\nKeywords, search terms: Project management, programming architecture, software planning and\ndevelopment\nArchitectural Blueprints\u2014The \u201c4+1\u201d View Model of Software Architecture http:\/\/www.cs.ubc.\nca\/~gregor\/teaching\/p apers\/ 4+1view-architecture.pdf\nProject Management Advisor http:\/\/www.pma.doit.wisc.edu\/index.html\nGood Practices\nFile Organization\nAs we begin to create more and more files to complete our website, keeping everything\nin one folder will quickly grow cluttered. To address this, we can create folders just like\nwe do when sorting files in My Documents. Traditionally you can find folders for images,\nscripts, pages or files, or for different sections of content or tasks, like an admin folder or\necommerce store. How and why these folders are created varies to personal taste or group\ndeterminations, and in some cases is done to maintain a particular method of writing code\nsuch as model-view-controller.\nPseudo-Code First!\nWhiteboards, notepads, and napkins are your friends. Writing out how you plan to\ntackle a particular problem will help you identify logic problems before you are halfway\nthrough coding them, and will help you keep track of what you need to work on as you\n44 The Missing Link: An Introduction to Web Development and Programming Chapter 6\nprogress. Creating pseudo-code is the process of writing out in loosely structured sentences\nwhat needs to be done. For example, if my task is to look at each element in an array and\ntell the user if it is true or false, we might draft the following:\nforeach(thing in array){\nif(thing \/ 2 is 0) then show Even\nelse show Odd\n}\nImagine that while writing this example out we realize that we want to store the re-\nsponses for use again later, not just show them to the user. So, let us update our pseudo-code\nto take that use case into mind:\nforeach(thing in array){\nif(thing \/ 2 is 0) then add to even array\nelse add to odd array\nsend arrays back in an array\n}\nReviewing what we have now, not much looks different, but so far we have not had to\nrewrite any code either. After some thought, it might occur to us that creating two ad-\nditional arrays could be more memory intensive and less efficient than editing the one we\nalready have. So, to simplify things and possibly improve performance, we might try this:\nforeach(thing in array){\nif(thing \/ 2 is 0) then add it to even array, delete\nfrom this array\nsend arrays back in an array\n}\nFinally, since we are now editing our existing array, we need to make sure we reference it\n(ensuring our changes are reflected after the foreach completes), which also means we only\nhave to pass back our even array:\nforeach(reference! Thing in array){\nif(thing \/ 2 is 0) then add it to even array, delete\nfrom this array\nsend even array back\n}\nWhile none of the above examples would work (they are just pseudo-code), we were able\nto edit a conceptual version of our program four times. Alternatively we would have spent\ntime creating and revising actual lines of code three times, only to keep finding an issue,\nbacking up, and make lots of changes.\nComments\nTo quote Eagleson\u2019s Law, \u201cAny code you have not looked at for six or more months\nmight as well have been written by someone else.\u201d This is not to say that your style or ap-\nproach will change drastically over time, but that your immediate memory of what variables\nmean, why certain exceptions were made, or what the code, ultimately, was meant to address\nmay not be as apparent as when you last worked on the file. It is natural for us to feel that\nwe will remember these details as they are so obvious when we are creating them. The need\n45 The Missing Link: An Introduction to Web Development and Programming Chapter 6\nfor good commenting becomes immediately apparent when reviewing someone else\u2019s work,\nand you are wallowing in frustration trying to figure out what that person was trying to do.\nThis is not meant to endorse comments that are obvious to the reader from the line, like:\n$int = 2 + 2 \/\/we added 2 and 2 together\nRather, comments are best suited to explaining why agreed upon methods were not used\nor what difficult to understand code might be doing, like:\n\/\/ This block of code checks each text file in the folder for\nthe given date and deletes it\n\/\/ This is legacy code from when Frank M. worked here. If we\nchange anything, payroll breaks\nOrder of Assignment\nMany scripting languages distinguish between assignment statements and logical tests\nbased on the number of equal signs used in the statement. For example, giving the variable\n$temp the value of 10 (also called \u201csetting\u201d or \u201cassigning\u201d the variable) can be expressed\nas $temp = 10, while checking the value would look like if ($temp == 10). It is very easy to\nforget the extra = when writing logic statements, since we are so conditioned to using it in\nsingular form.\nThis creates issues as a logic test written as if ($temp = 10) will always be true. First, we\nare executing what is in the parenthesis\u2014in this case, setting temp equal to 10. When this\noccurs, the system returns returns a result of \u201ctrue\u201d to the script\u2014the request has been com-\npleted. This is like asking if true is true\u2014it always is! Since this does not cause a problem\nthat stops the program from running, we will not get any errors before running it. The errors\nwill be discovered only when the program does not behave as intended, and depending on\nthe nature of the logic statement we wanted, that might be a rare case, making for some\nfrustrating debugging. These are called logical errors, as the compiler or engine can run\nthe code we gave it, and the error lies between expected execution and what the system is\nactually programmed to do. We will look at this further in Chapter 27.\nTo protect ourselves from this, we can invert our logic statements to put our values first.\nSince we cannot assign a variable to a number, writing 10 = $temp would be considered\ninvalid, as 10 does not represent a place in system memory. Neither variables nor constants\ncan start with a number, even $10 is invalid. However, if (10 == $temp) is still valid, as the\nsystem compares both sides of the equation to each other, and is indifferent to the order.\nBy placing values first in our logic statements, if we forget to use the correct number\nof =, we will get an error from the engine early on that we can immediately find and fix.\nOtherwise we are left with a logic error that needs to be traced through our program later\nwhen we discover it is not working correctly.\nRead Me\nClosely connected with the concept of good commenting is the ubiquitous readme\nfile\u2014familiar to many users as the basic text file no one ever reads despite its title\u2019s quiet\nplea. The readme file\u2019s continued prevalence in such an antiquated file format is done to\nensure it is legible on the widest variety of operating systems, and is still considered the best\ndelivery format.\n46 The Missing Link: An Introduction to Web Development and Programming Chapter 6\nWithin your readme file should be notes targeting your end users. Unless you release\nopen source code, they would not be able to read your comments. These notes should tell\nthe user what the application\u2019s requirements are, how to install it, how to get help, and\nif you like, what notable changes are in the version they are looking at compared to its\npredecessor(s). Typically, the most common location to put a readme file is in the root\nfolder of your files, or in a sub folder in which the readme notes apply to.\nSpacing\nJust as we use spacing in documents to convey that a topic change is occurring, we can\nbreak up longer string of commands by putting spaces around lines that are grouped to-\ngether to complete a particular task, signifying that the next set of lines is for another task.\nBrackets\nSome languages require the programmer to use a combination of parenthesis and\nbrackets to identify what pieces of code belong together. This allows the engine or compiler\nto delineate between the code that should be tested as a logic statement, code that gets\nexecuted if that statement is true, and code that belongs to functions or classes.\nAs we write our code and reach instances where we need these elements, it is good\npractice to immediately enter both the starting and ending marker first, then create space\nbetween them to enter your code. This will help ensure that you do not forget to close\nbrackets later, or close them in the wrong places when nesting code. Depending on your\ntext editor, it may assist you by automatically adding closing brackets and helping you\nidentify which opening and closing brackets go together.\nIndentation\nTo make your code easier to read, you can use indentation to give the reader an idea\nof what lines of code belong to different sections. This is typically done inside functions,\nclasses, and control structures. When we nest code, extra indentations are added for each\nlayer within, moving those blocks of text further right to visually distinguish. As we finish\nthe contents of a loop or function, our closing bracket is lined up with our function defini-\ntion or logic statement to show that the section of code belonging to it is complete.\nWhile our program will run just fine without indentation, it makes it easier to see where\nyou are in your program and where the line you are looking at is intended to be in the logic\nflow.\n47 The Missing Link: An Introduction to Web Development and Programming Chapter 6\nFigure 18 Code Formatting Examples\nMeaningful Variable Names\nWhen you create variables and functions, try to create names that will have meaning not\nonly to you, but to others who may read your code. While it can be tempting to use a lot of\nshort variable names while writing your code, it will be more difficult later to follow what\nthe variable is supposed to represent. You might decide to use short names like queryResult\nor query_result or something longer like numberOfResumesReceived. While the latter\ntakes longer to type while coding, the name is very clear on what it represents. As spaces\nare generally prohibited in variable names, these examples show us a few ways to approach\nlonger names. The method you use is up to you, but should be used consistently throughout\nyour code to reduce confusion. Differences in how and where you use capitalization or\nunderscores can be used to represent different types of variables like classes or groups of\nvariables.\nShort variable names like a simple x or generic name like temp may have their places in\nyour code, but are best reserved for when they identify a small variable or one which will\nhave a very short shelf life in your code.\nVersioning\nThis is the process of creating multiple versions of your software, instead of continuously\noverwriting your sole edition of code. By creating different copies of your program as you\ncreate new features, you can preserve working copies or even create different versions of\nyour program. This allows you to \u201croll back\u201d or restore previous versions if unforeseen errors\nare created in new code, or to allow different features to be tried and discarded over time.\nNaming conventions for different versions of your code might involve numbers, letters,\nrelease stages (i.e. alpha, beta, release candidate, and release) a combination of all of these,\nor just \u201cdevelopment\u201d and \u201clive.\u201d\nGitHub\nA popular tool for collaborating on projects right now is GitHub.23 Focusing on open\nsource projects, GitHub is a cloud service with locally installed application options that\nfocuses on branching. Branching facilitates multiple working versions with varying features\nto co-exist in the same project space, giving the developers the ability to selectively merge\n23 http:\/\/www.github.com\n48 The Missing Link: An Introduction to Web Development and Programming Chapter 6\nnew code into their project\u2019s official repository. The platform supports code sharing, gener-\nating branches, and includes discussion boards, bugs, and feature request areas.\nDevelopment Tools\nThe following tools can be very useful in accelerating project development by reducing\nrepetitive tasks and providing collections of tools to help you write your code. I would\nencourage you to refrain from using them until you have at least mastered the material in\nthis text, otherwise, you may complicate your debugging tasks or not fully understand what\nthose tools are doing.\nFrameworks\nFrameworks are compilations of code that you can use to quickly start a site with a col-\nlection of features already in place. In a home building analogy, it would be akin to ordering\nparts of your house already completed, and having special tools in your toolbox for putting\nthe pre-built pieces together.\nA typical framework is a set of files that come with their own instructions, and can be so\nextensive that they take on a life and syntax beyond the language they are written in. They\nextend the features normally found in the language they are written in by adding their own\nclasses, functions, and capabilities. The goal is that by giving the framework a few com-\nmands, we can create much larger processes like a menu system or complete color scheme.\nSome frameworks focus on the automation of repetitive tasks like generating forms and\npages based on tables in a database, or applying in depth style and structure across a website.\nMultiple frameworks can be combined in a single project in order to add a combination\nof features, for example using one framework for the site layout and another for generating\ndatabase interactions. Each framework will require some time learning how to use its fea-\ntures, just like learning a programming language. This may be an important factor when\ndeciding when and how many to use in your work.\nSmarty24\nThe Smarty template engine targets the separation of application logic and presenta-\ntion. While it creates delineations between the code necessary to generate the content and\nthe code to present the content, it is not a full model-view-controller design. A smarty\ntemplate page supports special tags and commands that are part of the smarty engine.\nThese elements help to generate what the end product will look like, after generating the\nPHP necessary to build the page. Smarty also uses a template caching approach to facilitate\ndelivering pages faster, only updating cached templates when changes to a smarty file or its\ndependencies are detected.\n24 http:\/\/www.smarty.net\n49 The Missing Link: An Introduction to Web Development and Programming Chapter 6\nYii Framework25\nThe Yii framework focuses on reducing SQL statement writing, follows Model View\nController methods, and helps create themes, web services, and integration with other plat-\nforms. It also includes security, authentication, and unit-based approaches to development.\nZend Framework26\nThe Zend framework is focused heavily on modularity, performance, and maintaining\nan extensible approach to allow continued integration. This framework is popular at the\nenterprise level, and includes some of the original creators of PHP on staff. Zend itself is\na full service PHP company, providing training, development services, and the continued\nrefinement of the PHP language itself.\nTemplates\nSimilar to the idea behind frameworks, templates are sets of files that dictate the basic\nstructure that provides a layout to your site. Templates typically create a grid format you\ncan select from, like two or three columns, fixed or relative width and height, etc. If you are\nstarting a site fresh and putting it into an empty template, there may be some placeholder\ncontent and styling as well. Templates are useful for getting the look and feel of a site up\nand running fast and there is little concern about the particulars of appearance, or whenever\nthe template meets your needs well. When inserting your content dynamically, multiple\ntemplates can be used for one site to change the look and feel quickly based on which one\nis applied. This might be determined by what type of device your guest is using, or what\ntype of authentication they are using.\nTemplates can be both freestanding, or can be an extension of a content management\nsystem or framework.\nBootstrap27\nBootstrap was created by Twitter in order to help them manage their extremely popular\nservice. As it matured, they made it open source to allow others to utilize the toolset.\nTheir framework provides tools for styling, interaction elements like forms and buttons,\nand navigation elements including drop downs, alert boxes, and more. Using this frame\nwork involves little more than linking to the appropriate JavaScript and CSS files and then\nreferencing the appropriate style classes in your code.\nFoundation28\nThe Foundation system focuses on front end design and follows the principles of re-\nsponsive web design (see next section). Their approach uses a grid layout to allow flexibility,\naccelerate prototyping and wire framing, and provides integrated support for multi-plat-\nform designs.\n25 http:\/\/www.yiiframework.com\n26 http:\/\/framework.zend.com\/\n27 http:\/\/twitter.github.io\/bootstrap\/\n28 http:\/\/foundation.zurb.com\/\n50 The Missing Link: An Introduction to Web Development and Programming Chapter 6\nResponsive Web Design\nAs often as possible, this text will focus on coding methods that support responsive\nweb design. This approach replaces the practice of developing several version of your site in\norder to support different devices. An example of this is when you come across sites with a\nregular site, a mobile site (for example m.yoursite.com) and then provide an app for each of\nthe tablet platforms, or force tablet users into their mobile or desktop experience.\nInstead, we will create one set of files that changes its own layout and appearance based\non what we know. By using information made available in the initial http request to our\nsite, we can determine the features the user\u2019s browser supports, width and height of their\nscreen, and more. We can use this information to instruct our CSS files on what rules to\napply when styling the page, how much or little to resize elements on our page, what we\nwant to eliminate or hide on smaller screens, and more.\nWhile this approach is still not a perfect solution, it gives us a much-improved ability\nto support a wide variety of devices without managing several code bases and developing\nacross multiple proprietary platforms.\nIntegrated Development Environments\nThis list is by no means comprehensive. These editors are sufficient to get you started.\nIf you wish to continue in web programming, you may elect to invest in a development\nplatform like Adobe Dreamweaver or another professional product that supports more\nadvanced design, or try any number of other IDEs available that focus on a variety of\ndifferent languages.\nYou might consider the following programs to help you write your code (listed in no\nparticular order). Each of these has features particular for web development and should be\nsufficiently capable to get you through the examples in this text.\nJedit29\nA free editor based around Java. Works on multiple platforms (Windows, Mac and\nLinux) and includes syntax highlighting.\nNotepad++30\nNotepad++ is a source code text editor with syntax highlighting, multiple document\nhandling using tabs, auto-completion of keywords (customizable), regular expressions in\nthe search and replace function, macro recording and playback, brace and indent high-\nlighting, collapsing and expanding of sections of code, and more.\n29 http:\/\/jedit.org\n30 http:\/\/notepad-plus.sourceforge.net\/\n51 The Missing Link: An Introduction to Web Development and Programming Chapter 6\nBluefish31\nSupports many programming and markup languages. An open source development\nproject, multi-platform, and runs on Linux, FreeBSD, MacOS-X, Windows, OpenBSD\nand Solaris.\nTextWrangler32\nThis editor is related to BBEdit. It does not include as many tools, but retains syntax\nhighlighting and the ability to use FTP within the editor.\nHTML-Kit33\nThis editor is intended for use by web developers, and comes with support for writing\nHTML, XML and scripts. Among its features are internal preview of your web, integration\nwith HTML Tidy, auto-completion of keywords, etc. Look for the \u201cPrevious\u201d version for\ntheir free copy.\nApplication Programming Interfaces\nCommonly referred to as APIs, pronounced as the letters of the acronym, application\nprogramming interfaces allow us to interact with features and data of a system other than\nits primary means, whether it is an application or website. Created to address needs of data\nexchange and integration between systems, APIs provide a controlled method of allowing\nothers to use a system without having direct, unfettered access to the code or database it\nruns on. Examples of APIs in action are maps on non-google website that are fed from\nGoogle Maps with markers, that highlight paths and routes, automate directions, or outline\nplaces of interest. All of this is done from within their site or system without you leaving\nto interact with Google. Another example is the growing popularity of sites for clans or\ngroups of friends in multi-player games that provide results, show game statistics, screen\nshots, and rankings from a site they create by using the game developer\u2019s API to access\ntheir data.\nWeb-based APIs are, essentially, limited websites. They allow the pages and scripts end\nusers create to communicate with the data source by using a predetermined vocabulary and\nfixed amount of options. When the user\u2019s message reaches the API, the API completes the\nrequested task such as getting a certain piece of data, or validating credentials, and returns\nthe results, hiding anything the developers do not want revealed, and only provides the\nfeatures they are comfortable with others using.\nThe result is that end users are free (within the limits of the API) to create their own\nsystems exactly as they want, interfacing with their own systems, or creating all new systems\nthe developers of the API had not thought of or decided not to pursue. APIs can cut down\non the development time of your own system as you can use them to support your project,\nlike our example of embedding Google Maps instead of creating or installing a map system.\n31 http:\/\/bluefish.openoffice.nl\/\n32 http:\/\/www.barebones.com\/products\/textwrangler\n33 http:\/\/www.chami.com\/html-kit\/\n52 The Missing Link: An Introduction to Web Development and Programming Chapter 6\nBy combining several disparate systems through their APIs, a mashup is created, which\nis a new feature, application, or service created by combing several others. APIs are often\nincluded as part of a software development kit (SDK) that includes the API, programming\ntools, and documentation to assist developers i n creating appli cations.\nWeb Sites\nC ompany Apps\n3rd Party Apps\nFigure 19 API Data Flow\nLEARN MORE\nKeywords, search terms: Development methods, coding practices, team development\nCisco Networking Example: http:\/\/docwiki.cisco.com\/wiki\/Internetworking_Basics\nList and description of all top level domains: http:\/\/www.icann.org\/en\/resources\/registries\/tlds\nOngoing comparison of hosting providers: http:\/\/www.findmyhosting.com\/\nSoftware Development Philosophies: http:\/\/en.wikipedia.org\/wiki\/\nList_of_software_development_philosophies\n53\nnoitacilppA\ngnimmargorP\necafretnI Section 1 Assessments\nCreate Your Own Server\n1. Download and install Wamp 21 or find a current Mac or Linux equivalent for your\noperating system.\n2. Follow the installation instructions for your system to complete the installation.\n3. Select the option, if available, to use an alternate port like :8080 if required by your\ncampus network policy.\n4. Test your installation by navigating to http:\/\/127.0.0.1:8080 (remove :8080 if you\nskipped step 3). You should see an image like the one below.\n5. Click on the phpinfo and phpmyadmin links to ensure PHP and MySQL are\noperational.\n6. Save this page using your browser\u2019s File->Save As option and create an office\ndocument.\n7. Check the document to ensure it is readable and submit it as proof of your\nworking server.\n8. Extra credit: Download, install, and configure Apache, MySQL and PHP\nseparately then configure them to work together. You will need instructions for\nthe versions you download that are appropriate for your operating system, and\nyou will need to create a php configuration page (see Chapter 26) as the page\nyou save to demonstrate everything works.\n1 http:\/\/www.wampserver.com\/en\/\n54 The Missing Link: An Introduction to Web Development and Programming Assessments\nSite Map\nDraft a site map that meets the description provided below. Show the hierarchy and\nrelationships between pages starting with the index page at the top. Create a digital copy of\nyour site map using a word editor or visual editing program like a mind mapping applica-\ntion or Visio. Be sure to save your document in a format that is widely supported and has a\nhigh enough resolution to be legible, like jpg, html, or pdf. Unless you are sure the parties\nwho will receive these types of documents are using the same program you are, you should\navoid proprietary file types.\n\u201cI would like my site to be fairly simple. We are opening a new and used store\nspecializing in sports and exercise equipment, so I imagine our visitors will want to\nknow where we are, what our hours are, and what we have on hand. They might also\nhave questions on our trade-in policy and warranty, and I would like them to easily\nsee how much money they could save by buying equipment from us.\u201d\nNote to the Professor: For a group-based approach to assignments, use this as a starting point\nto select which site that team of two or more will begin to create, or hold a vote\/select a number of\nprojects and create larger project groups to address this site throughout the semester. To build upon\nthe material, these assignments can continue to focus and build on previous work. In teams of two,\nboth students would experience the entire process from the view of the client as well as all aspects\nof development, by continuing to build their counterpart\u2019s site.\nSite Wireframe\nDesign two or three basic layouts for your site, or the alternative example described\nin the Site Map assignment, including a front page and typical content page for each.\nInclude depictions of where certain pieces of content are expected to be located with their\napproximate size. Keep in mind a wireframe is about content elements and location, not\nspecific style, color, or actual content.\nInclude a brief description of which layout you would recommend of the three and why.\nCreate your wireframe digitally using a word processor or visual editor as described under\nSite Proposal.\nStoryboarding\nCreate a storyboard of a possible user experience your site. You might follow the process\nof signing in, creating an account, searching for a product, or navigating to a particular piece\nof content. Find an example that involves at least 4 steps. Create a mockup for each step\nthat includes color and fake content, describing on each panel what action the user will\nfollow to move to the next step.\nCreate your storyboard frames in a visual editor, saving them as images, and including\nthem in a document editor so you can add your notes under each image.\n55 The Missing Link: An Introduction to Web Development and Programming Assessments\nDiscussion \/ Written Response\n1. Compare three web hosting packages. Highlight the differences between their of-\nferings in terms of cost, features, and resiliency. Declare which one you would select\nand why.\n2. Find a current article on net neutrality that discusses a proposed law, regulation, or\nagreement between governing entities. Defend the proposal or discuss why it is not\nin the best interest of consumers.\n3. Describe three different approaches to developing sites in teams. Include pros and\ncons of each method and detail when they are best suited for use.\n4. Describe the difference between APIs, frameworks, and templates.\n5. Find and describe an example of the Internet of Things in use today.\n6. Compare and contrast Windows, Mac, and Linux based operating systems.\nQuestions\nTAKE THIS QUIZ ONLINE!\n1. Which IP address convention uses both numbers and letters?\na. IPV4\nb. IPV6\n2. Which of the following is not in the OSI 7 layer framework?\na. Application\nb. Network\nc. Migration\nd. Data Link\n3. What name has the acronym PHP not represented over time?\na. Hypertext Pre-Processer\nb. Personal Home Page\nc. Pre-HTML Processing\n4. Which of the following is true?\na. Open source software is always free in cost\nb. Users can edit the source code at their pleasure\nc. Users can change and sell their version of the product\n5. Is open source software always free?\na. Yes\n56 The Missing Link: An Introduction to Web Development and Programming Assessments\nb. No\n6. Which of these is not a benefit of virtualization?\na. Reduced hardware footprint\nb. Reduced operating costs\nc. Increased speeds when using systems\n7. Which of these best describes cloud computing?\na. Using servers that are in orbit\nb. Hosting services on virtualized, internet connected hardware\nc. Sharing a file online\n8. The predecessor of the internet was\na. CompuServe\nb. Arpanet\nc. DARPA\nd. Al Gore\n9. Cloud computing is\na. Shared services available online\nb. Portable jump drives\nc. Outsourcing\nd. Portable servers\n10. Which of these is not available as a service?\na. Software\nb. Operating systems\nc. Hardware\nd. None of the above\n11. Web warfare has already emerged as a tactic in conflicts between nations.\na. True\nb. False\n12. Botnets are\na. Local networks\nb. Groups of compromised computers\nc. Viruses\nd. All of the above\n13. Which of the following is not part of a standard WAMP server?\na. HTTP server\nb. Scripting engine\nc. Database\n57 The Missing Link: An Introduction to Web Development and Programming Assessments\nd. FTP\n14. Linux is a(n)\na. Operating system\nb. HTTP server\nc. Server\nd. All of the above\n15. MySQL is a(n)\na. HTTP server\nb. Database\nc. Server\nd. None of the above\n16. PHP is a(n)\na. Web server\nb. Scripting language\nc. Operating system\nd. Database\n17. Open source is always\na. Free to be modified\nb. Free in cost\nc. Shareable\nd. All of the above\n18. Apache is a:\na. Web server\nb. Scripting language\nc. Database\nd. None of the above\n19. FTP stands for _____________.\na. File Transfer Protocol\nb. Files To Push\nc. File Transmission Pipe\n20. HTTP stands for ____________.\na. Hyper Text Translation Program\nb. Hyper Text Transfer Protocol\nc. Hyper Transfer Text Program\n21. The SQL part of MySQL stands for __________.\na. Super Question Language\n58 The Missing Link: An Introduction to Web Development and Programming Assessments\nb. Structured Question Language\nc. Structured Query Language\n22. An IPV4 address is made up of __ blocks of numbers.\na. 3\nb. 4\nc. 5\nd. 6\n23. An IPV6 address uses both letters and numbers.\na. True\nb. False\n24. URL stands for _______.\na. Universal Resource Locator\nb. Unordered Resource Location\nc. Unsorted Relational Language\nCHECK YOUR ANSWERS\n59 Section 2:\nDocument Markup\nSection Contents\nHTML\nMarkup Languages\nCreating HTML Files\nPage Layout\nText Layout\nNavigation\nGraphics\nTables\nForms\nCanvas\nMedia Support\nMobile Device Support\nTags to Avoid\nCSS\nRule Structure\nLayout Formatting\nFont and Text Decoration\nResponsive Styling\nLearning Objectives\nBy the end of this section, you should be able to demonstrate:\n\u2022 the ability to create an HTML document structured to support CSS styling\n\u2022 the ability to create a CSS file that adapts styling based on device capabilities\n\u2022 the ability to create basic images using canvas\n\u2022 the ability to integrate audio and video to a page\n\u2022 the ability to utilize special device features\n\u2022 the ability to integrate external font styles\n60 Chapter 7\nMarkup Languages\nDocument markup is a notation method that defines how particular pieces of information\nare meant to be formatted. The term comes from the practice of marking up manuscripts to\nnotate changes that need to be made. Markup in terms of programming languages is used\nto identify a language that specifies how a document is to appear.\nIf you have ever used multiple colors of ink or highlighter when making notes and\nascribed meaning to those colors for yourself (e.g., yellow highlighter is important, red\nink is a definition) then you have already practiced document markup. You are providing\nadditional layers of information along with the written text, in this case visual cues as to the\npurpose of the written information.\nSome popular markup languages are hypertext markup language (HTML), extensible\nmarkup language (XML) and extensible hypertext markup language (XHTML).These\nwere each created to fulfill particular needs in defining the layout and structure of the\nmaterial.\nHTML5\nHypertext markup language is used to aid in the publication of web pages by providing\na structure that defines elements like tables, forms, lists and headings, and identifies where\ndifferent portions of our content begin and end. It can be used to embed other file formats\nlike videos, audio files, documents like PDFs and spreadsheets, among others. HTML is\nthe most relied upon language in the creation of web sites. In this text we will focus on\nHTML5. While it is technically still in draft form, many proposed elements are already\nsupported by the newer versions of most of the popular browsers.\n61 The Missing Link: An Introduction to Web Development and Programming Chapter 7\nHistory\nIn the beginning, back to the first days of the Internet and ARPA, the primary purpose\nof creating a page was to share research and information. HTML tags were only meant to\nprovide layout and formatting of a page. As such, early implementations of HTML were\nsomewhat limited as there was little demand for features beyond the basics. Headings,\nbullets, tables, and color were about all developers had to utilize. As sites were created for\nother more commercial uses, developers found creative ways of using these tools to get their\npages looking more like magazines, advertisements, and what they had drawn on paper.\nHaving been one of those developers, I recall the days of just-get-it-looking-right tech-\nniques, splicing page-sized images into tables so graphics were (usually) where we wanted\nthem, nesting tables within tables to create complex layouts, and other methods that violate\ntoday\u2019s best practices.\nCurrent State\nWhile not formally finalized, many browsers are already supporting a number of features\nproposed in drafts of HTML5, including things like canvas and media support that greatly\nimprove the browser\u2019s ability to process and display complex materials without requiring\nextensive coding and extensions. In the past, sites that used video and audio players had to\nintegrate support for many players, and would have to include the libraries and formatted\nfiles for those systems in their sites. By providing a solution to using these media forms\nwithin HTML5, we can improve on the user experience and reduce the efforts necessary\nto provide them.\nWhile these new features do reduce the amount of programming required to imple-\nment higher level elements, and include interactive elements that exceed document markup\nactivities, HTML5 is still considered a markup language.\nIn these languages, we use tags to ascribe additional meaning to our text, which provide\ninstruction to the browser as to how to display the text on the screen, but are not necessarily\ndisplayed to the user. In HTML and XHTML these tags are fixed, or predefined, meaning\nthe names that can be used in the tags are limited to what browsers are able to recognize.\nIn XML, tags are defined by the person creating the content as they are typically used in\nconjunction with data sources and provide information.\nW3C Standards\nThe World Wide Web Consortium,1 or W3C, is an international community that sup-\nports web development through the creation of open standards that provide the best user\nexperience possible for the widest audience of users. This group of professionals and experts\ncome together to determine how CSS and HTML should operate, what tags should be\nincluded as features, and more. The W3C is also your best reference point in determining\nthe accessibility of your site through the use of tools that analyze your code for W3C\ncompliance. These tools confirm if you have fully implemented elements in your code, like\nproviding alternate text descriptions of images in the event that the image cannot load, or\nthe user is visually impaired.\n1 http:\/\/www.w3c.org\n62 The Missing Link: An Introduction to Web Development and Programming Chapter 7\nIn addition to the creation of accessibility standards, among many others, the W3C also\nprovides tutorials and examples and is likely the most exhaustive reference you will find.\nCSS\nCSS stands for cascading style sheet, and is used to create rules about the color, font, and\nlayout of our pages. It also determines when those rules are to be used, based on informa-\ntion like the device connecting to the page, or in response to a user\u2019s action. CSS can be\nused by not only HTML but any XML-based language. By separating as much of the look\nand feel of a page from HTML as possible, we actually separate content from appearance.\nThis makes it possible to quickly create several different versions of the appearance of our\nsite, without recreating the content in each version. Our best approach is to use HTML to\ndefine the structure (and only structure) of our pages whenever possible, laying the ground-\nwork for CSS to know where to apply the actual style.\nHistory\nAs HTML grew in popularity, demands on its feature set also grew. Combined with the\nvariety of browser implementations and their varied approaches to rendering and support,\ncreating robust, visually appealing sites involved a significant amount of time and effort. To\nreduce these, and separate the duties of presentation from those of content, proposals were\nsought to define a new system of managing these features. CSS was born out of CHSS,\nor Cascading Hypertext Style Script, and extends our capabilities by allowing us to go far\nbeyond the styling limits of HTML by giving us more power over images, making pages\nappear more newspaper or magazine-like with layout and typography affects, and reducing\nload time.\nIntroduced for public use in 1996, CSS1 contained the ability to apply rules by iden-\ntifying elements (selectors), and most of the properties still in use today. CSS2 added the\nability to adapt for different displays and devices, as well as positioning elements by specific\nvalues on the page. CSS2.1 followed with the introduction of additional features, but these\nwere not considered substantial enough to warrant a full version number change.\n63 The Missing Link: An Introduction to Web Development and Programming Chapter 7\nCurrent State\nWhile commonly referred to as CSS3, the numbering no longer applies to the language\nas a whole. The developers have decided to break the language into modules, allowing\ndifferent aspects of the language to be revised and released independent of one another.\nThis allows for stable modules to stay numbered as they are (since they are not actually\nchanging), while those under more active development can be pushed out as needed. At\nthe moment, most of the \u201ccurrent\u201d modules are at version number 3. Some have not really\nchanged from 2.1, while work on version 4 of selected modules is already underway.\nDocument Object Model\ndocument\nRoot element:\n<html>\nElement:\n<head>\nElement:\n<title>\nText:\nElement:\n\"My title\"\n<body>\nElement:\n<h1>\nText:\n\"A heading\"\nElement: Attribut:\n<a> href\nText:\n\"Link text\"\nBy Birger Eriksson CC-BY-SA-3.0\nFigure 20 Document Object Model\nOur ability to manipulate and create webpages consistently across formats comes from\nthe document object model API, typically referred to as DOM. This API defines the order\nand structure of document files as well as how the file is manipulated to create, edit, or\nremove contents.\nThe DOM is built to be language and platform independent so any software or program-\nming language can use it to interface with documents. It defines the interface methods and\nobject types that represent elements of documents, the semantics and behavior of attributes\nof those objects, and also defines how they relate to one another. The DOM, effectively,\nis what gives rise to the tags we are about to study below. Languages that use the DOM,\nhowever, are not required to include all of its features, and may generate additional features\nof their own.\n64\nMOD\nledoM\ntcejbO\ntnemucoD The Missing Link: An Introduction to Web Development and Programming Chapter 7\nFigure 20 depicts an example of a document\u2019s model in tree format, with nested ele-\nments appearing to the right and below their parents. In this example, we are shown an\nHTML page with a section for the head and the body, which includes a page title and a\nlink as its contents. This structure provides the ability for us to traverse, or move around the\ndocument, by referring to an object\u2019s name or attribute.\n65 Chapter 8\nCreating HTML Files\nHTML\nFile Format\nBefore we can create our first web page, we need to create a file that our service will rec-\nognize as a web page. To do this, we can open our chosen text editor (see a short list of\npotentials in the section on Integrated Development Environments), and create a new\ndocument if one was not created automatically. We will immediately select \u201cSave As\u201d from\nyour editor\u2019s File menu, and give your new page its name. If this is going to be the front\npage, or first page you want a user to see for your site, you should name it index. Index is the\ndefault file name most web servers look for in any folder of your website; it saves your users\nfrom having to know and type the page name as part of the URL.\nIn many text editors, underneath or near where you enter the file name is another drop\ndown selector that allows you to pick a file type. This is the extension (what comes after the\nperiod in the file name), or file type, that identifies what kind of data the file represents. This\ntells our operating system, applications, and browsers what conventions were used to create\nthe content so it can be reassembled into usable form. Since we are creating a basic web\npage, we will use the .htm extension (.html is also acceptable, just be consistent to make\nyour life easier). If your editor does not have .htm or .html in its list, then select \u201cAll\u201d and\nmake index.htm your file name.\nADDITIONAL NOTES\nIf you ever come across an unfamiliar extension and want to know more about it,\nsites like filext.com can help you determine what programs can open it and what\nit is for.\nOnce we have saved our file as index.htm, we are ready to begin. Saving as soon as we\ncreate a file is useful as the text editor will then know what syntax is expected. This will\nenable features like color coding and highlighting that your editor supports.\n66 The Missing Link: An Introduction to Web Development and Programming Chapter 8\nDocument Type\nEvery HTML page we create should declare its document type (doctype) in the first\nline. This will identify which spec of HTML is included so the browser knows how to\ninterpret the tags within. Earlier version of the HTML specifications used two definitions\nfor HTML: HTML 4.01 and XHTML. Both of these contained two additional properties\nof strict and transitional.\nWith HTML5, much of this has been eliminated, leaving one general doctype declara-\ntion of <!DOCTYPE html>. This should be the first line of code in any HTML page you\ncreate. We will not cover the older doctype formats as all of our examples will focus on\nHTML5. Keep in mind, though, that code examples you find online with anything other\nthan the tag above may be outdated approaches to what is shown.\nLEARN MORE\nKeywords, search terms: xml, html, css, dom, document markup,\nW3C Documentation for XML: http:\/\/www.w3.org\/TR\/2004\/REC-xml11-20040204\/\nW3C Documentation for CSS: http:\/\/www.w3.org\/Style\/CSS\/\nW3C Specifications for HTML:http:\/\/www.w3.org\/community\/webed\/wiki\/HTML\/Specifications\n67 Chapter 9\nPage Layout\nTags, Attributes\nIn order to add content to our page, we will set up our file with some basic structure. First,\nwe will use tags to identify information about where parts of our page start and end. We\nwill do this by using our first set of tags, <html> and <\/html>. We refer to these as a set\nbecause both use the same predefined word (HTML), and the latter uses the backslash (\/)\nto indicate that it marks the close of that tag set. The act of placing a set of tags around\ncontent and other code is often referred to as \u201cwrapping\u201d what is between the tags. This is\na good way to create a mental picture of what you are doing.\nNext, we will put in a few more tags and then save our file and see some results. In\nbetween (typically referred to this as \u201cinside\u201d) your HTML tags, add an empty set of tags\nlabeled head, and another labeled body. Then create two more sets labeled header and footer\ninside your body tags. Your resulting file should look like this:\n<html>\n<head>\n<\/head>\n<body>\n<header>\n<\/header>\n<footer>\n<\/footer>\n<\/body>\n<\/html>\nNow we will add some spacing (see Spacing from our Good Practices section), and the\nubiquitous Hello World in between the close of our header and start of our footer tags:\n<html>\n<head>\n<\/head>\n<body>\n<header>\n<\/header>\nHello World\n<footer>\n68 The Missing Link: An Introduction to Web Development and Programming Chapter 9\n<\/footer>\n<\/body>\n<\/html>\nNow we can better see how elements can be placed within one another, called nesting. If\nwe save our file again, and double click the icon for our file in our documents folder to open\nit, it should open in your computer\u2019s default browser as a white page with Hello World in\nthe upper left corner. Congratulations! You have just made your first web page. Before you\nask, though, unless you have created your own server, you will not be able to show your page\nto someone unless they are at your computer or you send them the file(s) you created. Since\nonly the browser is needed to view the output of HTML, JavaScript, and CSS files, we will\nbe able to view our pages without a server until the PHP examples later on.\nAs we continue to make changes, you can keep your editor and browser open at the same\ntime. After you save your file in your text editor, you can simply refresh the page in your\nbrowser to see your changes.\nADDITIONAL NOTES\nAs we look at HTML elements, keep in mind that browsers will do their best\nto adjust for mistakes like missing tags. Different browsers will react to these\nproblems in their own way, so just because it shows up correct in one browser\ndoes not mean it will in others.\nSome tags, like those for including images, do not need a closing tag in order to work as\nno content is necessary inside the tags. In this case, we simply use the tag itself where we\nwant it. In older versions of HTML one of the differences between document types was\nhow we closed single tag elements. HTML, for example, wanted a break written as <br>\nwhile an XHTML document wanted <br\/>. HMTL5 will recognize either of these.\nHead\nGetting back into our document, we see that the first set of tags is called head. This is\nwhere we will put information about the page itself (called metadata) and where we will\nconnect to any other resources like scripts and files that are not part of the page we are\nusing. It is important that your <head> tags are always the first set of tags after <html>, as\nthis is the order in which browsers expect the information.\nTo provide some basic information about our page or site, we will add some meta tags\ninside our head to give it a title, keywords, a description, and other details. These pieces of\ninformation help the user and bots understand what the page is about.\nEach of these items are all parts of the meta tag (<meta\/>). Some tags have special\nfeatures that can be added to their definitions; these are called attributes. Meta tags support\nattributes like name and content. How we define these attributes will help the browser\nunderstand our page better. We will set our title as Our First Page, add the keywords begin-\nning html, learning, and CSIT-107, and for a description we will put in a couple lines about\nwhat we are doing, and finally, add our name:\n69 The Missing Link: An Introduction to Web Development and Programming Chapter 9\n<head>\n<title>Our First Page<\/title>\n<meta name=\"keywords\" content=\"beginning html, learning,\nCSIT-107\" \/>\n<meta name=\"description\" content=\"A beginning web page for\nCSIT-107 SUNY Fredonia\" \/>\n<meta name=\"author\" content=\"Your Name Here\" \/>\n<\/head>\nThere are a few things in this example for us to look at. First, you will note that title has\nits own tag. What you put in this tag is what will appear as the title in your browser window,\nand on the tab in your browser for this page (You can only have one set of these tags in a\ndocument). Keep in mind, this title will not appear on the page itself. If we want to include\nit as part of our page content, we would do that from within the body tags.\nNext, we see that the values assigned to name and content are placed in quotes. The\nquotes identify what belongs to that attribute. While it is standard practice to use double-\nquoted strings, we can also use single quotes. These can be useful when creating HTML\nstatements like those above as output from other languages (we will see examples of this\nin PHP).\nYou might also note that our keywords are comma separated, meaning we break them up\nby placing commas between different values; we do not need to add separate quotes around\neach word or phrase.\nIn the HTML5 specs, the meta tag can also have attributes named charset and http-\nequiv. Charset allows us to specify a particular set of characters we want to use for the page,\nan http-equiv supports content-type, default-style, and refresh as options. This lets us tell\nthe browser what type of page we have (in our case, text\/html), name a default style sheet\n(we will get to this later) and specify in terms of seconds how often we want to refresh the\npage, if at all.\nSince our content will not be changing unless we change the page ourselves, and we do\nnot have a style sheet yet, we will just add our content type declaration for now:\n<meta http-equiv=\"content-type\" content=\"text\/html\" \/>\nMeta is also where we will define cache items like how long our page can be cached\nbefore it expires, or if we even want content to expire, as in these examples:\n<META HTTP-EQUIV=\"EXPIRES\" CONTENT=\"Mon, 22 Jul 2002 11:12:01\nGMT\">\n<META HTTP-EQUIV=\"CACHE-CONTROL\" CONTENT=\"NO-CACHE\">\nBody\nAll of the content that we wish to have on the screen should be encompassed by a set of\nbody tags. The header, content, footer, and div (an all-purpose tag derived from \u201cdivision\u201d)\nsections are examples of what we can put in our body tags, which we will see in the next\nexample. Keep in mind that using these tags does not prevent us from seeing content that is\nnot within the body. Tags are used to guide the interpreter in how to display the document.\n70 The Missing Link: An Introduction to Web Development and Programming Chapter 9\nUnless it is specifically within the <head> tags, browsers may elect to display any content\nthat is not properly nested in different ways.\nHeader, Footer\nThe header and footer tags are new in HTML5. They were added due to the volume of\nsites that define a top and bottom section to their pages. Allowing these tags makes it easier\nto define and find those parts of the layout. The header and footer should be nested within\nyour body tags, but are not a requirement. For our example, we will put a screen title in our\nheader and a copyright in our footer:\n<body>\n<header>\n<h1>This is our first page!<\/h1>\n<\/header>\nHello World\n<footer>\n&copy; 2013 Your Name Here\n<\/footer>\n<\/body>\nAfter saving your file and refreshing your browser, you should see our sentence in the\ntop left, followed by Hello World, and then \u00a9 2013 Your Name Here. We made our title\ntext extra-large by wrapping it in <h1> tags. H1 stands for heading one, the largest heading\nby default. We can also use h2 through h6 to access additional styles. Just as in a written\ndocument, we use these headings to distinguish different portions of our text. Your browser\nis applying a default style to make h1 look as it does on your screen. Later, we will see how\nto override this default style to make our headings look how we want them to. Using these\nheadings allows us to quickly identify different portions of content not only for the reader,\nbut also for search engines, which typically consider content in these tags as indicators of\nwhat your site is about, reducing our SEO efforts later.\nDiv\/Span\nWhile <p> helps us split up our text, we also need a mechanism to separate different\npieces of content like we did when we used header and footer. This will allow us to define\nmore than just a top, middle and bottom to our page. To do this, we can wrap those sections\nin <div> tags. Div stands for divide\u2014it defines a section of content that should be treated\nas separate from other content. Span is very similar to div, except that it should identify\ninline content, meaning material that is within a block of text. Ultimately, a div will place\na line break before and after its tags, while a span will not. Aside from this, these tags are\nfunctionally equivalent. While these tags seem very plain now, they are very useful when\ncreating complex layouts, and are the tags we will use most often.\nWhile div and span are effective for styling, we should strive to use the best set of tags\navailable so browsers, users, and bots are able to understand our site and its layout, like the\n<header> and <footer> that we have already used in our code. Just keep in mind, not all of\n71 The Missing Link: An Introduction to Web Development and Programming Chapter 9\nthese are supported in all browsers. If you are wondering which browsers will work with\nwhat tags, you can refer to caniuse.com to see what is available.\nTo create organization for our site, we will add some more conceptual sections to our\nfile. You will notice the layout does not actually go left or right as we are labeling our divs\n(everything will organize top-to-bottom). This is because we need to add CSS for the full\neffect. We will pick this example up again later to add the CSS needed to create the layout\nwe want:\n<body>\n<header>\n<h1>This is our first page! <\/h1>\n<\/header>\n<div id=\"left\">\nsome menu items\n<\/div>\n<div id=\"content\">\nHello World\n<\/div>\n<div id=\"right\">\nand some content on the right\n<\/div>\n<footer>\n&copy; 2013 Your Name Here\n<\/footer>\n<\/body>\n72 Chapter 10\nText Layout\nWhile all of the following tags are supported in HTML5, some of them are exclusive to the new\nspecification, and will require a browser that is HTML5 compatible to work correctly.\nParagraphs\nTo build upon our basic structure a bit, we can break a long section of text into paragraphs.\nWe can do this by adding breaks (<br\/>) in our code. If we are going to do this a number of\ntimes, and if we want to style our paragraphs down the line, we should instead wrap each\none in a set of paragraph tags, <p><\/p>. Using the paragraph tags allows us to automatically\nadd spacing around our content to separate it from the rest of the page.\nBefore:\n<body>\nThis is some text. It is really long. We want to break this\ninto paragraphs so it looks more like a document. This is\nsome text. It is really long. We want to break this into\nparagraphs so it looks more like a document. This is some\ntext. It is really long. We want to break this into para-\ngraphs so it looks more like a document. This is some text.\nIt is really long. We want to break this into paragraphs\nso it looks more like a document. This is some text. It\nis really long. We want to break this into paragraphs so\nit looks more like a document. This is some text. It is\nreally long. We want to break this into paragraphs so it\nlooks more like a document. This is some text. It is really\nlong. We want to break this into paragraphs so it looks\nmore like a document. This is some text. It is really long.\nWe want to break this into paragraphs so it looks more\nlike a document. This is some text. It is really long.\nWe want to break this into paragraphs so it looks more\nlike a document. This is some text. It is really long.\nWe want to break this into paragraphs so it looks more\nlike a document. This is some text. It is really long.\nWe want to break this into paragraphs so it looks more\nlike a document. This is some text. It is really long.\n73 The Missing Link: An Introduction to Web Development and Programming Chapter 10\nWe want to break this into paragraphs so it looks more\nlike a document. This is some text. It is really long. We\nwant to break this into paragraphs so it looks more like\na document. This is some text. It is really long. We want\nto break this into paragraphs so it looks more like a\ndocument.\n<\/body>\nAfter:\n<body>\n<p>\nThis is some text. It is really long. We want to break this\ninto paragraphs so it looks more like a document. This is\nsome text. It is really long. We want to break this into\nparagraphs so it looks more like a document. This is some\ntext. It is really long. We want to break this into para-\ngraphs so it looks more like a document. This is some text.\nIt is really long. We want to break this into paragraphs\nso it looks more like a document. This is some text. It is\nreally long. We want to break this into paragraphs so it\nlooks more like a document. This is some text. It is really\nlong. We want to break this into paragraphs so it looks\nmore like a document.\n<\/p>\n<p>\nThis is some text. It is really long. We want to break this\ninto paragraphs so it looks more like a document. This is\nsome text. It is really long. We want to break this into\nparagraphs so it looks more like a document. This is some\ntext. It is really long. We want to break this into para-\ngraphs so it looks more like a document. This is some text.\nIt is really long. We want to break this into paragraphs so\nit looks more like a document.\n<\/p>\n<p>\nThis is some text. It is really long. We want to break this\ninto paragraphs so it looks more like a document. This is\nsome text. It is really long. We want to break this into\nparagraphs so it looks more like a document. This is some\ntext. It is really long. We want to break this into para-\ngraphs so it looks more like a document. This is some text.\nIt is really long. We want to break this into paragraphs so\nit looks more like a document.\n<\/p>\n<\/body>\n74 The Missing Link: An Introduction to Web Development and Programming Chapter 10\nOrdered, Unordered Lists\nIf you are not familiar with the protocol for lists, unordered lists are intended for items\nthat relate, but do not need to be in a particular order. Ordered lists, on the other hand, are\nfor items that need to be ordered for a reason, like instructions that need to be followed in\ncorrect sequence.\nOrdered and unordered lists are alphanumeric and unordered lists of items, respectively.\nUsing these we can create lists to have them display on the screen as we are used to seeing a\nlist of items, or we can take a list we have defined and use it as a group of common objects\nor ideas to build things like menus and navigation when we add additional CSS.\nWhen we use the tags <ol> (ordered lists) or <ul> (unordered lists), we placed nested <li>\ntags in each to represent each item in the list.\n<ol>\n<li>First<\/li> 1. First\n<li>Second<\/li>\n2. Second\n<li>Third<\/li>\n3. Third\n<\/ol>\n<ul>\n<li>An item<\/li> \u2022 An item\n<li>Another item<\/li>\n\u2022 Another item\n<li>Yet another item<\/li>\n\u2022 Yet another item\n<\/ul>\nDefinition Lists\nA related set of tags can be used when you want to list definitions. These are <dl> for the\nlist itself, with <dt> nested inside for terms and <dd> also nested, for definition, following\nits corresponding <dt>.\n<dl>\n<dt>Coffee<\/dt>\n<dd>Bean-based caffeinated\nCoffee\nbeverage <\/dd>\n<dt>Tea<\/dt>\nBean-based caffeinated beverage\n<dd>Leaf-based caffeinated Tea\nbeverage<\/dd>\n<dt>Water<\/dt> Leaf-based caffeinated beverage\nWater\n<dd>Standard H20<\/dd>\n<\/dl>\nStandard H20\n75 The Missing Link: An Introduction to Web Development and Programming Chapter 10\nAddress\nThe address tag allows us to specify text that belongs to an address or contact informa-\ntion for the content creator, making it easier for applications to find the information needed\nfor tools like mapping and generating references.\n<address>\nArticle by <a href=\"mailto:professor@school.\nedu\">Prof. Essor<\/a>.<br> Article by Prof. Essor.\nFredonia, NY<br> Fredonia, NY\nUSA\nUSA\n<\/address>\nArticle\nArticle tags are meant to be used on content that can be re-used outside of its original\nsite. It is meant for news articles, blog posts, and other types of content that would be\nrepublished in multiple locations.\n<article>\n<h1>Our Blog Post<\/h1>\n<p>This is our great content that is now identified as\nsomething that can exist on its own as a piece of\nwork.<\/p>\n<\/article>\nAside\nThe aside is intended for use when you want to mark a piece of content that is related to\nthe material it is nested within. It created primarily to define related information, like part\nof an article or blog.\n<p>\nThis is some text. It is really long. We want to break this\ninto paragraphs so it looks more like a document. This is some\ntext. It is really long. We want to break this into paragraphs\nso it looks more like a document. This is some text. It is\nreally long. We want to break this into paragraphs so it looks\nmore like a document. This is some text. It is really long.\nWe want to break this into paragraphs so it looks more like a\ndocument.\n<\/p>\n<aside>\n<h4>Side Bar<\/h4>\n<p>This is something related to our content that is not\nactually a part of it<\/p>\n76 The Missing Link: An Introduction to Web Development and Programming Chapter 10\n<\/aside>\nButton\nA button is similar to the submit button, but unlike other input styles, it can include text\nor an image. Its default formatting gives it a beveled button appearance.\n<button type=\"button\">Click Here!<\/button>\n<button type=\"button\"><img src=\"ourimage.jpg\"\/>\n<\/button>\nCaption\nThe caption tag is for tables, and allows you to define a label to be printed near the table\nfor reference. You can only have one caption per table, and it must be after the opening\ntable tag.\n<table>\n<caption>This is our table<\/caption>\n<tr>\n<td>First Col<\/td><td>Second Col<\/\ntd><td>Third Col<\/td>\n<\/tr>\n<tr>\n<td>1<\/td><td>2<\/td><td>3<\/td>\n<\/tr>\n<tr>\n<td>4<\/td><td>5<\/td><td>6<\/td>\n<\/tr>\n<\/table>\n77 The Missing Link: An Introduction to Web Development and Programming Chapter 10\nCite\nWhile cite has been included in previous versions of HTML, the current HTML5\nspecification intends for it to be used to define the title of a work that is included in the\ndocument. Previous versions limited this tag to proper citations of written publications.\n<img src=\"scream.jpg\"\n<p><cite>The Scream<\/cite> E. MunChapter\n1893.<\/p>\nEntities\nIn the examples in the Header, Footer section, we placed a copyright symbol on the\nscreen using \u201c&copy;\u201d which told the browser what symbol we wanted to use. This is a\nreserved symbol, or entity, in HTML. We can call entities by using &[entity name here]; or\n&[entity number here];. For example, &nbsp; means non-breaking space, or just a standard\nspace. This is one way to insert extra spaces in our output. Since the browser would skip all\nthe extra spaces in our code, we can add non-breaking space entities to tell the browser we\ndo want it displayed on the screen.\nThe table below includes examples of other popular symbols (there are plenty more).\nKeep in mind, when you use entity names, they are case sensitive.\nTable 1 HTML Entities\nResult Description Name Number\nnon-breaking space &nbsp; &#160;\n< less than &lt; &#60;\n> greater than &gt; &#62;\n& ampersand &amp; &#38;\n\u00a9 copyright &copy; &#169;\n\u00ae registered trademark &reg; &#174;\n\u2122 trademark &trade; &#8482;\n78 The Missing Link: An Introduction to Web Development and Programming Chapter 10\nFigure\nThe figure tag allows us to label an image, portrait, or other visual art included in an\nimage tag to identify the content as such.\n<figure><img src=\"ourimage.jpg\"\/><\/figure>\nFigcaption\nFigcaption, like caption, allows us to add a caption to our image like we would for a\ntable.\n<figure>\n<img src=\"ourimage.jpg\"\/>\n<figcaption>Figure 1<\/figcaption>\n<\/figure>\nMark\nMost text altering tags have been skipped in this text as they can be easily achieved\nthrough CSS (and to maintain separation of duties). However, the mark tag is worth a\nlook as an easy way to achieve a highlighting effect. It can be useful to insert this tag when\ngenerating output for things like search results.\n<p>Here is a sentence with some\nHere is a sentence with some highlighted\n<mark>highlighted<\/mark> text.<\/p>\ntext.\nMeter\nThe meter tag allows us to generate a visual image based on provided values. This is\nintended for values that are already known or loaded to the screen like a chart or graph.\nThere is also a Progress tag for monitoring file actions in progress like a download.\n<meter value=\"3\" min=\"0\" max=\"15\">One\nFifth<\/meter><br>\n<meter value=\"0.65\">65%<\/meter>\nNav\nIf we have a group of links we want in one place (i.e. a menu or list of references), we\ncan include them inside nav tags so browsers recognize them as a group of links. This is\nespecially useful for screen reader software, as the tags provide an indicator as to what the\nlinks are for.\n<nav>\n79 The Missing Link: An Introduction to Web Development and Programming Chapter 10\n<a href=\"\/\/\">Home<\/a> |\n<a href=\"\/css\/\">CSS<\/a> |\n<a href=\"\/js\/\">JavaScript<\/a> |\n<a href=\"\/js\/jquery\/\">jQuery<\/a>\n<\/nav>\nProgress\nThe progress tag was created to help display the status of an upload or download. It takes\ntwo attributes including the current amount (which we would change using JavaScript) and\nthe total or highest value of what we are monitoring. If we are showing the percentage of\nan upload we might use:\n<progress value=\"46\" max=\"100\"><\/progress>\nOr, if we want to show the actual amount moved, or are moving a number of items, we\ncan use the number completed and the total number instead of a percent, and the image\nwill calculate it for us:\n<progress value=\"345\" max=\"850\"><\/progress>\nTime\nAnother new-to-HTML5 element is time. The time tag is flexible in that it can specify\na 24 hour formatted value, a full Gregorian calendar date, or both a date and time. The use\nof this tag by itself will not change any visual styling on the page, but allows applications\non our devices to find the information in order to support features like creating calendar\nentries or reminders based on the information.\n<p>The daily meeting will be at <time>10:00<\/time> every\nmorning.<\/p>\n<p>The next monthly meeting will be on <time datetime=\"2013-\n08-01\">August first<\/time>.<\/p>\n80 Chapter 11\nNavigation\nA feature found on almost every websites is a navigation system for moving between pages.\nThese are typically menus, where groups of common pages are created to give the site a\nhierarchical organization. While the approach to visual styling and interaction with menus\ncomes in great variety, most follow a basic principle of using unordered lists of links, and\nthe application of CSS to those lists in order to turn them into the colorful, interactive\nelements we are accustomed to. While there are drawbacks that we will discuss in Visually\nImpaired Considerations, alternative approaches can still utilize linked lists to some extent.\nSince we created our menu earlier, we already know the contents and structure of our\nnavigation. Our group label, or top-level labels, and the nested <ul>s represent the contents\nof the list for that menu item.\nSome popular approaches to providing a means of navigation are menu bars with drop\ndowns, bread crumbs, and event driven responses. Menu bars are the most frequently uti-\nlized element, where hovering or clicking over an item in the menu brings up additional\nchoices related to the main item. Typically referred to as drop down menus, they can be\nstyled to move in any direction. Nesting lists within lists can give us a multi-tier menu that\nallows us the ability to select from a large number of pages with little effort.\nBreadcrumbs are typically depicted as a horizontal delimited list of pages, similar to:\nHome >> Sports >> Football >> Buffalo Bills >> Patriots >>\nGolf\nThe breadcrumb does not follow a hierarchical notation, but acts more like a brief his-\ntory of where you have been on the site, allowing you to skip back several steps at once\nwithout using your browser\u2019s back button. These can be helpful in sites with large amounts\nof content where the user\u2019s experience may not be particularly linear, as they move between\ntopics or sections, like news or reference sites.\nEvent-driven navigation is useful in narrowing the user experience to a fixed set of paths.\nThis method will only make certain links available under certain conditions, restricting the\noptions a user has on a particular page to what they are allowed to do, which may be based\non a variety of rules such as if they are logged in, previous links or decisions they have made,\nor if something in the system needs their attention.\nThese approaches can be used by themselves, or in combination to provide your user\nexperience.\n81 The Missing Link: An Introduction to Web Development and Programming Chapter 11\nLinking\nLinks in HTML can take two forms, both of which are created with the anchor tag\n(<a>). They can either point to a resource in another location, or to a location within the\ndocument. The former are used far more frequently than the latter, however internal links\nare coming back into popularity with the rise of infinite scrolling.\nAbsolute, Base, and Relative Path\nThe href attribute of an anchor tag defines the actual location the link will represent.\nAbsolute and relative paths are two reference methods for connecting sites and pages.\nWhile both methods can be used when creating links that point to content in our own site,\nonly absolute can be used when pointing to content that is outside of your domain.\nAbsolute paths are the entire length of the link required to identify one resource, whether\nit is a page, image, script, or media file. The URL http:\/\/www.msn.com\/news\/index.htm\ntells us we want to go to the index page in the news folder of the msn.com website. If this\nwas our site, and we wanted to go to the index.htm file in the sports folder, we could write it\nas http:\/\/www.msn.com\/sports\/index.htm (absolute) or ..\/sports\/index.htm (relative). The\ninitial .. instructs the browser that our intention is to go back one layer of depth (i.e. \u201cup\u201d\none level in folders) and then into the sports folder, which in this example sits in the same\nparent folder as our news page.\nUsing just an initial \/ without .. tells the server that we want to start at the root folder of\nthe server and navigate from there, meaning we start with the base path.\nA base path is everything needed to get us to the index page of the root folder of the\nsite. This is typically http:\/\/www.yoursitename.com, and is the part you find missing in\nthe relative path above. The combination of the base path, and relative path, equals your\nabsolute path.\nTarget\nWhile the anchor tag supports several attributes, one of the most important of these is\n\u201ctarget.\u201d This attribute describes where links will be loaded, like a new tab or the same tab\/\nbrowser window we are already using. The attribute can take any of the following values to\ndefine that location.\nTable 2 Anchor Targets\nValue Description\n_blank Opens the linked document in a new window or tab\n_self Opens the linked document in the same frame as it was clicked\n(this is default)\n_parent Opens the linked document in the parent frame\n_top Opens the linked document in the full body of the window\nframename Opens the linked document in a named frame\n82 The Missing Link: An Introduction to Web Development and Programming Chapter 11\nFrom php.net manual, creative commons 3.0 Attribution\nWithin the Page\nWe can add links to a page that move the user around the page itself, which is useful\non pages with long content. To do this, we use an anchor tag to define where we want our\ndestination to be. When we create our link, we simply reference the name of our anchor,\npreceded by a pound sign in place of a traditional URL.\nSome text here.\nSome text here.\n<a href=\"#ourDestination\">Click here to go Click here to go further down.\nfurther down.<\/a>\nSome more text.\nSome more text.\nEven more text!\nEven more text!\nThis is where we want to \u201cjump\u201d\n<a name=\"ourDestination\">\nto.\nThis is where we want to \"jump\" to.\n83 Chapter 12\nGraphics\nImages are the greatest contributors to the visual appeal of your site, and typically account\nfor the majority of bandwidth used in loading your pages. By using a combination of image\ntypes, and newer techniques found in HTML5 like canvas, and reproducing images using\nCSS, we can balance quality against size to reduce our bandwidth needs and allow our site\nto be more flexible.\nFormats\nImages are files, just like any other document in your computer, but they can be coded\nand formatted differently to reproduce the image you want to see. We find these referred\nto as raster and vector graphics. These formats represent two very different methods of\ncreating an image.\nRaster\nThe image files most of us are already familiar with using are typically raster format.\nExamples of these are JPEG, GIF and BMP. When we interact with pictures we took on\ndigital cameras for example, we are dealing with JPEG or JPG files. Raster files recreate\nan image by recording the color value of pixels, which represent the smallest single point\non a screen that can be assigned a color by the display. The higher the number of pixels (or\ndensity, measured as pixels per inch) translates to how sharp the image is, and how large it\ncan be rendered without losing quality.\nThe number of colors available in the image file is based on the length of the value\navailable to each point. If we only allowed a single binary character for each pixel point, we\nwould be able to keep our file size as small as possible. This however would mean we could\nonly represent our image in black and white (binary only allows us two options, 0 or 1, so\nwe can only represent two colors.). When we allow longer values to represent a single point,\nwe can assign values a larger range of colors. Once we scale these up, however, we trade\naway our smaller image sizes in order to have more colorful pictures. Large images can slow\ndown the user experience, and if loading takes too long, users will leave.\nTraditionally, we have faced this trade off by using different image formats in different\nareas of our site. While reserving JPG for our larger images or photos, we can use GIF\nfor smaller icons and indicators. GIFs limit us to 256 colors, but since most icons use few\n84 The Missing Link: An Introduction to Web Development and Programming Chapter 12\ncolors, we are able to capitalize on the benefits of this format here. It is important to note\nthat raster images will quickly lose quality when rendered at sizes larger than the original\nimage\u2019s width or height.\nVector\nVector images store information about colors and locations as definitions of angles, lines,\nand curves in mathematical format. The benefit of a vector formatted image is that it can be\nscaled both up and down in size without distortion or degradation in quality. This is due to\nthe fact that the image is \u201cdrawn\u201d by the browser each time it is loaded, and the processor\nperforms the steps necessary to recreate the image. Since the image can be scaled, the same\nimage file can be drawn very large, or very small, without changing the file size. We will\nget some hands-on experience in how vector images are drawn when we look at the new\nCanvas features in HTML.\nTable 3 Image Formats\nFormat Compression Platforms Colors Notes\nJPEG (Joint Pho- Lossy Unix, Win, Mac 24-bit per JPEG is a compres-\ntographic Experts pixel; 16.7 sion algorithm; the\nGroup) million format is actually JFIF\ncolors. (JPEG File Inter-\nchange Format)\nGIF (Graphic Lossless Unix, Win, Mac 8-bit; 256 LZW compression\nInterchange Format) colors (216 algorithm developed\nweb palette). by CompuServe;\nAllows patent now held by\ntransparency. Unisys, which charges\nfor use of the code in\ngraphics programs.\nOnce Unisys began\nenforcing its patent (in\n1995), programs began\nmoving to PNG.\nBMP (Bitmap Uncompressed Win 24-bit; 16.7 Like all uncompressed\ngraphics) million formats, these files are\ncolors. very large.\nPICT Lossless Mac Very little compres-\nsion; large files\nTIFF (Tag Interchange Lossless or Unix, Mac, Win TIFF-LZW uses the\nFile Format) uncompressed proprietary LZW\ncompressions (see\nGIF).\nPNG (Portable Lossless Unix, Mac, Win 48-bit; \u201ctrue Will likely replace\nNetwork Graphics) color\u201d plus GIF. Supported in IE,\ntransparency NN 4 and above. A\nWC3specification.\nhttp:\/\/mason.gmu.edu\/~dtaciuch\nYou may notice the compression column. This is the act of removing or modifying the\ndata that represents a file in a manner that makes its overall file size smaller. By doing this,\nwe can transmit files faster, and they will take up less space in memory. When we discuss\ncompression in terms of graphics we need to consider whether it will result in a lossy or\nlossless result. A lossless result means the compression techniques used do not remove data\nfrom the original copy, so we can restore the image to its exact original size and appearance.\nA lossy compressions structure can result in greater compression, but achieves the extra\nadvantage by removing information from the file.\n85 The Missing Link: An Introduction to Web Development and Programming Chapter 12\nAs an example, imagine a picture of you and your friends on the beach with a clear blue\nsky behind you. The data in the image file will measure the \u201cblueness\u201d of the sky in varying\ncolors of blue, at a level greater than the eye can distinguish. By averaging the blueness and\nmaking more of the sky pixels the same color, we have eliminated information. Certain\nlevels of lossy compression will still be indistinguishable from the original, but at any level,\nthe lossy-compressed version of the file will not be restorable to the original because the\nextra values were eliminated.\nWhich is better? As usual, it depends on your intent. If the image can be lossy com-\npressed and is still acceptable to you and your users, and having the smallest possible file\nsizes (good, of course, for mobile devices) is a priority, then go for it. Quality optimized\nscenarios will likely call for a lossless compression, like in sites that use large images as their\nbackground.\nSlicing\nFor some time, there has been a practice of breaking larger images up into many smaller\nones (a process called slicing), in an effort to allow pages to load more quickly. While this\ngave a visual experience of faster speed (each small image blinking into place as it was\nloaded) the load time was about the same, if not longer, as the overall file size had not\nchanged, but we instead asked for it over multiple requests instead of waiting for the entire\nimage in one request.\nThe need for this approach has been largely eliminated by modern versions of CSS (and\nother techniques we will discuss). This allows us to reproduce many things we used images\nfor (i.e. buttons, hover effects, etc.) without using images at all, and allows us to have the\ncontrol over layout and formatting that slicing an image used to fulfill. Now a common goal\nfor site developers is to be as \u201cimageless\u201d as possible, using images only where CSS cannot\nstand in. This reduces load times and gives greater flexibility in site design. As an example\nof what can be done using CSS3, take a look at this simulated iPhone: http:\/\/tjrus.com\/\niphone#71d465!\nSome additional techniques to reduce image weight on a site are right-sizing images,\ncompression (which we just discussed above), caching, and sprites, among others. Right-\nsizing is editing and creating a copy of an image to the exact size needed where it is shown.\nFor example, small images for items on a product page could simply be the original image\nrendered at a smaller size. If the user does not look at those products, loading the larger\nimages first only degrades their experience, since every product\u2019s large image file needs to\nbe downloaded. Right-sizing and compression both require image editing software with at\nleast some advanced editing features, or use of an online service that covers the basics (with\nless control on your part) like http:\/\/www.imageoptimizer.net.\nThe process of caching can also help. When your site is completed and your images (and\nother files) will persist, the use of caching can reduce load times for repeat visitors. Caching\nmeans the files the user downloads are marked in the server with an expiration. The next\ntime the user visits the site, their device will check expiration times on the content. If the\ndevice\u2019s local copy is not expired, it simply uses the one it has, without having to download\nit again.\n86 The Missing Link: An Introduction to Web Development and Programming Chapter 12\nThe last option we will consider here (there are more, advanced methods) is creating a\nsprite. Almost the reverse of compression and right sizing, a sprite is one large image that\ncontains all of the icons used throughout the site. Since these smaller images are often\nrepeated, we will download one main image a single time. By using CSS rules to reveal only\nsmall piece of the image (i.e. the portion containing one icon) at a time, all of our icons can\nlive in one image file but appear as individual elements on the page.\nFavicon\nA favicon is a special type of image. It is the small icon that accompanies the page title in\nthe browser\u2019s title and tab. This icon is automatically used on each page found in the folder\nthe favicon is stored in. For example, to apply a single icon to your entire site you would\nplace it in the root folder. Any folders below that level can use a different favicon.\nThese icons are usually 32 by 32 pixel images that represents the site or site\u2019s parent\ncompany. They are converted to a special format and saved with the extension .ico to iden-\ntify themselves as site icons. While they are small and provide little to the overall visual\nexperience of a website, sites lacking a favicon tend to appear less legitimate as the icon\nspace will be replaced by the browser\u2019s default icon.\nCreating favicons can be done in paint or photo editing software that allows you to\ncomply with the size and color density limits of favicons. Additionally, sites like favicon-\ngenerator.org or www.favicon.cc among others can help convert existing images into\nfavicons with some basic editing options before saving your new icons.\n87 Chapter 13\nTables\nTables are a method of formatting the content of your page, and are very similar to the\nconcept of a spreadsheet. Tables are composed of rows and columns. Each intersection of\nthe two is referred to as a cell, and is where content is placed. The number of columns and\nrows you use depends on your need and design.\nYou will probably find a great number of sites that rely heavily on tables to create the\nlook and feel of their pages. Recognizing I have already admitted to doing this in the past\nwhen necessary, I will repeat my earlier statement: Please, do not.\nWhile this was a common method in the past, we now have elements in HTML that\nare defined for such purposes. Tables should be reserved for creating collections of data or\ninformation on your page and nothing else. If you are using them to store information other\nthan how you would in a spreadsheet, you should be using a div or span. Using a table for\ncontent organization will create several complications in your code that can be reduced or\neliminated by following today\u2019s conventions.\nFirst, the formatting of the table is more\nclosely tied to HTML as it is easier to define\nthere than in CSS. Placing these definitions\nin our HTML breaks our goal of separation\nof duties to support a responsive design. If we\nwanted to change the layout, we would have to\nedit our HTML instead of just our CSS files.\nSecond, it creates extra lines of code to define the\nlayout we are looking for, and the use of column\nand divs or spans to adjust for different layouts\nis cumbersome when it comes to code main-\ntenance and readability. Lastly, we lose a great\ndeal of our ability to reorganize our content in\nmultiple ways when using multiple CSS styles.\nThis means that rearranging the content in a\ntable when we want to print or view the content\nin a different manner is more difficult, or would\nrequire a whole different page to accomplish.\nTo create a table, we first need to define its By Tarikash (Own work)CC-BY-SA-3., via\nWikimedia Commons\nbeginning and end with tags:\n<table><\/table>\nFigure 21 Table Structure\n88 The Missing Link: An Introduction to Web Development and Programming Chapter 13\nNext, we can define our heading row by adding our row tags (tr) and nesting dividing\ntags to represent our columns. Since we want items in this row to be recognized as head-\nings, we use the <th> tag for table heading:\n<table>\n<tr>\nID First Name Last Name\n<th>ID<\/th><th>First\nName<\/th><th>Last *Dashed border lines in table examples depict table and cell edges that\nName<\/th> would not be visible without additional code or CSS.\n<\/tr>\n<\/table>\nTo add content to our table, we repeat the process using <td> (for table division) instead\nof <th> to represent a regular cell of data. Each repetition will add a new row of data to our\ntable.\nTo build on our example, we will let the first column also be headings, which will repre-\nsent each row. To do this we use <th> as the first set of tags in each row. We can add a few\nnames as regular content using table division tags as well:\n<table>\nID First Name Last Name\n<tr>\n<th>ID<\/th><th>First Name<\/\n1 John Doe\nth><th>Last Name<\/th>\n<\/tr>\n2 Jane Doe\n<tr>\n<th>1<\/th><td>John<\/td><td>Doe<\/td>\n<\/tr>\n<tr>\n<th>2<\/th><td>Jane<\/td><td>Doe<\/td>\n<\/tr>\n<\/table>\nSpanning\nUsing tables to separate several smaller pieces of content horizontally within a layout\nelement is still generally accepted, and is easier than styling divs, but it is still considered a\nless than ideal approach.\nAs we create more complicated table layouts, we may want to merge some of these\nfields together. We can create \u201cextra-large\u201d cells by adding colspan and divspan attributes\nto the dividing tab (th or td). A colspan value of 2, for example, means the cell will fill two\nhorizontal blocks (left to right) of the table. Likewise, a rowspan of two means the cell\n89 The Missing Link: An Introduction to Web Development and Programming Chapter 13\nwill fill two row\u2019s worth of space in the column(s) it occupies, as in this example showing\nstaffing for part of a week:\n<table>\n<tr>\n<th>ID<\/th><th>First Name<\/\nth><th>M<\/th><th>T<\/\nth><th>W<\/th><th>Th<\/\nth><th>F<\/th>\n<\/tr>\n<tr>\nID First Name M T W T F\n<th>1<\/th><td>John<\/td><td\ncolspan =\/2\/>work<\/\ntd><td><\/td><td\n1 John work\nrowspan=\/2\/>closed<\/\nclosed\ntd><td><\/td>\n<\/tr> 2 Jane work work\n<tr>\n<th>2<\/th><td>Jane<\/\ntd><td><\/td><td><\/\ntd><td>work<\/\ntd><td>work<\/td>\n<\/tr>\n<\/table>\nKeep in mind that spans always move from left to right for columns and top to bottom\nfor rows, starting with the cell you place the attribute in. Your values for the span must\nalways be positive, and larger than zero.\nWhile these examples outline where table cell edges are with dotted lines, we can se-\nlectively enable these borders through cell attributes and\/or through CSS styling. The best\napproach is to keep these visual changes in CSS, preserving the structure\/style separation\nof duties between our HTML and CSS, making future visual changes easier to maintain.\n90 Chapter 14\nForms\nForms drive the internet. They are perhaps the most critical element in creating an interac-\ntive experience for your end users, and allow you to take in input. Forms define places on a\npage where the user\u2019s interaction can add, change, interact with, or remove the data in your\nsystem. The actions and fields you allow in your form determine what the user is allowed to\ndo, and what information he is allowed to see.\nForm elements range from username and password style boxes to large text fields, drop\ndown lists, checkboxes and more. All of the elements within a form block are sent from\nthat page to the destination attribute of the form declaration, called an action. When the\nuser hits send this information is then made available in one of several ways to the receiving\npage or script.\nTo create a form section, we provide the form with a name, id, action, and method. An\nexample with blank attributes looks like this:\n<form name=\"\" id=\"\" action=\"\" method=\"\"><\/form>\nOur form\u2019s name and id are how we will refer to it in our code when interacting with\nit using CSS, JavaScript, or other languages. The action is where the page should send the\ninformation (and where the browser will go when we hit send). Our method is how we will\nsend our information, using either GET or POST.\nGet\nSending the data using the get method places all of the form fields by name and value\n(called a key and value pair) into the address bar, making our URI longer by appending\neach item to the receiving page\u2019s address. An easy way to remember this is that the user\n\u201cgets\u201d to see the information that was sent, as it will appear in the address bar at the top of\nthe browser. The benefit of using the get method is that the destination can be bookmarked\nwith the data that was sent. So, if your form is used to search a library and filter results, you\ncould save the result as a bookmark, and return to the page in the future, seeing the same\nresults without filling out the form again.\nWhile beneficial, there are two instances in which we DO NOT want to use get: either\nwe do not want the user (or anyone) to see what was sent, such as passwords or confidential\ninformation, or we want to send a lot of information. There is a practical limit to how much\ndata can reliably and safely be passed using get, although no formal ceiling. The practical\nlimits are those created by the browser or server\u2019s ability to store the information being sent.\n91 The Missing Link: An Introduction to Web Development and Programming Chapter 14\nWhen developing large get requests, determine which browsers you want to support, and\nhow old, and figure out which of the oldest has the lowest maximum threshold.\nPost\nPosted data is sent from the browser to the server in the background, as the client and\nserver first begin to talk. The data is sent in the headers (see) of the communication, and are\nnot visible to the end user. Pages bookmarked with the post method will not have access to\nthe information later on, and that information is lost if the user leaves the page.\nHow the data is used and values or new content returned bring us to scripting languages.\nSkip to the server-side language section of this text to learn about that process.\nForm Fields\nWhen a webpage with a form is rendered, we can identify a specific field for the user to\nstart with. You may have experienced this in action when you load a website and find the\ncursor already in a textbox. This is autofocus. To include this function, simply add the attri-\nbute autofocus to the field the user will want or need first. We can also apply placeholders to\nour text fields that tell the user what we want them to enter with the placeholder attribute.\nTo begin, we will add a text input inside our form tags for a name field:\n<form name=\"\" id=\"\" action=\"\" method=\"\">\n<input type=\"text\" placeholder=\"Your First Name\" autofocus\nname=\"name\" \/>\n<\/form>\nMany of the new elements of HTML5 we look at will also assist us with our validation\ntasks as users fill out forms. These inputs will attempt to validate and\/or limit user entry to\nonly valid data. By doing this immediately, we create a better experience for both the user\nand the programmer. Traditionally, validation had to be done when data was sent to the\nserver, resulting in the page reloading if there were errors. The other popular approach was\nto perform validation using JavaScript on the client-side (avoiding the reload), but valida-\ntion would still have to be repeated on the server in the event the end user had JavaScript\ndisabled. Some of the more useful input types are the following:\n<input type=\"url\">\nWill attempt to format the user\u2019s text into a proper link, or\n<input type=\"email\">\ndisplay an error. Will make sure an email entered is in proper\nformat, or display an error.\nWe can also create an input that limits values to a fixed range and increment limitations,\nwhich we used to have to display to the user on the page, and then validate after entry:\n<input type=\"range\" min=\"10\" max=\"50\" step=\"5\" value=\"30\">\nThese limits on a range (shown as a slider) also are valid on a number field as well\n(shown as arrows):\n<input type=\"number\" min=\"10\" max=\"50\" step=\"5\" value=\"30\">\n92 The Missing Link: An Introduction to Web Development and Programming Chapter 14\nHTML5 also introduces a wealth of calendar and time controls. We can specify a date,\nweek, or month as well as a time, day and time, and local day and time. Each of these fields\nwill limit the user\u2019s entry to valid fields for that type.\nCalendar options:\n<input type=\"date\" name=\"date\"\/>\n<input type=\"week\" name=\"week\"\/>\n<input type=\"month\" name=\"month\"\/>\nTime Options:\n<input type=\"time\" name=\"time\"\/>\n<input type=\"datetime\" name=\"dateTime\"\/>\n<input type=\"datetime-local\" name=\"localDateTime\"\/>\nLEARN MORE\nKeywords, search terms: Tables, forms\nDo not Use Tables For Layout: http:\/\/webdesign.about.com\/od\/layout\/a\/aa111102a.htm\nMozilla HTML Forms Guide https:\/\/developer.mozilla.org\/en-US\/docs\/Web\/Guide\/HTML\/Forms\n93 Chapter 15\nCanvas\nThe canvas element (new as of HTML5) allows us to approach pages with greater control\nby drawing and creating SVG-style graphics on the page in real time with JavaScript, and\ngiving us the ability to animate and control the motion of our elements. With these new\nabilities, it is now possible to create browser games and highly interactive pages without the\nuse of flash, additional components, or even pre-existing images (not that this would be a\nbest approach in every situation).\nTerminology and integrated functions are focused around the concept of art and media\ngraphics, including functions like stroke() and fill() among others, that expedite your ability\nto create an image on the screen without a verbose background in graphic arts and math-\nematical modeling.\nEach of the items we create can become an object of its own, and can be grouped with\nmultiple layers or elements as one item. Supporting browsers can understand an object\u2019s di-\nmensions and relationship to other elements, bringing native drag-and-drop into play. Page\nelements that support drag-and-drop can add the draggable attribute to their declaration.\nCalling this element a canvas is intentional, and conveys an accurate portrayal of how\nto treat it. When we create a set of canvas tags and set our width and height, we have ef-\nfectively \u201chung\u201d a blank painting on the \u201cwall\u201d of our web page. In our examples below, we\nwill be using a number of values to determine where things we \u201cpaint\u201d on the canvas will be.\nThis is done by using value pairs, or X-Y coordinates. The top-most left-hand corner\nof the canvas is always (0, 0)\u20140 pixels to the right, 0 pixels down. This is different from a\ngraph where 0, 0 is in the middle of the page. Our values for X and Y will move our drawing\npoint to the right and down as they grow larger.\nIn our first example below our canvas size is 300x300, which means the bottom-most\nright-hand point is (300, 300). Any values large than this, or points with negative values,\nwill move part or all of our drawing off of our canvas.\nRectangles\nWe will get right into canvas, since it is a visual process, and can be a lot of fun. To begin,\nwe need to create a canvas element on our page:\n<canvas height=\"300\" width=\"300\"> <\/canvas>\n94 The Missing Link: An Introduction to Web Development and Programming Chapter 15\nWhile our canvas is still empty what we have done is allocated a space (just like sizing\na div) to declare what part of the page belongs to our div. The width and height tags we\nprovided are required from the start, and since we have not defined an offset or placed the\ncanvas in another container, it will start from the top left corner of our page, again just like\na div.\nThe act of drawing on our canvas is a several-step process. We have to declare how\nwe want our element to appear (for example the fillStyle or strokeStyle attribute), where\nwe want it to start from, and what type of line or shape we intend to create (for example,\nfillRect or strokeTriangle).\nWhen we declare a shape, we need to convey its size and location. For a rectangle, we do\nthis by setting its starting location (top left corner) as X and Y values, and then by adding\nits width and height. To add a solid rectangle to our canvas, we will have to add some\nJavaScript to our page. Since we have not reached JavaScript yet in this text, do not worry if\nyou do not understand every little bit\u2014we will get there. For now, focus on understanding\nwhich position of the arguments is used for different settings.\nIn the header of our page, we need to add the following JavaScript code, identifying\nwhat element we want it to affect, and what we want the drawing to be:\n<!DOCTYPE html>\n<html>\n<body>\n<canvas id=\"canvas\" width=\"300\" height=\"300\"\nstyle=\"border: 1px solid #c3c3c3;\">\nOh no! This browser does not support HTML5 :(\n<\/canvas>\n<script>\nvar canvas=document.getElementById(\"canvas\");\nvar canvas1=canvas.getContext(\"2d\");\ncanvas1.fillStyle=\"#FF0000\";\ncanvas1.fillRect(50, 50, 50, 50);\n<\/script>\n<\/body>\n<\/html>\n95 The Missing Link: An Introduction to Web Development and Programming Chapter 15\nSaving and refreshing our screen should now give you a single lonely rectangle set a little\ninside the top left corner of your page. You may be wondering about the \u201cOh no!\u201d line of\nour example. When our page loads, the \u201cOh no!\u201d content is placed on our page. When our\ncanvas layers are rendered, this content is then covered up. If HTML5 is not supported (or\nJavaScript is disabled) our canvas is not drawn, leaving the original text which we can use\nto tell the user something is wrong. In our fill style declaration we used a color reference as\na hex value. We can also use a standard color word like red, or use a function call that takes\na red, green, blue, and opacity value set to generate a color. In our fillRect declaration we\ndefined the starting position from the left and top, as well as its width and height, respec-\ntively as fillRect(left, top, width, height). In our initial example, all values were 50. Let us\nadd a second rectangle that is wider than it is tall, and move it much further down our page:\n<!DOCTYPE html>\n<html>\n<body>\n<canvas id=\"canvas\" width=\"300\" height=\"300\"\nstyle=\"border: 1px solid #c3c3c3;\">\nOh no! This browser does not support HTML5 :(\n<\/canvas>\n<script>\nvar canvas=document.getElementById(\"canvas\");\nvar canvas1=canvas.getContext(\"2d\");\ncanvas1.fillStyle=\"#FF0000\";\ncanvas1.fillRect(50, 50, 50, 50);\ncanvas1.fillStyle= \"rgba(0, 0, 50, 100)\";\ncanvas1.fillRect(50, 200, 100, 50);\n<\/script>\n<\/body>\n<\/html>\nYou will notice that even though we now have two blocks, we do not need to change the\nnames we used when declaring our second rectangle from our first. This is because we are\n96 The Missing Link: An Introduction to Web Development and Programming Chapter 15\nsetting values, then calling a function to draw the element, and are not storing the values in\nour script as objects in our JavaScript code.\nKeep in mind our drawings can be declared in a manner that draws them outside or\nextending beyond the confines of our canvas. They will technically be drawn, however the\ncanvas will not expand to meet the needs of your drawing. To see this in action, we can add\none more rectangle the same size as our first, but place it so it overdraws our canvas, so we\nonly see a portion of it:\n<!DOCTYPE html>\n<html>\n<body>\n<canvas id=\"canvas\" width=\"300\" height=\"300\"\nstyle=\"border: 1px solid #c3c3c3;\">\nOh no! This browser does not support HTML5 :(\n<\/canvas>\n<script>\nvar canvas=document.getElementById(\"canvas\");\nvar canvas1=canvas.getContext(\"2d\");\ncanvas1.fillStyle=\"#FF0000\";\ncanvas1.fillRect(50, 50, 50, 50);\ncanvas1.fillStyle= \"rgba(0, 0, 50, 100)\";\ncanvas1.fillRect(50, 200, 100, 50);\ncanvas1.fillStyle = \"rgba(20, 20, 20, 20)\";\ncanvas1.fillRect(275, 275, 50, 50);\n<\/script>\n<\/body>\n<\/html>\n97 The Missing Link: An Introduction to Web Development and Programming Chapter 15\nADDITIONAL NOTES\nKeep in mind that JavaScript, which we are getting a sneak preview of, is case\nsensitive. This means Canvas1 is considered different than canvas1!\nEven though this last rectangle is still 50 by 50, we only see the 25x25 of it that fits inside\nour canvas dimensions. Now that we have played with rectangles, we will replace them with\ntriangles. We will also just give them borders without a fill color. To do this, we will define\nthe line segments that make up our triangle, and use strokeStyle() instead of fillStroke():\nTriangles\n<!DOCTYPE html>\n<html>\n<body>\n<canvas id=\"canvas\" width=\"300\" height=\"300\"\nstyle=\"border:1px solid #c3c3c3;\"> Oh no! This\nbrowser does not support HTML5 :(\n<\/canvas>\n<script>\nvar canvas=document.getElementById(\"canvas\");\nvar canvas1=canvas.getContext(\"2d\");\ncanvas1.beginPath(); \/\/declare the beginning of settings\nfor our line\ncanvas1.strokeStyle = \"rgba(50, 0, 0, 0.5)\";\ncanvas1.moveTo(150,150); \/\/ set the starting point of\nour \"pen\" to the middle\ncanvas1.lineTo(150,200); \/\/ move our \"pen\" down 50\npixels, drawing a line\ncanvas1.lineTo(200,200); \/\/ move our \"pen\" 50 pixels to\nthe right\ncanvas1.closePath(); \/\/ Draw a direct line back to our\nstarting point\ncanvas1.stroke(); \/\/ Visually place the defined line on\nthe page\n<\/script>\n<\/body>\n<\/html>\n98 The Missing Link: An Introduction to Web Development and Programming Chapter 15\nSaving and refreshing should now remove the rectangles we drew earlier and replace\nthem with a right angle triangle positioned with the right angle in the middle of the canvas.\nBy adjusting our X and Y values in moveTo and lineTo variables, we can move our triangle\naround the page. We will change just one point (our starting point) and see how different\nour triangle looks:\n<!DOCTYPE html>\n<html>\n<body>\n<canvas id=\"canvas\" width=\"300\" height=\"300\"\nstyle=\"border: 1px solid #c3c3c3;\"> Oh no! This\nbrowser does not support HTML5 :(\n<\/canvas>\n<script>\nvar canvas=document.getElementById(\"canvas\");\nvar canvas1=canvas.getContext(\"2d\");\ncanvas1.beginPath(); \/\/declare the beginning of settings\nfor our line\ncanvas1.strokeStyle = \"rgba(50, 0, 0, 0.5)\";\ncanvas1.moveTo(75,150); \/\/ set the starting point of our\n\"pen\" to the middle\ncanvas1.lineTo(150,200); \/\/ move our \"pen\" down 50\npixels, drawing a line\ncanvas1.lineTo(200,200); \/\/ move our \"pen\" 50 pixels to\nthe right\ncanvas1.closePath(); \/\/ Draw a direct line back to our\nstarting point\ncanvas1.stroke(); \/\/ Visually place the defined line on\nthe page\n<\/script>\n99 The Missing Link: An Introduction to Web Development and Programming Chapter 15\n<\/body>\n<\/html>\nTo convert our outlined triangle to a filled, solid object we just need to convert our stroke\nsettings back to fill:\n<html>\n<body>\n<canvas id=\"canvas\" width=\"300\" height=\"300\"\nstyle=\"border: 1px solid #c3c3c3;\"> Oh no! This\nbrowser does not support HTML5 :(\n<\/canvas>\n<script>\nvar canvas=document.getElementById(\"canvas\");\nvar canvas1=canvas.getContext(\"2d\");\ncanvas1.beginPath(); \/\/declare the beginning of settings\nfor our line\ncanvas1.fillStyle = \"rgba(50, 0, 0, 0.5)\";\ncanvas1.moveTo(75,150); \/\/ set the starting point of our\n\"pen\" to the middle\ncanvas1.lineTo(150,200); \/\/ move our \"pen\" down 50\npixels, drawing a line\ncanvas1.lineTo(200,200); \/\/ move our \"pen\" 50 pixels to\nthe right\ncanvas1.closePath(); \/\/ Draw a direct line back to our\nstarting point\ncanvas1.fill(); \/\/ Visually place the defined line on the\npage\n<\/script>\n<\/body>\n100 The Missing Link: An Introduction to Web Development and Programming Chapter 15\n<\/html>\nWe can move beyond straight lines in order to draw other shapes by using Bezier curves,\nquadratic curves, and arcs. Each of these allow us to define different points on our lines and\nto curve our line between those points. For now, we will look at Bezier as an example of how\nto approach multi-point curves. Bezier lines allow for two control points as opposed to the\none allowed in quadratic curve, so the programmatic difference is essentially just one less\npoint defined for a quadratic than a Bezier (limiting the shape your line can take).\nBezier Curve\n<html>\n<body>\n<canvas id=\"canvas\" width=\"300\" height=\"300\"\nstyle=\"border: 1px solid #c3c3c3;\"> Oh no! This\nbrowser does not support HTML5 :(\n<\/canvas>\n<script>\ncontext.beginPath();\ncontext.moveTo(10, 130);\ncontext.bezierCurveTo(0, 10, 290, 10, 290, 290);\ncontext.lineWidth = 10;\ncontext.strokeStyle = \/black\/;\ncontext.stroke();\n<\/script>\n<\/body>\n<\/html>\n101 The Missing Link: An Introduction to Web Development and Programming Chapter 15\nBy setting a moveTo point, we are starting our curve from that point just as with a\nregular line. From here, our Bezier function call takes three sets of points, our two control\npoints, and end point. As a challenge, try adjusting your Bezier points to turn this example\ninto a drop, or marker style, symbol.\nDrawn Text\nWe can even draw text on the screen. While this might seem redundant as we have done\nthat since we began this section, drawing text on a canvas can help us complete logos or\ndraw letters without specifying every line needed to create the letter itself. This means the\ntext becomes part of the canvas and cannot be copy\/pasted. To create text, we simply need\nto define the style, string, and starting location. Replacing our earlier examples, our new\ncanvas1 definition turns into:\n<script>\nvar canvas=document.getElementById(\"canvas\");\nvar canvas1=canvas.getContext(\"2d\");\n<\/script>\nThe benefit of creating text as a layer on a canvas instead of styling it with CSS allows\nus additional mechanisms to manipulate our words.\nWith this set of techniques, we can now recreate icons and logos without needing actual\nimage files, and can scale them to fit as our page size and layout changes. This also makes\nit more difficult for your drawn images to be \u201cborrowed.\u201d As there is no image file to save,\nit becomes more difficult (though not impossible) for anyone trying to use your creations.\nLet us add text to this canvas by setting up a splash of color for our text, then defining our\nfont, text and start location:\nvar gradient=ctx.createLinearGradient(0,0,c.width,0);\ngradient.addColorStop(\"0\",\"red\");\ngradient.addColorStop(\"0.5\",\"yellow\");\ngradient.addColorStop(\"1.0\",\"blue\");\nctx.fillStyle=gradient;\n102 The Missing Link: An Introduction to Web Development and Programming Chapter 15\nctx.fillText(\"Let's see some color!\",10,90);+\nLEARN MORE\nKeywords, search terms: Canvas, css graphics\nSee what Canvas can do! http:\/\/net.tutsplus.com\/articles\/web-roundups\/\n21-ridiculously-impressive- html5-canvas-experiments\/\nThe full specifications http:\/\/www.w3.org\/TR\/2009\/WD-html5-20090825\/the-canvas-element.\nhtml\n103 Chapter 16\nMedia Support\nVideo\nThe abundance of audio and video material on the internet grew over time as bandwidth\nimproved and storage space became cheaper and ubiquitous. Through this time, many ap-\nproaches were brought forward to facilitate enjoying the material. Software, file extensions,\nbrowser add-ons and more attempted to fill the void. Now, HTML5 has added both audio\nand video tags to make it easier to integrate media into our pages. These tags make embed-\nding media easier, but (so far) are limited in the number of file formats they support.\nADDITIONAL NOTES\nYou can convert video files to OGG with any supporting software just as you\nwould convert to any other video format.\nOur new video tag supports a number of features through attributes like automatically\nplaying (autoplay), looping the file (looping), on screen controls (controls), preloading the\nvideo before it is played (preload), error handling (onerror), and even displaying an image\nwhen the file is not in use (poster) and also includes width, height, and source attributes of\nthe file.\nThe video files we wish to use must be in the OGG format, which is an open source\nvideo format. We define our video very similarly to other elements we take into our page.\nAn initial video that simply plays when the page is loaded can be completed by adding the\nfollowing:\n<video src=\"ourfile.ogg\" width=\"200\" height=\"150\" autoplay>\nTake note that this is a pretty rude solution in many cases, as the file will start to play\nas soon as enough of it is ready, and the user is left with no means of control except closing\nthe page entirely (think about the lovely ads we have all been subject to that use this type\nof technique). To address this, we will add some more attributes:\n<video src=\"ourfile.ogg\" width=\"200\" height=\"150\" autoplay\ncontrols preload= \"auto\" poster=\"videoImage.png\">\n104 The Missing Link: An Introduction to Web Development and Programming Chapter 16\nNow we see a splash screen and controls. Our other options for preload (auto lets the\nbrowser decide) are none and metadata. None will stop all preloading activity, while meta-\ndata loads information about the video like length and dimensions. Audio files are actually\nidentical to this approach (even the use of .ogg files) with exception to the ability to define\nthe width and height. All we need to change is our vocabulary, using the word audio instead\nof video in our tag.\nAudio\n<audio src=\"ourAudio.ogg\" autoplay\ncontrols preload=\"auto\">\nThe use of audio in a site can add a number of effects, from background music (be\nkind\u2014allow the user to stop it if they want), to little noises that aid in navigation (these\nmight interfere with screen readers) to embedded players that allow the user to select and\nplay a particular audio file.\nLike image formats, audio files can be encoded in a variety of formats that provide dif-\nferent levels of quality. The two formats most commonly found are .mp3 and .wav, standing\nfor motion picture extract group (3rd set of standards) and wave, respectively. The difference\nlies in their method of compressing and storing the information needed to reproduce the\nsound. MP3 files are more compressed, meaning they are smaller and require less time and\nspace to transmit, but contain less information and as such have a lower audio quality. Wave\nfiles, on the other hand, are typically much larger and sound better. This means they are\nmore taxing on a website as they require more storage space and will take longer to load.\nWhich format you use will obviously depend on what is more important to you\u2014speed\nof delivery and space, or quality of sound for the user. Some things to take into consider-\nation are that most users report hearing little difference in quality between the formats,\nespecially when the file is played on a mobile device or computer with basic entry-level\nspeakers attached. If you have ever purchased a digital album or single online, you may have\nbeen presented with the option between these or other formats to accommodate the more\ndiscerning audiophiles among us.\n105 The Missing Link: An Introduction to Web Development and Programming Chapter 16\nLEARN MORE\nKeywords, search terms: Audio, video, embed(ded) audio video\nExample of commercial HTML5-based tools: http:\/\/flowplayer.org\/\nExample of flash-based tools: http:\/\/www.tubesnack.com\/\n106 Chapter 17\nMobile Device Support\nWhen you are creating your HTML pages and following the responsive design patterns\nthat restrict tags to structural as much as possible, you have already laid the groundwork to\nsupport mobile devices.\nWhen all of your page content is broken down into logical pieces, and those pieces have\nID and\/or class attributes, we will be able to show, hide, or reposition those elements using\nCSS. When we determine the screen dimensions the user has on their device, we can decide\nwhat or how to show content from our regular page. The key to this, of course, are the ID\nand class tags. Anything that you may want or need to control (move, alter, edit, etc.) as a\nsingle piece by itself should have an ID tag. Elements that will share the same changes (for\nexample, pictures, links, paragraphs, etc.) should have the same class or classes so they can\nbe changed at the same time.\nA single element, say a paragraph in a group of paragraphs, can have both an ID and a\nclass, and can receive style changes from CSS due to both. We will get to this in more depth\nin CSS, but keep it in mind as you build pages now so they are ready for you later.\nIf you are reading this chapter looking for examples on HTML5 support of things\nlike Geolocation, these will be found in the JavaScript section as they require the use of a\nscripting language to function, and are not available through HTML markup.\nImportant considerations for mobile development go beyond styling changes and begin\nto include performance measures as well, since mobile devices often lack computing power\nthat can match a desktop or laptop\u2019s capacity. Skipping some of your fancier animations\nor large background images to trim down your loading times is another responsive-style\nadjustment to your site alongside other CSS changes. See the resources below for some\nexamples of methods that may help your site improve response times.\nLEARN MORE\nKeywords, search terms: Mobile optimization, mobile performance\nOptimization tips and tools http:\/\/www.html5rocks.com\/en\/mobile\/\nCompatibility Charting: http:\/\/mobilehtml5.org\/\nTest your browser(s): http:\/\/html5test.com\nFollow new developments: http:\/\/www.mobilexweb.com\/\n107 Chapter 18\nTags to Avoid\nNow that we have focused on the new features of HTML5 and warned about the inef-\nficient methods developers resorted to in the past, let us take a look at a few other tags and\nmethods to avoid using in our code.While some of these are already deprecated, not all\nare, and they all take away from our goals of separating structure from style and responsive\ndesign.\n<b>, <i>, <strong>\nAll of these place emphasis on text, and can be replaced with CSS. Using these within\nyour code means a change to your CSS style will not necessarily determine whether or not\nthe style of text is affected for content wrapped in these tags. It also means you have to edit\nstyle in two places, both your CSS and HTML files.\n<font>\nAgain, we can control font (with even more control) using CSS, and hard coding your\nfont into your page can override what you wanted in your CSS.\n<br>\nI know, I have (and will) use breaks in my examples. What I mean to discourage here is\nusing breaks as a quick fix when you should be using <p> or something more appropriate.\nIf another tag better identifies your content, but you do not want some of the automatic\nstyling that comes with the tag, we can override those attributes in our CSS, so use the best\ntag for your content. We will see how to adjust it to your needs when we look at CSS later.\nStyling Attributes\nJust like not using tags that style in our HTML, we should avoid using attributes that\naffect page appearance as well, like aligning content, or applying borders, colors, and other\nCSS elements.\n108 Chapter 19\nRule Structure\nCSS\nSelectors\nBy Armchair [Public domain], via Wikimedia Commons\nFigure 22 CSS Rule Structure\nThe selector is a good place to start with CSS. It is used to identify which item(s) the rule(s)\nfollowing it will apply to, and is the first element of a rule definition. A selector can refer to\nan existing tag that is part of the HTML structure like unordered lists, paragraphs, inputs,\nor it can refer to a custom class, element\u2019s name, or ID that we create. Selectors are followed\nby a set of braces { }, and the rules we enter in between the braces (the property we want\nto adjust, and the value we want it to have) apply to the selector we specify. We will look at\nsome of these here (there are 40+ as of initial CSS3 components), focusing on those that\nare more frequently used. Take note that in CSS, we use the colon (:) instead of an equal\nsign (=) to assign values.\nClasses\nTo take a look at how we can attach a \u201cwhere\u201d concept to our rules, we will attach some\nclasses to our tags. This allows us to apply different styles to the same selector type, while\nadding the ability to be more specific about which occurrence we are talking about. We use\nclasses by giving them rules in CSS and referring to them as attributes in elements that\nsupport them from our HTML document by using class=\u201cnameOfOurClass.\u201d When de-\nfining classes in our CSS file, we precede their name with a period to specify they are a class.\n109 The Missing Link: An Introduction to Web Development and Programming Chapter 19\nIDs\nThe ID attribute is used similar to how a class is used, with two differences:\n\u2022 The ID is defined with a # instead of a period, e.g., #warning.\n\u2022 You should use an ID only once on a page, as it should identify something\nunique to the document.\nWe already have our ID references in our HTML file anywhere we used id=\u201courNameHere\u201d\nattributes in our tags.\nExamples\nWe will begin with a simple example and adjust our unordered list by disabling bullets.\nFor now, we will put the rule in our <head> nested within <style> tags, which will allow the\nrule to apply anywhere on the page where the selector (in this case, ul) exists:\n<style>\nul {\nlist-style-type: none;\n}\n<\/style>\nWe could also write this rule in a more condensed form:\n<style>\nul {list-style-type: none;}\n<\/style>\nSince CSS rule sheets ignore white space, the line breaks only serve to make the docu-\nment more readable when we interact with it. Minifying it (removing all of the extra line\nbreaks by hand or with the use of a script) can reduce the size of larger style sheets, which\ncan help performance (especially in mobile devices where we know this is of more concern).\nBy adding the rule above, we dictate the appearance of all unordered lists on our page.\nRules specify the \u201cWhat, Where, and When\u201d aspects we want to define for the given se-\nlector. The \u201cWhat\u201d is the actual change we want to see\u2014text in a certain color, an image\nin a specific location, and so on, just like our example above. In this case, we wanted to\nhide the default bullet markers. The \u201cWhere\u201d is one or more specific locations, defined as a\nparticular named element or when certain conditions are met, i.e. before every paragraph\n(p.before{}), or every link on the page (a{}). Finally, the \u201cWhen\u201d aspects allow us to control\nthe site\u2019s appearance based on different factors like if the display is mobile sized, or if the\nuser clicked the print button (@media print {}).\nBy placing these examples in the <head> of our page, we have created an internal style\nsheet. This denotes that all of the style information we need to reference can be found in\nthe page itself. We could also create external files with our rules. This allows us to have one\nor more CSS files in our site, and to apply those rules to one or more pages. The external\nfile method is what we will predominantly use as it best fits responsive design, and separates\nthe tasks our files are targeting.\n110 The Missing Link: An Introduction to Web Development and Programming Chapter 19\nIMPORTANT REMINDER\nUsing the inline method outside of JavaScript violates our responsive design and\nseparation of duties! Another downside to this method is it would have to be\napplied to every paragraph we wanted it on within our page.\nTo connect a CSS file to our webpage, we would move all of our rules (everything inside\nthe <style> tags) into a new document. After saving this new file with the .css extension,\nthe browser will understand that everything contained is to be treated as if it were in our\n<style> tags. We can connect it to our page much like linking to another page in our server:\n<link rel=\"style sheet\" type=\"text\/css\" href=\"mystyle.css\">\nIn our <link> tag we provide a rel attribute of style sheet to identify the file\u2019s purpose.\nThe type attribute tells the browser how to expect the contents to be formatted (\u201ctext\/css\u201d),\nand href provides the location of the file. If the file was not in the same folder as the web\npage we are using, we would adjust the link just as we would in an <a> tag.\nPast practice has been to create entirely different sites, complete with customized CSS\nand HTML pages, to support mobile devices. This kicked off the m.yoursite.com, or mobile.\nyoursite.com period where heavily modified versions of sites were maintained separate from\nthe primary, desktop version. Now, with the use of responsive design methods and the\nnewer features of CSS3, we can use one master CSS file for all aspects of our site.\nYou may wish to separate your CSS files while you are working on them, as one master\nfile can become tedious to search through. It may also help to add multi-line or long com-\nments in your file to delineate between organized sections of your CSS. Ultimately, by your\nrelease date, you will want to get all of your CSS back into one file. Compressing it with\ntools like http:\/\/www.csscompressor.com\/ which remove the whitespace that makes the file\nreadable while developing, and reduces the file size making transmission faster for the user.\nOur final method of applying rules is inline. This refers to the practice of inserting the\nrule inside the attribute tag of the item in question. If we wanted to change the text color\nof a particular paragraph, we could go right to our HTML file and alter our regular <p>\ntag to read:\n<p style=\"color:red;\">Our now RED paragraph!<\/p>\nHere we do not need our selector as it is the tag itself, and we also do not need our\nbraces, or quotes within the rules. All we include in our attribute\u2019s value are the surrounding\nquotes and the rules we want to apply, still using : and ; appropriately. This is an effective\nmeans of responding to an event, or changing appearance through JavaScript.\nThere are a number of other things we can do with selectors in order to identify what\nwe want to interact with. The * character can be used to apply to everything within page,\nor within a selector if one is specified. For example, * { color: blue} would make all text on\nthe page blue (assuming it is the last rule applied\u2026 we will get to that) while footer * {\ncolor: blue} would make all items in our footer blue. This can be handy for development and\ntesting to quickly adjust a number of items, but should be avoided in production as pro-\ncessing the rule can require examining a large number of elements, potentially increasing\npage load times.\n111 The Missing Link: An Introduction to Web Development and Programming Chapter 19\nWe can target specific items by referring to them using their ID. To do this, we put a #\nin front of their ID name. As an example, we will create two divs, one with an ID of todo\nand another with an ID of complete, to make a quick task list:\n<div id=\"todo\">\n<ul>\n<li>Check the mail<\/li>\n<li>Go to the store<\/li> \u2022 Check the mail\n<li>Take the dog to the vet <\/li> \u2022 Go to the store\n<\/ul>\n\u2022 Take the dog to the vet\n<\/div>\n<div id=\"completed\">\n<ul> \u2022 Rent a movie\n<li>Rent a movie<\/li>\n\u2022 Make grocery list\n<li>Make grocery list<\/li>\n\u2022 Make vet appointment\n<li>Make vet appointment<\/li>\n<\/ul>\n<\/div>\nBy adding the following styles to this page, we can turn our To Do list red, and our\nCompleted list green:\n<style>\n#todo { background-color:red; }\n\u2022 Check the mail\n#completed { background-color: green; }\n\u2022 Go to the store\n<\/style>\n\u2022 Take the dog to the vet\n\u2022 Rent a movie\n\u2022 Make grocery list\n\u2022 Make vet appointment\nIMPORTANT REMINDER\nKeep in mind we can only use an id name once on each page. If you want to\napply these rules in more than one place, then you should use a class definition,\ncoming up next!\nWe can use this technique on any tag that accepts an ID as an attribute (the actual rules\nwe are allowed to use, however, differ depending on the element). To apply rules like this\nin multiple places, we will need to switch to a class definition. To do this, we simply change\nour # to a . and instead of relying on an element\u2019s ID, we give it a class attribute with a value\nof the selector name we create in our style definition. We will tweak our last example to split\nour To Do list into \u201ctoday\u201d and \u201ctomorrow\u201d lists and rename our completed div to \u201ddone.\u201d\n112 The Missing Link: An Introduction to Web Development and Programming Chapter 19\nThen give both to do lists a class of todo, our done list a class of completed, and change our\nCSS rules to match:\n<style>\n.todo { background-color:red; }\n.completed { background-color: green; } \u2022 Check the mail\n<\/style> \u2022 Go to the store\n<div id=\"today\" class=\"todo\">\n<ul>\n<li>Check the mail<\/li>\n\u2022 Take the dog to the vet\n<li> Go to the store<\/li>\n<\/ul>\n<\/div>\n<div id=\"tomorrow\" class=\"todo\">\n\u2022 Rent a movie\n<ul>\n\u2022 Make grocery list\n<li>Take the dog to the vet <\/li>\n\u2022 Make vet appointment\n<\/ul>\n<\/div>\n<div id=\"done\" class=\"completed\">\n<ul>\n<li>Rent a movie<\/li>\n<li>Make grocery list<\/li>\n<li>Make vet appointment<\/li>\n<\/ul>\n<\/div>\nTo add even more emphasis to our completed list we can make the list inside it show\ntext as crossed out. We could do this by applying a style to an ID we assign it, or by giving\nthat ul a class, but we already have enough structure in place to specify what we want by\nusing a descendant selector. This selector type is specified by saying we want elements\n\u201ca\u201d inside elements \u201cb\u201d to have the style applied. In our example, we want <ul>s inside a\n.completed crossed off, so we will add the following rule to our styles:\n.completed ul { text-decoration: line-through; }\nNow, if we add any more sections with a class of completed, they will also be crossed out\nautomatically. You can try splitting your completed <div> into two pieces, like \u201cyesterday\u201d\nand \u201clast week\u201d to try it out.\nADDITIONAL NOTES\nHover works on more than links! Just about any element has a hover state as\nlong as the cursor position can be associated with it. Note: the z-index and\nposition of layered elements can easily interfere with things like hover.\nHyperlinks are frequently styled so they change in appearance when they are hovered\nover or have already been clicked. We can assign our styles to these events by creating rules\nfor <a> tags when they are unvisited, visited, or a hover (mouse pointer is over the link)\nstate is attached:\na:link {\n113 The Missing Link: An Introduction to Web Development and Programming Chapter 19\ncolor:blue;\n}\na:visited {\ncolor:grey;\n}\na:hover{\ncolor:red;\nfont-weight:bold;\n}\nTry adding a link to your local Veterinarian\u2019s office to the task in your todo list, and\nwatch how it changes when you interact with it.\nSometimes you might find it easier to change something for all occurrences of an ele-\nment that are not members of another rule. Instead of adding additional classes to those\nelements, we can specify an exception with the not state:\ndiv:not(.completed){ font-size:larger; }\nThis rule will make text in any div (whether or not they have the .todo class) text larger.\nAnother handy set of states are :before and :after. These selectors allow us to place and style\ncontent as a prepend or append action to our element. If we wanted to prepend a To Do:\ntitle to our .todo class elements, we could add the following rule:\n.todo:before{\ncontent:\"To Do:\";\nbackground-color:yellow;\ncolor:red;\nfont-weight:bold;\n}\nIMPORTANT REMINDER\nNote: We cannot use the Content rule to add HTML to an element, only text.\nTo achieve this, we would need to use JavaScript or another language that can\nmanipulate the DOM.\nThe remainder of the selectors allow us to get even more specific, selecting the elements\nthe appear before or after another given element, matching elements that have a particular\nattribute, or even matching attributes that contain a certain string as part of their value. For\na full reference, I recommend the list at w3schools.com.2 Our completed example should\nnow look like this:\n<style>\n.todo {\nbackground-color:red;\n}\n.completed {\nbackground-color: green;\n}\n.completed ul {\n2 http:\/\/www.w3schools.com\/cssref\/css_selectors.asp\n114 The Missing Link: An Introduction to Web Development and Programming Chapter 19\ntext-decoration: line-through;\n}\ndiv:not(.completed){\nfont-size:larger;\n}\na:link {\ncolor:blue;\n}\na:visited {\ncolor:grey;\n}\na:hover{\ncolor:red;\nfont-weight:bold;\n}\n.todo:before{\ncontent:\"To Do:\";\nbackground-color:yellow;\ncolor:red;\nfont-weight:bold;\n}\n<\/style>\n<div id=\"today\" class=\"todo\">\n<ul>\n<li>Check the mail<\/li>\n<li> Go to the store<\/li>\n<\/ul>\n<\/div>\n<div id=\"tomorrow\" class=\"todo\">\n<ul>\n<li>Take the dog to the To Do:\nvet <\/li>\n\u2022 Check the mail\n<\/ul>\n<\/div> \u2022 Go to the store\n<div id=\"yesterday\"\nclass=\"completed\"> To Do:\n<ul>\n\u2022 Take the dog to the vet\n<li>Rent a movie<\/li>\n<\/ul>\n<\/div>\n\u2022 Rent a movie\n<div id=\"lastWeek\"\nclass=\"completed\">\n<ul>\n<li>Make grocery list<\/\n\u2022 Make grocery list\nli>\n\u2022 Make vet appointment\n115 The Missing Link: An Introduction to Web Development and Programming Chapter 19\n<a href=\"http:\/\/www.dunkirkanimalclinic.com\/\"><li>Make\nvet appointment<\/li><\/a>\n<\/ul>\n<\/div>\nOrder of Precedence\nThere are some rules to our rules. There is a hierarchy to how they are applied in order\nto provide a semblance of order and avoid conflicts. First, we need to consider where the\nrule is located. In general, the \u201ccloser\u201d the CSS file is to the line of code using it, the more\nlikely that particular CSS file will override what is in the others. For example, rules in an\nexternal style sheet would be overridden by those in an internal style sheet. Just the same,\nstyles in an internal style sheet would replace the previous style sheet included. Styles that\nare added to the page, or attributes that are inline with the element they apply to, become\nthe \u201cclosest\u201d to what it is targeting.\nUSEFUL FEATURE\nJavaScript code that affects appearance will frequently apply inline modifications\nto apply style changes to a page, but will not affect the CSS file or other pages.\nWhen we discuss the overriding nature, it is important to remember that this applies to\nthe specific rule. A set of rules for an <a> tag defined in an external sheet will not necessarily\nbe overridden by the <a> tag rules in an internal style sheet. Each rule within the defini-\ntion is examined, and is still applied if that particular rules does not appear \u201ccloser\u201d to the\nelement. For example:\nAn External Sheet:\na {\ncolor:blue;\ntext-decoration:none;\n}\nAn Internal Sheet:\na { color:red;}\nOur code:\n<head>\n<link rel=\"style sheet\" type=\"text\/css\" href=\"mystyle.css\">\n<\/head>\n<style>\na { color:red;}\n<\/style>\nComparing the above example style sheets, we can see that the external sheet applies\ntwo rules: text color is blue, and there should not be an underline. However, our internal\nstyle sheet specifies a rule that color should be red. Since this rule is closer, our link will be\nred. The underline rule, however, is not defined in the internal sheet, so it will carry over\nand remain.\n116 The Missing Link: An Introduction to Web Development and Programming Chapter 19\nThis also carries into the CSS rules themselves. Definitions can be general, like our\nexample above that would apply to all links on our page, or they can be more specific to\ntarget a particular group or single link. The more specific we are, the greater influence our\nrule will have. For example:\n<style>\na{\ncolor:red;\n}\ndiv.block a{\ncolor: blue;\n}\n<\/style>\n<body>\n<a href=\"\">Our RED link<\/a>\n<div class=\"block\">\n<a href=\"\">Our BLUE link<\/a><br\/>\n<a href=\"\" style=\"color:green\">Our GREEN link<\/a>\n<\/div>\nAbove, our \u201ca\u201d style for our links is overridden in our div, as the block style is more\nparticular, or close, to the actual link we want affected. However, our green link overrules\nour block style as it is inline, and applies to that specific link. From here, only a change in\nthis inline style caused by JavaScript, or an \u201cover-override\u201d from a rule marked !important\ncan trump the inline rule. The easiest way to debug CSS issues is with web developer tools\nthat are an add-on or included in modern browsers like Chrome, that can show you exactly\nwhat rules are applied, overridden, and even let you test (temporary) changes before making\nthem in your real file.\nCaveat: User-enforced styles (settings the client enters in their browser, or applied by an\naccessibility program) also fit in to our precedence list, and can override any styles we set.\nBy Armchair [Public domain], via Wikimedia Commons\nFigure 23 Document Markup\n117 The Missing Link: An Introduction to Web Development and Programming Chapter 19\nLEARN MORE\nKeywords, search terms: css rules, rule structure, selectors, css classes and ids\nA list of all CSS properties: http:\/\/www.blooberry.com\/indexdot\/css\/propindex\/all.htm\nAll of the selectors: http:\/\/www.w3.org\/TR\/CSS2\/selector.html\nSome tips, tricks and more features: http:\/\/www.instantshift.com\/2010\/03\/15\/\n47-css-tips-tricks-to-take-your-site-to-the-next-level\/\n118 Chapter 20\nLayout Formatting\nBox Model\nBy Matthias Apsel [CC0], via Wikimedia Commons\nFigure 24 CSS Box Model\nBorders\nTo better identify where our content falls on a page, and to signify that it is different from\nthe material around it, we can adjust the borders on our elements. Borders can be enabled or\ndisabled by the top, bottom, left and right of the element and can also have different styles\nlike solid, double, grooved, dotted and dashed lines, among others.\n119 The Missing Link: An Introduction to Web Development and Programming Chapter 20\nTo specify a full border, we simply use border, and can apply color, width, and style:\n<style>\np.one {\nborder-style:solid;\nborder-width:5px;\n}\np.two {\nborder-style:groove;\nborder-width:medium;\n}\np.three {\nborder-style:dotted;\nborder-width:1px;\nborder-color:red;\n}\n<\/style>\n<p class=\"one\">Some text.<\/p>\n<p class=\"two\">Some more text.<\/p>\n<p class=\"three\">Even more text.<\/p>\nThe full list of possible border styles is as follows:\nTable 4 Border Styles\nValue Description\nnone No border.\ndotted Dotted border.\ndashed Dashed border.\nsolid Solid border.\ndouble Double (two lines) border.\ngroove Grooved, 3d border.\nridge Ridged, 3d border.\ninset Lowered (sunken) 3d border.\noutset Raised 3d border.\ninherit Inherits the same style as the parent element.\nMargin and Padding\nThese related concepts allow you to control the amount of space between your content\nand its container, and between the container and objects around it. Padding controls the\namount of space inside your container, for instance between text and a set of paragraph tags.\nYou can remember padding as the inside by thinking about a padded room; the padding is\nonly effective if it is on the inside of the walls.\n120 The Missing Link: An Introduction to Web Development and Programming Chapter 20\nBy adding borders to our paragraphs as we did above, we can see the outline of where\nthe paragraph fits into our page. Now, we will see the difference when we apply padding:\n<style>\np.one {\nborder-style:solid;\nborder-width:5px;\n}\np.two {\nborder-style:groove;\nborder-width:medium;\n}\np.three {\nborder-style:dotted;\nborder-width:1px;\nborder-color:red;\n}\np {padding:10px;}\n<\/style>\n<p class=\"one\">Some text.<\/p>\n<p class=\"two\">Some more text.<\/p>\n<p class=\"three\">Even more text.<\/p>\nYou will notice that the paragraphs still have not moved relative to one another, they\neach simply take up more space. In order to move them further away from each other, we\ncan add a margin:\n<style>\np.one {\nborder-style:solid;\nborder-width:5px;\n}\np.two {\nborder-style:groove;\nborder-width:medium;\n}\np.three {\nborder-style:dotted;\nborder-width:1px;\nborder-color:red;\n}\np {padding:10px;}\np {margin:50px;}\n<\/style>\n<p class=\"one\">Some text.<\/p>\n<p class=\"two\">Some more text.<\/p>\n<p class=\"three\">Even more text.<\/p>\nWith both examples, we can adjust our values by pixel or percent. We can also control\nthe amount of change by each side of the object, by specifying top, bottom, left or right to\n121 The Missing Link: An Introduction to Web Development and Programming Chapter 20\nour rules. To do this we need to edit our values to only pad the left side of our paragraphs,\nand only apply a margin to the bottom of each:\n<style>\np.one {\nborder-style:solid;\nborder-width:5px;\n}\np.two {\nborder-style:groove;\nborder-width:medium;\n}\np.three{\nborder-style:dotted;\nborder-width:1px;\nborder-color:red;\n}\np {padding-left:10px;}\np {margin-bottom:50px;}\n<\/style>\n<p class=\"one\">Some text.<\/p>\n<p class=\"two\">Some more text.<\/p>\n<p class=\"three\">Even more text.<\/p>\nInstead of writing out multiple rules to adjust sides, we can combine them into one\ndeclaration by writing out our values clockwise, starting with top, as padding: top right\nbottom left or margin: top right bottom left, replacing the words with a fixed or relative\n122 The Missing Link: An Introduction to Web Development and Programming Chapter 20\nvalue (they can be mixed) and by using zero as a place holder if we do not want the value\nchanged from default:\n<style>\np.one {\nborder-style:solid;\nborder-width:5px;\n}\np.two {\nborder-style:groove;\nborder-width:medium;\n}\np.three {\nborder-style:dotted;\nborder-width:1px;\nborder-color:red;\n}\np {padding:50px 30px 50px 5px;}\np {margin:50px;}\n<\/style>\n<p class=\"one\">Some text.<\/p>\n<p class=\"two\">Some more text.<\/p>\n<p class=\"three\">Even more text.<\/p>\n123 The Missing Link: An Introduction to Web Development and Programming Chapter 20\nBackground\nThere is a lot we can do with the background of our pages. Colors and images can be\napplied to all or portions of our content, helping to highlight different elements of our site,\nand play a large part in the overall look and feel. We can specify colors by their name if they\nare a basic color like red, white, blue etc. or we can provide its hex value, or the values for\nits red, green, and blue values.\n<style>\np.one {\nborder-style:solid;\nborder-width:5px;\nBackground-color: green;\n}\np.two {\nborder-style:groove;\nborder-width:medium;\nBackground-color:#ff3355;\n}\np.three {\nborder-style:dotted;\nborder-width:1px;\nborder-color:red;\nbackground-color: rgb(33,66,99);\n}\np {padding:50px 30px 50px 5px;}\np {margin:50px;}\n<\/style>\n<p class=\"one\">Some text.<\/p>\n<p class=\"two\">Some more text.<\/p>\n<p class=\"three\">Even more text.<\/p>\nTo use images instead of colors, we can specify the image\u2019s location in our files, and\ncan also dictate where we want to place it on our page, whether or not it should repeat,\nand whether it should move or remain in place when the user scrolls the page. By default,\nimages will repeat to fill the space they are placed in. To prevent this, we can add a no-repeat\nattribute to our definitions. This time, we will use the background attribute as opposed to\nthe background-color attribute. The benefit of this is that you can include both in a set of\nrules on the same object (image first, color second), allowing you to have an image on top\n124 The Missing Link: An Introduction to Web Development and Programming Chapter 20\nof a background color. Take note that in these examples, you will need to select your own\nimages in place of those used below.\n<style>\np.one {\nborder-style:solid;\nborder-width:5px;\nbackground:url(clouds.jpg);\n}\np.two {\nborder-style:groove;\nborder-width:medium;\nbackground:url(calendar.jpg) no-repeat;\nbackground-color:#ff3355;\n}\np.three {\nborder-style:dotted;\nborder-width:1px;\nborder-color:red;\nbackground:url(calendar.jpg);\n}\np {padding:50px 30px 50px 5px;}\np {margin:50px;}\n<\/style>\n<p class=\"one\">Some text.<\/p>\n<p class=\"two\">Some more text.<\/p>\n<p class=\"three\">Even more text.<\/p>\nThere are two ways of achieving this affect. The first is by using advanced styling through\nCSS using WebKit features supported by some browsers, and then adding style rules to\ncreate the effect as close as possible in other browsers. The second is by creating a repeat-\nable gradient image. The first approach\u2019s reliance on WebKit provides support for Apple\nand Google products. For browsers that do not use WebKit, we have to add extra rules to\nachieve the same effect. This is a more advanced example as it requires knowledge of each\nbrowser\u2019s needs to create:\n<style>\n#ourBackground {\nbackground-color: #1a82f7;\nbackground: url(ourFallBackImage.png);\nbackground-repeat: repeat-x;\n\/* Safari 4-5, Chrome 1-9 *\/\nbackground: -webkit-gradient(linear, 0% 0%, 0% 100%,\nfrom(#1a82f7), to(#2F2727));\n\/* Safari 5.1, Chrome 10+ *\/\nbackground: -webkit-linear-gradient(top, #2F2727,\n#1a82f7);\n\/* Firefox 3.6+ *\/\nbackground: -moz-linear-gradient(top, #2F2727, #1a82f7);\n125 The Missing Link: An Introduction to Web Development and Programming Chapter 20\n\/* IE 10 *\/\nbackground: -ms-linear-gradient(top, #2F2727, #1a82f7);\n\/* Opera 11.10+ *\/\nbackground: -o-linear-gradient(top, #2F2727, #1a82f7);\n}\n<\/style>\n<div id=\"ourBackground\" width=\"300px\" height=\"300px\">\n<br\/>\nSome <br\/>\nText <br\/>\nHere <br\/>\n<br\/>\n<\/div>\nThis code should produce an almost identical image in every browser, depending on\nwhich rule(s) the browser is able to execute:\nThe first three lines of this style script\u2014\nbackground-color: #1a82f7;\nbackground: url(ourFallBackImage.png);\nbackground-repeat: repeat-x;\ndemonstrate how we create the gradient effect through an image. In this example, our-\nFallBackImage.png would be a very skinny (1 pixel) wide image as tall as we want our\ngradient to be. By repeating this image across the X axis (moving horizontally) the image\nwill fill the width of the parent object. By specifying the bottom-most pixel color from our\nimage as the background, the gradient will appear to fill the page. The balance of our rules\nin this example achieve the same result through CSS, but also provides more control over\nthe gradient without needing to create additional images.\nFloat\nFloating an object with CSS allows us to move it around within its parent object, ig-\nnoring (to some extent) the other items near it. Note that float is only for left\/right values,\nnot top\/bottom, even though their movement may feel that way as windows resize.\nWhen multiple objects in the same container have the same float style, they will line up\nnext to each other for as many as the container can fit. While this may sound confusing, we\nwill look at it without the terminology: If you have a big box, and that box has small boxes\nin it, those boxes will fit as many of themselves left-to-right in a row as they can. Any boxes\nthat do not fit will start a new \u201crow\u201d underneath.\n126 The Missing Link: An Introduction to Web Development and Programming Chapter 20\nThe use of float is a big help to responsive styling. Boxes of content that normally fit side\nby side on a larger screen will automatically create more \u201crows,\u201d with less items in each, to\naccommodate screens with less width. Create a page with the following code, and then play\naround with the size of your browser window to see the resizing in action:\n<style>\n.thumbnail {\nfloat:left;\nwidth:80px;\nheight:80px;\nmargin:5px;\n}\n<\/style>\n<div>\n<img class=\"thumbnail\" src=\"yourPictureHere.jpg\" >\n<img class=\"thumbnail\" src=\"yourPictureHere.jpg\" >\n<img class=\"thumbnail\" src=\"yourPictureHere.jpg\" >\n<img class=\"thumbnail\" src=\"yourPictureHere.jpg\" >\n<img class=\"thumbnail\" src=\"yourPictureHere.jpg\" >\n<img class=\"thumbnail\" src=\"yourPictureHere.jpg\" >\n<img class=\"thumbnail\" src=\"yourPictureHere.jpg\" >\n<img class=\"thumbnail\" src=\"yourPictureHere.jpg\" >\n<img class=\"thumbnail\" src=\"yourPictureHere.jpg\" >\n<img class=\"thumbnail\" src=\"yourPictureHere.jpg\" >\n<\/div>\nContent before and after a floated element will attempt to wrap around it. When we do\nnot want this to happen, we can add a rule to that element\u2019s style to clear the floating effect.\nTo do this, we would add clear: left; clear: right; or clear:both depending which sides we\nare concerned with.\nUSEFUL FEATURE\nSince relative refers to moving the position from where it would be based on all\nof the other elements and rules, we can use negative values to \u201cpull\u201d an element\nin that particular direction.\nPositioning\nWe can specify, with great control, exactly where our elements are ultimately located\nin our window. CSS allows us to modify location to such an extent that an items position\non the page can have no relation to its location in your code. Just as we have seen in many\nof our other rules, there are two methods to declaring position, fixed and relative. Here\nfixed elements specify the offset of pixels from a side or corner of the window, and relative\ndeclares that our values are moving the content from where it would have been if we had\nnot changed it.\n127 The Missing Link: An Introduction to Web Development and Programming Chapter 20\nHere is how we might take a heading and force it to an offset from the top left corner as\nan absolute, meaning it will sit there no matter what else is above, underneath, or around it:\n<style>\nh2 {\nposition:absolute;\nleft:50px;\ntop:100px;\n}\n<\/style>\n<h2>This is a heading with an absolute position<\/h2>\n<p>With absolute positioning, an element can be placed any-\nwhere on a page. The heading below is placed 50px from the\nleft of the page and 100px from the top of the page. As this\ntext continues, you will see that the heading sits on top of\nthe text as if it was not even there. As this text continues,\nyou will see that the heading sits on top of the text as if\nit was not even there. As this text continues, you will see\nthat the heading sits on top of the text as if it was not even\nthere .As this text continues, you will see that the heading\nsits on top of the text as if it was not even there. As this\ntext continues, you will see that the heading sits on top of\nthe text as if it was not even there. As this text continues,\nyou will see that the heading sits on top of the text as if\nit was not even there. As this text continues, you will see\nthat the heading sits on top of the text as if it was not even\nthere. As this text continues, you will see that the heading\nsits on top of the text as if it was not even there.<\/p>\nIf we wanted to move our heading relative to where it would normally have been posi-\ntioned (just above our paragraph) we change to relative and provide the offset values that\nwe want. Here, we will move it to the right, move it to the left, and show it as it was:\n<style>\nh2.pos_left {\nposition:relative;\nleft:-20px;\n}\n128 The Missing Link: An Introduction to Web Development and Programming Chapter 20\nh2.pos_right {\nposition:relative;\nleft:20px;\n}\n<\/style>\n<h2>This is a heading with no position<\/h2>\n<h2 class=\"pos_left\">This heading is moved left according to\nits normal position<\/h2>\n<h2 class=\"pos_right\">This heading is moved right according to\nits normal position<\/h2>\n<p>This is our paragraph that has a heading with relative\npositioning. Unless we put a negative bottom offset on our\nheading large enough to cover it, it will stay above the para-\ngraph this time. <\/p>\nZ-index\nJust when you thought we had escaped the terrors of precedence and inheritance, we\nhave another factor in our layering to consider. The z-index of an object determines its order\nin the stack of elements on a page. This is how we can control which items are depicted\nas on \u201ctop\u201d of another when they occupy the same portion of a page. While items are\nautomatically layered according to their location on the page and in our code, these can be\nmodified and overridden by a z-index to set the order we want. A larger value of a z-index\nforces an object \u201chigher\u201d on the page, or, puts it closer to the \u201ctop\u201d of all the elements you\nare looking at. A page background, for example, is usually the lowest level on your page.\nAs such, other content on your page sits on top of your background layer, and becomes the\nnext layer in the stack. A simple way to ensure important messages are never hidden behind\nsomething else is to assign them a z-index of an extremely large like 99999. You should only\nuse such a method for one or two critical items in a site. In our first example, we will see\n129 The Missing Link: An Introduction to Web Development and Programming Chapter 20\nan image with a negative index that ensures it is behind our text. Then we will change our\nindex value to make it higher, putting it on top of the text instead:\n<style>\nimg {\nposition:absolute;\nleft:0px;\ntop:0px;\nz-index:-1;\n}\n<\/style>\n<h1>Here is some text<\/h1>\n<img src=\"http:\/\/bglabs.evade.netdna-cdn.\ncom\/files\/clouds-seamless-background-824.jpg\"\nwidth=\"100\" height=\"100\" \/>\n<style>\nimg {\nposition:absolute;\nleft:0px;\ntop:0px;\nz-index:-1;\n}\n<\/style>\n<h1>Here is some text<\/h1>\n<img src=\"http:\/\/bglabs.evade.netdna-cdn.\ncom\/files\/clouds-seamless-background-824.jpg\"\nwidth=\"100\" height=\"100\" \/>\nMouse Cursor\nWhile this is not a regular feature in most sites, it can be an important player if you\nintend for your website to act as if it were an application.\nWe can add cursor rules to our selectors in order to change the appearance of the mouse\ncursor when that rule is active. Much the same as working in your operating system, we can\nselect the regular icon, wait (also called working, busy, thinking, etc.), text insert, a pointer, a\nquestion mark, and a crosshair. While most of these have little use in the average web page,\nthey come in handy when your end product is more application focused.\nI would strongly recommend judicious use of cursor changes, and be sure that your\nchanges are reverted back as soon as it is appropriate (i.e. change your waiting\/busy back\nas soon as an event is compete) as forgetting to reset can leave your user thinking your site\n130 The Missing Link: An Introduction to Web Development and Programming Chapter 20\n(or their system) is locked up or endlessly cycling. The full list of the available cursors is as\nfollows:\nTable 5 Pointer Styles\nValue Description\nauto (default) let the browser choose\ncrosshair Crosshair, or \u201cplus,\u201d symbol\ndefault The default cursor\ne-resize Shows resize to the right (note all resize values\nare compass combinations)\nhelp The help (question mark) icon\nmove Item can be moved\nn-resize Shows resize up\nne-resize Shows resize up and right\nnw-resize Shows resize up and left\npointer A pointer (arrow)\nprogress The busy symbol (be careful with this one!)\ns-resize Shows resize down\nse-resize Shows resize down and right\nsw-resize Shows resize down and left\ntext Text line (flashing or steady \u201cI\u201d)\nw-resize Shows resize left\nwait Shows busy, wait (be careful with this one!)\ninherit Inherits value from parent\nCursor styles can be applied when the element with a CSS attribute that affects the\ncursor is triggered. This is usually caused by hovering over the object, or when the user initi-\nates an action, in reaction to which we apply the new style using JavaScript. Note that user\ntriggered actions like busy icons normally need to stay \u201cbusy\u201d until the script is done. In this\ncase, the body tag should receive the attribute that affects the cursor so it continues to show\nas busy even if the user moves the mouse off of the button or other trigger that they used.\nLEARN MORE\nKeywords, search terms: css layout, page formatting, positioning, css layers\nLearnLayout: http:\/\/learnlayout.com\/toc.html\nFull layout example without tables: http:\/\/www.w3.org\/2002\/03\/csslayout-howto\nA set of basic layouts: http:\/\/blog.html.it\/layoutgala\/\n131 Chapter 21\nFont and Text Decoration\nWhen we began our testing site, we started using HTML tags wherever we could to pro-\nvide structure to our content with heading tags. We did this with the understanding that\nlater we would redefine those tags so our headings looked how we wanted them to. That\ntime has come. To start with some basics, we can use what we have already learned above\nby changing the color of the text and background for our heading tags:\n<style>\nh1{\ncolor:red;\nbackground-color:yellow;\n}\n<\/style>\n<h1>This is an H1 heading<\/h1>\nWe can also adjust our font family and size. You will notice that none of these changes\naffect anything outside of our headings. While you may see examples using the key terms\nfor size, ranging from \u201cextra extra small\u201d (xx-small) to \u201cextra extra large\u201d (xx-large), it is\na good idea to always be as specific as possible, as key terms can be treated differently\nbetween browsers. Instead, our examples will use percentage-based and fixed font sizes. To\ndo so, we will make our h1 content italicized and bring the size down to 20px tall:\n<style>\nh1{\ncolor:red;\nbackground-color:yellow;\nfont-style:italic;\nfont-size:20px;\n}\n<\/style>\n<h1>This is an H1 heading<\/h1>\n132 The Missing Link: An Introduction to Web Development and Programming Chapter 21\nThese are just a few examples of the full power of font through CSS. Some \u201cfancier\u201d\nmethods include effects like capitalizing, while simultaneously shrinking, your text\n(small-caps):\n<style>\nh1{\ncolor:red;\nbackground-color:yellow;\nfont-variant:small-caps;\n}\n<\/style>\n<h1>This is an H1 heading<\/h1>\nText Styles\nWhile our next example seems like it applies more to font than text, a good way to\nremember what noun you want to use in your rule is whether the affect changes the way\nthe letters appear or not. If they do, you probably want font. If not, then you probably want\ntext as in these next examples.\nFirst, we might want to add the lead spaces back into our paragraph\u2019s definition to\nmake them appear more like a written document. We can also move our text around in our\ncontaining element by setting it to left (default), right, center, or stretch to fit with justify:\n<style>\np {\ntext-indent:15px;\ntext-align:justify;\n}\n<\/style>\n<p>This is our paragraph for demonstrating some of the things\nwe can do to text and font through the use of CSS. This is our\nparagraph for demonstrating some of the things we can do to\ntext and font through the use of CSS. This is our paragraph\nfor demonstrating some of the things we can do to text and\nfont through the use of CSS. <\/p>\nIn addition to adjusting the font itself, we can decorate it with more affects like crossing\nit out, underlining it, or specifying that it should not be decorated, which is especially useful\nin eliminating the default lines under links:\n133 The Missing Link: An Introduction to Web Development and Programming Chapter 21\nADDITIONAL NOTES\nOrder is Important! Active style rules must come after hover rules, and hover\nmust come after link and visited! Since a link being hovered over can already have\nbeen visited, and the active link can be the one with hover on it, this ensures the\ncorrect order of application of style.\n<style>\n.strikeOut{text-\ndecoration:line-through;}\n.titles{text-\ndecoration:underline;}\na {text-decoration:none;}\n<\/style>\n<span class=\"strikeOut\">Text we\nwant crossed out<\/span><br\/>\n<span class=\"titles\">Hitchiker's\nGuide to the Galaxy<\/span><br\/>\n<span><a href=\"\">A link with no\nunderline<\/span>\nAnchors\nFollowing up on our ability to remove the underline from a link, there are some other\nspecial features we can control for our page anchors using CSS. By specifying link, visited,\nor hover in our link selector, we can control what happens before, during and after a link has\nbeen clicked. We can think of these like applying attributes in our HTML tags, except in\nCSS the special features are called pseudo-classes. Since we can specify any valid CSS rule,\nwe can have our links change colors, alter the backgrounds, change text and font properties,\nand everything else we will look at. To see some of the basics in action, we will change our\ntext colors for each action, and also our background color when we are hovering. Since you\nwill need to interact with the links to see these in action, we will forgo an image here and\nyou can test the code yourself:\n<style>\na:link {color:#FF0000; background-color:yellow;} \/* unvis-\nited link *\/\na:visited {color:#00FF00; background-color:orange;} \/*\nvisited link *\/\na:hover {color:#FF00FF; background-color:green;} \/* mouse\nover link *\/\na:active {color:#0000FF; background-color:white;} \/* se-\nlected link *\/\n<\/style>\n<a href=\"\" target=\"_blank\">Here is our fake link!<\/a>\n134 The Missing Link: An Introduction to Web Development and Programming Chapter 21\nVisually Impaired Considerations\nThe Internet is obviously a highly visual medium, and it is good practice to keep in\nmind how your site will be consumed by those with differing visual needs. Here are a few\ntechniques to be better prepared to serve a pleasant user experience.\nFirst is text size. Modern browsers support increasing and decreasing page text on their\nown (by taking advantage of user style CSS properties). While this reduces the need to\nprovide resizing style sheets for your users to select from, it does mean you should test\nincreasing and decreasing the font size on your site from a browser (usually ctrl and +, ctrl\nand -). This will allow you to see how far your font size can be pushed before it interferes\nwith your layout. You might need to adjust your style to accommodate these changes. How\nmany levels you wish to account for is up to you, but a general rule of thumb is your page\nshould support +3 with little disruption. You can of course offer special style sheets with\nlinks to enable them, giving you better control over the changes while still offering your\nusers an adaptable experience.\nSecond is the ability to offer your users a text only version of the page. This can be done\nby applying custom style sheets for actions like printing or different devices that fit under\nour responsive design, which we will look at in more detail next.\nNext is contrast. Color contrast between layered items like a link and a background\ncolor can be difficult for many users to distinguish and read. This is not to say that colors\nshould never be layered, but that the contrast between them should be easy to distinguish.\nA helpful way to test this is to view your site with your brightness and contrast settings\nturned up and down a bit on your monitor to be sure your site is still legible.\nColor combinations can also come into play, for example red and green, and green and\nblue. When these colors are used together, such as on a submit and cancel button that are\nnext to each other, users with certain forms of color blindness can find them hard to read if\nnot indistinguishable. A better approach is to use a cancel link of regular text next to a large\nsubmit button. This makes the options very visually distinct.\nFor example, the red\/green form of colorblindness (Deuterope) makes red and green\ncolors look more alike:\nIf you are counting on the color of the button to be an important indicator of function,\nthat affect has been lost. Even worse, if you have combined text and background colors that\ndo not lend themselves to readability for the colorblind, they may not be able to interpret\nthe button\u2019s function at all!\nThese considerations are just some examples of a much larger topic, which is acces-\nsibility. The W3C maintains a full list of items3 to be considered to improve your site for the\nwidest variety of users, and there are a number of sites that can scan your pages to provide\nnotes and tips that follow the W3C guide, including one from the W3C itself at http:\/\/\nvalidator.w3.org\/. Sites that pass the W3C validation can add \u201cstamps\u201d to their pages that\nidentify their efforts and support, and to indicate that those considerations have been made.\n3 http:\/\/www.w3.org\/standards\/webdesign\/accessibility\n135 Chapter 22\nResponsive Styling\nOur last rule concept of \u201cWhen\u201d can be applied to responsive design. It applies to rule\nconditions being, such as a user has a device with a mobile screen, or is trying to print our\npage. Since these are not within our default display, we may wish to remove elements or\nmodify our layout to support a small screen, or remove background images and colors to\nmake printed versions easier to read and less taxing on ink supplies.\nTo do this from within our style sheet, we need to specify the differences between our\nselectors that apply to these use cases. When we want to make style changes based on the\nuser\u2019s device, it is best to test for the existence of the feature in the browser, or for a specific\nfeature or setting of a device, instead of the name and version that it identifies itself as. For\nexample, if we consider the browser\u2019s current width, it does not matter what the device is.\nA user could be on a desktop but have the browser much smaller than full screen. We also\ndo not want to maintain a list in our code of every mobile phone size, especially when most\nof them fall within a limited range. By just checking the size, we can categorize the device\nand give it a best-guess-fit appearance.\nAnother argument for this approach is how the level of support for features changes\nboth as standards change and as browsers are updated. If we only check the browser name,\nand a newer release than we were aware of supports the feature we want, we would lose\nout on the feature we want to implement. Instead, we can try and \u201ctest load\u201d some of the\nfeatures we want, or include fall back rules (like we did in our gradient example) to give\nourselves the widest amount of support we can.\nTo test by feature or capability, we use the media queries feature of CSS. We will use\nscreen size as an example. While not a perfect science, there are roughly 4 basic screens to\nconsider, along with their average sizes:\n\u2022 Smart phones (portrait)\u2014320 pixels\n\u2022 Tablets (portrait)\u2014768 pixels\n\u2022 Tablets (landscape), netbooks\u20141024 pixels\n\u2022 Laptops, desktops\u20141024 or higher\nThis by no means captures every device or possible resolution. For example mini-tablets\n(or the trend of phablets\/oversized cell phones) can fall around the 480 pixel range. Whether\nyou want to support different layouts for these devices will determine if you need to con-\nsider more variety than the list above, but once we implement more responsive features you\nwill see how these devices will usually receive an acceptable viewing experience. Next we\nwill create new sections in our CSS that define what changes are necessary for those sizes.\n136 The Missing Link: An Introduction to Web Development and Programming Chapter 22\nSome browsers and devices, like Apple\u2019s Safari browser, will attempt to fit the entire page\ninto their device screen by reporting to be a full size device. To prevent this, we can add the\nfollowing meta tag to our HTML:\n<meta name=\"viewport\" content=\"width=device-width;\ninitial-scale=1.0\">\nThis line tells the browser to report its actual device width so we can provide the proper\nview.\nNext, we need to create a series of selectors that will test for our different scenarios.\nUsing media queries to guide our decision:\n@media only screen and (max-width: 959px) {}\n\/\/ Smaller than desktop\/laptop (tablets, netbooks)\n@media only screen and (min-width: 768px) and (max-width:\n959px) {} \/\/Portrait or landscape tablets, netbooks\n@media only screen and (max-width: 767px) {}\n\/\/ devices smaller than portrait tablets (mobile)\n@media only screen and (min-width: 480px) and (max-width:\n767px) {} \/\/ mobile landscape to tablet portrait\n@media only screen and (max-width: 479px) {}\n\/\/ mobile up to landscape mode\nIf you already have some CSS written, you can add these selectors below your existing\ncode. Any rules in your existing code that are not overwritten by one of these selectors will\nremain in use, and become your \u201cfall back\u201d rules. This is why we did not include a media\nquery for full size devices (although you could, if you wanted a different set of rules to be\nyour fall back, say to assume a smaller device instead of a full size device as your default\nstyle).\nWithin each of these new selectors is where we would override our \u201cnormal\u201d style to\nadjust our user experience. Anywhere we used floating divs will automatically adjust (within\ntheir parent container) as the window size changes. With these selectors, we can move\nother pieces of content around or even turn off some items that are unwieldy on smaller\ndevices. Larger ads may be too large in screen size and file size for easy consumption on a\nmobile device. To disable it, we add a rule to the media section for smaller devices that hides\nthat content. Imagine we have the following layout:\nLogo\nLink 1\nFlash ad An ad\nLink 2\nContent Another ad\nLink 3\nContact information\n137 The Missing Link: An Introduction to Web Development and Programming Chapter 22\nThis layout could be represented by the following HTML and CSS:\n<header><img src=\"ourlogo.png\"><\/header> <style>\n<div id=\"container\"> div{\n<div id=\"left\"> border-style:dashed;\n<ul> border-width:1px;\n<li><a href=\"\">Link 1<\/a><\/li> }\n<li><a href=\"\">Link 2<\/a><\/li> header{\n<li><a href=\"\">Link 3<\/a><\/li> background:url(ourlogo.png)\n<\/ul> no-repeat;\n<\/div> background-size:200px 100px;\n<div id=\"main\"> background-position:center;\n<div id=\"splash\">[flash with id height:100px;\n\"video\"]<\/div> }\n<div id=\"content\">Our text content #left{\nhere<\/div> min-width:100px;\n<\/div> max-width:150px;\n<div id=\"right\"> float:left;\n<div class=\"ad\">an ad here<\/div> }\n<div class=\"ad\">another ad <\/div> #main{\n<\/div> float:left;\n<br style=\"clear: left;\" \/> }\n<\/div> #right{\n<footer>Contact Information<\/footer> min-width:100px;\nmax-width:150px;\nfloat:left;\n}\n<\/style>\nWhich, in turn, could generate something like this once we add actual content:\nSince we are using floated divs, the site will (eventually) conform to a top to bottom\nformat that retains all content when it cannot fit across the display it is on. This is because\n138 The Missing Link: An Introduction to Web Development and Programming Chapter 22\nfloat will place the elements in a line when the container is wide enough to hold them.\nWhen content is wider than the row, it is wrapped down to a new line. The max and min\nwidths will help to ensure that content is not clipped, but while this helps us in some cases,\nthe bulky flash video and large logo reduce the user\u2019s ability to browse from a mobile device.\nTo adapt this example for users on smaller screens, we want to preserve all of the pertinent\ncontent while also preserving a good user experience. To do this, we will hide the video, put\nour links at the top, and move our ads to the bottom, all by adding media queries to our\nCSS. We will also opt for a smaller version of our logo. Since our current design was deemed\nflexible enough for other devices, we will just add the CSS selector for small screens:\n<header><img src=\"ourlogo.png\"><\/header>\n<div id=\"container\">\n<div id=\"left\">\n<ul>\n<li><a href=\"\">Link 1<\/a><\/li>\n<li><a href=\"\">Link 2<\/a><\/li>\n<li><a href=\"\">Link 3<\/a><\/li>\n<\/ul>\n<\/div>\n<div id=\"main\">\n<div id=\"splash\">[flash width id \"video\"]<\/div>\n<div id=\"content\">Our text content here<\/div>\n<\/div>\n<div id=\"right\">\n<div class=\"ad\">an ad here<\/div>\n<div class=\"ad\">another ad <\/div>\n<\/div>\n<br style=\"clear: left;\" \/>\n<\/div>\n<footer>Contact Information<\/footer>\n<style>\ndiv{\nborder-style:dashed;\nborder-width: 1px;\n}\nheader{\nbackground:url(ourlogo.png) no-repeat;\nbackground-size:200px 100px;\nbackground-position:center;\nheight:100px;\n}\n#left{\nmin-width:100px;\nmax-width:150px;\nfloat:left;\n}\n#main{\nfloat:left;\n139 The Missing Link: An Introduction to Web Development and Programming Chapter 22\n}\n#right{\nmin-width:100px;\nmax-width:150px;\nfloat:left;\n}\n@media only screen and (max-width: 479px){\nvideo{ display:none; }\n#left{\nwidth:100%;\nfloat:none;\n}\n#main{\nwidth:100%;\nfloat:none;\n}\n#right{\nwidth:100%;\nfloat:none;\n}\n#header{\nbackground:url(http:\/\/www.vectortemplates.com\/raster\/\nbatman-logo-big.gif) no-repeat;\nbackground-size:100px 60px;\nbackground-position:center;\nheight:100px;\n}\n}\n<\/style>\nNow, our floats and min\/max rules will do the best they can until the device screen is less\nthan 480 pixels. At that point our special style will kick in for mobile devices, putting our\ndivs in a vertical row, hiding and resizing content, and making the divs as wide as the screen.\nOur site, without changing any HTML, will now look like the following:\n140 The Missing Link: An Introduction to Web Development and Programming Chapter 22\nWe can also use media queries to set styling for when a user prints our page, without\nrequiring them to click a link to a special version (selecting print from a browser menu\nwould trigger this style) by using @media print{}.\nThe full list of options for @media are as follows:\nTable 6 Media Types\nName Description\nall All devices.\naural Text-to-speech readers.\nbraille Tactile responsive devices.\nembossed Printing to braille printers.\nhandheld Small portable devices.\nprint Print view.\nprojection Slides and presentations.\nscreen Computer screens (regular size\nand up).\ntty Teletype terminals.\ntv TV displays.\n141 Section 2 Assessments\nFor each of these assignment, complete each bulleted step and submit all files (HTML, CSS,\nscripts, images, etc.) necessary by zipping and submitting your assignment folder.\nYour First Page:\n\u2022 Your name, the course, and semester commented at the top of the file\n\u2022 Create body, header, and footer sections\n\u2022 Create a div named content between your header and footer\n\u2022 Set a page title that displays in the browser tab\n\u2022 Place an address in an address tag in your footer\n\u2022 Your name at the top of the page as an <h1> heading in your header\n\u2022 Add a few paragraphs about yourself to your content div\n\u2022 Add a list of hobbies or interest displayed as an HTML unordered list to\ncontent\n\u2022 Link at least two of your hobbies or interests to websites related to those\ninterests\nFun with Media\n\u2022 Your name, the course, and semester commented at the top of the file\n\u2022 One image as part of your page\n\u2022 A short audio clip (or link to available audio filand player\n\u2022 A short video clip (or link to available videand player\n\u2022 Set both audio and video clips to have controls and not play automatically\n\u2022 Give your video clip a placeholder image\nTables on Chairs\n\u2022 Recreate the following table in HTML\n\u2022 Use style attributes to set cell colors as needed\n\u2022 Use the caption tag to label your table\n142 The Missing Link: An Introduction to Web Development and Programming Assessments\nProduction Levels for Chairs This Week:\nMonday Tuesday Wednesday Thursday Friday Total\nStools 5 5 5 (quota met) 15\nRolling (out of materials) 10 15 25\nStandard Leg 4 8 12 4 28\nRegistration Form\n\u2022 Create a form with an action attribute of post\n\u2022 Give it the following fields, and a submit button:\n\u2022 First Name, Last Name\n\u2022 Email Address, Email Address Again\n\u2022 Age\n\u2022 A \u201cPlan\u201d select box that contains Basic, Premium, Titanium options\n\u2022 A checkbox asking if the user wishes to be added to a mailing list\n\u2022 A shirt size radio set that has values of Small, Medium, Large\nAdding Some Style\n\u2022 Using CSS rules, modify your \u201cYour First Page\u201d submission to include:\n\u2022 A background image that repeats to fill the screen\n\u2022 A background color on your content div\n\u2022 Modifying H1 to be 32 point and a different color from default\n\u2022 Split your About Me and Hobbies sections into separate divs within Content\n\u2022 Give your new divs a fixed width of 400 each and set them to sit side by side\nResponsive Styling\n\u2022 Add rules to your CSS to achieve the following:\n\u2022 Allow divs in your content section to shrink to 200px\n\u2022 Vertically align your content divs for screens smaller than the typical\ntablet\n\u2022 Shrink your h1 to fit on one line when on tablets and phones if needed\n\u2022 Only show the first paragraph of your About Me section on phones\nDiscussion \/ Written Response\n1. Explain the W3C\u2019s stated reasoning as to why it was decided to stop moving all\nof CSS through version numbers as one cohesive unit. Do you agree or disagree\n143 The Missing Link: An Introduction to Web Development and Programming Assessments\nwith this position, and why?\n2. Discuss pros and cons of creating web applications using HTML5, CSS3, and\nother languages against creating the same application for each device\u2019s platform\n(i.e. Apple\u2019 iTunes, Google Play, Windows Store).\n3. Discuss how XML differs from HTML, and where it is commonly used today.\n4. Why is HTML considered a document markup languages as opposed to a\nprogramming language?\nQuestions\nTAKE THIS QUIZ ONLINE!\n1. What does HTML stand for?\na. Hyperlinks and Text Markup Language\nb. Hyper Text Markup Language\nc. Home Tool Markup Language\nd. Hyper Text Manipulation Language\n2. Choose the correct HTML tag for the largest heading.\na. <heading>\nb. <h1>\nc. <header>\nd. <h6>\n3. Which of these is a properly formatted link?\na. <a link=\"www.google.com\">Link<\/a>\nb. <a href=\"www.google.com\"\/>\nc. <link location=\"www.google.com\">Link<\/a>\nd. <a href=\"www.google.com\">Link<\/a>\n4. How can you open a link in a new tab\/browser window?\na. <a href=\"url\" target=\"_blank\">\nb. <a href=\"url\" target=\"new\">\nc. <a href=\"url\" new>\n5. Which doctype is correct for HTML5?\na. <!DOCTYPE HTML5>\nb. <!DOCTYPE html>\n144 The Missing Link: An Introduction to Web Development and Programming Assessments\nc. <!DOCTYPE HTML PUBLIC \"-\/\/W3C\/\/DTD HTML 5.0\/\/EN\"\n\"http:\/\/www.w3.org\/TR\/html5\/strict.dtd\">\n6. What is the correct HTML for making a drop-down list?\na. <select>\nb. <input type=\"dropdown\">\nc. <input type=\"list\">\nd. <list>\n7. Which of the following is correct?\na. HTML is used for exchanging data, XML is not.\nb. XML is used for exchanging data, HTML is not.\nc. HTML can have user defined tags, XML cannot.\nd. Both b and c above.\n8. What is the correct HTML5 element for playing video files?\na. <movie>\nb. <video>\nc. <source>\nd. None of the above\n9. What is the correct HTML for inserting an image?\na. <img src=\"image.gif\" alt=\"MyImage\">\nb. <image src=\"image.gif\" alt=\"MyImage\">\nc. <img href=\"image.gif\" alt=\"MyImage\">\nd. <img alt=\"MyImage\">image.gif<\/img>\n10. The <canvas> element in HTML5 is used to:\na. Display database records\nb. Manipulate data in MySQL\nc. Create draggable elements\nd. Draw graphics\n11. In HTML5, which attribute is used to specify that an input field must be filled out?\na. Formvalidate\nb. Validate\nc. placeholder\nd. required\n12. Which HTML5 element is used to display a measurement within a fixed range?\na. <gauge>\nb. <range>\nc. <measure>\n145 The Missing Link: An Introduction to Web Development and Programming Assessments\nd. <meter>\n13. What does CSS stand for?\na. Cross-site scripting\nb. Cascading Style Sheets\nc. Creative style sheets\nd. Compiled site styles\n14. Given the following, what value does the left margin have?: margin: 10px 5px 20px\n15px;\na. 10px\nb. 5px\nc. 20px\nd. 15px\n15. Which style rule overrides the other?\na. Class\nb. Id\n16. What property creates space between HTML elements?\na. Margin\nb. Padding\nc. Spacing\nd. Float\n17. What property creates space within an element?\na. Margin\nb. Padding\nc. Spacing\nd. Float\n18. Which set of tags are used to define CSS within the page?\na. <style type=\"css\"><\/style>\nb. <class type=\"text\/css\"><\/class>\nc. <inline css><\/inline>\nd. None of the above\n19. Which of these is the correct way to define a hover state for an anchor tag?\na. :onHover\nb. :mouseOver\nc. :hover\nd. None of These\n146 The Missing Link: An Introduction to Web Development and Programming Assessments\n20. Which property of a position rule will force content to a position regardless of other\nelements?\na. Fixed\nb. Absolute\nc. Relative\nd. Strict\n21. Responsive styling allows us to support many devices with one style sheet.\na. True\nb. False\n22. Which of the following is the best fit for defining styles on small mobile devices?\na. @media only screen and (max-width: 479p)\nb. @media only screen and (max-width: 769p)\nc. @media only screen and (max-width: 120p)\nCHECK YOUR ANSWERS\n147 Section 3:\nScripting Languages\nSection Contents:\nServer-Side and Client-Side Scripting\nCreating PHP Files\nPHP Errors\nPHP Output\nData Storage\nData Manipulation\nEmail\nFile Interaction\nStructures\nFunctions\nObjects and Classes\nJavaScript Syntax\nJavaScript Examples\njQuery\nLearning Objectives:\nBy the end of this section, you should be able to demonstrate:\n1. An ability to create PHP scripts\n2. An ability to receive, store, and manipulate user data\n3. An ability to interact with files\n4. The ability to create and send basic email\n5. The ability to use logic and control structures in scripts\n6. The ability to create functions and simple classes\n7. Altering a page using JavaScript and jQuery\n148 Chapter 23\nServer-Side and\nClient-Side Scripting\nHTTP Scripting\nDatabase\nServer Language\nOperating System (Linux,\nWindows, Mac)\nHardware\nPHP\nCreated in 1994 at the hands of Rasmus Lerdorf, PHP began as a set of CGI scripts\ndeveloped to track views of his resume online. Rasmus continued adding scripts to his\ncollection so he could do more with his websites. Over time, some friends began to use it\nas well. By June of 1995, enough of a framework was in place that Rasmus decided to make\nPHP public. As others embraced it, and began to submit their own work, PHP grew. By\nversion 3 it was decided that the time had come for a more professional name. In homage\nto its original name of Personal Home Page, the PHP acronym was kept, but was changed\nto a recursive representation of \u201chypertext preprocessor.\u201d PHP was now an independent\nlanguage, with object-oriented capabilities, high extensibility, and had a growing following.\nAs the community grew, the core team of Rasmus, Andi Gutmans and Zeev Suraski\ncontinued their work. Gutmans and Suraski rewrote the core of the engine, and dubbed\nversion 4 Zend, a blend of Gutmans and Suraski\u2019s first names. Now with dozens of devel-\nopers and even more contributors, PHP has grown to version 5, and is installed on tens\nof millions of servers around the world. It continues to rank as one of the top ten web\ndevelopment languages.\nWith strong semblance to languages like C++ and Perl, the goal was to create a language\nthat allowed fast development of dynamic pages. It is a server-side language, which means\n149 The Missing Link: An Introduction to Web Development and Programming Chapter 23\nit runs on the server before anything is sent to the user\u2019s computer. This is in contrast to\nclient-side languages, where the code is sent to the user\u2019s computer to be processed locally\nwith languages like JavaScript.\nSome advantages to server-side languages are that the code is hidden from the user,\nand secures what is taking place in the background. It also reduces the work load that the\nuser\u2019s computer is burdened with. This, however, also means the server must be powerful\nenough to support the number of users requesting pages, as it must bear the brunt of the\ncomputation.\nPHP is a parsing engine, which means it examines the php file, performs any php related\ntasks it finds, and passes the result to the web server. This makes it an interpreted language,\nas the output and script are run on demand, as opposed to a compiled language where the\ncode is transformed and saved into a runnable form.\nJavaScript\nJavaScript is a client-side script, meaning the browser processes the code instead of the\nweb server. Client-side scripts are commonly used when we want to validate data before\nsending it to the web server, adjusting the interface in response to user feedback, and for\nimplementing other advanced features. Since JavaScript is part of the browser, it can be\nrun without a web server present. If the computer is slow or busy, the performance of our\ncode may be reduced. If JavaScript is disabled (less of a concern today than just a few years\nago) then our script will not run. This being said, this is less of an issue now, and JavaScript\ncan reduce the number of communications to a server, reducing transmission time and\nimproving performance.\nJavaScript will be our client-side scripting example. As JavaScript can be handled within\nthe browser, we can capitalize on it to validate user data, react to user actions that affect ap-\npearance, and interact with the user\u2019s computer, without requiring the involvement of their\ninternet connection or our server. Like CSS, JavaScript is not a fully formed language that\ncan stand on its own. Like PHP and Java, JavaScript is an object-oriented language that is\nmulti-platform. Unlike Java (but still like PHP) it is a loose, typed language.\nThere is a common misconception that Java and JavaScript are the same thing. Review\nsome of the larger differences between them below if you are already familiar with Java.\nTable 7 Java vs JavaScript\nJavaScript Java\nObject-oriented. No distinction between types Class-based. Objects are divided into classes\nof objects. Inheritance is through the prototype and instances with all inheritance through the\nmechanism, and properties and methods can be class hierarchy. Classes and instances cannot\nadded to any object dynamically. have properties or methods added dynamically.\nVariable data types are not declared (dynamic Variable data types must be declared (static\ntyping). typing).\nCannot automatically write to hard disk. Cannot automatically write to hard disk.\n150 The Missing Link: An Introduction to Web Development and Programming Chapter 23\nWriting JavaScript code is a lot like writing PHP. Both languages use many of the same\nconcepts and can look very similar in terms of code. Since we will have covered many of\nthe foundational concepts JavaScript uses in the PHP section, we will focus on differences\nbetween JavaScript and PHP. We will look at examples that highlight how JavaScript can\nbe integrated with other languages, like responding to event driven actions to modify our\npages in real time. Bear in mind that the power of the language can be used to perform\nmany of the same tasks we have examined already in PHP.\nA best practice for using JavaScript in your site is to create your entire site without\nit, and then add it where it can improve the user experience (a process called progressive\nenhancement). This will help ensure that your site will still operate (albeit maybe not as\nattractively) if JavaScript is not present.\n151 Chapter 24\nCreating PHP Files\nLike the HTML and CSS files we have already created, PHP also uses a special file format\nto identify its contents. When you want to use PHP in a file, even if it was already .htm or\n.html, you will need to set (or create) the file format as .php.\nIf you do not have access to a server with PHP, you can follow along this section of the\ntext by using http:\/\/writecodeonline.com\/php\/ to try the examples and write your own\ncode.\nADDITIONAL NOTES\nTechnically, you could insert PHP code into HTML files (or other formats) and\nhave it run, by changing settings on your server for how it serves and interacts\nwith the file extension in question. You could also do the same with HTML in a\ntext file, or other combinations. The drawback is this could also affect other files\non your server, and makes your site less portable to other servers.\nLong, Short Tags\nAs you begin to work with PHP, you will undoubtedly see code examples that begin with\n<?php or <?, while both will end with ?>. These are tags, just like in HTML, and are used to\nmark the start and end of a section of code that contains PHP (we could even use <script\nlanguage=\u2018php\u2019><\/script>). PHP can be interspersed, or cohabitate, in a web page among\nHTML and other languages like JavaScript. The difference between the two opening tags\nis that <?php is longhand writing, while <? Is considered shorthand. By default, all PHP\ncapable servers will recognize longhand while shorthand is an option that must be enabled.\nFor best support of your code, and to better recognize what language is being used, always\nuse longhand when writing your code.\n152 Chapter 25\nPHP Errors\nBefore starting, an understanding of errors will help you quickly recognize where problems\nexist (and if they are truly problems) in your code, which will lend to faster debugging and\nunderstanding where to look for problems.\nTo start with, we can tell PHP what kind of errors we want to know about before we\neven run a script. While the full list of supported reporting levels (see Table 8 PHP Errors)\ncovers a variety of concerns, there are a few (notices, errors, and warnings) that cover what\nwe will run into most often.\nNotices\nNotice: Undefined index: message in \/home\/example.php on line 9\nNotices, technically, are not errors. They will notify us of things that we may have in-\ntended or wanted, but that PHP can do without. For example, using a variable on a page\nwithout declaring it first will generate a notice. PHP will create the variable as soon as it is\ncalled, even if we did not declare it, without creating a formal error (other languages would\nconsider this an error worthy of breaking execution). By notifying us but still continuing, if\nwe had already declared or used the variable elsewhere, this notice would indicate a spelling\nerror or mistyped variable name.\nWarnings\nWarning: main(): Failed opening 'noFileHere.php' for inclusion\non line 2\nWarnings still will not stop our script from running, but indicate that something has\ngone wrong during execution of a script. Attempting to use include() on a file that does not\nexist would create a warning.\nErrors\nPHP Fatal error: Undefined class constant 'MYSQL_ATTR_USE_BUFF-\nERED_QUERY' in database.inc on line 43\n153 The Missing Link: An Introduction to Web Development and Programming Chapter 25\nFinally, errors are unrecoverable (execution will stop). Typical causes of errors are parsing\nerrors like missing semi-colons, function, or class definitions, or other problems the engine\ndoes not know how to resolve. If we used require() on a file instead of include, an error\nwould be triggered instead.\nMost errors that we will receive are parsing errors. They are typically problems caused by\nwhat we wrote in our code, like missing brackets, semi-colons, or typos. When we receive\nan error, the compiler will tell us what problem it discovered and where. Keep in mind that\nwe are being told where an error was found not necessary where the source of the problem\nexists. For example, a missing semi colon or bracket may have occurred several lines before\nit created a problems for the compiler.\nThe other category of errors we will run into are logical. These are errors caused by how\nwe wrote our code, and can be much more frustrating. Logical errors are usually discovered\nwhen the script does not behave as expected. The source can be mistakes in what code we\nrun in different parts of an if\/then statement or even an error in math used in a function\nthat gives us the wrong solution.\nResolving errors can be something of an art form. With parse errors, the engine can\nguide you to the area to help you begin looking for the source of the error. Logical errors\ncan usually be resolved by adding extra, temporary outputs to follow the value of a variable\nor trace execution of logic statements through a script. This technique can help you find\nwhere what happens differs from what you expect. Unit testing your functions will go a long\nway toward preventing many of these issues, as does iterative programming.\nTo dictate what errors we do and do not wish to see in our script output, we will use the\nerror_reporting() function. By passing one or more of the constants below, we control what\nis reported. For example, maybe we want information on warnings and errors, but do not\ncare about notices. To do this, we can call error_reporting(E_WARNING | E_ERROR).\nThe pipe symbol ( | )works as an or in this case. If we want to see everything except notices\nwe can use E_ALL but leave out notices with the carrot ( ^ ) character to indicate an ex-\nception with error_reporting(E_ALL ^ E_NOTICE). It is good practice to set your error\nreporting level close to the top of your script, so you can easily find it and change settings:\n<?php\nerror_reporting(E_WARNING | E_ERROR);\n\/\/This next line will trigger a notice that the variable does\nnot exist, but we will not see it\necho $test;\n?>\n<?php\nerror_reporting(E_ALL);\n\/\/This time we will see the notice\necho $test;\n?>\nNotice: Undefined variable: test on line 3\nYou may be wondering why we would selectively show or hide errors; when we are\ndeveloping our code, the system errors we will need to see in order to debug are different\nfrom what we would want end users to see for a system in production. Revealing, verbatim,\nthe system generated error message is not only confusing to non-programmers but can\n154 The Missing Link: An Introduction to Web Development and Programming Chapter 25\nexpose sensitive information to those with malicious intent. Instead, we would provide a\nmessage we chose in the error\u2019s place. Take a look at the full list of error reporting levels:\nTable 8 PHP Errors\nConstant Description\nE_ERROR Fatal run-time errors. These indicate errors that cannot be recovered from, such as a memory alloca-\ntion problem. Execution of the script is halted.\nE_WARNING Run-time warnings (non-fatal errors). Execution of the script is not halted.\nE_PARSE Compile-time parse errors. Parse errors should only be generated by the parser.\nE_NOTICE Run-time notices. Indicate that the script encountered something that could indicate an error, but\ncould also happen in the normal course of running a script.\nE_CORE_ERROR Fatal errors that occur during PHP\u2019s initial startup. This is like an E_ERROR, except it is generated\nby the core of PHP.\nE_CORE_WARNING Warnings (non-fatal errors) that occur during PHP\u2019s initial startup. This is like an E_WARNING,\nexcept it is generated by the core of PHP.\nE_COMPILE_ERROR Fatal compile-time errors. This is like an E_ERROR, except it is generated by the Zend Scripting\nEngine.\nE_COMPILE_ Compile-time warnings (non-fatal errors). This is like an E_WARNING, except it is generated by\nWARNING the Zend Scripting Engine.\nE_USER_ERROR User-generated error message. This is like an E_ERROR, except it is generated in PHP code by\nusing the PHP function trigger_error().\nE_USER_WARNING User-generated warning message. This is like an E_WARNING, except it is generated in PHP code\nby using the PHP function trigger_error().\nE_USER_NOTICE User-generated notice message. This is like an E_NOTICE, except it is generated in PHP code by\nusing the PHP function trigger_error().\nE_STRICT Enable to have PHP suggest changes to your code which will ensure the best interoperability and\nforward compatibility of your code.\nE_RECOVERABLE_ Catchable fatal error. It indicates that a probably dangerous error occurred, but did not leave the\nERROR Engine in an unstable state. If the error is not caught by a user defined handle (see also set_error_\nhandler()), the application aborts as it was an E_ERROR.\nE_DEPRECATED Run-time notices. Enable this to receive warnings about code that will not work in future versions.\nE_USER_DEPRECATED User-generated warning message. This is like an E_DEPRECATED, except it is generated in PHP\ncode by using the PHP function trigger_error().\nE_ALL All errors and warnings, as supported, except of level E_STRICT prior to PHP 5.4.0.\nAdapted from php.net, Creative Commons 3.0 Attribution Unported\n155 Chapter 26\nPHP Output\nPrint, Echo\nPHP allows for two methods of sending output to the screen. One is called print, the other\necho. While they provide the same functionality, echo is a construct (it will be treated as a\ncommand), where print is an expression (it will be evaluated and will return a value). When\nwe use print or echo in PHP, both can be used as constructs (called without parenthesis\nafter them, as if they are a command) or as a function (called with parenthesis like a function\ncall). Print will return a 1 as a result when it is used, while echo will not return anything.\nUltimately, the differences between print and echo are negligible. Debates over which\nto use range from consistency of verbiage, speed of processing (print technically takes four\noperating commands to echo\u2019s three as it has one more step of returning the 1), and obscure\nexamples of where one might win out over the other.\nFor our examination here, use what you like. In extreme examples, a high volume of\nechos will be faster than a high volume of print statements, but there are far more impor-\ntant places to consider refining code for speed than any gains you might find here.\nTo send output to the screen, we can start with the famous example of Hello, World!\n<?php echo \"Hello, World!\"; ?>\nWe can also wrap the string in parenthesis as we discussed above if you feel it makes\nthings more clear:\n<?php echo (\"Hello, World!\"); ?>\nCongratulations, you have just created your first PHP web page!\nWe can get a little more in depth before moving on with another example. When func-\ntions return something to us, we usually save that value and then take action on it. We can\nalso send the output directly to the screen if we know it is formatted how we want to view\nit. The phpinfo() function for example gives us access to all the details about our server. If\nwe use it without requesting a specific piece of information, it defaults to returning a full\nweb page with all the details about our server. We can see this by using the following:\n<?php echo phpinfo(); ?>\nThis screen shot is just a portion of the entire response, which is usually several pages\nlong. Keep this function in mind, as it is a convenient way of finding the settings of your\nserver without digging into your config files.\n156 The Missing Link: An Introduction to Web Development and Programming Chapter 26\nLEARN MORE\nKeywords, search terms: Troubleshooting php, common programming errors\nCommon Programming Mistakes: http:\/\/www.dummies.com\/how-to\/content\/troubleshooting-\na-php-script.html\nDebugging with Print and Eclipse: http:\/\/www.ibm.com\/developerworks\/library\/os-debug\/\n157 Chapter 27\nData Storage\nVariables\nVariables are created and used when our script runs in order to create references to (store\ncopies of) pieces of information that are needed for a short span of time, or are expected to\nchange value as the script runs. They contain a reference to a place in the server\u2019s memory\nwhere the value is stored, not the actual content. This tells the parser where to look to\nfind the information we want. PHP is a loosely typed language, which means we do not\nhave to tell the computer what type of information we are going to keep in a variable. In\nstrictly typed languages, we would have to specify if the variable was going to be an integer,\nstring, float, or other option supported by the language in use. Trying to store a different\ntype of information than declared in a variable would result in an error. PHP will not give\nus an error or check this by default. This eliminates the need to declare variables, but this\ncan result in some confusing bugs in your code. Those of you with experience in a strictly\ntyped language like C++ will be happy to note that although not required, PHP will allow\ndeclarations, and will then give errors upon their misuse.\nVariables in PHP must start with a dollar sign ($), and can be followed by an underscore\n(_) or letter (a through z, both upper and lower case). Variables cannot start with a number,\nbut may contain numbers after an underscore or at least one letter; they also cannot contain\na space, as spaces are used to determine where commands, variables, and other elements\nstart and end. See the table below for examples:\nTable 9 PHP Variable Naming\nGOOD BAD\n$_first $1st\n$LastName $(first)name\n$standard_tax_rate $first name\n$last4SSN $final$\n158 The Missing Link: An Introduction to Web Development and Programming Chapter 27\n\u2022 Booleans Can have a value of 0 or 1\n\u2022 Integers Whole numbers (1, 3, 20, etc.)\n\u2022 Floating point numbers Decimal values (1.33, 34.2325)\n\u2022 Strings Contain any number of characters\n\u2022 Arrays Structured lists of information\n\u2022 Objects Collections of related variables and functions\n\u2022 Resources Special variables that hold reference points to things like files\n\u2022 NULL An empty (unused or unset) variable\n\u2022 Callbacks A mechanism to reference a function declared elsewhere\nIn the scope of this text we will cover most of these items with exception to callbacks,\nand with only a cursory examination of objects. If you plan to focus on application develop-\nment, this would be a good area to continue studying. For most web development, there is\nlittle call for robust object-oriented programming.\nTo create a variable in PHP, we first give the name we wish to use, followed by what we\nwant to assign to the variable. In PHP, the equal sign (=) is used to assign what is on the\nright hand side to what is on the left hand side (we will see how to check login statements\nlater on). To create a variable called ourString with the value of Hello World, we would\nenter the following:\n$ourString = 'Hello World';\nWe can now refer to $ourString in one or more places of our code in order to access the\nstring Hello World and use it or modify it.\nYou might notice the semi-colon (;) at the end of the line. Semi-colons are used to tell\nthe interpreter where a statement ends, and where the next one begins. They are easy to\nforget! If you see a syntax error, you will want to look at the line before the error to see if a\nsemi-colon is missing.\nPHP also maintains some variables of its own, called predefined variables. These start\nwith underscores, and will hold certain types of values for us (avoiding the use of under-\nscores at the start of your variables will help avoid colliding with these reserved variables).\nSeveral of these variables ($_GET, $_POST and $_FILES) will hold items a user has\ntyped or submitted using forms. $_COOKIE and $_SESSION are used to hold informa-\ntion throughout a user\u2019s visit, and $_ENV holds information about the server.\nIncrementing Methods\nUntil now, we have been using the equal sign strictly for assigning strings to variables.\nWe can also use some short hand methods of modifying numerical variables within our\ncode. For example, adding 1 to the variable $counter can be done with:\n$counter = $counter + 1;\nBut we can shorten that by using the \u201cplus equal\u201d:\n$counter +=1;\nOr if we only need to add 1, the \u201cplus plus\u201d:\n$counter++;\n159 The Missing Link: An Introduction to Web Development and Programming Chapter 27\nIn these example, each one would add 1 to the counter. In the first two examples, we\ncould add more than one, or perform a calculation to be added. We can also perform the\nopposite calculation, in that we can subtract and assign a given number as well by using -=\nor --. Where and how you choose to embrace these is up to you, but you should be familiar\nwith each form in order to fully understand any code you are examining.\nStrings\nIn our first echo examples, we printed a string to the screen. Strings are a type of variable\nthat hold, as seems obvious, strings of words. Full sentences can be stored in one variable\nname, or can be built by combining other variables. Manipulating strings in PHP can be\ndone through a number of functions, which can complete tasks like finding and replacing\nwords, breaking strings apart, capitalizing one or all words, and a number of other useful\ntasks.\nStrings can be used to create output that the user reads, generate part or all of the\nHTML code for a page to display, and even commands that can be passed to other lan-\nguages to direct their operation.\nSingle, Double Quotes\nUntil now, when we have used strings, they have been double quoted. PHP actually\nlets us use both single and double quotes when defining our strings to support different\nfunctions. There is an important difference between the two that we need to keep in mind.\nSingle quoted strings are treated by the interpreter as plain text, meaning the output to\nthe screen will be exactly what is in quotes. Double quoted strings will be examined by\nthe interpreter for anything that can be processed by PHP, which means items like special\ncharacters and variables will be replaced with what they represent before the output is\nsent to the screen. For example, if we set a variable named string to Hello and use it in our\noutput, single quotes will ignore it while double quotes will process it:\n$string = \"Hello\"; \/\/ The quotes we use here do not matter for\nthis example\necho \"$string there\";\necho '$string there';\nHello there\n$string there\nEscaping\nEscape characters are symbols with special, secondary meaning when coupled with the\nlanguage\u2019s escaping method. We can indicate that we want a new line in a text file by using\n\\n. In this example, n is not \u201cjust an n,\u201d it represents that we want a newline because it is\npreceded by a backslash, PHP\u2019s escaping character. In PHP, escape characters are com-\nmonly used in double-quoted strings, so we can include special characters (single quoted\nstring will ignore this, just like other PHP commands, variables, and the like).\nA helpful way to think about the escape character is that it \u201creverses\u201d the character or\nsymbol that comes after it. If it precedes a letter, then it is supposed to do something, not\n160 The Missing Link: An Introduction to Web Development and Programming Chapter 27\ndisplay the letter. If it precedes a symbol, the symbol has a special value in PHP, but we\nactually want to see the character.\nTable 10 Character Escaping\n\\\u201d Print the double quote, not use it as a string opening or closing marker\n\\\u2019 Print the single quote, not use it as a string opening or closing marker\n\\n Print a new line character (for text or output files, not on the screen)\n\\t Print a tab character\n\\r Print a carriage return (for text or output files, not on the screen)\n\\$ Print the next character as a dollar sign, not as part of a variable\n\\\\ Print the next character as a backslash, not an escape character\nWriting $string = \u201cI want to spend $5.00\u201d; would result in a name error. Instead, we\ncan use $string= \u201cI want to spend \\$5.00\u201d; to achieve the output we are looking for. If we\nwanted to use the backslash, we could write a folder location as $address = \u201cc:\\\\www\\\\\nourfolder\\\\sometext.txt\u201d;. While we could more easily do this with single quotes as $ad-\ndress = \u2018c:\\www\\ourfolder\\sometext.txt\u2019; we would need to append any variables we wanted\nto reference into the string that is single quoted.\nConstants\nSometimes we need to store a piece of information, but we do not want it to change\nwhile our script is running. To do this, we can create a constant\u2014essentially, a variable that\nwe are not allowed to change. Creating a constant is done by calling the define function,\nand passing a string of our constant\u2019s name and its contents:\ndefine(\"OURCONSTANT\", \"Our constant value\");\nYou will notice we do not have a dollar sign in front of our constant name. In fact, to use\nit, we can just echo the name:\necho OURCONSTANT;\nOur example here has the constant name all uppercase. This is a practice many people\nuse to help distinguish between variables and constants. There are also some predefined\nconstants in PHP that can be useful to us, such as PHP_VERSION and PHP_OS. The\nformer will give us the version number for PHP, and the latter will give us details on the\noperating system the server is running on. Since constants do not have a leading dollar sign,\nwe cannot embed them in a string, but instead need to concatenate them if we want to use\nthem with other output:\necho \" This server runs on \" . PHP_OS;\nConcatenation is the act of connecting several items into one variable or output. A\nperiod is used as we did above to denote where those pieces start and end. If we wanted to\nadd more to our statement, we can keep adding periods like this:\necho \"This server runs on \". PHP_OS . \" and use PHP version \".\nPHP_VERSION;\n161 The Missing Link: An Introduction to Web Development and Programming Chapter 27\nArrays\nArrays are a much dreaded topic to many programmers, and almost as frustrating as a\nmissing terminating character. For the uninitiated, an array is a method of storing multiple\nvalues under one variable name as a linked list of information. This allows us to keep related\nvalues together, and to establish relationships between data. Typically, array information is\nstored in one of two different formats, either numeric or associative. In numerical format,\neach element in the list (or, each piece of information) is found by referring to its place in\nline. Depending on your programming language, counting may start at 1 or 0. In our case,\nby default, PHP starts with 0. In order to take a look at an array, we should follow best\npractices and declare our variable as an empty one to begin with. We can do this with:\n$ourFirstArray = array();\nNow the system will know that we intend to use this variable as an array. If we try to\necho or print our array, we would see the following output:\nArray\nIn order to see the contents of an array, we need to refer to an actual position or view the\nentire contents. Since we have not added anything yet, we will move along for now.\nHere we will create a new array, but one in which we already know what we want the\nfirst few values to be. We will set up the cast of Family Guy as an array called theGriffins.\n$theGriffins = array(\"Peter\",\"Lois\",\"Stewie\",\"Chris\",\"Brian\");\nNow we can take a look at some output. If we wanted to see what the first element of\nthe array held, we could:\necho $theGriffins[0];\nwhich would give us:\nPeter\nOr, to take a quick look at the entire array, we can use the built in function print_r, which\nmeans print recursively, and will output each value for us in a preformatted manner:\nprint_r($theGriffins);\nArray(\n0: Peter\n1: Lois\n2: Stewie\n3: Chris\n4: Brian\n)\nNow, something seems amiss. Is someone missing? Oh yes, Meg. Let\u2019s add her to our\narray. To add a new element to the end of an array, we do not need to worry about knowing\nhow long it is, or what number to assign to the new element. With PHP we can simply\nappend [] to our variable name, adding Meg as a new element at the end of our array:\n$theGriffins[]='Meg';\nNow if we run print_r, we would see:\nArray(\n0: Peter\n1: Lois\n162 The Missing Link: An Introduction to Web Development and Programming Chapter 27\n2: Stewie\n3: Chris\n4: Brian\n5: Meg\n)\nPerhaps we want to make things a little more formal, and use full first names. In this\ncase, we need to update a few things. First, we should change Stewie to Stewart. Since we\nhave the reference right above this text we can see that Stewie is at position 2 (item 3) in\nthe array. So let us set that position to his full name:\n$theGriffins[2]='Stewart';\nYour print $theGriffins[2]; should now give you Stewart instead of Stewie! By placing\nthe item\u2019s position number in the brackets of our array variable, we are specifying that we\nwant to see the information that is stored in that spot. Perhaps you have forgotten where\nin the array you stored a particular value. Most languages supporting arrays will already\nhave built in functions for common tasks such as this. In PHP, we can use the array_search\nfunction. In this case, we pass the values as a \u201cneedle in a haystack\u201d pair, giving the function\nfirst what we are looking for, and then the array in which we hope to find it:\necho array_search(\"Meg\", $theGriffins);\nwill give us:\n4\nNote that close matches would be ignored. The interpreter does not know that Pete and\nPeter, or Meg and Megan represent the same common name. For these types of searches,\nwe would need much more complex algorithms.\nIn order to update the Meg value to Megan, we will combine our techniques:\n$location = array_search(\"Meg\", $theGriffins);\n$theGriffins[$location] = 'Megan';\nWe could, for the sake of brevity, take advantage of the inner first nature of the PHP\ninterpreter and combine our statements:\n$theGriffins[array_search(\"Meg\", $theGriffins)]='Megan';\nNow that we are a bit more comfortable with numbered arrays, we will take a look at\nassociative. In this approach, we provide the reference in which we want a position in the\narray to be named. For instance, perhaps we want to give short descriptions of each char-\nacter so someone unfamiliar with the show is better able to recognize them. To distinguish\ndetails by character, we will use their names in place of numbers. Our initial array from\nbefore with names and descriptions could look as follows:\n$theGriffins = array(\"Peter\"=>\"The fat guy\", \"Lois=>\"The red\nhead\", \"Stewie\"=>\"The baby\", \"Chris\"=>\"The awkward boy\",\n\"Brian\"=>\"The Dog\");\nNow that our array is associative, we pass the identifying piece of information we are\nlooking for. This is done as a key and value pair, where the key is the associative word you\ncan reference and the values is still what is stored. You will notice we used => in our declara-\ntion this time, which identifies what comes before the => as the key, and what follows as the\nvalue. So to find out what we know about Lois:\nprint $theGriffins['lois'];\ngives us:\n163 The Missing Link: An Introduction to Web Development and Programming Chapter 27\nThe red head\nNote that we need to put the associative key in quotes (single or double) when using\nprint or echo.\nReading Get, Post\nEarlier we discussed how to set a form to use Get or Post to transmit data to be pro-\ncessed. To access these pieces of information, PHP has two built in arrays that store what\nis transmitted under $_POST and $_GET. These are reserved variables that are always\navailable in your code whether or not any information was sent in that manner (in which\ncase, the variable will simply be an empty array). When we want to see the value of a form\nelement sent using Get with a field name of firstName, we would use:\nprint $_GET['firstName'];\nIf it was sent using post, all we would change is the variable name:\nprint $_POST['firstName'];\nTo save changes to the variable, we can place the results of the desired change to a\nlocal variable we create, or assign them back to the array position in our GET or POST\narray. The only way of keeping the changed material for use on another page, though, is to\nresubmit the data to the page. I recommend using local variables so this is easier to keep\nin mind.\nNote that when you use GET or POST variables inside of a double quoted string, the\nsingle quote characters are not needed in the array element request and will create an error.\nFor example:\nprint \"My first name is $_POST[firstName]\";\nWe can also easily see everything that was sent by using the print_r function or var_dump\nlike this:\nprint_r($_GET);\nNow that we are interacting with data that is not under our control (given to us by the\nuser, or another outside source) we have to keep in mind that what they send us cannot\nbe trusted. If the user gave us a value we did not expect, or if someone is attempting to be\nmalicious, we would be interacting with data that could cause errors or introduce security\nproblems in our site. We address this through validation and sanitization (see Integration\nExamples), which are techniques that help us address potential problems with data we did\nnot create.\nCookies and Sessions\nCookies and sessions are mechanisms we can use to store and use information from any\npage on our site. These approaches allow us to do this without having to pass information\nbetween pages using forms or special links as we have up to this point. Cookies achieve this\nby storing very small files on the user\u2019s computer. They are typically used to hold onto infor-\nmation that identifies the user, whether or not they are logged in, or other information the\nuser needs to achieve their full experience with the site. Cookies can be set to expire after\n164 The Missing Link: An Introduction to Web Development and Programming Chapter 27\na fixed amount of time, or \u201cforever,\u201d by setting an expiration date far after the computer or\nuser is likely to still be around.\nSessions allow the same storing of information, but achieve it by storing the informa-\ntion on the server (instead of your computer) for a fixed amount of time (usually up to 15\nminutes unless the user stays active). This means sessions will still work even when the\nuser\u2019s security settings block cookies. The use of cookies can be disabled a number of ways\nsuch as the use of security software, browser settings, and ad blockers. For this reason it can\nbe useful to use both in your site, allowing as much functional use as possible even when\ncookies are denied, but still capitalizing on their longer persistence when they are available.\nTo create a cookie, we need to call the setcookie() function and pass it some variables.\nAt a minimum, we need to give our cookie a name and a value for it to store. The name is\nhow we will refer to it, and the value is what we want stored, just like any other variable\nwe would create. Additionally, we can provide setcookie() with an expiration time, a path,\na domain, and a secure flag.\nThe time, if passed, must be the number of seconds after creation that the cookie is con-\nsidered valid for. We can achieve this by passing the time() function, which defaults to the\ncurrent time, and adding seconds to it. For example, passing time()+60 means the current\ntime plus 60 seconds. If we want to make it 15 minutes, we can pass the math along instead\nof doing it ourselves by passing time()+60*15. 60 seconds, 15 times, is 15 minutes. One\nwhole day (60 seconds, 60 times = 1 hour. 24 hours in a day) would be time()+60*60*24.\nBy default, our cookie will be considered valid on all pages within the folder we are in\nwhen we create it. We can specify another folder (and its subfolders) by placing it in the\npath option. The same holds true for domain, where we can specify that a cookie is only\ngood in certain parts of our site like an admin subdomain.\nFinally, we can pass a true or false (false is the default) for secure. When set to true, the\ncookie can only be used on an https connection to our site.\nWe can pass the values we want in the following order:\nsetcookie(name, value, expire, path, domain, secure);\nA simple example setting user=12345 for a day in our admin section of our site could\nlook like the following:\n<?php setcookie(\"user\",\"12345\",time()+60*60*24,,admin.oursite.\ncom); ?>\nFrom any page in the admin.oursite.com portion of our domain, we can now use $_\nCOOKIE[\u201cuser\u201d] to get the value 12345. If we want to store other values, we can pass an\narray to our cookie, or create other cookies for other values. To change a value in our cookie,\nwe simply use setcookie and give the same name with our new value:\n<?php setcookie(\"user\",\"23456\"); ?>\nFinally, if we want to get rid of our cookie early (i.e. our user logs out) then we simply\nset the cookie to a time in the past, and the user\u2019s computer will immediately get rid of it\nas it is expired:\n<?php setcookie(\"users\",\"\",time()-60*60); ?>\nIn this example we set our cookie to an hour ago.\n165 The Missing Link: An Introduction to Web Development and Programming Chapter 27\nA session works much the same way, and can be created by calling session_start(); at the\ntop of our page. We can then set, update, and delete variables from the session like any other\narray by using the reserved array $_SESSION[]. To add our user again, we would type:\n<?php session_start(); $_SESSION[\"user\"]=\"12345\"; ?> <html>\nrest of page here...\nIt is important to remember that session_start() must be before the opening of any\ncontent, thus above the <html> tag. Once on a different page, we would call session_start()\nat the top again to declare that session values are allowed to be used on that page. Once we\nhave done that, we can continue to use $_SESSION[] values anywhere on that page. If the\nuser is inactive (does not leave the page or, click any links, or otherwise trigger an action to\nthe server) for 15 minutes (the default value) the session is automatically destroyed.\nWe can manually remove items from our session by calling unset(), for example:\n<?php session_start(); unset($_SESSION['User']; ?>\nOr we can jump right to ending the entire session by using the session_destroy function:\n<?php session_destroy(); ?>\nThis will remove the entire $_SESSION[] array from memory. Create or modify an-\nother PHP page in your collection (in the same folder and site as the current example).\nIn this second page, you will be able to call the same values out of your cookie or session\n(as long as you include session_start() in this file as well) without passing any information\ndirectly between the pages.\nLEARN MORE\nKeywords, search terms: Variables, strings, arrays, cookies, session, data persistence\nSorting Arrays: http:\/\/php.net\/manual\/en\/array.sorting.php\nAll string functions: http:\/\/php.net\/manual\/en\/ref.strings.php\nPHP Sessions: http:\/\/www.sitepoint.com\/php-sessions\/\nEvolving Toward a Persistence Layer: http:\/\/net.tutsplus.com\/tutorials\/php\/\nevolving-toward- a-persistence-layer\/\n166 Chapter 28\nData Manipulation\nComparison Operators\nPHP supports many of the mathematical comparisons common to programming languages,\nsuch as equivalence and relative value comparison. The symbols used however may be dif-\nferent than what you are used to. In the chart below we will look at how to represent each\ncomparison test, and under what condition we can expect the test to come back as true.\nTable 11 Comparison Operators\nExample Name Result\n$a == $b Equal TRUE if $a is equal to $b.\n$a === $b Identical TRUE if $a is equal to $b, and they are of the same\ntype. (introduced in PHP 4)\n$a != $b Not equal TRUE if $a is not equal to $b.\n$a <> $b Not equal TRUE if $a is not equal to $b.\n$a !== $b Not identical TRUE if $a is not equal to $b, or they are not of the\nsame type. (introduced in PHP 4)\n$a < $b Less than TRUE if $a is strictly less than $b.\n$a > $b Greater than TRUE if $a is strictly greater than $b.\n$a <= $b Less than or equal TRUE if $a is less than or equal to $b.\nto\n$a >= $b Greater than or TRUE if $a is greater than or equal to $b.\nequal to\nThese tests will come in handy as we move into logic structures. The results of these\ncomparisons can help us determine a course of action like what is displayed to the user, how\nwe modify or create data, or respond to user input. Pay close attention to the difference be-\ntween the equal (==) and identical (===) tests. Equal means the comparison of each side is\nconsidered the same. For example, 1 and True are considered equal, because PHP will treat\na 1 as both an integer and a binary representation of true. If we want to ensure elements are\n167 The Missing Link: An Introduction to Web Development and Programming Chapter 28\nthe same in both value and type, we would use strictly equal. This test returns a false in our\nexample, as 1 and true are not both integers of the value 1. Also, do not forget at least the\nsecond =, as just one will be treated as assignment, not a logical test!\nOrder of Operations\nPHP follows the traditional order of operations used in mathematics, as found below.\nAn associativity of \u201cleft\u201d means the parser will read left to right across the equation. \u201cRight\u201d\nmeans it will move right to left (i.e.: assign the equation to the element on the left of the\n= sign). Precedence takes place from the top down, meaning the operators higher in this\nlist will be evaluated before those beneath them. Just as in mathematics, parenthesis will\ninterrupt this list by treating the contents of each set of parenthesis (from the inner most\nout) as a statement by itself. The portion of the table in yellow highlights the operators most\nused for development below application level.\nADDITIONAL NOTES\nTake Note! While using the words \u201cand\u201d and \u201cor\u201d in your logic statements, PHP\nwill not give you an error, as they are in the order of precedence below. Take note\nthat they are below the = sign\u2014this will affect your logic equations. The vast\nmajority of the time you will want to use \u201c&&\u201d and \u201c||\u201d, as they will be evaluated\nbefore assignment.\nTable 12 Operator Precedence\nAssociativity Operators\nnon-associative clone new\nleft [\nnon-associative ++ \u2014\nright ~\u2014(int) (float) (string) (array) (object) (bool) @\nnon-associative instance of\nright !\nleft * \/ %\nleft +\u2014.\nleft << >>\nnon-associative < <= > >= <>\nnon-associative == != === !==\nleft &\nleft ^\nleft |\nleft &&\nleft ||\nleft ? :\n168 The Missing Link: An Introduction to Web Development and Programming Chapter 28\nright = += -= *= \/= .= %= &= |= ^= <<= >>= =>\nleft and\nleft xor\nleft or\nleft ,\nLet us look at a few examples to demonstrate precedence in PHP:\necho 3 * 4 + 3 + 2; 17 Multiplication takes precedence and\nall are evaluated left to right\necho 3 * (4 + 3 + 2);\n27 Parenthesis take precedence so addi-\ntion is evaluated before multiplication\nGiven: $this = true; $that=false\n$result = $this && $that $result = false true and\nfalse is false\n$result = $this and $that\n$result = true $this\n(true) is assigned before\n$this and $that is evaluated\nManipulating Data Streams\nData streams are long strings of characters specially formatted to convey information\nbetween systems. They typically focus on the ability to quickly convey all the information\nin as readable a format as possible, resulting in a compressed syntax to identify the informa-\ntion and its meaning. Two of the most popular methods of streaming data today are JSON\nand XML.\nData streams do not have to be raw, or complete, records of an entire system. They are\nfrequently used to transmit responses between the back-end system (server or database)\nand the system that generates content the viewer sees (browser and\/or scripting language).\nJSON\nAn acronym for JavaScript Object Notation, JSON delimits objects with nested brackets\nand quoted values, denoting key and value pairs with colons. This is a very short, concise\nmethod of delivering data, but the recipient will need to get the meaning of the information\nelsewhere like documentation, and the string is not easily human readable. It is useful when\nthe volume of data is high, and speed is important.\nIf we asked our system to give us the family members from Family Guy, we might get\nthe following:\n{\"Griffins\":{\"Peter\":\"Father\", \"Lois\":\"Mother\", \"Stewie\":\"Son\",\n\"Chris\":\"Son\", \"Meg\":\"Daughter\", \"Brian\":\"Dog\"} }\nIf we asked for the Griffins and Quagmire, we might get:\n169 The Missing Link: An Introduction to Web Development and Programming Chapter 28\n{\"Griffins\":\n{\"Peter\":\"Father\", \"Lois\":\"Mother\", \"Stewie\":\"Son\",\n\"Chris\":\"Son\", \"Meg\":\"Daughter\", \"Brian\":\"Dog\"},\n{\"Quagmire\":\"Neighbor\"}\n}\nXML\nAn abbreviation of eXtensible Markup Language, XML wraps pieces of information in\ntags, similar to HTML, but the names of the tags are user-defined. Grouping of informa-\ntion is done by nesting the tags within each other. Using our Family Guy example above,\nour XML response would be as follows:\n<Response>\n<Griffin>\n<Peter >father<\/Peter>\n<Lois>mother<\/Lois>\n<Stewie>son<\/Stewie>\n<Chris>son<\/Chris>\n<Meg>daughter<\/Meg>\n<Brian>dog<\/Brian>\n<\/Griffin>\n<Quagmire>\n<Glen>neighbor<\/Glen >\n<\/Quagmire>\n<\/Response>\nUSEFUL FEATURE\nYou can test validate JSON and XML strings that you create or receive by copying\nand pasting them into validation sites like jsonlint.com and xmlvalidation.com.\nThey can help you identify problem areas in your strings to make sure your data\nis stored correctly.\nTake note that I specify that this is how your code might look in these examples. The\nactual output\u2019s format would vary based on how the developers decides to create the re-\nsponse string, and also based on any options available to the user as to how they want the\ninformation organized. For example, we might want character ages instead of relationships\nlike father or daughter, or the developer might group the results by gender and put first and\nlast names as the value pairs.\nIt is important to note that when you actually interact with data streams they will not\nlook as they do above, but will be long strings without the spacing and line breaks, as this\nreduces the size of the string. The formatting you see above is often referred to as the \u201cpretty\nprint\u201d format, which adds extra spacing and formatting to make it more human readable.\nWe can create both XML and JSON in PHP. You can do this by creating the exact string\nnecessary to format it, or we can use functions in PHP to help us along. The SimpleXML\npackage allows us to create, navigate, and edit XML content, while the json_encode and\njson_decode functions allow us an easy means to convert JSON to and from arrays.\n170 The Missing Link: An Introduction to Web Development and Programming Chapter 28\nFor brevity, we will consider examples of receiving data in these two formats. While con-\nverting JSON into, an out of, arrays is easily done with json_encode() and json_decode(),\ncreating data by hand in these formats would necessitate a much deeper look at both XML\nand JSON. Your journey there can begin with the Learn More section. I would recommend\nyou explore at least one format in depth, as you will come into contact with these formats\nwhen you interact with APIs. Current trending has JSON getting more attention in new\ndevelopment, but there are plenty of already built XML systems in place, and plenty more\nthat offer both.\nAn easy way to interact with XML or JSON data in PHP is to convert it into arrays\nthat we can more easily traverse. When we are working with XML we can use the\nSimpleXML package integrated in PHP to read our string or file using $data = simplexml_\nload_string($ourXML); or $data = simplexml_load_file(\u201courXmlFile.xml\u201d);. We can open\nJSON files to string or receive them from another source, and decode them using $data =\njson_decode($ourJson). Just like we did with arrays we created earlier, we can see our data\nby using print_r($data);.\n$ourJson =\n'{\"Griffins\":{\"Peter\":\"Father\",\n\"Lois\":\"Mother\", \"Stewie\":\"Son\", Array ( [Griffins] => Array (\n\"Chris\":\"Son\", \"Meg\":\"Daughter\", [Peter] => Father [Lois] =>\n\"Brian\":\"Dog\"}, }'; Mother [Stewie] => Son [Chris]\n$familyGuy = => Son [Meg] => Daughter\njson_decode($ourJson,1); [Brian] => Dog ) )\nprint_r($familyGuy);\nBe sure to place the 1 as our second option in our json_decode() call, as it instructs the\nfunction to return the data as an array instead of objects. The same transfer to array for\n171 The Missing Link: An Introduction to Web Development and Programming Chapter 28\nXML becomes a little more complicated, as PHP does not natively support this type of\nconversion, so we need to do more to get our full list displayed as arrays:\n$ourXML= '<Response>\n<Griffin>\n<Peter >Father<\/Peter>\n<Lois>Mother<\/Lois>\n<Stewie>Son<\/Stewie>\n<Chris>Son<\/Chris>\n<Meg>Daughter<\/Meg>\n<Brian>Dog<\/Brian>\nArray ( [Griffin] => Array ( [Peter]\n<\/Griffin>\n=> Father [Lois] => Mother [Stewie]\n<Quagmire>\n=> Son [Chris] => Son [Meg] =>\n<Glen>Neighbor<\/Glen>\nDaughter [Brian] => Dog ) [Quag-\n<\/Quagmire>\nmire] => Array ( [Glen] => Neighbor\n<\/Response>';\n) )\n$familyGuy =\nsimplexml_load_string($ourXML);\n$familyGuy = (array) $familyGuy;\nforeach ($familyGuy as &$group)\n{$group = (array) $group;}\nprint_r($familyGuy);\nWhile we were able to make the outermost layer of the data an array just by re-declaring\nits type, the type casting conversion in PHP is not recursive. However, simplexml_load_\nstring turns our XML into objects not arrays, so by looping through our array again and\nrecasting each element to an array, we can correct the data in the second layer. This process\nwould need to be repeated for each nested layer of data.\nLEARN MORE\nKeywords, search terms: json, xml, data formatting, data structures\nEssential XML Quick Reference: http:\/\/bookos.org\/book\/491155\/a86a21\nJson.org: http:\/\/www.json.org\/\nData Structures Succinctly (Pt 1): http:\/\/www.syncfusion.com\/resources\/techportal\/ebooks\/\ndatastructurespart1\n172 Chapter 29\nEmail\nDisclaimer: Unless you are working on a server that already has email capability, this chapter\nmay not work for you. WAMP 2.0 (or just Apache, MySQL, and PHP by themselves) do\nnot contain the ability to act as an email server in and of themselves. If you have an email\naccount that uses an exchange email server or another hosted solution, you can research\nhow to configure that account into your server to use your address to send email. Since this\nprocess will differ depending on the service you use, comprehensive directions on how to\ndo so are not possible here.\nIn short, you will need account credentials such as a username and password, some\nconnection settings that can be found in your account settings that may be stored in your\nemail software, web settings, or phone settings, and you will need to edit your php.ini file\u2019s\nsendmail settings. Once you have made the necessary changes, do not forget to stop and\nstart your server for them to take effect.\nText-Based\nRegardless of what service you use to facilitate sending email, you will always use the\nsame function in PHP to trigger it. The mail() function allows us to specify the \u201cWho,\nWhat, and Where\u201d settings. Through this function we can support multimedia (HTML-\nbased) emails and attachments as well.\nThe minimum information necessary to send an email is the recipient and message,\nassuming you have placed an email address in the \u201cFrom\u201d portion of the php.ini settings file:\nmail(\"ourRecipient@nowhere.com\", \"That is a nice inbox you got\nthere!\");\nThe full list of options at our disposal includes the following:\nmail([to], [subject], [message], [headers]);\nThe headers section allows us to pass further information like a different \u201cfrom\u201d address\nthan our default, a reply email, CCs, BCCs, and information on other features like HTML\ncontent or attachments. Since this last section and our actual message can be quite long, it\nis helpful to declare all of these elements as variables first to keep our actual mail function\ncall readable:\n$to = \"ourRecipient@nowhere.com\";\n$subject= \"You Win a million dollars!\";\n$message = \"Not really. We just wanted you to read this.\";\n$headers .= 'From: Us <us@somewhereOutThere.com>' . \"\\r\\n\";\n173 The Missing Link: An Introduction to Web Development and Programming Chapter 29\n$headers .= 'Cc: someoneelse@nowhere.com . \"\\r\\n\";\n$headers .= 'Bcc: hiddenPerson@definatelyNotHere.com' . \"\\r\\n\";\nmail($to, $subject, $message, $headers);\nYou will notice that our headers string actually contains the labels of the email, and that\nline breaks are included at the end of each piece. This helps translate the string into separate\npieces of information when we submit the variable to the mail function in order to create\nour actual email.\nHTML\nTo make our messages look better and incorporate things like color and images, we can\nadd HTML to our message. We can do this by inserting two more lines to our header that\nspecify this:\n$headers .= \"MIME-Version: 1.0\\r\\n\";\n$headers .= \"Content-Type: text\/html; charset=ISO-8859-1\\r\\n\";\nDeclaring our MIME Type version and content type of text\/html allows us to include\nHTML in our message. At this point, we can edit our message string to include HTML\ntags. Since it is still a PHP string, we can include variables and concatenate results from\nfunctions just as we can in other strings, allowing us to create messages that include content\nspecific to the user or recipient:\n$message = \"<table width=*20%'><tr><td>First:<\/td><td>Jose<\/\ntd><\/tr>\n<tr><td>Last:<\/td><td>Jalapeno<\/td><\/tr><\/table>\";\nNow we have sent our user some information formatted into a table. While we can\ninclude a lot of HTML in a message, keep in mind your users will be viewing them on a\nnumber of different devices and through different programs. The more complex the con-\ntent, the more likely your user will not see it as you intend.\nIn fact, best practices for HTML email are to include the content formatted for email\nclients that only support text, or as a fall back when something else goes awry. To do this,\nwe need to add a few more lines of code to specify which parts of our message belong to the\nHTML version, and which parts belong to the text version. Part of this involves creating an\nindicator that specifies where sections start and end. To do this, we need a unique string\u2014\nunique enough that it would never be an intended part of our message. An easy way to do\nthis is to use the md5 and time functions to generate our string. This does not mean we\nhave encrypted our email. The use of md5 simply helps us generate a long, random string:\n$divider = md5((date('r', time()));\nWe also need to edit our header line to announce that our message is multipart and not\njust HTML:\n$headers .= \"MIME-Version: 1.0\\r\\n\";\n$headers .= \" Content-Type: multipart\/alternative;\nboundary=\\\"PHP-alt-\".$random_hash; charset=ISO-8859-1\\r\\n\";\nNow we will add our $divider where our message starts, where we fall back from HTML\nto text, and then at the end of our text section. Whenever we start a new section, we need\nto specify which MIME format we are using. This allows us to mix and match multiple\nthings, even text, HTML, and attachments, all in one message. Since things are getting a\nbit more complex, we will introduce a new concept, output buffering, to keep things cleaner.\n174 The Missing Link: An Introduction to Web Development and Programming Chapter 29\nOutput buffering allows us to \u201cstop\u201d outputting anything to the screen or browser. By using\nthe buffer, we can create larger sections of text to use elsewhere. When we are done, we will\nstore the buffer contents into our message variable.\n<?php ob_start(); ?>\n\u2014PHP-alt-<?php echo $divider; ?>\nContent-Type: text\/html; charset=\"iso-8859-1\"\nContent-Transfer-Encoding: 7bit\n<table width=*20%'><tr><td>First:<\/td><td>Jose<\/td><\/tr>\n<tr><td>Last:<\/td><td>Jalapeno<\/td><\/tr><\/table>\n\u2014PHP-alt-<?php echo $divider; ?>\nContent-Type: text\/plain; charset=\"iso-8859-1\"\nContent-Transfer-Encoding: 7bit\nFirst: Jose\nLast: Jalapeno\n\u2014PHP-alt-<?php echo $divider; \u2014\n$message = ob_get_clean(); ?>\nYou will note that we closed our PHP tags after starting our output buffer. This means\neverything that follows would be treated as HTML to be rendered, so we still need to open\nand close PHP tags when we want to insert dynamic content into our message. Once we\nare done with our message(s), we use the ob_get_clean() function to dump the buffer\u2019s\ncontent into our message variable. This action also closes, or clears, the buffer we were using.\nNow we have an email that supports an HTML and plain text version of our message. To\nadd an attachment, we would add one more MIME type section that names the file format\nwe want to attach, then include in our buffer content the file\u2019s content. Since we cannot\ndrop the actual file into our code, we need to encode it. We can take care of all of this by\nadding a couple extra lines at the start of our section for our attachment.\n\u2014PHP-mixed-<?php echo $division; ?>\nContent-Type: application\/zip; name=\"ourFile.pdf\"\nContent-Transfer-Encoding: base64\nContent-Disposition: attachment\n<?php echo $attachment; ?>\n\u2014PHP-mixed-<?php echo $division; ?>\u2014\nWhen you send attachments, you will want to keep in mind the size of the file(s) that\nyou are attaching. Just because your server is able to process and send the file does not\nmean your recipient\u2019s server will be able to accept it. Emails with attachments should be\naccompanied by a body as well. If there is no text in the body of the email, the recipient\u2019s\nemail client may elect to treat the attachment as the body of the message.\n175 Chapter 30\nFile Interaction\nWe can use PHP to create and read files in a variety of formats, allowing us to create whole\nnew pages, store information in document form, copy files, and plenty more. The first step\nin this process is creating a new file, or opening an existing file, that we want to work with.\nTo do this, we use the function fopen() to declare the file\u2019s location and how we intend to\ninteract with its contents.\nFile Permissions\nPHP follows the Unix\/Linux approach to file permissions, which is more granular to\nwhat Microsoft and Apple users are typically used to. In this approach, a particular file can\nhave different permission levels depending on if the person editing the file is the owner,\nbelongs to the same system group as the owner, or falls into the \u201canyone else\u201d category.\nWithin these three categories we can also specify whether or not the person is allowed to\nread, write, or execute the file, in any combination.\nOne of the methods used to depict permissions is with a string of letters and dashes,\nusing R, W, and X to represent read write and execute. In this approach, three groupings\nof these letters are strung together in the order of owner, group, other, by read, write and\nexecute. A file that everyone has full permissions would be represented by rwxrwxrwx,\nwhile a file where the owner can do anything, others in his group can read and execute, and\nanyone else can execute would be shown as rwxr-xr\u2014. The dashes here indicate that the\npermission is lacking. Group membership refers to the group your account is associated\nwith on the server, which can be anything the server is told to recognize like administrators,\nusers, guests, professor, student, and so on. If the owner of our imaginary file was in the\nadministrator group, other administrators could read and execute the file, where anyone in\nany other group would only be able to execute it without seeing its contents.\nUnderstanding this structure is important to understanding why file open methods are\nnecessary, and can also help us understand problems opening files when appropriate per-\nmissions are not used. Any time we open a file in PHP we need to use one of the following\nmethods, which will determine what PHP lets us do with the file.\n176 The Missing Link: An Introduction to Web Development and Programming Chapter 30\nTable 13 PHP File Methods\nmode Description\n\u2018r\u2019 Open for reading only; place the file pointer at the beginning of the file.\n\u2018r+\u2019 Open for reading and writing; place the file pointer at the beginning of the file.\n\u2018w\u2019 Open for writing only; place the file pointer at the beginning of the file and truncate the file to zero\nlength. If the file does not exist, attempt to create it.\n\u2018w+\u2019 Open for reading and writing; place the file pointer at the beginning of the file and truncate the file to\nzero length. If the file does not exist, attempt to create it.\n\u2018a\u2019 Open for writing only; place the file pointer at the end of the file. If the file does not exist, attempt to\ncreate it.\n\u2018a+\u2019 Open for reading and writing; place the file pointer at the end of the file. If the file does not exist,\nattempt to create it.\n\u2018x\u2019 Create and open for writing only; place the file pointer at the beginning of the file. If the file already\nexists, the fopen() call will fail by returning FALSE and generating an error of level E_WARNING. If\nthe file does not exist, attempt to create it. This is equivalent to specifying O_EXCL|O_CREAT flags\nfor the underlyingopen(2) system call.\n\u2018x+\u2019 Create and open for reading and writing; otherwise it has the same behavior as \u2018x\u2019.\n\u2018c\u2019 Open the file for writing only. If the file does not exist, it is created. If it exists, it is neither truncated\n(as opposed to \u2018w\u2019), nor the call to this function fails (as is the case with \u2018x\u2019). The file pointer is posi-\ntioned on the beginning of the file. This may be useful if it is desired to get an advisory lock (see flock())\nbefore attempting to modify the file, as using \u2018w\u2019 could truncate the file before the lock was obtained (if\ntruncation is desired, ftruncate() can be used after the lock is requested).\n\u2018c+\u2019 Open the file for reading and writing; otherwise it has the same behavior as \u2018c\u2019.\nPHP.net [CC-A 3.0]\nFile Actions\nAssuming we want our file in the same folder as our page and that the web server has\npermission to create files in that location, we can start a new file with the following:\n$handler = fopen(\"ourFile.txt\", 'x+');\nIf all was successful in creating our new file, the $handler variable would now represent\nthe system\u2019s position in our open file as a reference. If the file already existed, we would\nhave received an error (this keeps us from accidently overwriting a file we wanted). If\nno permissions errors cropped up, you can now add content to your file. If you do have\npermission errors, you will need to change folders to one your web server can write to, or\ngive your server permissions on that folder. Since this is an operating system task, you will\nneed to find instructions on how to achieve this based on your OS type, version, and web\nserver settings.\nWe can now add whatever we want to our file, so long as it results in valid content for\nthe file type we are creating. For example, any HTML placed in a text file will appear as\nplain text, not a web page. We would need to create our file as ourFIle.html for that type of\ncontent to render correctly. If we had a large block of text already stored in a variable called\ncontent, we can add it to our file by using fwrite(). Each time we call fwrite, the variable\n177 The Missing Link: An Introduction to Web Development and Programming Chapter 30\npassed to it will be appended to what we have already sent. If we had opened an existing file,\nthe content might be appended (\u2018a\u2019) or overwrite what exists (\u2018w+\u2019) depending on how we\nopened it. When we are done, we need to close the file, which actually writes the content\nusing the $handler variable and saves it in our folder:\nfwrite($content);\nfwrite($moreContent);\nfclose($handler);\nIf we browse to our file from our operating system, you should be able to open it in a text\neditor and see the text you stored in your $content variable.\nUploading Files\nIn order to allow users to upload files to our server, we have to create a folder that allows\nthe web server to write to it, and make the following changes in our php.ini file:\nFile_uploads = on\nUpload_tmp_dir = [location of our upload folder]\nUpload_max_filesize = [size in megs, i.e. 5M = 5 megs]\nAfter making these changes and restarting our web server, our users will be able to use\nupload form elements, which we create using an input with a type attribute of file:\n<input type=\"file\" name=\"userUpload\" id=\"userUpload\">\nOn the page that processes our form we can access the file (and information describing\nit) by using the reserved PHP array $_FILES:\necho \"File name:\" . $_FILES[\"userUpload\"][\"name\"] . \"<br>\";\necho \"Type:\" . $_FILES[\"userUpload\"][\"type\"] . \"<br>\";\necho \"Size:\" . ($_FILES[\"userUpload\"][\"size\"] \/ 1024) .\n\"kB<br>\";\necho \"Stored in:\" . $_FILES[\"userUpload\"][\"tmp_name\"];\n178 Chapter 31\nStructures\nReferred to as selection, control, or loop structures, this set of elements dictate conditions\nunder which certain sections code are executed. They allow our program to be flexible,\ninstead of restricting it to the same actions every iteration. Here, we will consider all of\nthem together, as structures in general.\nIf\n\u201cIf\u201d is perhaps the simplest test we can apply in logic. In programming, the \u201cthen\u201d side\nis implied in the code contained in the definition of our statement\u2014If [some condition] is\ntrue, then do something. We can use this to put exceptions into our code, or to redirect to\na different action. Within the If statement we can perform simple comparisons or have the\ninterpreter perform calculations and get returns from functions as part of its comparison\ntask.\nTo run some examples, we will check if a variable called coffee is equal to hot. If it is, we\nwant to run the drink function.\nif(\"hot\" == $coffee){\ndrink($coffee);\n}\nADDITIONAL NOTES\nRemember that = is an assignment operation! == or === must be used when\ntesting if both sides of the operand are equivalent.\nElse\nNext we will assume our drink() function tells us if we want more or feel full, prompting\nus to take new actions, like cleaning up after ourselves. This means we need to take one of\ntwo actions, which can do by extending our If\/Then by adding Else:\nif(drink($coffee)=='full'){\ncleanUp();\n179 The Missing Link: An Introduction to Web Development and Programming Chapter 31\n}\nelse{ \/\/We want more!\ndrink($coffee);\n}\nelseIf\nWe can use elseIf when we want to follow up a failed If statement with another check.\nWhile the same affect can be created by placing an If inside of our Else, we can eliminate a\nlayer of nesting. We can still follow up an elseIf with its own Else as well:\nif ($a > $b) {\necho \"a is bigger than b\";\n} elseif ($a == $b) {\necho \"a is equal to b\";\n} else {\necho \"a is smaller than b\";\n}\nWhile\nWhile statements will repeatedly execute until the condition we provide is no longer\ntrue. The code will start over, in a loop, as long as the requirement is met.\nBe careful with While statements! You can easily create infinite loops using While, in\nwhich your code will continue to run until forced to stop by closing the page or resetting\nyour web service. The first method of prevention is to ensure that you have at least one place\nin your While loop that can affect the value (or values) in your while condition. The second\nmethod of prevention is to make sure that at least one result of those changes satisfies your\nWhile condition.\nWhile loops are very similar to If in terms of structure. Here we will pretend $ourValue\nis a 4:\n$ourValue=4;\nwhile($ourValue!=6){\nWait for it...\necho \"Wait for it...<br\/>\";\nWait for it...\n$ourValue++;\n6!\n}\necho \"6!\";\nLet us try one that counts for us:\n$ourValue=4;\nwhile($ourValue!=10){\n4, 5, 6, 7, 8, 9,\necho \"$ourValue,\" ;\n$ourValue++;\n}\nTo see a broken While statement in action, change $ourValue to 11 and refresh your page!\n180 The Missing Link: An Introduction to Web Development and Programming Chapter 31\nDo While\nDo While loops are very similar to While loops with the difference that every Do While\nloop will run at least one time. This is because a Do While loop evaluates the equation after\neach loop, not before. Since it does not check if conditions are met until the end, the first\nloop will never be checked. For example, compare the following loops and their output:\ndo {\necho $i;\n0\n} while ($i > 0);\ndone\necho \u201c<br\/> done\u201d;\nwhile ($i>0){\necho $i;\ndone\n}\necho \u201c<br\/> done\u201d;\nLEARN MORE\nKeywords, search terms: Control structures, logic\nAlternative syntax: http:\/\/www.brian2000.com\/php\/\nunderstanding- alternative-s yntax-for-control-structures-in-php\/\nMore examples: http:\/\/www.informit.com\/articles\/article.aspx?p=30092&seqNum=2\nFor\nFor loops are very similar to While loops, but they execute code only while the condition\nis within the given range. When using a For loop, we need to provide it with the value we\nwant to monitor, the condition we want to stop on, and how we want to change it, right in\nthe declaration. As a result, the body of the loop is strictly what we want to happen while\nthe For\u2019s conditions are true. Let us say we want to watch $x (we will pretend it is 5 right\nnow). We want to keep running until it is greater than 10, and we want to add 2 each time\nwe finish the loop:\n$x=5;\n5 is less than 10\nfor($x;$x<10;$x+=2){\n7 is less than 10\necho \"$x is less than 10\n9 is less than 10\n<br\/>\";\n11 is greater than\n}\n10!\necho \"$x is greater than 10!\";\nUnlike the While loop, you will notice we did not have to change the value of $x inside\nour loop, it was done automatically each time the end of the loop was reached. If the\n181 The Missing Link: An Introduction to Web Development and Programming Chapter 31\ntermination condition (in our example x would be greater or equal to 10) is not met, the\nloop starts again. Let us look at another example. This time, if a secondary condition that\nwe test for occurs, we will force the For to stop by changing $x ourselves to something that\nsatisfies the termination condition:\n$x=5; 5 is less than 10\nfor($x;$x<10;$x+=2){ 7 is less than 10\necho \"$x is less than 10 <br\/>\"; 11 is greater than\nif($x==7)$x=11; 10!\n}\necho \"$x is greater than 10!\";\nForeach\nAlthough we took a brief look at Foreach when we reviewed pseudo-code, we will take\na look at an actual implementation now. This loop format is used to iterate over arrays,\nallowing us an opportunity to manipulate each element inside. Since it is designed specifi-\ncally for interacting with arrays, these are the only objects you can pass to it. The function\ntakes the array we want to look at as well as what we want to call each element as we look\nat it. Alternatively, we can ask that the function take each element as a key and value pair,\nwhich can be very useful when position value is needed or associative arrays are in play.\nWhen we use a Foreach, the engine makes a copy of the array, leaving the original intact,\neliminating the need to track and reset the original array\u2019s pointer or reset the array when\nwe are done. This also means that while we are interacting with the elements inside our\narray, we need to keep in mind that we are dealing with a copy. No changes that are applied\nto our copy will persist unless we call the function while applying an ampersand (&) before\nthe variable name, which instructs the function to apply changes directly to our original\narray.\nIn order to apply changes to our array, the original that is passed must be a variable\nalready stored in memory, and not an array declared in the function call. Let us look at some\nexamples to clear some of this up by mimicking print_r().\n$array = array(1, 2, 3, 4, 5); Our value is 1\nforeach($array as $number){ Our value is 2\necho \"Our value is $number <br Our value is 3\n\/>\"; Our value is 4\n} Our value is 5\nTo play with an associative array and see the key and the value, we will adjust both our\nstarting array and what we pass in the function call:\n$array = array(\"Mike\"=>42,\n\"Frank\"=>38, \"Anne\"=>28);\nMike is 42 years old.\nforeach($array as $key=>$value){\nFrank is 38 years old.\necho \"$key is $value years\nAnne is 28 years old.\nold.<br \/>\";\n}\n182 The Missing Link: An Introduction to Web Development and Programming Chapter 31\nFinally, we will take a look at applying our changes back to the array, multiplying our\noriginal array\u2019s values by 2:\nArray(\n$array = array(1, 2, 3, 4, 5); 0 => 2\nforeach($array as &$number){ 1 => 4\n$number = $number * 2; 2 => 6\n} 3 => 8\nprint_r($array); 4 => 10\n)\nSwitch\nA switch statement lets us run several tests to determine the proper course of action, or\nto apply one or more changes to our variable or elsewhere in our code, when the condition\nof our case is met. Some indicators that a switch is appropriate are when you find yourself\nrunning several If Then statements on the same variable, or have nested multiple logic\nstatements attempting to control the action of your script.\nTo create an example, let us write a switch that gives information about a number passed\nto it. First, we will design it to determine the smallest positive value of 2 through 9 that\n$value is a multiple of, and then we will tweak it a bit so it can tell us all the values of 2\nthrough 9 $value is a multiple of. If we just want the smallest value, we only need to test 2,\n3, 5, and 7 since 4, 6, 8 and 9 are multiples of these numbers anyway, so they could not be\nthe smallest. Now, if the number we check is divisible by one of these numbers, it would not\nhave a remainder. To check specifically for a remainder, we can use modular division, which\nin PHP is represented by a %, and returns a 0 or 1. If we get a zero, there is no remainder.\nSo let us create a switch with empty test cases for 2, 3, 5 and 7:\nswitch($value){\ncase ($value % 2 == 0 ):\ncase ($value % 3 == 0 ):\ncase ($value % 5 == 0 ):\ncase ($value % 7 == 0 ):\ndefault:\n}\nEach case can be followed by a set of parenthesis denoting our logical test or a value,\nwhich is followed by a colon that denotes the start of what we want to happen when the\ncase is true. If we wanted a case where the value IS 2, we would use:\nCase 2:\nOr, if we wanted to test if the value is the WORD two, we would use:\nCase \"two\":\nBy default, each case will be tested until the switch is complete, or we tell it we want\nit to stop. This ability will be useful in a moment, but for now, we want the switch to stop\nas soon as we find a value, since we are testing in smallest to largest order, and only need\none test to be true. To do this, we put a \u201cbreak;\u201c wherever we want the execution of our\nswitch to stop. Typically this is the last line before the following case, but if the case we are\n183 The Missing Link: An Introduction to Web Development and Programming Chapter 31\nin has additional logic tests we might have more than one \u201cbreak;\u201d depending on the extra\nconditions we are testing.\nYou will also notice the \u201cdefault:\u201d that snuck in at the bottom. The default case must be\nlast, but is optional, and gives us a \u201ccatch all\u201d action in the event that none of our cases were\nmet. We do not need a \u201cbreak;\u201d after our default, since it will always be the last case in our\nswitch.\nTo complete our example, we will want to let the user know what the smallest value we\nfound was, so we need to fill out our code:\nswitch($value){\ncase ($value % 2 == 0 ):\necho \"$value is divisible by 2 <br\/>\";\nbreak;\ncase ($value % 3 == 0 ):\necho \"$value is divisible by 3 <br\/>\";\nbreak;\ncase ($value % 5 == 0 ):\necho \"$value is divisible by 5 <br\/>\";\nbreak;\ncase ($value % 7 == 0 ):\necho \"$value is divisible by 7 <br\/>\";\nbreak;\ndefault:\necho \"$value is not divisible by 2 through 9.\";\n}\nWith this example, if $value was 4, we would get \u201c4 is divisible by 2.\u201d If $value was\n12, we would get \u201c12 is divisible by 2\u201d but would not get a response for 3, 4, or 6 since we\nincluded breaks after each test, and it stopped after 2. If $value was 11, we would get all\nthe way to \u201c11 is not divisible by 2 through 9.\u201d In this scenario, it is because 11 is a prime\nnumber, which by definition is only divisible by itself and 1.\nNow let us tweak our switch statement so it tells us all of the values between 2 and 9 that\ncan divide our number without a remainder. First, we will have to start testing the values\nwe could skip earlier. For example, 8 is not divisible by 6 even though both are divisible by\n2. Second, we no longer want to stop after one expression is true. To do this, we will get rid\nof all of our breaks except for the one in the case preceding the default, ensuring that if any\nof the cases were true, we will not still see our default statement. That gives us:\nADDITIONAL NOTES\nThis does not mean our switch will find all prime numbers! Prime numbers have\nto be tested against the range 2 to n1\/2 to ensure there are no dividends.\nswitch($value){\ncase ($value % 2 == 0 ):\necho \"$value is divisible by 2 <br\/>\";\ncase ($value % 3 == 0 ):\necho \"$value is divisible by 3 <br\/>\";\n184 The Missing Link: An Introduction to Web Development and Programming Chapter 31\ncase ($value % 4 == 0 ):\necho \"$value is divisible by 4 <br\/>\";\ncase ($value % 5 == 0 ):\necho \"$value is divisible by 5 <br\/>\";\ncase ($value % 6 == 0 ):\necho \"$value is divisible by 6 <br\/>\";\ncase ($value % 7 == 0 ):\necho \"$value is divisible by 7 <br\/>\";\ncase ($value % 8 == 0 ):\necho \"$value is divisible by 8 <br\/>\";\ncase ($value % 9 == 0 ):\necho \"$value is divisible by 9 <br\/>\";\nbreak;\ndefault:\necho \"$value is not divisible by 2 through 9.\";\n}\nTo repeat our examples using 4, 12, and 11, respectfully we would see the following\nresponses:\n4 is divisible by 2\n4 is divisible by 4\n12 is divisible by 2\n12 is divisible by 3\n12 is divisible by 4\n12 is divisible by 6\n11 is not divisible by 2 through 9\n185 Chapter 32\nFunctions\nNow that we are comfortable creating some code, let us take a look at how to do more with\nwhat we have. In any language we use, there are concepts that are not always translatable\nfrom one to the next, if the concept is even present in both. In spoken languages, words for a\nparticular concept also may have no direct translation to another language. For example, the\nGerman word Kummerspeck is a single word to convey the concept of excess weight gained\nby emotion-related overeating. Not only does the English language lack a word defining\nthis concept, its closest literal translation in English would be \u201cgrief bacon.\u201d Similarly, in\nWagiman (Australia) there is an infinitive murr-ma, which means \u201cto walk along in the\nwater searching for something with your feet,\u201d1 which is both much more specific and\nrequires a significantly longer English sentence to convey.\nThe development of words that specify such lengthy or concise ideas arise out of the\npopularity of, or need to convey that concept often in a society. It is far easier to say \u201cI am\ngoing to the gym to get rid of this Kummerspeck\u201d than \u201cI am going to the gym to get rid\nof the weight I gained from overeating due to my emotions,\u201d which allows for the concept\nto be used more often.\nIn programming languages, we can find a parallel to this when functions or abilities\nin one language are not available in another, or require additional code to achieve. For\nexample, in PHP you can retrieve items available to the page using the GET method by\nreferencing the built-in $_GET array:\n<?php echo $_GET['variable name']; ?>\nAttempting to implement the same functionality in JavaScript requires much more\neffort, even with the assistance of its built-in location.search function:\nvar $_GET = {},\nvariablesList = location.search.substr(1).split(\/&\/);\nfor (var x=0; i<variablesList.length; ++i) {\nvar tmp = variablesList[x].split(\/=\/);\nif (tmp[0] != \"\") {\n$_GET[decodeURIComponent(tmp[0])] =decodeURIComponent(tmp.\nslice(1).join(\"\").replace(\"+\", \" \"));}}\nThe programming equivalent of creating a word to describe a concept is the ability to\ncreate our own algorithms and functions, to describe new actions. In the example above, we\n1 Jacot, de Boinod, Adam. Global Wording. Smithsonian Magazine. March 2006. Web. 15 Dec.\n2012\n186 The Missing Link: An Introduction to Web Development and Programming Chapter 32\ncould take our JavaScript code and wrap it in a function definition, and add a return call to\nsend the results back to where you called the function, like this:\nfunction findValues(){\nvar $_GET = {},\nvariablesList = location.search.substr(1).split(\/&\/);\nfor (var x=0; i<variablesList.length; ++i) {\nvar tmp = variablesList[x].split(\/=\/);\nif (tmp[0] != \"\") {\n$_GET[decodeURIComponent(tmp[0])] =\ndecodeURIComponent(tmp.slice(1).join(\"\").replace(\"+\",\n\" \"));\n}\n}\nreturn $_GET;\n}\nNow, anytime you wanted to find your values using JavaScript, you could include this\nfunction and simply type:\nvar $_GET = findValues(); document.write($_GET['variable\nname'];\nCreating a function also allows us to reference it in more than one place, without having\nto retype or copy and paste those lines into every place we want to use them. This also means\nthat debugging only requires fixing the original block of code in your function, as it is the\nonly place the line exists, since each function call is a reference to this single definition.\nCreating a function in PHP is much like the example we looked at for JavaScript above.\nTo create a function, we use the word function (denoting that we are creating one, not\ncalling one to use it) followed by the name we want to give it and any variables we would\nlike it to use in parenthesis. A set of braces are used to identify the code that belongs to the\ndefinition. An empty function called Add that does not accept any variables would look\nlike this:\nfunction Add(){ }\nNote that a terminating semi-colon is not needed after the closing brace. The brace tells\nPHP that the statement is complete, just as it does when using a logic or control statement.\nTo pass variables into our Add function, the function will need to know what to expect\nto receive. We do this by adding parameters (names we give to the variables passed to the\nfunction) to the definition. Here we will add two parameters:\nfunction Add($num1, $num2){ }\nNow, we will tell the function to add these numbers and give us the result:\n$var1 = 4; $var2= 5;\nfunction Add($num1, $num2){\n$temp = $num1 + $num2;\nreturn $temp;\n}\n$value = Add($var1, $var2);\nWhen we use the function and pass it actual values (in this example, $var1 and $var2)\nthose variables are called arguments; they contain the data we actually want to use. Another\n187 The Missing Link: An Introduction to Web Development and Programming Chapter 32\nexample of function output you may see are ones that send output right to the screen, like\nthis:\n$var1=4; $var2=5;\nfunction Add($num1, $num2){\n$temp = $num1 + $num2;\nprint $temp;\n}\nAdd($var1, $var2);\nThey might also output more than we expect, not just the result of the equation:\nfunction Add($num1, $num2){\n$temp = $num1 + $num2;\nprint \"$num1 + $num2 = $temp\";\n$oddEven = $temp % 2;\nif ($oddEven == 0){ print \"<br\/>$temp is even\"; }\nelse{ print \"<br\/>$temp is odd\"; }\n}\nAdd(7,9);\nWhile all of these example are effective, the second two examples actually limit our\nability to use them again, namely by performing multiple actions, and by mixing action\nand output. Since the power of a function lies largely in our ability to reuse it, these are\nattributes we will want to eliminate. To make functions as useful as possible, they should do\none thing, and do it well.\nIn this example the intent of our function is to add numbers. Our expectation is that\nwe will provide it numbers, and it will provide the sum. Any other actions or steps needed\nto solve a larger problem should reside elsewhere in your code, or in another function. By\ndoing this, we know that when we use add() all it will do is give us a number. If the function\nshows our output instead of returning it, we would not be able to use if it we did not want\nit to show on the screen. By returning it and storing it, we can choose where and when it is\ndisplayed, or use it somewhere else.\nTo simplify our function and follow these practices, let us refine it to the following:\nfunction Add($num1, $num2){ return $num1 + $num2; }\nNow we can call the function and store it to a variable:\n$sum = Add(3,5);\nOr we would chose to display it on the screen:\necho Add(3,5);\nUSEFUL FEATURE\nWait! Where did the $temp variable go?! By skipping the use of declaring\n$temp to hold our sum, we have eliminated one reserved memory space while\nthe function is running. In terms of the size of this function, the number of\nvariables we needed, and the time for it to execute, we would never know the\ndifference. However, in much larger programs, especially when memory is\nlimited, these steps can improve performance.\nLet us take a look at how we can put all of this together:\n188 The Missing Link: An Introduction to Web Development and Programming Chapter 32\n<?php\nfunction Add($num1, $num2){\nreturn $num1 + $num2;\n}\necho \"Welcome to the number adding page! <br\/>\";\necho \"The sum of 3 and 5 is \" . Add(3,5);echo \"<br\/>The sum of\n9 and 12 is \" . Add(9, 12);\n?>\nADDITIONAL NOTES\nDo not forget your SCOPE! Functions cannot see anything outside of their braces\nthat are not given to them when they are called. Once you leave your function,\nany local variables created in it that were not returned are gone!\nSeeing as the ability to add numbers is already built into PHP, let us look at a more\nadvanced example. We will design a function that tells us how much to add to a bill for a\ntip. To do this, we will need to create a function that takes in the total of our bill, calculates\nthe tip amount, and tells us how much the tip would be.\nRemember, a function should do one thing only, so before we worry about final totals or\nany other issues, let us at least get that far:\nfunction tip($billTotal){\n$tip = $billTotal * .15;\nreturn $tip;\n}\nIn the above example, we assumed a 15% tip. What if that is not the standard where you\nare? Or maybe the service was better or worse than you expected. This is an additional use\ncase we need to consider. To do this, we will allow the user to tell us the percentage they\nwant, and assume that if they do not tell us, it is still 15%:\nfunction tip($billTotal, $percent=.15){\n$tip = $billTotal * $percent;\nreturn $tip;\n}\nSetting $percent equal to a value in the function definition tells the function that if a\nsecond value is not passed, assume it to be .15. This allows that variable to be optional, so we\ncan call this function as tip(45.99,.20) or just tip(45.99). We are still only doing one thing,\nbut now we have some flexibility. What about other use cases, like splitting the bill? While\nwe could tell the function how many people to divide the total by, that would violate our\n\u201cone thing\u201d rule. Instead, we can divide the total outside of the function, and give tip() the\nresult to figure out how much each person\u2019s contribution to the tip would be.\nIf you have been testing out our function as we have progressed, you have probably had\nsome tip values that resulted in half pennies and even smaller fractions of currency to fulfill.\nThis is because our function does not know we are dealing with money\u2014it is just doing the\nmath. Since we only need to calculate to the second decimal point for this type of problem,\n189 The Missing Link: An Introduction to Web Development and Programming Chapter 32\nwe can round out our answer to match. PHP already provides us with a rounding function\ncalled round, so we will use that to refine our response:\nfunction tip($billTotal, $percent=.15){\n$tip = $billTotal * $percent;\n$roundedTip = round($tip, 2);\nreturn $roundedTip;\n}\nLastly we will combine our statements, as we did before, to eliminate extra variables and\nshorten our code:\nfunction tip($billTotal, $percent=.15){ return\nround(($billTotal * $percent),2) }\nNow we have a concise function that can perform a single task and perform it well. We\ncan refer to it anywhere in our page as often as we need to without having to copy and\npaste the code. In fact, this is the perfect time to introduce a set of functions that allow us\nto import other files into our page.\nADDITIONAL NOTES\nOrder helps! If all of your optional variables are at the end (right hand side) of the\ndefinition, you will not have to pass empty quotes as place holders if you only\nwant to send the required variables.\nThe functions include(), require(), and require_once() all allow us to pass a file location\non our server that we want to use as part of our code. By importing these outside files, we\ncan create libraries of functions or class files and insert them into any page we want to\nuse them on. Each of these functions runs the same way, by passing a file location. If the\ncontents of the file are not critical to your page, you may want to only use include, as it\nwill not generate an error if the file is missing. Errors will be thrown by using require() or\nrequire_once(). The former will always insert the contents of the file, while the latter will\nonly load the file if its contents are not already available. Using required_once() will save\nus from redefinition errors caused by redefining functions or classes we already have. If the\ncontents of the file tip.php was our function, we could reference it in any page like this:\n<?php\nrequire_once(\"tip.php\");\necho tip(49.99);\n?>\nLEARN MORE\nKeywords, search terms: Functions, function scope\nTizag\u2019s function review: http:\/\/www.tizag.com\/phpT\/phpfunctions.php\nHelper Functions : http:\/\/net.tutsplus.com\/tutorials\/php\/increase-productivity-by-creating-\nphp-helper-functions\/\n190 Chapter 33\nObjects and Classes\nWe can group related functions together into an item called a class. Classes are collections\nof functions (when they are in classes, they are called methods) and variables that are re-\nlated or collectively represent our knowledge or actions that can be performed on a concept.\nWe can create a class by writing:\nclass math{ }\nThis gives us an empty class called Math. Let us include our adding function:\nclass math{\nfunction add($num1, $num2){\nreturn ($num1 + $num2);\n}\n}\nand add a couple more functions:\nclass math{\nfunction add($num1, $num2){\nreturn ($num1 + $num2);\n}\nfunction subtract($num1, $num2){\nreturn ($num1\u2014$num2);\n}\nfunction divide($num1, $num2){\nif($num2!=0){return ($num1 \/ $num2);}\nelse return \"error\";\n}\n}\nBy creating the class, we have declared that add, subtract, and divide all belong to Math.\nTo use our new class, we create a copy of it, called an instance, in our script. In the divide\nfunction you can see we check to make sure we will not divide by zero, which would cause\nan error. This is an example of how we can use classes and functions to expand functionality\nand protect our program. We can reference the variable that is our object to use the func-\ntions and data members (variables that are inside a class) inside it:\n$ourMath = new math();\necho $ourMath->add(5,9);\n191 The Missing Link: An Introduction to Web Development and Programming Chapter 33\nThe arrow tells us to use something inside our class, in this case the add method. We can\nuse these methods over several lines:\n$temp = $ourMath->add(5,9);\n$temp = $ourMath->divide($temp\/2);\nor nest them:\n$temp = $ourMath->divide($ourMath->add(5,9),2);\nClasses are commonly used to create libraries of related actions, like the Math example\nwe made, or to create collections of methods and data members that pertain to a concept\nin our system. For example, if this was an online course system we might have objects to\nrepresent concepts like students and courses.\nMethods in the student class would revolve around the student, like calculating their\nGPA or generating a list of courses the student is enrolled in. The courses class might have\na similar method that calculates the overall average of all students in a class, but these could\nonly be run from an object of the appropriate type and permission. An object is an instance\n(or copy) of the class that represents a particular item, like a particular student or course.\nWhile most functions in PHP can be used by any script, we can control what pieces of\nour class structures can be accessed by programmers when an instance of the class is used.\nWe do this with the keywords public, private, and protected that precede our methods or\ndata members in our class. This gives us a means to protect our information and\/or control\nwhat can be done when the object is being used.\nPublic items can be accessed by \u201canyone\u201d (or anything, such as other classes), meaning\nwe can reference them using -> just like in our example. Protected items can be accessed\nby other methods in the class, or by methods in parent or child classes that use the class in\nquestion\u2014we will cover class inheritance here though. Finally, private items can only be\naccessed by the class itself. This means that a method or data member marked private in our\nMath example could only be used by other methods in the class, not by us when we write\ncode to use an object-based on the class. To see this in action, we will look at public and\nprivate in action by adjusting our math class. To learn more about inheritance and protected\nmethods, you can refer to this chapter\u2019s \u201cLearn more\u201d section.\nclass math{\npublic function add($num1, $num2){\nreturn ($num1 + $num2);\n}\nprivate function subtract($num1, $num2){\nreturn ($num1\u2014$num2);\n}\npublic function divide($num1, $num2){\nreturn ($num1 \/ $num2);\n}\n}\nSince our add and divide methods are set to public, our previous example still works\u2014\nwe are able to add and divide from our code without any issues. If you try to use subtract\nthough ($ourMath->subtract(5,2);) you will end up with an error:\nFatal error: Call to private method math::subtract()\n192 The Missing Link: An Introduction to Web Development and Programming Chapter 33\nThe only way for the subtract method to be used is by being called from within another\nmethod in the Math class. If we had a more advanced method like calculating a longer\nformula, that method could call subtract as part of its execution.\nLEARN MORE\nKeywords, search terms: Functions, classes, objects, inheritance\nMore examples: http:\/\/php.net\/manual\/en\/language.oop5.visibility.php\nConstructors and inheritance: http:\/\/net.tutsplus.com\/tutorials\/php\/\nobject-oriented-php-for-beginners\/\nPHP Objects Patterns and Practice 3rd Edition: http:\/\/it-ebooks.info\/book\/411\/\n193 Chapter 34\nJavaScript Syntax\nTags\nDefining your block of JavaScript code in HTML is done with the use of another set of\nHTML tags we have not used yet, <script>. The script tags allow us to link to a script file or\nmark off a section of our code for our JavaScript to reside in. We can place script tags in any\nsection of our HTML. Traditionally, JavaScript is placed in the head of the page, especially\nwhen the code consists of functions to be called or actions that are to occur on page load.\nIf your JavaScript will be shorter or creates some simple output, you might find it easier to\nplace it in your code where you want the output to be.\nAs the <script> tags can be used for more than just JavaScript, it is recommended to\nclarify what type of code the tags contain. To start with an example where we link to an\nexternal JavaScript file, we will use a <script> tag and give it attributes to define what our\ncode is and where it lives.\nADDITIONAL NOTES\nIf your JavaScript\u2019s action or output is not critical to visual layout or output of\nyour page, you can move <script> tags to the bottom of your page. This allows\nthe page to render before processing your JavaScript, and gives the user a faster\n(seeming) experience.\n<script type=\"text\/javascript \" src=\"http:\/\/someplace.com\/\nscripts\/ourscript.js\">\nThis example would populate the <script> tag set with the contents of the JavaScript file\njust like we did with CSS. Also like our CSS examples, we can place our JavaScript entirely\nin the HTML as well. To use the ubiquitous Hello World example yet again, we would\nreplace our example above with the following:\n<script type=\"text\/javascript\">\nalert(\"Hello World!\");\n<\/script>\nThe alert function in JavaScript will create the pop up box in our browser that must be\nclosed by the user. By placing this block of code into either the head or body of a blank page\nas follows, we will get an alert box instead of text on the page:\n194 The Missing Link: An Introduction to Web Development and Programming Chapter 34\n<html>\n<head>\n<script type=\"text\/javascript\">\nalert(\"Hello World!\");\n<\/script>\n<\/head>\n<body\/>\n<\/html>\nNot only is this a little more exciting than just printing it onto our page, we can even add\nsome control to when we receive this output by giving it a trigger event. A trigger event is\nanything that can be monitored in order to cause another action to occur. In this case, our\ntrigger event will be a click of a button. To do this, we need to stop our alert from running\nas soon as the page loads. We will do that by wrapping it in a function declaration so it only\nruns when we call it, and then add a button that calls the function:\n<head>\n<script>\nfunction howdy(){\nalert(\"Hello world!\");\n}\n<\/script>\n<\/head>\n<body>\n<input type=\"button\"\nonclick=\"howdy()\" value=\"Our\nButton\" \/>\n<\/body>\nNow when we load our page, the alert window will not show up until we click our button.\nIf it does not, you may need to check your JavaScript settings to make sure it is allowed in\nyour browser. If you are unfamiliar with how to do this, search the Internet for your browser\ntype, version number, and the words enable JavaScript for directions. JavaScript is usually\nenabled by default, so a double check of your code for typos may also be in order.\nVariables\nCreating variables in JavaScript is very similar to PHP. The variable names still need to\nbegin with a letter, and are case sensitive. They can also start with $ or _ to help us identify\nthem. One difference is that when we declare variables in JavaScript, we do so by putting\n\u201cvar\u201d in front of them. This identifies what follows as a variable, like the $ in PHP. To\nconvert our example into a string variable, we would adjust it as follows:\n<head>\n<script>\nfunction howdy(){\nvar str=\"Hello World\";\nalert(str);\n}\n195 The Missing Link: An Introduction to Web Development and Programming Chapter 34\n<\/script>\n<\/head>\n<body>\n<input type=\"button\" onclick=\"howdy()\" value=\"Our Button\"\n\/>\n<\/body>\nOutput\nThe \u201cecho\u201c or \u201cprint\u201d equivalent in JavaScript can be achieved by instructing it to place\nthe text you want into the DOM (Document Object Model). We reference the document\nobject in JavaScript with the word document, and call the write method to produce our\noutput:\n<script language=\"javascript\">\ndocument.write (\"Some output from <b>JavaScript!<\/b>\");\n<\/script>\nWe can be more specific as to the exact place(s) on the page we wish to put our content.\nIn PHP, we would simply place our print or echo statement where we want the content to\nappear. With JavaScript we can continue to take advantage of the document object model\nto specify where we want output to be. This also means the script that makes the content\ncan be stored in a separate location from the output location itself:\n<script language=\"javascript\">\ndocument.getElementById(\"ourText\").innerHTML =\"Hello\nWorld\";\n<\/script>\n<div id=\"ourText\"><\/div>\nNo matter where the \u201courText\u201d div is on our page, or where the script is, the div would\ncontain Hello World as its text. This is the basic approach taken when we use JavaScript to\nmake changes to our page.\nStrings\nWhile strings work largely the same as they do in PHP and other languages, concatena-\ntion is achieved by the use of the concat() function, or the plus (+) sign instead of PHP\u2019s use\nof period (.). Let us take a look at a couple examples to see the difference:\nstr1 = \"Hello World!\";\nstr2 = \"How are you?\";\noutput = str1.concat(str2); \/\/ Note we use . to access\nconcat() from the string\noutput = str1 + \" \" + str2; \/\/ Concating with +, which works\nlike PHP's .\n196 The Missing Link: An Introduction to Web Development and Programming Chapter 34\nArrays\nArrays in JavaScript work in much the same way as PHP. All we need to keep in mind\nis that our output needs to use DOM manipulation:\n<script>\n\/\/Some examples of setting and using array variables\nvar x;\nvar mycars = new Array();\nmycars[0] = \u201cSaab\u201d;\nmycars[1] = \u201cVolvo\u201d;\nmycars[2] = \u201cBMW\u201d;\nfor (x=0; x<stooges.length; x++){\ndocument.write(mycars[x] + \u201c<br>\u201d);\n}\n<\/script>\nBraces and Semi-colons\nWhen a control structure only has one line, JavaScript will allow us to skip the curly\nbrackets that would normally outline its contents. We also do not need to include semi-\ncolons as long as we include a line break after most statements. However, leaving either\nof these items out can create bugs by inconsistent coding. Adding a second line to your\ncondition statement when not using brackets might work in some cases, but not all. Instead\nof a syntax error, though, it would be interpreted as part of the next statement after it. This\nwill create a harder to find logic error.\nLEARN MORE\nKeywords, search terms: JavaScript syntax\nMozilla Developer Network: https:\/\/developer.mozilla.org\/en-US\/docs\/Web\/\nJavaScript?redirectlocale=en-US&redirectslug=JavaScript\n197 Chapter 35\nJavaScript Examples\nDOM Navigation\nNow we will look at some other techniques we can use to interact with the DOM using\nJavaScript. We specified we wanted to use a particular element by referencing its ID (ge-\ntElementById()) but we can also interact with groups of elements that share a special type\nor class. To reference by type we would call the getElementsByTagName method, giving us\na list of elements that we can review, or modify:\n<div id=\"output\"><\/div>\n<input type=\"text\" size=\"20\"><br>\n<input type=\"text\" size=\"20\"><br>\n<input type=\"text\" size=\"20\"><br><br>\n<input type=\"button\" value=\"Submit Form\">\n<script>\nvar x=document.getElementsByTagName(\"input\");\ndocument.getElementById(\"output\").innerHTML = (\"Number of\nelements: \"+x.length);\n<\/script>\nPerhaps we only want elements inside of another specific element. We can grab inputs\nfrom a particular form. To do this, we change our reference from the document as a whole\nto the element we want to inspect:\n<div id=\"output\"><\/div>\n<form id=\"form1\">\n<input type=\"text\" size=\"20\"><br>\n<input type=\"text\" size=\"20\"><br>\n<input type=\"text\" size=\"20\"><br><br>\n<input type=\"button\" value=\"Submit Form\">\n<\/form>\n<form id=\"form2\">\n<input type=\"text\" size=\"20\"><br>\n<input type=\"text\" size=\"20\"><br>\n<input type=\"text\" size=\"20\"><br><br>\n<input type=\"button\" value=\"Submit Form\">\n<\/form>\n198 The Missing Link: An Introduction to Web Development and Programming Chapter 35\n<script>\nvar x=document.getElementsByTagName(\"input\");\ndocument.getElementById(\"output\").innerHTML = (\"Number\nof elements: \"+x.length+\"<\/br>Number in form2: \"+form2.\ngetElementsByTagName(\"input\").length;\n<\/script>\nIn this example all we changed was doubling our inputs and putting them into forms.\nWe also used form2 as our reference instead of document to create our second output,\nalthough this time we just tacked it onto the end without creating a second variable. You\ncan see in this example that not only can we concat function results easily in JavaScript,\nwe were still able to refer to the length() method, even though it was added to the end of\nthe getElementsByTagName method. This chain is perfectly valid in JavaScript, and will\nalways be evaluated from the inside out just like sets of parenthesis. In this case, counting\nthe inputs in form2 occurred first, creating a temporary object that \u201c.length\u201d was instructed\nto access.\nEvents\nIt is important to keep in mind that JavaScript is not living within the confines of an\nobject or function and will be processed as soon as it is loaded. Depending on its placement\nin the document this means our script may attempt to utilize something in the DOM that\nhas not been created yet as the page is still loading. If we want our code to wait until the\nfull page is complete, we need to wrap our code into one of these two items and then use a\ntrigger, or event, to signify when the page is ready. One approach to this is adding an onload\nattribute to our body tag:\n<body onload=\"ourFunction()\">\nWe can even monitor events that do not involve the document itself like the location\nof the mouse. Monitoring the location of the mouse may have little practical application\nin the average website, but it can be useful in web-based games and analytics applications,\nwhere knowing the position of the mouse can influence how the page acts:\n<script>\nfunction getCoords(event){\nvar x=event.clientX;\nvar y=event.clientY;\nalert(\"X: \" + x + \", Y: \" + y);\n}\n<\/script>\n<p onmousedown=\"getCoords(event)\">Click anywhere on this sen-\ntence to see the x and y coordinates of the mouse. Clear the\nalert and try again to see the numbers change.<\/p>\nWhile we are waiting for an event to occur, we can execute other steps before it is\nprocessed, or even replace it. We can see an example of this by saying goodbye before a\nvisitor leaves our page:\n<script>\nfunction sayGoodbye(){\n199 The Missing Link: An Introduction to Web Development and Programming Chapter 35\nalert(\"Thanks for visiting!\");\n}\n<\/script>\n<body onunload=\"sayGoodbye()\">\nTo stop an event, we can use the preventDefault() method, which allows us to supersede\nwhat would have taken place. For instance, we may want to use a link to trigger a JavaScript\nfunction, but do not want to the page to reload, or follow the URL that was clicked on. In\nthis example, we could have the following:\n<script type=\"text\/javascript\">\naddEventListener(\"load\",function(){\nvar link= document.getElementById(\"google\");\nlinks.addEventListener(\"click\",function(e){\ne.preventDefault(); \/\/prevent event action\n}\n});\n<\/script>\n<body>\n<a href=http:\/\/www.google.com id=\"google\">Google<\/a>\n<\/body>\nGeolocation\nDevices and browsers that have access to GPS, cellular, or wireless router location data\nmay provide that information to web pages (usually also in conjunction with user permis-\nsion). When this data is available, our webpage can receive the information from the device.\nWe can use it to improve the user experience, or provide features that are location depen-\ndent, like finding the nearest restaurant, or offering local deals. This example demonstrates\nhow to access the information if it is available. Once we have the coordinates, we can write\nadditional scripts on our backend (PHP and\/or MySQL) that use them in order to tailor\nthe user experience.\nKeep in mind most browsers\/devices allow the user to turn these features on and off,\nand not all devices will have access to or share this type of information. Because of this, it\nshould not be a required or relied upon features unless you are sure your target users will be\non such a device, and are aware that this type of feature is a requirement.\n<p id=\"text\">Where am I?<\/p>\n<button onclick=\"getLocation()\">Find Me<\/button>\n<script>\nvar response=document.getElementById(\"text\");\nfunction getLocation(){\nif(navigator.geolocation){\nnavigator.geolocation.getCurrentPosition(position);\n}\nelse{response.innerHTML=\"Geolocation is not available from\nthis device or browser.\";}\n}\n200 The Missing Link: An Introduction to Web Development and Programming Chapter 35\nfunction position(loc){\nresponse.innerHTML=\"Latitude: \" + loc.coords.latitude +\n\"<br>Longitude: \" + loc.coords.longitude;\n}\n<\/script>\n201 Chapter 36\njQuery\njQuery is a freely available library add-on to JavaScript. It reduces the amount of code and\ncomplexity required to produce features and effects commonly used in creating today\u2019s sites.\nThis library rapidly extends how much, and how fast, you can improve upon your site. In\naddition to jQuery, additional library extensions have been created that extend the jQuery\nlibrary to automate even more tasks.\nBefore we begin to look at jQuery, we should consider implementation. The jQuery\nlibrary is hosted for free on Google\u2019s servers at ajax.googleapis.com\/ajax\/libs\/jquery\/1.10.2\/\njquery.js (you may need to adjust the version number for future releases). While you are free\nto save any number of versions to your own site, there are benefits to using Google\u2019s copy.\nAmong them are decreased latency (Google\u2019s copies are distributed on servers around the\nworld), decreased communication load on your server, and a caching benefit\u2014the more\nsites using Google as their source increases the chance your user will already have a recent\ncopy on their device.\nOnce you have connected to Google, you may want a fall back\u2014Google or not, things\ncan happen. To do this, we need a mechanism to detect whether or not our Google hosted\ncopy loaded correctly. To achieve this, we can test for a feature that is only present in jQuery\nafter we have attempted to load it. If this feature fails, we can assume something went\nwrong, and then load our fallback copy. All of this can be done by adding two lines in our\ncode:\n<script src=\"\/\/ajax.googleapis.com\/ajax\/libs\/\njquery\/1.10.2\/jquery.min.js\"><\/script>\n<script>window.jQuery || document.write('<script\nsrc=\"link\/to\/our\/jquery-1.10.2.js\"><\\\/script>')<\/script>\nOnce we have connected to the jQuery library, we can begin to use it in our JavaScript\ncode. jQuery statements begin with a $ and then expect information on the selector we\nwish to use or the method we wish to access in order to take action. Using the document\nobject method (DOM) to select a page element in JavaScript bears resemblance to the\nchain selector approach of Java:\ndocument.getElementByID('ourAttributeName');\nMeanwhile, jQuery allows us to identify the same element simply by referencing the\nsame attribute:\n$('#ourAttributeName');\nWhile neither of these examples actually interact with the attribute, both identify the\nsame unique place in our document. With jQuery, the use of the pound sign (#) in our\n202 The Missing Link: An Introduction to Web Development and Programming Chapter 36\nselector specifies that we are looking for an ID. The #, in this case, takes the place of typing\nout document.getElementByID.\nAlternatively, if we wanted to select all elements on our page with a particular class, we\nwould exchange our pound sign for a period. This specifies that we want to select all items\nof the identified class:\n$('.ourClassName');\nOnce we have declared our selector, it takes on aspects of an object, something that we\ncan interact with whether it represent one or many elements on our page. For example, we\ncan hide all paragraphs on a page by setting a button to do so:\n<script>\n$(document).ready(function(){\n$(\"button\").click(function(){\n$(\"p\").hide();\n});\n});\n<\/script>\n<h2>Hide those paragraphs!<\/h2>\n<p>This is a paragraph.<\/p>\n<p>This is also a paragraph.<\/p>\n<button>Hide them!<\/button>\nIn this example you will see we have three statements, all nested together. Moving from\nthe inner-most statement out, we first have the action of actually hiding our paragraphs.\nThis is executed as the callback of the statement it sits inside, meaning it is executed when\nthe button element receives a click. Finally, we want to ensure that none of this occurs until\nthe entire page is ready, as it is a response to a user interaction and not part of creating our\npage. To ensure this happens, all of this is nested inside a ready function attached to the\nentire page, which is referred to as document. This means nothing inside the $(document).\nready\u2026 line will be available until after the page is done loading. Let us look at another\nexample, where we change existing content instead of hiding it:\n<script>\n$(document).ready(function(){\n$(\"#btn\").click(function(){\n$(\"#test\").html(\"<b>We changed it!<\/b>\");\n});\n});\n<\/script>\n<p id=\"test\">This is text we will change.<\/p>\n<button id=\"btn\">Set new HTML<\/button>\nLike newer versions of CSS, we can traverse elements in our page by utilizing concepts\nlike next and closest to move around from our starting point, without having to know\nexactly where our destination lies in the DOM. For example, if we were to call closest()\non our $(\u2018#link\u2019) selector, it would traverse up through our page to find the preceding link.\nIn our working example, we do not have one. In this case, the selector would return false,\nspecifying that another link was not found. Otherwise, our selector would now represent\nthat link, and any actions we took would apply to the new, preceding link that we had\nselected.\n203 The Missing Link: An Introduction to Web Development and Programming Chapter 36\nUsing classes and IDs as our selectors is another best practice approach to using jQuery.\nWhile we could specify that we are looking for images that are in paragraphs that are in\nforms inside of a div tag, the resulting selector ( $(\u201cdiv form p img\u201d); is actually read in\nreverse. jQuery will process this by finding all images, eliminating those not immediately\nwrapped in a paragraph, eliminating from that list items which are not in a form, and then\neliminating from what remains anything that is not immediately within a div.\nReading out the explanation is exhausting enough, let alone processing it. Although we\ncould use the example above effectively, if we know the use case we want our selector to\nimpact, we should simply add or implement an ID or class to those element(s) we wish to\ninteract with. By sticking with a class or an ID, the selector can simply traverse the DOM\nlooking for those identifiers. If you still need to use the combined selector approach, set it\nto a variable so you can refer to that variable in other places. This will save you the effort of\nfinding all of those elements again.\nThe examples here are only a glimpse of the full power of jQuery. We are keeping it brief\nfor a reason; until you are more comfortable with both JavaScript and CSS, immediately\nrelying on a library can muddle the learning process. That being said, it is a powerful tool\nthat you should embrace when ready to add more complex enhancements to your site.\nLEARN MORE\nKeywords, search terms: jQuery, jQuery libraries\n50 jQuery Add-ons: http:\/\/tutorialzine.com\/2013\/04\/50-amazing-jquery-plugins\/\nFull Documentation: http:\/\/api.jquery.com\/\n204 Section 3 Assessments\nFor each of these assignments, complete each step and submit all files (PHP, CSS, scripts, images,\netc.) necessary by zipping and submitting your assignment folder.\nYour First PHP\n1. Comment your name and assignment number at the top of the file.\n2. Create a variable that contains the current date and time.\n3. Create a constant that contains the assignment title.\n4. Make the assignment title the title of the page using the constant.\n5. Output the date and time.\n6. Output the PHP version, and server operating system (use system references).\n7. Display the following string as shown:\n\u2022 \u201cChicken finger subs are the best!\u201d said Clyde.\n\u2022 \u201cI agree\u201d, said Bill, \u201cbut only when they are extra hot.\u201d\n8. Calculate and display the following. Use variables for each value used in the\nequation:\n\u2022 8 + 9 = 17\n\u2022 24 % 8 = 0\n\u2022 5 \/ 3 = 1.667\nForms and More\n1. Create a website which presents the user with a registration form for a\nsubscription service. Your form should request the following information:\n\u2022 First, last name\n\u2022 Occupation\n\u2022 Email address\n\u2022 Mailing address\n\u2022 Phone\n\u2022 Job Title\n2. All information should be hidden (i.e., not be shown in the address bar).\n3. Name, email, and mailing address fields should be required.\n4. When completed, the form values are stored in a unique text file for each\nsubmission.\n5. The user should see a confirmation that their submission was received.\n205 The Missing Link: An Introduction to Web Development and Programming Assessments\nWhat Time Is It?\n1. Create an HTML page and complete the following with JavaScript only.\n2. Output the current date and time to the screen.\n3. Convert local time and date to UTC and display the result.\n4. Add a button to your page that updates these times.\nLet\u2019s Play A Game!\n1. Create a page with a 3 by 3 grid to represent a tic-tac-toe board.\n2. Using jQuery, assign an X or O (alternating back and forth) when a cell is\nclicked on.\n3. Include a button to reset the board after a game.\n4. Using canvas, put a colorful gradient of the words Tic-Tac-Toe at the top of the\npage.\nDiscussion \/ Written Response\n1. How are tags in XML different from tags in HTML?\n2. What is the difference between single and double quoted strings in PHP?\n3. What is the difference between server side and client side scripting? What are\ngood situations to use each?\n4. What is the difference between GET and POST?\n5. Describe the difference between notice, warning, and critical error messages in\nPHP.\n6. Describe the difference between include, require, and require once.\nQuestions\nTAKE THIS QUIZ ONLINE!\n1. The array $array = (\"One\"=>1, \"Two\"=>2, \"Three\"=>3) is numeric.\na. True\nb. False\n2. Which equation equates to 14?\na. 4 + 5 2 - 4\nb. (4 + 5) 2 \u2013 4\n206 The Missing Link: An Introduction to Web Development and Programming Assessments\nc. 4 + 5 (2 - 4)\nd. 4 + (5 2) \u2013 4\n3. The foreach() function in PHP is used when dealing with:\na. Strings\nb. Arrays\nc. Objects\nd. Lists\n4. Which PHP reserved array holds values passed in the URL?\na. $_POST\nb. $_GET\nc. $_SESSION\nd. None of these\n5. Which of the following is NOT a valid variable name?\na. $variable\nb. $string\nc. $_string1\nd. $and-then\n6. Which of the following is an incorrect definition?\na. Apache = Web Server\nb. PHP = Object oriented language\nc. MySQL = Database Server\nd. HTML = Operating System\n7. Which of the following PHP functions runs until a condition is met?\na. foreach()\nb. while()\nc. during()\nd. None of these\n8. Declaring strings using single quotes means PHP syntax in the string will be shown.\na. True\nb. False\n9. Which HTML element is used for JavaScript?\na. <scripting>\nb. <javascript>\nc. <jscript>\nd. <script>\n10. Where can we place JavaScript?\n207 The Missing Link: An Introduction to Web Development and Programming Assessments\na. <head>\nb. <body>\nc. A & B\nd. None of these\n11. JavaScript and Java are the same thing.\na. True\nb. False\n12. DOM stands for\na. Document Object Model\nb. Document Oriented Media\nc. Document Object Manager\nd. None of these\n13. When a user views a page containing a JavaScript program, which machine actually\nexecutes the script?\na. The user\u2019s browser\nb. The Web server\nc. Both\nd. None of the above\n14. Which of the following cannot be done with JavaScript?\na. Validating a form\nb. Sending a form\u2019s contents by email\nc. Storing the form\u2019s contents to a database file on the server\nd. None of the above\n15. Which of the following is not a valid JavaScript variable name?\na. 1stname\nb. _firstName\nc. FirstName\nd. None of these\n16. What is the correct JavaScript syntax to write \u201cHello World\u201d?\na. System.out.println(\"Hello World\")\nb. println (\"Hello World\")\nc. document.write(\"Hello World\")\nd. response.write(\"Hello World\")\n17. jQuery uses CSS selectors to interact with page elements.\na. True\nb. False\n208 The Missing Link: An Introduction to Web Development and Programming Assessments\n18. In jQuery, $('div') would select\na. The first div element\nb. All div elements\nc. An element named div\n19. Which jQuery function makes sure the contained code only runs when the page is\ndone loading?\na. $(body).onload()\nb. $(document).loaded()\nc. $document.ready()\nd. None of these\n20. jQuery is an add-on library for JavaScript, not an independent language.\na. True\nb. False\nCHECK YOUR ANSWERS\n209 Section 4:\nPersistent Data\nStorage\nSection Contents:\nDatabase Types\nData Relationships\nMySQL Data Types\nNormalization\nMySQL CRUD Actions\nAdvanced Queries\nLearning Goals:\nBy the end of this section, you should be able to demonstrate:\n\u2022 An understanding of basic database types\n\u2022 How pieces of information can relate to each other\n\u2022 The ability to normalize data into a structured query format\n\u2022 The ability to create, populate, and interact with a MySQL database\n\u2022 A basic understanding of the advanced capabilities of MySQL queries\n210 Chapter 37\nDatabase Types\nWhile there are a number of databases available for use like MySQL, node.js, and Access,\nthere is an additional list of the types of database structures each of these belong to. These\ntypes each represent a different organizational method of storing the information and de-\nnoting how elements within the data relate to each other. We will look at the three you are\nmost likely to come across in the web development world, but this is still not an exhaustive\nrepresentation of every approach available.\nFlat File\nFlat files are flat in that the entire database is stored in one file, usually separating data\nby one or more delimiters, or separating markers, that identify where elements and records\nstart and end. If you have ever used Excel or another spreadsheet program, then you have\nalready interacted with a flat file database. This structure is useful for smaller amounts of\ndata, such are spreadsheets and personal collections of movies. Typically these are comma\nseparated value files, .csv being a common extension. This refers to the fact that values in the\nfile are separated by commas to identify where they start and end, with records marked by\nterminating characters like a new line, or by a different symbol like a colon or semi-colon.\nThe nature of all data being in one file makes the database easily portable, and somewhat\nhuman readable. However, information that would be repeated in the data would be written\nout fully in each record. Following our movie example, this could be the producer, studio, or\nactors. They have what we call a one-to-many relationship with other data in the database\nthat cannot be tracked in this format.\n211 The Missing Link: An Introduction to Web Development and Programming Chapter 37\nDrawbacks to this format can affect your system in several ways. First, in our example,\nwe would enter the studio name into each record for a movie made by that studio. If the\nperson typing miss-typed an entry, it may not be found when users search the database,\nskewing search results through missing information. This often results in users creating\nnew entries for a record that appears not to exist, causing duplication. Beyond search issues,\nevery repetition is more space the database requires, especially when the value repeated is\nlarge. This was more of an issue when data was growing faster than storage capacity. Now,\nwith exception to big data storage systems, the average user\u2019s storage space on an entry level\nPC typically surpasses the user\u2019s needs unless they are avid music or movie collectors. It\nis still important to consider when you are dealing with limited resources, such as mobile\napplications that are stored on smart phones that have memory limitations lower than that\nof desktops and servers.\nAnother issue with these files is the computational effort required to search the file, edit\nrecords, and insert new ones that are placed somewhere within the body of data as opposed\nto the start or end of the file.\nFinally, flat files are not well suited for multiple, concurrent use by more than one party.\nSince all of the data is in one file, you are faced with two methods of interaction. The first\napproach is allowing anyone to access the file at the same time, usually by creating a local\ntemporary copy on their system. While this allows multiple people the ability to use the file,\nif more than one party is allowed to make changes, we risk losing data. Say User 1 creates\ntwo new records while User 2 is editing one. If User 2 finished first and saves their changes,\nthey are written back to the server. Then, User 1 sends their changes back, but their system\nis unaware of the changes made by User 2. When their changes are saved, User 2\u2019s changes\nare lost as User 1 overwrites the file. This can be prevented by checking last modified\ntimestamps before allowing data to be written, but the user \u201crefreshing\u201d may have conflicts\nbetween their edits and the edits from another user, when the same record is changed.\nThe alternate approach to allowing multiple users is to block multiple users from making\nchanges by only allowing one of them to have the file open at a time. This is done by\ncreating a file lock, a marker on the file the operating system would see, that would block\nother users from using an open file. This approach does not support concurrent access to\nthe data, and again even allowing read rights to other users would not show them changes\nin progress that another user has not completed and submitted. Another downside to this\napproach is what is called a race condition\u2014where multiple systems are trying to access a\nfile, but are unable to do so because another has the file locked, stalling all of the programs\ntrying to access the data.\nThis was a key element in a large scale blackout of 2003 that took place in the Northeast\nUnited States and part of Canada. A summer heat wave created significant strain on the\npower system as demand for air conditioning increased, resulting in the emergency shut-\ndown of a power station. This station happened to be editing its health status in a shared\nfile between itself and other stations, a method used to allow other stations to adjust their\noperational levels in response to their neighbors. The purpose of this file was to act as a\nprotection method, warning of potential spikes or drops in power at individual facilities.\nWhen the plant using the file shutdown, the file remained locked as the computer using it\ndid not have time to send a close file command. Unable to properly close the file with the\nsystems down, other stations were unaware of the problem until power demand at their\nfacilities rapidly increased. As these stations could not access the file due to the lock, a\n212 The Missing Link: An Introduction to Web Development and Programming Chapter 37\nwarning could not be passed along. Since the power stations were under increasing strain\nwith each failure, a cascading affect occurred throughout the entire system. Admittedly an\nextreme result of file lock failure, it is a very real world example of the results of using the\nwrong tools when designing a system.\nStructured Query\/Relational Database\nStructured query databases can be viewed similar to flat files in that the presentation\nof a section of data can be viewed as its own table, similar to a single spreadsheet. The\ndifference is that instead of one large file, the data is broken up based on user needs and by\ngrouping related data together into different tables. You could picture this as a multi-page\nspreadsheet, with each page containing different information. For example, continuing with\nour movie example, one table would contain everything about the studio\u2014name, opening\ndate, tax code, and so on. The next table would contain everything about the movies\u2014name,\nrelease date, description, production cost etc. Finally we might have a table for actors, pro-\nducers, and everyone else involved. This table would have their information like birthday,\nhometown, and more.\nWhat we do not have yet is a way to link these elements together. There is also a lot of\ninformation we do not want to include, because we can determine it from something else.\nFor example, we do not want to store the actors age, or we would have to update the table\nevery year on their birthday. Since we already have their birth date, we can have the server\ndo the math based on the current date and their birth date to determine how old they are\neach time it is asked.\nTo relate an actor in our people table to a movie they were in from the movie table, as\nwell as to the studio that made the movie in the studio table, we use a structured query.\nStructured query is a human readable (relatively) sentence-style language that uses a fixed\nvocabulary to describe what data we want and how to manipulate it. Part of this comes\nfrom adding extra tables. Since one actor can be in many movies, and each movie can have\nmany actors, we have a many-to-many relationship between them. Due to this, we create\nan extra table where each row represents a record of an actor and a movie they were in.\nInstead of putting their full names into this table, we put the row number that identifies\ntheir information from their respective tables. This gives us a long, skinny table that is all\nnumbers, called an \u201call-reference table,\u201d as it refers to other tables and does not contain any\nnew information of its own. We will see this in action soon.\nWe can use our query language to ask the database to find all records in this skinny table\nwhere the movie ID matches the movie ID in the movie table, and also where the movie\nname is \u201cDie Hard.\u201d The query will come back with a list of rows from our skinny table that\nhave that value in the movie ID column. We can also match the actor IDs from a table that\npairs actors with movies to records in the actor table in order to get their names. We could\ndo this as two different steps or in one larger query. In using the query, we recreate what\nwould have been one very long record in our flat file. The difference is we have done it with\na smaller footprint, reduced mistyping errors, and only see exactly what we need to. We\ncan also \u201clock\u201d data in a query database at the record level, or a particular row in a database,\nwhen editing data, allowing other users access to the rest of the database.\n213 The Missing Link: An Introduction to Web Development and Programming Chapter 37\nWhile this style can be very fast and efficient in terms of storage size, interacting with\nthe data through queries can be difficult as both one-to-many and many-to-many relation-\nships are best represented through intermediary tables like we described above (one-to-one\nrelationships are typically found within the same table, or as a value in one table directly\nreferencing another table). In order to piece our records together, we need an understanding\nof the relationships between the data.\nMySQL\nStructured query language databases are a very popular data storage method in web develop-\nment. While different approaches are emerging to address big data issues, the concepts you learn by\nstudying structured query can help you organize data in any system.\nMySQL, commonly pronounced as \u201cmy seequl\u201d or \u201cmy s q l,\u201d is a relational database\nstructure that is an open source implementation of the structured query language. The\nrelational element arises from the file structure, which in this case refers to the fact that data\nis separated into multiple files based on how the elements of the data relate to one another\nin order to create a more efficient storage pattern that takes up less space.\nIn a traditional LAMP, MySQL plays the role of our data server, where we will store\ninformation that we want to be able to manipulate based on user interaction. Contents are\nrecords, like all the items available in Amazon\u2019s store. User searches and filters affect how\nmuch of the data is sent from the database to the web server, allowing the page to change\nat the user\u2019s request.\nHistory\nMySQL began when developers Monty Widenius and David Axmark attempted to use\nthe mSQL database system to interact with their own tables they had created using low-\nlevel routines in ISAM. Their testing did not reveal the speeds or flexibility they wanted,\nso they created their own similar API, and dubbed it MySQL after co-founder Monty\u2019s\ndaughter My.\nAfter an internal release in 1995, MySQL was opened to the public with minor version\nupdates spanning 3.19 to 3.23 from 1996 to 2000. Their next major version release, 4.0,\narrived as beta in 2002 and reached production in 2003. Their next major release arrived\nas 5.0 in 2005 and included the addition of cursors, stored procedures, triggers, and views.\nThese were all significant additions to the toolset.\nIn 2008, Sun Microsystems acquired what was then called MySQL AB with an agree-\nment to continue development and release of the software as a free and open source item.\nWhen Sun was acquired by Oracle in 2010, MySQL was part of the package deal, under\nthe same requirements. There have been some arguments over whether or not the spirit\nof the agreement between MySQL and Sun has been fully upheld by Oracle, including\ncomplaints from Widenius himself.\nStructure\nWe organize data in MySQL by breaking it into different groups, called tables. Within\nthese tables are rows and columns, in which each row is a record of data and each column\nidentifies the nature of the information in that position. The intersection of a row and\n214 The Missing Link: An Introduction to Web Development and Programming Chapter 37\ncolumn is a cell, or one piece of information. Databases are collections of tables that repre-\nsent a system. You can imagine a database server like a file cabinet. Each drawer represent\na database in our server. Inside those drawers are folders that hold files. The folders are like\nour tables, each of which holds multiple records. In a file cabinet, our folders hold pieces\nof paper or records, just like the individual rows in a table. While this may seem confusing\nnow, we will see it in action soon; this is the approach we will focus on for this section of\nthe text.\nNoSQL\nNoSQL databases represent systems that maintain collections of information that do\nnot specify relationships within or between each other. In reality, a more appropriate name\nwould be NoRel or NoRelation as the focus is on allowing data to be more free form.\nMost NoSQL system follow a key-value pairing system where each element of data is\nidentified by a label. These labels are used as consistently as possible to establish common\npoints of reference from file to file, but may not be present in each record. Records in\nthese systems can be represented by individual files. In MongoDB, the file structure is a\nsingle XML formatted record in each file, or it can be ALL records as a single XML file.\nSearching for matches in a situation like this involves analyzing each record, or the whole\nfile, for certain values.\nThese systems excel when high numbers of static records need to be stored. The more\nfrequently data needs to be changed, the more you may find performance loss here. However,\nsearching these static records can be significantly faster than relational systems, especially\nwhen the relational system is not properly normalized. This is actually an older approach\nto data storage that has been resurrected by modern technology\u2019s ability to capitalize on its\nbenefits, and there are dozens of solutions vying for market dominance in this sector. Unless\nyou are constructing a system with big data considerations or high volumes of static records,\nrelational systems are still the better starting place for most systems.\nLEARN MORE\nKeywords, search terms: Database types, data structures, data storage\nNode.js: http:\/\/nodejs.org\/\nThe Acid Model: http:\/\/databases.about.com\/od\/specificproducts\/a\/acid.htm\nKey-Value Stores, Marc Seeger: http:\/\/blog.marc-seeger.de\/assets\/papers\/Ultra_Large_Sites_SS09-\nSeeger_Key_Value_Stores.pdf\n215 Chapter 38\nData Relationships\nBefore we begin to design our database, we need to understand the different relationships\nthat can exist between two pieces of information. For this example, we will start with two\nimaginary tables. The first will be names, and the second will be phone numbers. If we\nfirst consider a person with a cell phone that has no other numbers they can be reached at,\nwe see a one-to-one relationship\u2014the phone number for that cell phone is the only one\nassociated with that person, and that person is the only one you reach when you call that\nnumber.\nThis does not cover all phone uses, though. Many of us still have phones at home or at\nwork that are used by multiple people. In this case, the relationship between that phone\nand its users is one-to-many, as more than one person can be reached by using that phone\nnumber.\nIn reality, both of these are probably true for most people. This means that one number\ncan represent many people (calling a house or business) and one person can be reached via\nmultiple phone numbers. In this case, we have a many-to-many relationship where multiple\nvalues of the same table can relate to multiple values of another table. In this example, of\nall numbers (work, home, or cell) are stored in the same table, there can be multiple values\nconnected to either side of a given number.\n216 The Missing Link: An Introduction to Web Development and Programming Chapter 38\nWhen we apply the theory of normalization to the database we are about to design, it is\nimportant to keep these relationships in mind as it indicates how we should structure our\ndatabase. A one-to-one relationship can be resolved by keeping both pieces of information\nin the same table or by including a reference in either of the two tables to the other. For\none-to-many relationships we need to keep the data in separate tables, and refer to the\n\u201cone\u201d item in our \u201cmany\u201d table. Finally, for many-to-many relationships we do not have a\ngood way to link directly between tables without violating normalization methods; instead\nwe will create small connecting tables where each record represents a valid combination of\nthe items from our two tables.\nPrimary, Foreign Keys\nTo find information in our database we need to be able to uniquely identify the record(s)\nwe want to interact with. This can be done several ways. First, we can identify a piece of\ninformation from our table that makes each record unique, like a social security number\nidentifies a US citizen. Sometimes, however, our record does not have one single piece of\ninformation that does this. Take a home address for example. To make an address unique,\nwe need to take the street name, number, city, and zip code at a minimum. We can use this\nmethod to create a key that uses more than one column to identify a record, called a hybrid\nkey.\nOur last method is to let the database make a key for us, so every time we insert a record\nit receives a number unique for that table automatically. In this method, we let the database\nmanage an auto-increment for that column. While it identifies a particular row, it does not\ncontribute information that relates to the data it identifies. We will see examples of primary\nkeys come into play as we normalize an example dataset, so for now you just need to keep\nthe concept in mind.\n217 Chapter 39\nMySQL Data Types\nThe next few pages will likely be a little dry. Apologies now. However, whenever we create\na table structure in MySQL we must identify the data type we intend to store in any given\ncolumn, and depending on the type of data and other features we may want, this is just the\nbeginning. Since one of our goals in the relational approach to database design is reducing\noverall size, it is also important to consider the best fit data type for what we want to store.\nFamiliarizing yourself with the types available in MySQL will lend to your ability to design\nefficient table structures. The tables below are adopted from http:\/\/www.w3resource.com\/\nmysql\/mysql-data-types.php. They have been trimmed down in an attempt to not intro-\nduce an overwhelming amount of detail. You are encouraged to review the original version\nfor more depth.\nTable 14 MySQL Data Types\nInteger Types\nLength Minimum Value(Signed\/ Maximum Value(Signed\/\nType\nin Bytes Unsigned) Unsigned)\nTINYINT 1 -128 to 0 127 to 255\nSMALLINT 2 -32768 to 0 32767 to 65535\nMEDIUMINT 3 -8388608 to 0 8388607 to 16777215\nINT 4 -2147483648 to 0 2147483647 to 4294967295\nBIGINT 8 -9223372036854775808 9223372036854775807 to\nto 0 18446744073709551615\nFloating-Point Types\nTypes Description\nFLOAT A precision from 0 to 23 results in a four-byte single-precision FLOAT column.\nDOUBLE A precision from 24 to 53 results in an eight-byte double-precision DOUBLE\ncolumn.\n218 The Missing Link: An Introduction to Web Development and Programming Chapter 39\nFixed-Point Types\nTypes Description\nDECIMAL In the format DECIMAL(precision,scale). Maximum number of digits allowed are\n65 before MySQL 5.03 and 64 after 5.03.\nNUMERIC Same as DECIMAL.\nBit Value Types\nTypes Description\nBIT In the format b BIT(N), where N is an integer.\nNumeric type Attributes\nTypes Description\nTYPE(N) Where N is an integer and display width of the type is up to N digits.\nZEROFILL The default padding of spaces is replaced with zeroes. So, for a column INT(3)\nZEROFILL, 7 is displayed as 007.\nDATETIME, DATE, and TIMESTAMP Types\nTypes Description Display Format Range\nDATETIME Use when you need values YYYY- \u20181000-01-01 00:00:00\u2019\ncontaining both date and time MM-DD to \u20189999-12-31\ninformation. HH:MM:SS 23:59:59\u2019.\nDATE Use when you need only date YYYY-MM- \u20181000-01-01\u2019 to\ninformation. DD \u20189999-12-31\u2019.\nTIMESTAMP Values are converted from the YYYY- \u20181970-01-01 00:00:01\u2019\ncurrent time zone to UTC while MM-DD UTC to \u20182038-01-19\nstoring, and converted back from HH:MM:SS 03:14:07\u2019 UTC.\nUTC to the current time zone\nwhen retrieved.\nString Types\nTypes Description\nCHAR Contains non-binary strings. Length is fixed as you declare while creating a table.\nWhen stored, they are right-padded with spaces to the specified length.\nVARCHAR Contains non-binary strings. Columns are variable-length strings.\nBINA RY and VARBINARY Types\nTypes Description Range in bytes\nBINARY Contains binary strings. 0 to 25.\n219 The Missing Link: An Introduction to Web Development and Programming Chapter 39\nVARBINARY Contains binary strings. A value from 0 to 255 before MySQL 5.0.3, and 0\nto 65,535 in 5.0.3 and later versions.\nBLOB and TEXT Types\nTypes Description Categories Range.\nTINYBLOB Maximum length of 255 characters.\nLarge binary object that\ncontaining a variable amount Maximum length of 16777215\nMEDIUMBLOB\nof data. Values are treated as characters.\nBLOB\nbinary strings. You do not need\nMaximum length of 4294967295\nto specify length while creating\nLONGBLOB\ncharacters.\na column.\nTINYBLOB Maximum length of 255 characters.\nMaximum length of 16777215\nValues are treated as character MEDIUMBLOB\nTEXT characters.\nstrings having a character set.\nMaximum length of 4294967295\nLONGBLOB\ncharacters.\nENUM Types\nA string object whose value is chosen from a list of values given at the time of table\ncreation. For example:\nENUM('small', 'medium', 'large')\nSET Types\nA string object having zero or more comma separated values (maximum 64). Values are\nchosen from a list of values given at the time of table creation.\n220 Chapter 40\nNormalization\nNormalization is the process of structuring and refining the data we want to store in such\na way that we eliminate repeated information and represent as much connection between\nrecords as possible. When a database meets particular rules or features of normalization, it\nis usually referred to as being in a particular normal form. The collection of rules progress\nfrom the least restrictive (first normal, or 1NF) through the most restrictive (fifth normal,\nor 5NF) and beyond. Databases can still be useful and efficient at any level depending on\ntheir use, and anything beyond third normal form is more of a rarity in real world practice.\nBear in mind, that normalization is a theory on data organization, not law. Your database\ncan operate just fine without adhering to the following steps, but following the process of\nnormalizing will make your life easier and improve the efficiency of your website. Not every\nset of circumstances will require all of these rules to be followed. This is especially true if\nthey will make accessing your data more difficult for your particular application. These rules\nare designed to help you eliminate repeated data, are able to keep your overall database size\nas small as possible, and create integrity in your records.\nZero Normal Form\nTo begin, we need something to normalize. Through this section we will create a data-\nbase to keep track of a music collection. First, we need a list of what we want to track. We\nwill follow what is generally useful for a collection of music, like albums, artists, and songs.\nThese categories give us a list of things we want to store, so let us come up with what a full\nrecord might contain:\nBand Name Album Title Song Title Song length Producer Name\nRelease Year Artist hometown Concert Venue Concert Date Artist Name\n221 The Missing Link: An Introduction to Web Development and Programming Chapter 40\nTo get a visual of what this table might look like, let us take a look at some sample data\nwith many of these fields:\nSONG TITLE ARTIST GENRE SUB-GENRE YEAR\nShannon Henry Gross Rock Light Rock 1976\nLover\u2019s Will Bonnie Raitt Rock Light Rock 1998\nI Don\u2019t Wanna Live Without Your Love Chaptercago Rock Light Rock 1988\nHeart Attack Olivia Newton-John Pop Adult Contemporary 1982\nIn A Dream Badlands Rock Hard Rock 1991\nWith A Little Luck Paul McCartney Rock Classic Rock 1978\nIt\u2019s A Miracle Barry Manilow Pop Adult Contemporary 1975\nIt\u2019s Only Love Bryan Adams \/ Tina Pop Adult Contemporary 1984\nTurner\nJazzman Carole King Pop Adult Contemporary 1974\nJesse Carly Simon Pop Adult Contemporary 1980\nJust Like Jesse James Chapterr Pop Adult Contemporary 1989\nLittle Miss Cannot Be Wrong Spin Doctors Pop Adult Contemporary 1992\nLost In Love Air Supply Pop Adult Contemporary 1980\nGood Times Sam Cooke Hip-Hop Soul 1964\nMake It With You Bread Pop Adult Contemporary 1970\nMandy Barry Manilow Pop Adult Contemporary 1974\nMiss Chaptertelaine K.D. Lang Pop Adult Contemporary 1992\nNever Gonna Fall In Love Again Eric Carmen Pop Adult Contemporary 1976\nPeople Get Ready Rod Stewart Pop Adult Contemporary 1985\nTry Honesty (Radio Version) Billy Talent Rock Modern Rock 2007\nSilver Threads And Golden Needles Linda Ronstadt Pop Adult Contemporary 1974\nSo Far Away Carole King Pop Adult Contemporary 1971\nFat Lip Sum 41 Rock Modern Rock 2001\nThank You For Being a Friend Andrew Gold Pop Adult Contemporary 1978\nAs an example of non-normalized or \u201czero normal form\u201d data, you can look to the data\nabove where you see long, repeated fields. While this table is easy to read without a query or\nsoftware, it quickly becomes unmanageable even in its readable format as 25 records turns\ninto just a few hundred.\nLet us take a summary look at our forms that will help us tackle this problem:\nFirst Normal Form\n1. Create separate tables for related information\n2. Eliminate duplicated columns within tables\n3. Create primary keys for each table\nSecond Normal Form\n\u2022 Meet first normal form\n\u2022 Move data that will repeat often into a reference table\n\u2022 Connect reference tables with foreign keys\n222 The Missing Link: An Introduction to Web Development and Programming Chapter 40\nThird Normal Form\n\u2022 Meet second normal form\n\u2022 Eliminate columns that do not relate to their primary key\nFourth Normal Form\n\u2022 Meet third normal form\n\u2022 Has no multi-valued dependencies\nWhen working with an existing data set like our example above, you can quickly move\nthrough normalization once you are familiar with the rules. By adjusting our table(s) until\nthey meet each set of rules, our data becomes normalized. Since we are learning, we will\nformulate our database from scratch.\nADDITIONAL NOTES\nAs we draw up our design, each bolded word represents a table, and the names\nunderneath represent our columns. We can simulate a record, or row, in our\ndatabase by writing out sample values for each thing in our list.\nFirst Normal Form\nTo get started, we will go through our draft list piece by piece. \u201cBand Name\u201d refers to\nthe official name of the group or artist we are talking about. A good question to ask is\ndoes the column sounds like a concept, object, or idea that represents something, or would\nhave properties, in our database. The concept of a band for us is important, and it will have\nproperties made up of other columns we plan to have, like songs and albums. Since we can\nsee this is a concept, it is a good candidate for a table, so we will start by creating a table\nfor our bands. Just like we studied in the PHP section, it is good practice to keep a set of\nconventions when naming elements. With databases, it can be helpful to treat your tables\nas the plural form of what its rows will contain. In this case, we will name our table Bands.\nUnder this name, we will list \u201cBand Name\u201d to the list of information in that table. A key\nelement to think about every time we consider adding a field to a table is to make sure it\nrepresents only one piece of information. A band name meets our criteria of being only one\npiece of information, so we are on track.\nNow our design notes might look more like this:\nBand Name Album Title Song Titles Song length Producer Name\nRelease Year Artist hometown Concert Venue Concert Date Artist Names\nBands\nBand Name\n223 The Missing Link: An Introduction to Web Development and Programming Chapter 40\nOur next element, Album Title, seems like it would relate to a band. At first, we might\nbe tempted to put it in the band table because the album record we add belongs to the band.\nHowever, when we consider our data relationships, it becomes clear that we have a one to\nmany situation; one band will (one-hit wonders aside) release more than one album. Since\nwe always program to meet our highest possible level of relationship, the one-hit-wonders\nwill exist perfectly fine even with only one album in our database. If you recall, we address\none to many relationships by placing the two sides in separate tables and identifying in the\n\u201cmany\u201d table which \u201cone\u201d the record is paired with. To do this, we will make an albums table\njust like we did for bands, and add a placeholder in our note to refer to the band table:\nBand Name Album Title Song Titles Song length Producer Name\nRelease Year Artist hometown Concert Venue Concert Date Artist Names\nBands Albums\nBand Name Album Name\n(reference to Band)\nNow we are on to \u201cSong Titles.\u201d The songs are organized into albums, so we will add it in.\nAlbums\nAlbum Name\nSong Titles\nApply our tests and see if this works. Does this field represent one piece of information?\nTitles is plural as we have it written, but we cannot put more than one piece of information\nin a single cell. We will need to break that up into individual titles to resolve. To make that\nchange in this table though, we would have to create a column for each track. In order to do\nthat, we would need to know ahead of time the max number of tracks any album we enter\nwill have. This is not only impractical, but violates our first normal form of not repeating\ncolumns. Through this we can see that we again have a one to many relationship on our\nhands as one album will have multiple tracks. To resolve this, once again we will break our\nmultiple field out to its own table, where we can create a link back to our album table:\nBand Name Album Title Song Titles Song length Producer Name\nRelease Year Artist hometown Concert Venue Concert Date Artist Names\nBands Albums Songs\nBand Name Album Name Song Title\n(reference to Band) (reference to Album)\nWe can already see a thread weaving its way through our tables. Even though these fields\nare no longer all in one record together, you can see how we can trace our way through by\nlooking for the band we want in the albums table, and when we know the albums, we can\nfind all the tracks the band has published. To continue with our design we will move to\nsong length. This field sounds fitting in our songs table, and is only one piece of informa-\ntion, so we are off to a good start! We can also see that we would only have one song length\nper record as each record here is a song, so we comply with column count, too. We can put\nit there for now, and will see if it meets the rest of our tests as we move on.\nBand Name Album Title Song Titles Song length Producer Name\n224 The Missing Link: An Introduction to Web Development and Programming Chapter 40\nRelease Year Artist hometown Concert Venue Concert Date Artist Names\nBands Albums Songs\nBand Name Album Name Song Title\n(reference to Band) Song Length\n(reference to Album)\nNow that we have an idea of first normal form, we will get the rest of our initial columns\nout of the way:\nBand Name Album Title Song Titles Song length Producer Name\nRelease Year Artist hometown Concert Venue Concert Date Artist Names\nBands Albums Songs\nBand Name Album Name Song Title\nRelease Year Song Length\n(reference to Band) (reference to Album)\nLabels Artists Concerts\nProducer Name Artist Name Venue\nHometown Date\nNow that we have exhausted our initial list, we will consider the last element of 1NF,\nwhich is primary keys for each table. Many of our tables are not presenting us with good\ncandidates, as band names, venues, albums, tracks, and even artists could share the same\nnames as time goes on. To make things consistent, we will create auto incrementing IDs\nfor each table. To follow best practices, we will use the singular version of the noun with\nID after it to denote our primary keys. This identifies the row as a singular version of the\nconcept our table name is a plural of:\nBands Albums Songs\nbandID albumID songID\nBand Name Album Name Song Title\nRelease Year Song Length\n(reference to Band) (reference to Album)\nLabels Artists Concerts\nproducerID artistID venueID\nProducer Name Artist Name Venue\nHometown Date\nSecond Normal Form\nWe have now reached first normal form. Now I must admit, I have been a bit sneaky.\nBy introducing data relationships, and showing you how to apply the relationship when\nconsidering where to put columns, we have already addressed part of second normal form,\nso, technically, we are already beyond first normal form. The first piece of second normal\nform is creating tables anywhere where a value of a cell could apply to multiple records of\nthat table. When we moved song title out of albums, we were fulfilling this requirement.\nLooking over our tables again, we can see that, as we have things now, this has been met.\n225 The Missing Link: An Introduction to Web Development and Programming Chapter 40\nThe other element of second normal form is that connections between tables should\nbe facilitated by foreign keys. We have already started that process by earmarking a couple\ntables with notes where we knew we needed connections. Now that we have our primary\nkeys, we have the unique values we will need to use. For this pass, we will look at how\nour tables relate to each other and see if we need connections. This is another step where\nremembering how to solve our data relationships will be important. To start with the tables\nwe earmarked, we will look at \u201cAlbums.\u201d Our reference calls for connecting it to \u201cBands,\u201d\nso we will add a foreign key in \u201cAlbums\u201d that points to \u201cBands.\u201d To make things easy on us,\nwe can use the same name in both tables so we know what it is for.\nBands Albums Songs\nbandID albumID songID\nBand Name Album Name Song Title\nRelease Year Song Length\nbandID (reference to Album)\nLabels Artists Concerts\nproducerID artistID venueID\nProducer Name Artist Name Venue\nHometown Date\nWe can do the same with our \u201cSongs\u201d table as well to reference our \u201cAlbums\u201d table.\nLooking at our \u201cLabels\u201d table, it could be argued that since a band belongs to a label that\nwe should connect them. However, the relationship between a band and a label can change\nover time as contracts come and go, which would give us a many-to-many relationship.\nAnother place we can associate this information is in the album. Once an album is pub-\nlished, the label that produced it will not change, and multiple labels do not publish the\nsame album. To resolve these, we need album in two places. First, we need a many-to-many\nrelationship table for labels and bands, and a one-to-many link between albums and labels.\nWe already know how to link on-to-many, so we will add a foreign key to producerID in or\nalbums table. Then we will add a table that has an incrementing auto ID, a foreign key to\nlabels, and foreign key to albums, and a timestamp:\nBands Albums Songs\nbandID albumID songID\nBand Name Album Name Song Title\nRelease Year Song Length\nbandID (reference to Album)\nproducerID\nLabels Artists Concerts Bands 2 Labels\nproducerID artistID venueID id\nProducer Name Artist Name Venue producerID\nHometown Date bandID\ntimestamp\nBy adding the timestamp column in our many-to-many table, we can sort by the date\nthe records were added, assuming they were added chronologically. This means the newest\nrecord would represent who the band is signed with now, and we can look at all the records\nwith a particular band to see who a band has worked with, and we can look at all the records\nfor a label to see who they have signed.\nIf we wanted to round out this information more, we could add start and end time-\nstamps that represent contracts with the label. With the additional of these fields we could\ncreate even more timelines.\nContinuing on, we have our \u201cArtists\u201d table. We know performers can be solo or in\ngroups, and can belong to different bands over time, so we have another many-to-many\n226 The Missing Link: An Introduction to Web Development and Programming Chapter 40\nrelationship. You will notice the name given to the table bridging our bands and labels\nrelationship is labelled Bands2Labels. This of course is only one possible name we could\nuse, but is an example of how to clearly identify the purpose of the table, as we are linking\n\u201cbands to labels.\u201d Our last table to look at is \u201cConcerts.\u201d We need a way to associate a\nparticular concert with the band that performed. Since each row of this table is a particular\nconcert we will add a foreign key in.\nWe now have foreign keys to link our tables together where needed, and do not have a\nsituation where multiple records in a table would contain the same values. We have now\nreached second normal form.\nThird Normal Form\nOur next normal form requires that all of the fields in a table relate to the key (or are a\nkey), or in other words the concept of that table. In our smaller tables this is immediately\napparent to us\u2014a band name relates directly to a band, and a producer name relates directly\nto a label. It can be remembered in a popular rewording to the well-known court room oath\nthat references Edgar Codd, who created the concept of third normal form. My favorite\nvariation is the following: \u201cAll columns in the table must relate to the key, the whole key,\nand nothing but the key, so help me Codd\u201d(source unknown).\nTo see third normal form in action we will review our current design. We already con-\nsidered bands and labels while describing this form, so we will mark them green as OK.\nBands Albums Songs\nbandID albumID songID\nBand Name Album Name Song Title\nRelease Year Song Length\nbandID (reference to Album)\nproducerID\nLabels Artists Concerts Bands2Labels\nproducerID artistID venueID id\nProducer Name Artist Name Venue producerID\nHometown Date bandID\ntimestamp\nWhen we review \u201cAlbums\u201d and \u201cSongs\u201d we only have a couple fields to consider from\neach table as the rest are primary and foreign keys. Album names and release years both\nrefer to albums, and the same holds true for song titles and length in the songs table. Band-\ns2Lables is also easy to review as all of the elements are keys\u2014it is an all-reference table.\nBands Albums Songs\nbandID albumID songID\nBand Name Album Name Song Title\nRelease Year Song Length\nbandID (reference to Album)\nproducerID\nLabels Artists Concerts Bands2Labels\nproducerID artistID venueID id\nProducer Name Artist Name Venue producerID\nHometown Date bandID\ntimestamp\nNext, consider the \u201cArtists\u201d table. Artist name, obviously, fits with artist. What about\nhometown? Certainly they relate\u2014a person usually identifies one location as home\u2014but\n227 The Missing Link: An Introduction to Web Development and Programming Chapter 40\nthe actual information that would reside in the cell (likely a city) does not just relate to an\nartist. Looking at our concert table for example, a venue would have a physical location in\nwhich it resides as well. This tells us that hometown needs to be moved somewhere else.\nSince we do not have a place in our database that speaks specifically to locations, we will\nhave to add one. When we do this, we should also consider that in reality the hometown\ncity name by itself is not sufficiently unique without a state and zip code reference as well,\nand we will need to change our existing hometown column to reference the new table:\nBands Albums Songs\nbandID albumID songID\nBand Name Album Name Song Title\nRelease Year Song Length\nbandID (reference to Album)\nproducerID\nLabels Locations Artists Concerts Bands2Labels\nproducerID locID artistID venueID id\nProducer Name city Artist Name Venue producerID\nstate locationID Date bandID\nzip timestamp\nAlmost there! When we consider the \u201cConcerts\u201d table, at first glance we appear to be in\nthird normal form (because we are). While we are here though, we need to keep in mind\nthat in each pass of normalization we need to consider the database as a whole and all of\nthe other forms of normalization as we keep tweaking our tables. Here, while venue makes\nsense as a column, using venue as the primary key seems confusing, as we are identifying\na particular concert, not a particular place. When we consider this, it may also become\napparent that just knowing the name of a venue may not be enough to uniquely identify it\neither. Since we have created a location table, we can take advantage of it here as well:\nBands Albums Songs\nbandID albumID songID\nBand Name Album Name Song Title\nRelease Year Song Length\nbandID (reference to Album)\nproducerID\nLabels Locations Artists Concerts Bands2Labels\nproducerID locID artistID concertID id\nProducer Name Artist Name Venue producerID\ncity\nlocationID bandID\nlocID\nstate timestamp\nDate\nzip\nHave we satisfied all forms? Well, not quite yet. We have adjusted our concerts table to\nbetter meet third normal form, but is it fully compliant or did we miss something? Imagine\nthis table populated and you will notice that the venue field\u2014the name of our location\u2014\nwould be repeated each time the venue was used. This violates second normal form. To solve\nthis, we know we need to split the data out to its own table, so we need to see if anything\nelse should go with it. The location ID we just created relates to the venue, not the event, so\nthat should go too. The date is correct where it is, as it identifies a particular piece of infor-\nmation about the concert. Does this cover everything? We do not seem to have a means to\nidentify who actually performed the concert at that venue on that date, do we? This is a key\npiece of information about a concert, and any given concert usually involves more than one\nperformer. Not only do we need to add the field but we need to remember our data relation-\nships and see that this is a many-to-many between artists and concerts. Multiple artists can\nperform at the same event, and with any luck a given artist will perform more than one\n228 The Missing Link: An Introduction to Web Development and Programming Chapter 40\nconcert. We can address all of these changes by creating a Venues table, a many-to-many\nreference table for concerts and performers, and adjusting our concerts table to meet these\nchanges. Try writing it out yourself before looking at the next table!\nBands Albums Songs Concerts2Artists\nbandID albumID songID Id\nBand Name Album Name Song Title artistID\nRelease Year Song Length concertID\nbandID (reference to\nproducerID Album)\nLabels Locations Artists Venues Concerts Bands2Labels\nproducerID locID artistID venueID concertID id\nProducer Name city Artist Name Name venueID producerID\nstate locationID locID bandID\nDate\nzip timestamp\nNow, all of the tables we had at the beginning of third normal form are complete. We\nneed to review the three we created to make sure they, too, meet all three forms. In this\nexample, they do.\nNow that we have reached third normal form we can see how normalization helps us\nout. We could have a list of 2000 concerts in our system, and each of those records would\njust be numerical references to one record for each artist and concert. In doing this, we do\nnot of repeat all of those details in every record.\nFourth Normal Form\nWhile most systems (and most tutorials) usually stop at third normal form, we are going\nto explore a bit further. Fourth normal form is meant to address the fact that independent\nrecords should not be repeated in the same table. We began running into this when we\nlooked for problems in complying with second normal form as we began to consider the\ndata relationships between our fields. At the time, not only did we split out tables where we\nfound one-to-many relationships, we also split out all-reference tables to account for the\nmany-to-many relationships we found. This was easy to do at the time as we were focused\non looking for those relationship types. That also means, however, that we have already met\nfourth normal form, by preventing many-to-many records from creating repeated values\nwithin our tables.\nTo keep fourth normal compliance in other systems, you will need to be mindful of\nplaces where user-submitted data could be repeated. For example, you may allow users\nto add links to their favorite sites. Certainly at some point more than one user will have\nentered the same value, and this would end up repeated in the table. To prevent this, you\nwould store all links in a table and create a many-to-many reference with your user records.\nEach time a link is saved, you would check your links table for a match, update records if it\nexists, or add it to the table if it has never been used.\nThis process can be helpful when you expect very high volumes of records and\/or need to\nbe very mindful of the size, or footprint, of your database (for example, running the system\non a smartphone).\n229 The Missing Link: An Introduction to Web Development and Programming Chapter 40\nBefore we move on, we will make one more pass to clean up our design. Since we started\nwith words as concepts, but want to honor best practices when we create our database, we\nwill revise all of our tables to follow a consistent capitalization and pluralization pattern:\nBands Albums Songs Concerts2Artists\nbandID albumID songID id\nbandName albumName title artistID\nreleaseDate length concertID\nbandID albumID\nproducerID\nLabels Locations Artists Venues Concerts Bands2Labels\nproducerID locID artistID venueID concertID id\nproducer city artistName venueName venueID producerID\nstate locationID locationID date bandID\nzip timestamp\nCongratulations, you now have a normalized database! Flip back to look at our original\ndesign, and you will see a number of trends. First, the process was a bit extensive, and turned\ninto far more tables than you likely expected. However, it also helped us identify more\npieces of information that we thought we would want, and helped us isolate the informa-\ntion into single pieces (like splitting location in city, state, zip) which allows us to search by\nany one of those items.\nLEARN MORE\nKeywords, search terms: Normalization, boyce-cobb normal form\nMySQL\u2019s Guide: http:\/\/ftp.nchu.edu.tw\/MySQL\/tech-resources\/articles\/intro-to-normalization.html\nHigh Performance MySQL: http:\/\/my.safaribooksonline.com\/book\/-\/9781449332471\n230 Chapter 41\nMySQL CRUD Actions\nThere are four basic actions that cover how we interact with the data and structures in our\ndatabase. We can either create new data, read existing data, update something already in\nplace, or delete it. These four actions are collectively referred to as CRUD, for Create Read\nUpdate and Delete, and represent the basic concepts behind data interaction. In MySQL,\nwe will address these concepts through a collection of commands.\nOpening SQL\nFrom a Browser\nIf you are using an installation of WAMP, you will have access to PhpMyAdmin from\nyour browser. This program includes a SQL tab where you can input commands to your\nserver as well as use a graphic interface to interact with your databases. Typically you can\nget there by going to http:\/\/locahost\/phpmyadmin or http:\/\/127.0.0.1\/phpmyadmin (do\nnot forget to add the port number if you changed yours from :80). Your credentials will be\nthe same as described in the next section, and you will find a SQL tab that allows you to\nenter commands to follow along with our examples.\nFrom a Command Prompt\nEach MySQL installer includes a client access program to interact with your server.\nDue to the variety of operating systems and versions of MySQL, definitive directions for\naccessing your client program cannot be provided here, but can be found by searching\nonline with the details of your particular system. In general, your programs list may contain\na MySQL folder with a link to launch the client, or you can access it by using your system\u2019s\nterminal window. Once you have a terminal window open, you can log into MySQL by\ntyping:\nmysql \u2013u root \u2013p\nThis instructs your computer to start MySQL using the username (represented by \u2013u)\nof root and asking it to prompt you for a password, represented by \u2013p. Once you press\nenter, you will be prompted to enter the password. By default, MySQL uses root as the\nusername. Your password could be root, password, or an empty password (type nothing at\n231 The Missing Link: An Introduction to Web Development and Programming Chapter 41\nall) depending on your version. If you changed these values when you installed, use what\nyou provided in place of this example.\nOnce logged in to your database, you can begin to take a look around to see what your\nserver already contains. To see what is currently in your server, you can enter a simple\ncommand to ask for that list. In MySQL we need to end our statements with semi-colons\njust as we do with PHP. Our commands and interactions are structured to be sentence-like,\nwhich makes queries easier to understand. Let us take a look at what we have available:\nShow databases;\nIn a new installation of MySQL, you should see a list similar to the following:\n+--------------------+\n| Database |\n+--------------------+\n| information_schema |\n| mysql |\n+--------------------+\n2 rows in set (0.00 sec)\nNow that we have designed our database, it is time to describe it to the server, and get\nsome data into it, so we have a fully functioning system. First we need to get into MySQL:\ncreate database music;\nAfter pressing enter you should see a response from the server that gives either a com-\npleted message or an error message, along with other information such as the amount of\ntime it took to complete the instruction. If you receive an error that the database already\nexists, you can use a different name. If something happened and you are starting over, or\nknow you can get rid of the existing database, you can get rid of it and all its data by typing:\ndrop database music;\nKeep in mind this command deletes everything\u2014the database and all tables and data\nstored in it. There is no \u201cundo\u201d option or garbage bin to recover from, so if you do not have\na backup you will not be able to recover from this action. Once you have a database created,\ntell the server that is the one you want to interact with by typing:\nuse music;\nYou will notice we consistently use semi-colons after each instruction. Just like in PHP,\nthis is how the server can tell where one instruction ends and the next begins.\nCreate\nThe first step in building our database is to create the tables from our design. Before we\ndo so, we need to create the database we want to put those tables in. Be sure you have a\nmusic database created as we saw above. We will keep using the database we just designed.\nThe create command for a table involves specifying that we mean to create a table (as\nopposed to a database), defining our table name, and then in parenthesis defining each\ncolumn. This done with a comma separated collection of values that includes the name,\n232 The Missing Link: An Introduction to Web Development and Programming Chapter 41\ntype, null option, and other features of the column. Here we will look at the command\nnecessary to create our first table:\nBands Albums Songs Concerts2Artists\nbandID albumID songID id\nbandName albumName title artistID\nreleaseDate length concertID\nbandID albumID\nproducerID\nLabels Locations Artists Venues Concerts Bands2Labels\nproducerID locID artistID venueID concertID id\nproducer city artistName venueName venueID producerID\nstate locationID locationID bandID\ndate\nzip timestamp\nCreate table bands (bandID int not null auto_increment primary\nkey,\nbandName varchar (40) not null\n);\nYou will notice a few things about this statement. First, we only use commas to separate\nthe entire definition of one column from another as opposed to separating each piece of\ninformation about a column. If you are using a command line interface, you can also use the\nenter key to format your statement as we did above, with one column on each line. This is\ndue to the fact that the statement will not execute until the semicolon is present.\nAfter we identified our first column as bandID, we identified it as an integer, referencing\nthe data types we looked at earlier. We also stated that this column cannot be null, meaning\nit must have a value. We can apply this on any column that must be present in our table\nfor a record to be considered useable. In this case, we want bandID to be entered for us by\nthe database. Adding the auto_increment attribute will tell the database to assign each new\nrecord a value (we can also control the starting value if we ever wanted to start at something\nother than 1). Finally, we label this column as the primary key of our table, place a comma\nat the end of our definition, and move to the next column.\nWhen we add our bandName to the table definition we needed to define far less. This\ntime, we went with varchar (variable character) which means we expect the content to be\ntext, but not necessarily long text like sentences or paragraphs. When we use varchar, we\nhave to tell MySQL what the maximum number of characters is allowed in the field, so it\nknows how much space to reserve for each record. In this example, we have decided that\nour longest band name would be at most 40 characters. To complete this column we again\nspecify that it cannot be null. In our example, it is the only field in the table outside of the\nid anyway. If we wanted to allow a null value, we could include the word null in place of\nnot null, or just drop that piece altogether (MySQL will assume null is valid unless told\notherwise).\nAfter we execute this statement, we can use the command \u201cshow tables\u201d to see what is\nin our database:\nmysql> show tables;\n+--------------------+\n| Tables_in_music |\n+--------------------+\n| bands |\n+--------------------+\n233 The Missing Link: An Introduction to Web Development and Programming Chapter 41\n1 row in set (0.00 sec)\nTo make sure everything was created as we intended, we can look more closely at the\nstructure of the table we created with the command \u201cshow columns from\u201d:\nmysql> show columns from bands;\n+---------+-----------+----+-----+-------+--------------+\n| Field | Type |Null| Key |Default| Extra |\n+---------+-----------+----+-----+-------+--------------+\n| bandID | int(11) | NO | PRI | NULL |auto_increment|\n| bandName|varchar(40)| NO | | NULL | |\n+---------+-----------+----+-----+-------+--------------+\n2 rows in set (0.02 sec)\nHere we can see the structure of what we just created. Neither field can be null, bandID\nis our primary key, will auto increment, and neither field has a default value. If we want to\nassign a default value, we would include the word default followed by the value in quotation\nmarks when defining our column.\nWe will create one more table here as a second example, and then you can continue\ncreating the rest on your own in order to practice. Now we should create the Albums table\nso we can see a data field in use, which will cover all of the data types we will need in this\ndatabase. Keep in mind that when we create tables with foreign keys in our example here,\nwe are not going to define them as such at the database layer like we did when we defined\nour primary key. This is an available feature however, and allows MySQL to help us main-\ntain data integrity by giving us an error if we try to insert a record where a foreign key value\ndoes not exist. As an example, if we tried to create a concert record but our reference to\nartist #5 did not exist in the artist table, MySQL would return an error instead of allowing\nthe record to be created. You would have to create artist #5 first, then go back and try your\nprevious statement again. Since this complicates the order of table creation and data inser-\ntion, we will ignore if for now until you are more comfortable, but know it is available and\nuseful for production systems.\nCreate table albums( albumID int not null auto_increment pri-\nmary key,\nalbumName varchar(70) not null,\nreleaseDate date,\nbandID int not null,\nproducerID int\n);\nOnce we have created all of our tables, we will need to put some data in them so we have\nsomething to interact with. To do this, we use the insert command. Using insert involves\nspecifying the table we want to interact with, passing the list of fields we intend to fill, and\nthen passing the values for those fields. The fields, as well as each set (or record) of values are\ncontained in a comma separated list enclosed in parenthesis. Multiple records can be added\nat once, assuming each record is using the same set of fields, by adding another set of data\nin parenthesis. We can see this in action by creating our first band:\nInsert into bands(bandName) values (\"The Who\");\nIf we want to pass more than one record, we just keep tagging on more sets:\nInsert into bands(bandName) values (\"Moxy Fruvous\"), (\"The\nDoors\"), (\"Maroon 5\");\n234 The Missing Link: An Introduction to Web Development and Programming Chapter 41\nTake note of the fact that we do not specify the bandID for these records. Before we\ncan insert albums though, we need to know what each band\u2019s ID actually is. We will take a\nquick preview of the Read actions by using the following command to get that information:\nSelect * from bands;\nThis command should give you something like the following:\nmysql> Select * from bands;\n+--------+-------------+\n| bandID | bandName |\n+--------+-------------+\n| 1 | The Who |\n| 2 | Moxy Fruvous|\n| 3 | The Doors |\n| 4 | Maroon 5 |\n+--------+-------------+\n4 rows in set (0.00 sec)\nNow we can use these values to try an insert that uses multiple columns. Keep in mind\nthat if you try to insert a record without including a required field you will still get an error\neven if you do not include it in the fields you wish to pass! We also need to format our date\nto meet what MySQL expect, or need to use a MySQL function to convert it to something\nvalid. Here we will format it ourselves. The default format is YYYY-MM-DD meaning\nfour digit year, two digit month, two digit day, all separated by dashes:\nInsert into albums(albumName, bandID, releaseDate) values\n(\"Tommy\", 1, \"1969-05-23\"), (\"Bargainville\", 2, \"1993-07-20\"),\n(\"Full Circle\", 3, \"1972-07-17\");\nAs you can see in this example, complex values like strings and dates need to be wrapped\nin quotation marks so MySQL knows where they start and end, but we can leave basics like\nintegers as they are.\nRead\nNow that we have some sample data, we will look at some basic techniques to see what\nwe have. This is done with use of the select command, which comes with an assortment of\nfilters and qualifiers. This is where the power of an SQL database comes into play as we\nmanipulate, combine, and alter the information into what we want to see. We already saw\none example of this when we needed to reference our bands table. The star that we used\nin \u201cselect * from bands\u201d is a reserved character in MySQL that represents \u201call.\u201d What we\neffectively asked was \u201cselect everything in the bands table.\u201d We can drop the fields we do\nnot want to see by specifying only the ones we want. For example, we can take a look at our\nalbums table, but since we did not include producers yet and do not care about the record\nID, we will just ask for certain columns:\nSelect albumName, bandID, releaseDate from albums;\n+------------+--------+-------------+\n| albumName | bandID | releaseDate |\n+------------+--------+-------------+\n| Tommy | 1 | 1969-05-23 |\n235 The Missing Link: An Introduction to Web Development and Programming Chapter 41\n|Bargainville| 2 | 1993-07-20 |\n|Full Circle | 3 | 1972-07-17 |\n+------------+--------+-------------+\nThis gives us a more readable response. We will learn how to get the actual bandName\nsoon, for now we will focus on how to change what we ask for. If we wanted to make this\noutput more end-user friendly, we probably do not want to use the field names stored in\nthe database. We can mask those by giving them an alias. We will also add some sorting in\nthis example by applying the ascending sort (asc) in an order by clause to the album name\n(descending would be desc):\nSelect albumName as \"Album\", bandID as \"Band\", releaseDate as\n\"Release Date\" from albums order by albumName asc;\n+------------+--------+--------------+\n| Album | Band | Release Date |\n+------------+--------+--------------+\n|Bargainville| 2 | 1993-07-20 |\n| Full Circle| 3 | 1972-07-17 |\n| Tommy | 1 | 1969-05-23 |\n+------------+--------+--------------+\nWe can also search for partial matches of text. Here we will use the \u201clike\u201d and \u201cwhere\u201d\nreserved words to further specify exactly what we want to see. You are probably noticing\nthat most of our statements so far have been relatively human readable, meaning you can\nunderstand what is being done, just by reading the code. This is an intentional approach\nin structured query design as it makes it easier to design and debug more complex queries.\nCommas are used where more than one item is specified, however there is no comma after\nthe last item in a list. You can see this where we do not include a comma after release date\nbefore moving on to specify the table we want in our \u201cfrom\u201d clause. You will also notice\nthe use of % in the next example. This is another reserved character in MySQL, which\nrepresents a wild card, meaning anything found in that position is valid. In our example we\nwill be searching for the word bargain, and because it is flanked on both sides by a % it will\nbe considered a match anywhere in a string. If we only want things that start with bargain,\nwe would only use the % after it.\nSelect albumName as \"Album\", bandID as \"Band\", releaseDate as\n\"Release Date\" from albums where albumName like \"%bargain%\"\norder by albumName asc;\n+------------+--------+--------------+\n| Album | Band | Release Date |\n+------------+--------+--------------+\n|Bargainville| 2 | 1993-07-20 |\n+------------+--------+--------------+\nYou may have noticed that our search string had bargain lowercase, but MySQL still\nreturned Bargainville even though it is capitalized. This case-insensitive search is the de-\nfault on MySQL, but you can specify particular form of upper or lowercase if you want. If\nwe want to match only a specific string, we can use = in place of like and %. In fact, we can\nuse many of the operators we are already accustomed to when numbers are involved, such\nas greater than and less than.\n236 The Missing Link: An Introduction to Web Development and Programming Chapter 41\nWe should add a few more records to see some more of the options we have at our\ndisposal when selecting data:\nInsert into albums(albumName, bandID, releaseDate) values\n(\"Strange Days\", 3, \"1967-10-16\"), (\"Live Noise\", 2,\n\"1998-05-19\");\nNow we have a couple bands with more than one album. We can actually infer more\ndata than we are storing in the database by using MySQL functions to manipulate the data\nand results in real time. Try using the count() function to find out how many albums we\nhave for each artist. We need to specify what we want to count (in this case, records, so we\ncan just use *) and what piece of the record we want to group to be counted, in this case\nthe bandID:\nSelect bandID, count(*) as \"Albums\" from albums group by\nbandID;\n+--------+--------+\n| bandID | Albums |\n+--------+--------+\n| 1 | 1 |\n| 2 | 2 |\n| 3 | 2 |\n+--------+--------+\nWe are not actually storing the total number of albums in any of our tables\u2014MySQL\nis tracking the total number of each time a bandID occurs from the group by statement.\nMaybe we want to answer a question, like which album was released most recently? If\nthis were an excel document, we would just sort the table by the release date and look at\nthe first record. We can do the same thing in MySQL by adding a limit in the number of\nrecords we want back. While we could certainly take the whole table result and read just the\nfirst row, when your data set gets larger you do not want to send your user more data than\nthey want or need, because it is wasteful of resources and can degrade the user experience\n(as well as increase demands on your server).\nSelect * from albums order by releaseDate desc limit 1;\n+---------+-----------+-------------+--------+------------+\n| albumID | albumName | releaseDate | bandID | producerID |\n+---------+-----------+-------------+--------+------------+\n| 5 |Live Noise | 1998-05-19 | 2 | NULL |\n+---------+-----------+-------------+--------+------------+\nAs a final example of some of the vocabulary available to us, we can also use the words\n\u201cand\u201d and \u201cor\u201d to add additional conditions to a statement:\nSelect * from albums where albumName like \"%noise%\" or album-\nName like \"%circle%\";\n+---------+-----------+-------------+--------+------------+\n| albumID | albumName | releaseDate | bandID | producerID |\n+---------+-----------+-------------+--------+------------+\n| 3 |Full Circle| 1972-07-17 | 3 | NULL |\n| 5 |Live Noise | 1998-05-19 | 2 | NULL |\n+---------+-----------+-------------+--------+------------+\n237 The Missing Link: An Introduction to Web Development and Programming Chapter 41\nKeep in mind we are just touching the surface of the power of MySQL here. There are\nmore reserved words, actions, abilities, and a whole library of functions that allow you to\ndo even more.\nUpdate\nNow that we have practiced a bit of reading, we will try the next CRUD method, up-\ndating. Maybe instead of leaving the producerID as null we decide that we want it to say\nunknown by default. Since the producerID field is a foreign key reference, we cannot just\nchange the value to text (we could use the Alter command to change the table structure, but\nthis is out of our scope and would break our normalization). Since we only want to change\nthe records where we do not have a producerID (even though in our case it is all of them)\nwe need to specify that we want to change the column where the field is null. For update,\nwe need to specify the table, define what we want our field set to, and the condition(s)\nrequired for the update to occur. Before we do this, we need a record in our Labels table\nwhere the producer name is \u201cunknown.\u201d We will pretend it is our first record:\nUpdate albums set producerID=1 where producerID is null;\nNow, all of our records will show \u201cunknown\u201d when we begin to join tables. This keeps us\nfrom having to create extra code in our site to adjust output when the field would otherwise\nbe empty.\nIf you want to change your values back, you can reset the whole column by setting the\nvalue without adding a where clause:\nUpdate albums set producerID=null;\nDelete\nThe final CRUD method, delete, is as final as it sounds. Use with extreme caution! There\nis no \u201cundelete\u201d or \u201cundo\u201d function at our disposal. The vast majority of the time, it is best\npractice to never allow your users to delete records. Instead, add flags to your records that\nwill hide the data from ever appearing again, by adding a Boolean \u201cdisabled\u201d column to each\ntable or creating a disabled table that tracks records that should not be shown (just a couple\nexamples, there are even more ways to do this!).\nAs partial protection to the fast-fingered typists, MySQL splits delete functions out\nto two keywords, delete and drop. Delete is reserved for row-level actions, while drop is\nreserved for table and database level actions. Dropping a table or database is as simple as\ntyping \u201cdrop table [your table name here]\u201d or \u201cdrop database [your database name here].\u201d\nThere will be no \u201care you sure\u201d prompt either. If the value exists, it will be removed. In terms\nof deleting rows, the same holds true. We define the table we want to interact with, and the\nconditions that identify rows we want deleted. We will remove any albums with \u201clive\u201d in\ntheir name as an example:\nDelete from albums where albumName like \"%live%\";\nYou should receive a response that says one row was affected, and if you review your\nwhole table you will see that the Live Noise album is now gone.\n238 The Missing Link: An Introduction to Web Development and Programming Chapter 41\nLEARN MORE\nKeywords, search terms: CRUD, structure query languages, SQL, MySQL\nMySQL Functions List: http:\/\/dev.mysql.com\/doc\/refman\/5.0\/en\/func-op-summary-ref.html\nBeginner Tutorials: http:\/\/beginner-sql-tutorial.com\/sql.htm\n239 Chapter 42\nAdvanced Queries\nTo use relational databases to their fullest extent, we need to be able to connect our tables\nusing our foreign keys in order to extract our full records. This is done by combining state-\nments and joining tables together.\nJoining\nWe can join tables a number of ways. The primary portion of the join is specified in our\nwhere clause, which is where we will specify which fields between the two tables are to be\nconnected. The simplest join will return only the records from the two tables where the\nvalue is found in both tables. We will begin by getting all the values from our albums and\nbands tables so we can finally see the band name in our results:\nSelect * from bands, albums where album.bandID=bands.bandID;\nYou now probably have a messy looking table, but all our fields are there. Now, we can\ncut it back to just a simple list:\nSelect bands.bandName as \"Band\", albums.albumName as \"Album\",\nreleaseDate as \"Released\" from bands, albums where albums.\nbandID=bands.bandID;\n+--------------+---------------+------------+\n| Band | Album | Released |\n+--------------+---------------+------------+\n| The Who | Tommy | 1969-05-23 |\n| Moxy Fruvous | Bargainville | 1993-07-20 |\n| The Doors | Full Circle | 1972-07-17 |\n| The Doors | Strange Days | 1967-10-16 |\n+--------------+---------------+------------+\nYou will notice we started to append the table name and a period before each field\nname. This helps clarify which field we are referring to when the same field name is used\nin more than one table. As a best practice, you may wish to always use this dot notation\nwhen selecting fields as it will help \u201cfuture-proof\u201d your queries if you expand or alter your\ndatabase in the future, even if the field in question is unique to the database now.\nYou may also be noticing that we still have not seen Maroon 5 come up in any of these\nexamples, even though they were created when we first set up our bands table. That is\nbecause the basic join (also called \u201cinner join\u201d), as stated above, only returns results where\n240 The Missing Link: An Introduction to Web Development and Programming Chapter 42\nrecords exist in both joined tables. Since we never added an album for Maroon 5, they did\nnot come back as a result. We can capture all results of either table, and still pair them when\nrecords are available, by using different approaches to our join called left join and right join.\nEach of these performs roughly how it sounds\u2014a left join will include all records from the\nleft table, plus additional values from the right table when they exist, and a right join will\ndo the opposite, including all the records from the right table and adding data from the left\nwhen it exists. Next we will look at all \u201cBands,\u201d and any records they have, by using a left\njoin. All we need to do is replace the comma between the tables in our \u201cfrom\u201d clause with\nthe join method we want, and change the word \u201cwhere\u201d to \u201con\u201d:\nSelect bands.bandName as \"Band\", albums.albumName as \"Album\",\nreleaseDate as \"Released\" from bands left join albums on\nalbums.bandID=bands.bandID;\n+--------------+---------------+------------+\n| Band | Album | Released |\n+--------------+---------------+------------+\n| The Who | Tommy | 1969-05-23 |\n| Moxy Fruvous | Bargainville | 1993-07-20 |\n| The Doors | Full Circle | 1972-07-17 |\n| The Doors | Strange Days | 1967-10-16 |\n| Maroon 5 | NULL | NULL |\n+--------------+---------------+------------+\nThere are more complex forms of join than just left, right, and inner. However, these\nthree cover most use cases and a well-designed database will usually reduce or eliminate the\nneed for overly complex queries.\nWe can continue to add tables, and joins, to our queries to get more and more com-\nprehensive results. We can even nest queries within one another inside sets of parenthesis.\nThe query is then executed from the inside out just like it would in an equation, where the\nresulting data from the nested query is available to the query it sits inside of. First, we can\nlook at a more complicated query that tells us everything about a particular song. We will\nspecify a song title, and build a query that would connect all the related tables. Since our\ndatabase is limited, we will start by looking at our table structure. If you want to fully test\nthis example, you will need to spend some time populating your tables further. Since we\nwill have a song title, and the question is what else we can glean, we will use all the keys\nthat make sense in combination with a song title. Within the song table, we have albumID.\nThat is relevant, as it tells us the album(s) the song has been released on. Now that we have\nat least one albumID, we can get from our \u201cAlbums\u201d table to the band table and producer\ntable as well. Tracing to these does not reveal any additional keys we can use, so without\nextra nested queries this is our reach:\nBands Albums Songs Concerts2Artists\nbandID albumID songID id\nbandName albumName title artistID\nreleaseDate length concertID\nbandID albumID\nproducerID\n241 The Missing Link: An Introduction to Web Development and Programming Chapter 42\nLabels Locations Artists Venues Concerts Bands2Labels\nproducerID locID artistID venueID concertID id\nproducer city artistName venueName venueID producerID\nstate locationID locationID date bandID\nzip timestamp\nWe are able to connect data from half of our database (ignoring our reference tables) just\nfrom having a song title. This query could look like the following:\nSelect bandName, albumName, releaseDate, title, length,\nproducer from bands, albums, songs, labels where songs.\nalbumID=albums.albumID and albums.bandID=bands.bandID and\nalbums.producerID=labels.producerID;\nEach pairing of fields in our where clause creates another join between tables. As our\nqueries become more complex, you may find they take longer to run. This is because more\ndata has to be reviewed, and more connections found, to create the resulting table. This is\nalso the point where optimization techniques like indexing (automatically building trees in\nthe database) and other more advanced MySQL tools will come into play.\nNested Queries\nWe can take the results of one query into consideration in another by nesting queries\nwithin one another using parenthesis. This will frequently come into play when we do not\nhave a starting value for a question we want to ask. For example if we wanted to find the\nartist with the largest album in terms of tracks, we would break the goal down into its\nelements. First, we need to find which album has the highest track count, since we do not\nhave a known value to search for:\nSelect max(length) from songs;\nThis query looks at each record in the songs table and finds the one with the largest\nvalue. We could also have done this by sorting the table as descending on the tracks column,\nbut since we are going to nest it we only want one value returned to keep things simpler.\nOur next step is to join the bandID value from albums to the id field in our bands table, in\norder to get our name:\nSelect bandName from bands, albums, songs where songs.length=\n(select max(length) from songs) and songs.albumID=albums.\nalbumID and albums.bandID=bands.bandID;\nNested queries are also a great place to use a few more methods to search with, namely\nANY, IN, SOME, ALL and EXISTS. ANY and SOME are equivalent, and IN works\nthe same as ANY when your comparison is strict equality (just =). What this means is that\nwhen we interact with the results of a nested query, we can look at each record returned as\na match against our where clause. Let us look at some mock examples:\nGet the name of every artist who has an album with the word \u201cfree\u201d anywhere in the\ntitle:\nSelect artistName from artists where artist.id = ANY (select\nartist.id from albums where album.title like \"% Free %\");\nSelect artistName from artists where artist.id IN (select\nartist.id from albums where album.title like \"% Free %\");\n242 The Missing Link: An Introduction to Web Development and Programming Chapter 42\nSelect artistName from artists where artist.id = SOME (select\nartist.id from albums where album.title like \"% Free %\");\nTo understand where these verbs become different, we could ask the question of which\nalbum(s) contain a certain set of songs. In this case, our nested select would include the\nsongs we are interested in. Here, using the verb ANY would return all albums that have one\nor more of the songs listed on their albums. If we changed to ALL, then we would only get\nalbums where all of the values returned by our nested query existed on the album.\nLEARN MORE\nKeywords, search terms: Nested queries, sql joins, indexing, mysql optimization\nJeff Atwood\u2019s Joins Examples: http:\/\/www.codinghorror.com\/blog\/2007\/10\/a-visual-explanation-\nof-sql-joins.html\nMySQL\u2019s Nested Examples: http:\/\/dev.mysql.com\/tech-resources\/articles\/subqueries_part_1.html\n243 Section 4 Assessments\nFor these assignments, use mysqldump() to submit a database export file or submit written\nwork as a single document file.\nDatabase Design\nCome up with a small database you would like to develop. Compile a list of fields and\nfollow the process of normalization to create a data model with at least 5 tables that in-\ncludes primary and foreign keys, and at least one table that is a many-to-many relationship.\nCreate a document that depicts your table structure and fields, identifies primary and\nforeign keys, and the connections between your tables.\nDatabase Development\nUsing your database design from above, create the database using your system\u2019s com-\nmand prompt. Create a text file that includes all of the commands you used to create your\ndatabase as well as inserts for 3 full records in each table. Submit this file and a mysqldump\nof your actual completed database.\nDatabase Interaction\nCreate queries that will interact with your database to complete the following:\n1. Display one of your tables without including foreign keys\n2. Joins two (or more) of your tables to show a complete record\n3. Generates information about your records that is not stored in your database\n4. Updates record(s) in a table to a new value\nSubmit your queries and the mysqldump file for your database.\n244 The Missing Link: An Introduction to Web Development and Programming Assessments\nDiscussion \/ Written Response\n1. Describe the three types of relationships between data and how to satisfy them\nin relational databases.\n2. Describe the first three forms of normalization.\n3. Describe the differences between flat file and structured query databases.\n4. Describe the differences between SQL and NoSQL databases.\n5. Describe when the different database types we examined are most useful.\nQuestions\nTAKE THIS QUIZ ONLINE!\n1. What does SQL stand for?\na. Standard Query Linguistics\nb. Structured Query Language\nc. Strict Query Language\nd. None of the above\n2. Which of these is used to retrieve information from a database?\na. Get\nb. Fetch\nc. Select\nd. Find\n3. Which of these commands would get the name column from a Persons table?\na. Select name from Persons;\nb. Get persons.name\nc. Select persons.name\nd. Get name from Persons\n4. Which of the following select records where the name fields starts with an A?\na. Select * from Persons where name='a'\nb. Select * from Persons where name like \"a%\"\nc. Select * from Persons where name like \"%a\"\nd. None of these\n5. Which of the following is the keyword used to sort results?\na. Order By\nb. Sort By\n245 The Missing Link: An Introduction to Web Development and Programming Assessments\nc. Filter By\nd. Ascending\n6. Which of the following is used to find the number of records?\na. Total()\nb. Count()\nc. Sum()\nd. None of these\n7. Eliminating multiple identical columns from a table is which normalization?\na. First\nb. Second\nc. Third\nd. Fourth\n8. Eliminating repeated values from a table is which normalization?\na. First\nb. Second\nc. Third\nd. Fourth\n9. Ensuring no values are repeated in a database is which of the following?\na. First\nb. Second\nc. Third\nd. Fourth\n10. Ensuring all fields relate directly to the table they are in is which normalization?\na. First\nb. Second\nc. Third\nd. Fourth\n11. The CRUD actions are:\na. Compose, Read, Update, Delete\nb. Create, Read, Update, Destroy\nc. Create, Read, Update, Delete\nd. Copy, Read, Update, Drop\n12. Including all of the records in the first table of a join is done using:\na. Join all\nb. Left join\nc. Right join\n246 The Missing Link: An Introduction to Web Development and Programming Assessments\nd. None of these\n13. Queries can be placed inside of other queries.\na. True\nb. False\n14. Which of the following is used to remove a record from a table?\na. Delete from\nb. Drop from\nc. Destroy\n15. MySQL requires which of the following to run?\na. Windows\nb. Linux\nc. Apple\nd. Any of these\nCHECK YOUR ANSWERS\n247 Section 5:\nTying it Together\nSection Contents:\nSecurity\nIntegration Examples\nFinishing Touches\nNow What?\nLearning Goals:\nBy the end of this section, you should be able to demonstrate:\n1. The ability to create a site that incorporates multiple languages\n2. The ability to extract information from a database and present it in a site\n3. Basic security considerations to deter malicious attacks\n4. The ability to interact with user data and alter a page as a result\n248 Chapter 43\nSecurity\nRisk\nIt can be easy to both over and under consider the security of your website. New initi-\nates tend to do everything possible to secure their code, which often results in overblown\nmeasures that can take considerable time to incorporate. This may only serve to protect\nsomething that may not require security in the first place. The dangers, then, are: getting\ntired of the complicated process, becoming complacent because nothing has happened, or\nneglecting to consider security in the first place. As a result, systems end up exposed.\nRisk management is the practice of finding the sweet spot where the time and cost\nof implementing the measure is proportionate and acceptable to the perceived threat a\ncompromise would create. Risk analysis is another of the many topics in this text that begs\nfor much deeper study, and I would encourage everyone to read beyond what is here as it\napplies to everyone involved in a programming project.\nIn short, some things to consider about your system are its level of exposure, cost to\nacquire\/replace its contents, importance of contents in relation to the company, and impor-\ntance of the contents in relation to your clients. A number of industries are also bound to\ncompliance measures based on certain types of information, or in order to achieve certain\ncertifications.\nSome questions to ask are things like:\n1. Is this system only available on our network, or is it publically exposed?\n2. Is this system only accessible through other security mechanisms like\ncredentialing systems, SSL, etc.?\n3. How much would it cost to replace the data the system holds?\n4. Would it be possible to replace the data if it is lost?\n5. Does the value of the data change if it is stolen or made publically available?\n6. If the data is compromised, how would it affect our relationship with our\ncustomers?\n7. Is any of the information required to be secured to a certain level?\n8. Are we an industry (e.g., healthcare) that has to comply with a federal or other\nreporting guideline (e.g., HIPAA)\n249 The Missing Link: An Introduction to Web Development and Programming Chapter 43\nAnswering these questions can be difficult, as you need to find quantifiable measures to\nquestions that are better suited to qualitative analysis. An example of how to approach this\nis to determine risk values that address each topic. If data is irreplaceable, it might be an\n8\/10. If compromise poses no risk if stolen or exposed, it may be a 1\/10. Using the same\nmin\/max range for each value allows us to add up our scores in order to get a summary\nvalue of the risk. This value can help you see the importance of your system better. From\nhere, you can determine based on its value, particular values, or \u201cred line\u201d items that require\nspecific minimums like federal requirements, exactly what security implementations you\nwill need. You can also create estimates of what damages (data recovery costs, man hours\nto fix\/replace the system, loss from lawsuits, etc.) might cost against that of implementing\nspecific security measures as a cost\/benefit ratio. For example, a mitigating effort of in-\nstalling or developing a credentialing system might cost $5,000 dollars, but if the data is\nexposed a lawsuit might entitle the plaintiff to $80,000 dollars in damages. How much is\nspent to defend a system in relation to what the perceived losses might be will ultimately\nbe determined by your executives and what the analysis reveals.\nA common response to this issue is what if the system never gets attacked? Then the\ncosts would be wasted! Alas, in many cases it can be hard to know or prove that risk man-\nagement efforts actually stopped or prevented an attack. Time and money spent on security\nare difficult to defend, as their return on investment can rarely be proven. Was the system\nnot compromised because of your efforts, or because no one tried? The typical reaction is to\nconsider the survivability of the organization if the system is compromised or lost, and this\nis where strong metrics and analysis can save the day, the system, and maybe even your job.\nOur example above of measuring each item on a fixed scale to determine a single threat\nvalue is just one mechanism. It is good for quick (relatively speaking) analysis and as a\nmeans of measuring multiple systems, or different possible versions of a system, against\neach other. More advanced techniques take more factors into consideration. For example,\nthe NIST SP 800-301 analysis includes a threat-likelihood-impact matrix where values are\nassigned to each element (the amount of likeliness of a given threat compared to its impact),\nrepeated for each threat. Placing things into the matrix helps to quantify the scenario.\nTo perform a full risk analysis, you will want to consider all possible sources of damage\nto your system. These include intentionally malicious or accidental actions of users both in\nand outside of your company (just because a user is authorized to access data does not mean\nit is being used correctly or as intended), natural or man-made disasters that would affect\nyour system (floods = water; water + electronics = bad), or just general failure (power surge\n+ electronics = bad). For the remainder here, we will only focus on the former as it directly\napplies to the topics we address in the rest of the text.\nTo delve deeper, look at some of the United States federal risk management initiatives.\n\u2022 National Institute of Standards and Technology (NIST)2\n\u2022 Department of Homeland Security (DHS)3\n\u2022 The United States Computer Emergency Readiness Team (US-CERT)4\nOne parting note: No matter the size of your organization, even if you are the lone\nprogrammer, a risk analysis exercise should involve many minds, especially those of upper\n1 http:\/\/csrc.nist.gov\/publications\/nistpubs\/800-30\/sp800-30.pdf\n2 www.nist.gov\n3 www.dhs.gov\/topic\/cybersecurity\n4 www.us-cert.gov\n250 The Missing Link: An Introduction to Web Development and Programming Chapter 43\nmanagement. Their determinations will weigh heavily on your activities, and their exposure\nto these exercises will increase their awareness overall.\nNow that we have an idea of how to discover and quantify risks, we can look at some\nbasic methods of protecting ourselves.\nPHP\nOne of the easiest ways for a malicious user to attempt to take advantage of our database,\nor gain unauthorized access, is to use our own scripting language against us. Let us consider\na basic example. Say you have a form that takes a username and password to log in a user.\nEven if you employ an encrypted password with hashing, a malicious person could still take\nadvantage of your form. Since your form action and field names are available to anyone who\nviews your page\u2019s source code, they could read your form to generate the following URL:\nhttp:\/\/yoursite.com\/youractionpage.php?username=FAKEUSER&password=12345\u2019 or 1\nSince they are using your form\u2019s variable names, your action page will, in this basic\nexample, assume they are legitimate. The key element to note here is the apostrophe or 1\nportion of the password field. If you are accepting user input without checking it first, like\nthis:\nmysqli_query(\"select * from users where username='$_\nGET[username]' and password='\".md5($_GET[password]).\"'\");\nYour populated query would actually read as follows:\nselect * from users where username='FAKEUSER' and pass-\nword='12345' or 1\nWhen evaluated, the malicious user is automatically logged in because the \u201cor 1\u201d makes\nthe logic statement true, since \u201cor true\u201d will always be true, regardless of the first half of\nthe statement. Your malicious user is now logged into your site! If you did not follow the\n\u201cleast needed privileges\u201d theory (we will look at this next), they would then have access\nto anything in the database that the account is allowed to access\u2014potentially even other\ndatabases.\nTo protect against this, we can use the sanitization5 and validation6 features of PHP to\nensure our users\u2019 responses are valid.\nFor example, if we ask a user to enter their email, we can first remove anything that\nshould not be in an email address:\n$email = filter_var($_GET['email'], FILTER_SANITIZE_EMAIL);\nAnd then make sure it is still in proper format:\nif(filter_var($email, FILTER_VALIDATE_EMAIL)){echo \"OK!\";}\nelse{ echo \"Please re-enter email!\"; }\nThe above code would be OK for a regular email address, but anything missing an @, or\na top level domain like .com, would ask for it to be re-entered. Our sanitization for an email\naddress will remove all characters except letters, digits and !#$%&\u2019*+-\/=?^_`{|}~@.[]. You\ntypically want to sanitize before validating. If your sanitization removes something that was\nactually a desired part of the input, the validation would then fail.\n5 php.net\/manual\/en\/filter.filters.sanitize.php\n6 www.php.net\/manual\/en\/filter.filters.validate.php\n251 The Missing Link: An Introduction to Web Development and Programming Chapter 43\nMySQL\nThe source (for us, at least) of the risk: the data itself. We are storing our data in MySQL,\nwhich our web pages interface with in order to build our interactive experience. When we\nstore user credentials in our database, we need to consider the fact that since our website\ncommunicates with the database, there is an inherent weakness. This is true whether or not\nour database is on the same physical system, or lives in the same operating system, as the\nsite itself. One of the basic mechanisms to protecting your site is to prevent unauthorized\naccess. Part of this can be achieved by obfuscating our users\u2019 passwords when we store this.\nTo do this, we can employ a couple of tactics called hashing and salting.\nHashing is the process of passing the password through a mathematical algorithm that\nturns the password into a much longer string of characters. The algorithm is designed to\nbe one-way, meaning a hash cannot be passed to an algorithm that reveals the original\ntext. The algorithm will produce the same hash every time for a given password (although\noccasionally duplicates may occur, a fault called a \u201chash collision\u201d). The result is stored in the\ndatabase in place of the user\u2019s actual password. Each time the user logs in, they type in their\noriginal password, your authentication system passes it through the algorithm, and you can\ncompare the result to the stored value to make sure they match.\nThe use of a hash ensures that if someone is able to gain access to your database, they\ncannot simply copy the credentials and use them to their advantage, as the stored value is\nnot the actual password they would use. A couple of popular methods that have been used\nto achieve this are MD5 and SHA-1, among others. I discourage the use of MD5, as its\nhashes are comparatively shorter than many others in use today, and enough data has been\ngathered about the algorithm that many password hashes can already be found just by using\nsites like md5decrypter.com.\nAnother issue of only relying on the original hashing algorithm is that other sites may\nbe doing the same. If someothersite.com and your site are both using MD5 by itself, and\nsomeothersite.com is compromised, the attacker would have the usernames and passwords\nfor their site. If any of your users also used someothersite.com, odds are some of them are\nprobably using the same email address, username, and password. With all of this data, the\nattacker now has a set of usernames and passwords to try on your site. Since you are using\nthe same hashing mechanism, the credentials used on both sites would work on yours as\nwell.\nThe hashed value of the word password, for example, returns to us the value 5f4dc-\nc3b5aa765d61d8327deb882cf99. If you take this value and paste it into md5decrypter.com,\nyou will see our original text (password) given back to us.\nNever fear, however, as we can defend against this with a salt. Salting is the process\nof adding something extra to your user\u2019s password, like adding salt to food to make it\nbetter. This should ensure that even if a user has the same password on the other site, the\none stored in our database is still different. This means a malicious person cannot use the\nencrypted password to get into our site.\nIf the salt for our user was #hsy5, our user\u2019s password that we would hash could be\npassword#hsy5 or #hsy5password or even pass#hsy5word. When we hash password#hsy5,\nwe get 5b48480a7171f41d2bf52093f4850281. Now, if someone tries to use known pass-\n252 The Missing Link: An Introduction to Web Development and Programming Chapter 43\nwords, their hash for password will not work on our site. You can use salts by either creating\na salt for every password, or using one that is coded directly into your script.\nKeep in mind that if you are using a single salt for all values, make sure it is not running\nin a script the user would have access to, like a linked JavaScript value, or would appear in\nyour HTML as a hidden value in a form. This gives them the missing key to circumvent the\nextra protection you added. By only having the salt in one script, malicious agents would\nneed to gain access to your web server as well as your database, especially if this script is seg-\nregated from your database\u2019s home system. Storing a unique salt for each password means\nif one salt is discovered, not every account has been compromised. If the compromised\naccount allows reading the salt table though, other accounts would eventually be accessible.\nUltimately, using the best hashing algorithm available and both salting approaches would\nprovide a high level of protection. How much you actually need to implement should be\ndetermined by completing a risk analysis.\nAnother strong self-protection method is to make sure your user accounts in your da-\ntabase are as locked down as possible. By this I mean abiding by a \u201cleast-needed security\u201d\napproach. It is easy when developing to create a user account for your project with a simple\npassword and wide open permissions to make development easier. Once you move your\nproject live, however, you should take away all the permissions your users would not need\nand should not have. For example, your basic end users will likely not need the ability to\nalter or drop tables, so you should remove user access to those features. This means that if\ninjection methods are used on your site, even if they succeed, the malicious threat still could\nnot drop or alter your tables without also finding a vulnerability in your database.\nTo provide administrative users with an interface, you can set those pages to utilize a\ndatabase user with higher credentials. The most sensitive operations (full database deletions,\ncreating new administrators, etc.) should still be left in the hands of users who log into your\ndatabase directly from a secured machine.\nIn MySQL, the full list of permissions elements are: select, insert, update, delete, index,\nalter, create, drop\nAdministrative privileges are: create temp table, file, lock table, process, reload, replication,\nshow dbs, shutdown super.\nWe can quickly assign users the initial set of actions or the administrative set by using\nthe keywords \u201cusage\u201d or \u201call\u201d when assigning the account. Most sites can achieve everything\nnecessary with the limited permissions of select, insert, update, and maybe delete. Keep\nin mind although overall this is quite restrictive, without proper precautions injection at-\ntempts could still use insert or update to infiltrate your site.\nDepending on the element, security can be restricted to the user based on the levels of\nglobal (your entire database server, i.e., every database), database, table, or column. This\ngranularity allows you to ensure users can only change what they need to.\nOur database de jour for this text also allows us to require SSL connections, providing\ngreater security between the user (an admin or our webserver) and the database. MySQL\nalso allows us to limit the number of updates over a span of time, as well as the number of\nconcurrent connections and queries per hour. Typically, we would want these values very\nhigh to support the highest volume of end users possible, but you may have a use case where\nyou know these numbers should be in a certain range. For example, if your company has\n253 The Missing Link: An Introduction to Web Development and Programming Chapter 43\n50 employees, and only 40 need your site, then you could cap your concurrent users to 40.\nAnything beyond that could be an indicator of database problems or hacking.\nTypes of Hashes\nThere are a number of strong hashing algorithms available. Some of these are considered\nout-dated and are easily to reverse, like DES. Others are still widely in use even though\ndatabases of known encrypted\/unencrypted values for many passwords are freely available,\nlike md5. Sites like md5decrypter.com are examples of this weakness. For this reason, you\nwill likely want to favor the newer approaches available to you at the time. As new encryp-\ntion algorithms are created, the encrypted string lengths become much larger, making the\ncomputation power required to reverse them too time consuming (if even possible) for the\ncurrent hardware available.\nCredentials\nNever say never, but never give root. Root, or the default user on your MySQL server,\nhas the highest level of permissions in the system. This means a PHP script that uses the\nroot account to establish a connection can do anything, even drop all databases. Because\nof the damage an accidental or malicious command can have on your data, any MySQL\nuser account that your web server utilizes to interact with your data should be as limited\nas possible. The vast majority of applications can get by with simple CRUD actions (that\nis create, read update, and delete). In most implementations, I would go one step further\nand not even allow deleting, replacing it instead with an \u201cinactive\u201d flag for records to hide\nthem from the user as if they were deleted. Depending on the system, your web users might\nneed additional features like temporary tables, and these should be allowed only as needed.\nThis means if the attacker tries to perform administrative type actions, and you are not\npreventing them, they will still be blocked as the user they are acting as will not allow it.\nJavaScript\nWe always (Yes, always\u2014laziness breeds poor security in our world) want to take a look\nat anything a user gives us before we interact with it. This is for two reasons: first, the user\nmay have made a mistake. Maybe they mistyped an email address, or left a required field\nblank. Or, perhaps, the user is a malicious person or script attempting to do something\nother than what we intend with access to our site. It might be using our forms to spam\nothers, gain access to our data, or make unsolicited changes to our site. We already discussed\nthis under PHP but we can attack the problem with JavaScript too.\nTaking this into account, before we use anything a user gave us, we need to make sure\n(as much as possible) that it is safe data to interact with. Usually we want to do as much of\nthis as possible on the user (or client) side, so they do not need to click submit and wait for\na response from the server to find out something is not quite right. To do this, we can use\nclient-side scripting like JavaScript to make sure things are OK as we progress. As fields\nare changed, JavaScript can look at the content and make sure addresses are formatted cor-\nrectly, required fields are filled in, etc. Coloring, highlighting, or providing messages to the\n254 The Missing Link: An Introduction to Web Development and Programming Chapter 43\nuser when problems occur. We can achieve this easily by tapping into jQuery\u2019s validation\nlibrary:\n<script src=(\/lib\/js\/jquery.validate.js\"><\/script>\n<script>\n$(document).ready(function(){$(\"#commentForm\").validate(\ncname : { required : true, minlength: 2 }\n);}\n);\n<\/script>\nThis example would execute the validation once the form is loaded, showing that the\ncname field is required and the minimum length is two characters. Not only can jQuery\nhelp us display these requirements on the form itself, we can call the validator as fields are\nchanged and\/or when the form is submitted before leaving the page to enforce the rules\nwe provided.\nIn terms of user experience, this is typically done in real time. As soon as a user leaves a\nfield, the script makes sure it is OK, and provides confirmation of the fact (typically a green\nhighlighting or \u201cOK!\u201d type of marker) or by not marking the field as bad (typically red, or\nprompting the user to re-enter the field).\nOnce the form is completed, JavaScript should ensure that the user\u2019s submission will\nbe good on the first try (at least content-wise\u2014we cannot confirm things like a username\nand password without talking to the server). This accounts for our number one concern:\nmistakes from the user. Even though we checked the submission, we want to repeat this\nprocess on the server-side in more depth. If the user is malicious they may be circumventing\nour page, or the user may have JavaScript disabled.\nThe server-side script should take into account the nefarious user. If someone tried to\nsubvert our form, JavaScript probably caught it. If, however, we are using GET or they use\na script to send data directly to our action page from our form (which they can easily find\nin our page source) then they can get around our JavaScript.\nExecution Functions\nBoth PHP and JavaScript support features that allow the user to access and run other\nprograms or scripts on the web server or local system. This can be useful when you want\nto interface with another application or system that the language does not have the ability\nto communicate with directly, but it exposes a huge security risk. Anything passed to these\nfunctions will be executed as if that user was sitting at the command prompt of your web\nserver. The implications here are fairly obvious, as anything your server\u2019s \u201cweb user\u201d account\nhas permission for would be allowed. If you are passing a variable into the execute function,\nyou have created a path directly to the heart of your system.\nThe best bet is to avoid using these entirely unless absolutely necessary. If you must,\nensure that variables are not passed to the function if at all possible to prevent injection.\nFinally, if all else fails, sanitize and validate anything passed, limit your web server user role\nas much as possible, and keep your system as up to date as possible to deter hackers.\n255 The Missing Link: An Introduction to Web Development and Programming Chapter 43\nIn PHP you will want to avoid the exec() function. JavaScript is a bit more removed, but\nsome actions can create the ability, such as creating an ActiveX object:\n<script>\nvar wsh = new ActiveXObject('WScript.Shell');\nwsh.run('notepad.exe');\n<\/script>\nSegregated Systems\nYour database server, ideally, would not live under the same operating system as your\nweb server. This does not mean the same OS cannot be used on both systems, but that they\nare not residing on the same exact installation. This is important because if your system is\nexposed to, or faces, the Internet it is at a higher risk of compromise. Keeping the database\nwithin your network with a single controlled access point between the two means your data\nis not as compromised if the web server is.\nLEARN MORE\nKeywords, search terms: Web server security, risk management, secure programming\n76 Tips for Securing Your Server: http:\/\/www.rackaid.com\/resources\/server-security-tips\/\nApache\u2019s Security Tips: http:\/\/httpd.apache.org\/docs\/2.2\/misc\/security_tips.html\nSymantec\u2019s Tips for MySQL: http:\/\/www.symantec.com\/connect\/articles\/securing-mysql-step-step\n256 Chapter 44\nIntegration Examples\nThe following code examples will demonstrate how the languages we have studied can be combined\nto create dynamic systems. In each of these examples two or more elements covered in the text will\nbe combined. These examples are not intended to function fully based on the excerpts you will see,\nbut are meant to demonstrate methods of integrating the languages.\nConnecting to MySQL\nIn order to have our users interact with our database, we need to establish a bridge of\ncommunication between them. To do this, we will create a connection to our database and\nstore it in a variable. Through PHP we have a variety of methods of creating this connec-\ntion, among them are libraries called MySQL, MySQLi, and PDO. These libraries have\ndifferent approaches to interacting with a database, and there are differences in what com-\nmands are available and how the connection is treated. While you will see many examples\nonline that use the standard MySQL connector, I would warn you away from it. It is on its\nway to deprecation, and has little injection protection built in. The MySQLi library is the\none we will focus on in our examples here as it is a better start for entry level programmers.\nUltimately, once you are comfortable with integrating these languages, I would recommend\nmoving to PDO. While it is not tailored for MySQL, it supports a wider range of SQL\ndatabases that will allow you to more easily change your backend system.\nTo begin, we will call a function to create our connection. The shortest avenue to do this\nis as follows:\n$mysql = mysqli->connect(\"localhost\",\"user\",\"password\",\"data\nbase\");\nBy inserting your server\u2019s values in each set of quotes, the variable $mysql will become\nour line of communication to our MySQL database. When we created our connection by\nusing a class method, our $mysql variable is now a MySQLi object. We could also have\nused procedural style with mysqli_connect. Assuming your database is the same system as\nyour website, \u201clocalhost\u201d or \u201c127.0.0.1\u201d should work just fine for you. Your username and\npassword can be any account that exists in your SQL database. In a fresh installation, \u201croot\u201d\nas the user and \u201croot,\u201d \u201cpassword,\u201d or nothing\u2014\u201c\u201d as a password will usually let you in, but as\nwe saw in security, you should avoid this unless necessary and only on a low-risk machine.\nThe declaration of the database we want to use is optional, but saves us from having to\nselect one later or always declare our database in our queries.\n257 The Missing Link: An Introduction to Web Development and Programming Chapter 44\nIn the spirit of this section, we will revise this example to make it more useful. By\nreplacing our values with variables, we can keep our actual values apart from the rest of the\ncode. Additionally, we can separate our connection out to its own file. By doing this, we\ncan require() or include() it on any page that we need a connection. Then all we need to do\nwhen we use our database is remember to close the connection at the bottom of our page.\nAn additional advantage is that we could also wrap our connection in a class of our own,\nallowing us to re-declare from our own class what functions are available. For now, we will\nkeep it simpler:\n$host = \"localhost\";\n$user = \"username\";\n$password = \"password\";\n$dbase = \"database\";\n$mysql = mysql->connect($host, $user, $password, $dbase);\nIf this code is its own file like database.php, we could use it in all of our sites, simply\nchanging the values at the top to match the settings for the site it is in. To get information\nfrom our database, create or modify our databases, or create or change records, we use the\nsame exact queries that we did from the command prompt. Our only difference is that we\ndo it through a function, and store the response in a variable:\n$results = $mysql->query(\"select * from albums\");\nThe $results variable here, like our connection variable, is a reference. It is a pointer that\nlets us continue to communicate with the database and specifies what we are looking for,\nbut is not the actual data. To get the data, we need to ask for each record. Since our example\nis very small, we will get all of the results at once, and build an array:\nwhile($row = $results->fetch_assoc(){\n$data[]=$row;\n}\nThis block of code uses the while statement to get every record available in our result\nset. Note that we used the variable with our result pointer to get the results, and not our\nconnection itself. Inside our loop, we are simply taking the row (in this case, each album\nfrom our albums table) and adding it to a new array called data.\nSecured Login\nLogging into a web page involves receiving user input, sanitizing and validating their\nsubmission, appending any salts, hashing the submission, and sending it to the database\nfor verification. If the database responds that the user\u2019s credentials match what is stored we\ncan then continue and create a cookie and\/or session so the user can interact with secured\ncontent.\nCreating a User:\n<?php\n\/\/create our salt\n$salt=^%r8yuyg;\n\/\/store the filtered, salted, hashed version of the password\n$passwordHash = sha1(filter_var($_POST['password'].$salt,\nFILTER_SANITIZE_STRING));\n258 The Missing Link: An Introduction to Web Development and Programming Chapter 44\n\/\/Add the user to the database\n$sql = 'INSERT INTO user ($username, passwordHash) VALUES\n(?,?)';\n$result = $db->query($sql, array($_POST['username'],\n$passwordHash));\n?>\nLogging them in:\n<?php\n\/\/Prep their login credentials\n$passwordHash = sha1(filter_var($_POST['password'].$salt,\nFILTER_SANITIZE_STRING));\n$sql = 'SELECT username FROM user WHERE username = ? AND pass-\nwordHash = ?';\n$result = $db->query($sql, array($_POST['username'],\n$passwordHash));\n\/\/This time, look at the result to see if they exist\nif ($result->numRows() < 1){\necho 'Sorry, your username or password was incorrect!';\n}\nelse{\n\/\/ Create the session\n$session_start();\n$_SESSION['active'] = true;\necho ('Welcome back!);\n}\n?>\nDynamic Canvas\nBy adding a loop in a canvas drawing of a circle, and using the random number func-\ntion in the math library of JavaScript, we can instruct the browser to draw circles (in this\nexample, 1000) of random shapes, sizes, and colors, all over our canvas. Each time the page\nis loaded or refreshed in the browser, the circles will be redrawn, and since we are using\nrandom values, this means our image will change each time.\n<canvas id=\"myCanvas\" width=\"600\" height=\"600\"><\/canvas>\n<script>\nvar canvas = document.getElementById(\"canvas\");\nvar ctx = canvas.getContext(\"2d\");\nvar w = canvas.width, h = canvas.height; \/\/Set variables of\nthe width, height of the canvas\nvar i = 0;\ndo {\nctx.fillStyle = \"rgb(\" + Math.round(255*Math.random()) + \",\"\n\/\/ Creates an R value\n+ Math.round(255*Math.random()) + \",\" \/\/ \u2026 and for G\n+ Math.round(255*Math.random()) + \")\"; \/\/ \u2026 and for B\n259 The Missing Link: An Introduction to Web Development and Programming Chapter 44\nctx.beginPath();\nctx.arc(w*Math.random(), h*Math.random(), \/\/ creates our\nrandom size\n50*Math.random(),\n0, Math.PI*2, true); \/\/ Uses Pi*2 to make the arc a\ncircle\nctx.closePath();\nctx.fill();\n} while (++i != 1000); \/\/ Loops this do 999 more times\n<\/script>\nTable of Results\nIf we only need to display the information to the user on the screen, or do not plan on\nmanipulating the data or using the data elsewhere on our page, creating the array of results\ncan be a wasteful use of memory. Instead, we will modify our while loop to create a table\nof our results:\n<table width=\"75%\">\n<tr><th>Title<\/th><th>Artist<\/th><th>Year<\/th><tr>\n<?php\nwhile($row = $results->fetch_assoc(){\necho \"<tr><td>$row[title]<\/td><td>$row[artist]<\/\ntd><td>$row[year]<\/td><\/tr>\";\n}\n?>\n<\/table>\nThis approach only stores one record at a time in our $row variable and is much more\nconservative, especially when using larger data sets. You will notice we nested our PHP\nwithin regular html in this example. Take a look at what our whole page might look like,\nassuming we also created our database.php file:\n<?php\nrequire(\"database.php\"); \/\/ Now that this file is loaded, we\ncan use $mysql on this page\n$query = \"select title, artist, year from albums\";\n$results = $mysql->query($query);\n?>\n<table width=\"75%\">\n<tr><th>Title<\/th><th>Artist<\/th><th>Year<\/th><tr>\n<?php\nwhile($row = $results->fetch_assoc(){\necho \"<tr><td>$row[title]<\/td><td>$row[artist]<\/\ntd><td>$row[year]<\/td><\/tr>\";\n}\n?>\n<\/table>\n260 The Missing Link: An Introduction to Web Development and Programming Chapter 44\nAt this point, we now have all of the data we need from the database, and since we will\nnot need the database anymore for this example, we can close our connection by adding the\nfollowing after our table:\n<?php mysql->close($mysql); ?>\nRepopulating Forms\nIf a user has submitted a form or is editing existing data, we can use these values to re-\npopulate our form so the user does not have to type them in again. This is done by echoing\nthe value inside the quotes in the value attribute of the form element. For example, if our\nname was in the URI as page.php?name=myName, we could make it the value of the input\nfield with:\n<form action='page.php' method='get'>\n<input type='text' value='<?php echo $_GET['name']; ?>' \/>\n<\/form>\nBy suppressing errors with error_reporting, using this technique, and with a little logic,\nwe can combine all of the elements of providing the form, validating the submission, and\ntaking action on what the form is for, all from one single page.\nWith some careful planning, we can provide our user with a form, check their submission,\nand store their information, all from one page. First we need to create some pseudo-code of\nthe flow of logic so we can dictate what we want to do, and under what conditions:\n<?php\nif(form has not been submitted){\nshow user the blank form\n}\nelse{\ncheck the form for errors\nif (there are errors){\nshow user their form and data\n}\n}\n?>\nBy following the logical order of events, the above pseudo-code represents what would\nbe a perfectly functional page. With a couple of tweaks, however, we can make some im-\nprovements. First, in this example, we would have to create the same form twice\u2014once\nblank, and again with placeholders for what the user submitted. While we could use copy\/\npaste and then modify the second copy, this will greatly inflate the overall size of our page.\nWe can also simplify our logic by reversing the order of events in our code. First, we will see\nif the form has been submitted. If it has, we will check for errors. If there are none, we will\ncomplete the submission. After that, we will simply display the form with placeholders for\nuser submitted data if there are errors or the form has not been submitted. This will cover\nboth cases in one place and replaces our if\/else and nested if with three if statements:\n<?php\nif(form as been submitted){\ncheck it for errors.\n261 The Missing Link: An Introduction to Web Development and Programming Chapter 44\ncreate a status flag declaring if there are errors or not\n}\nif(the status flag is set to \"ok\"){ \/\/ The form must have\nbeen submitted, and there are no errors\nsubmit the user info to the database\nsend any confirmation emails\ndisplay a success message\nset the status flag to show the form is complete\n}\nif(the status flag is anything other than \"ok\" or does not\nexist){ \/\/either there were errors, or the form has not\nbeen submitted\nshow the form with placeholders for submitted data\n}\n?>\nTo make this form more flexible, we can declare an array of field names in our first if\nstatement that lists what elements in our table are required or need to be validated. Once\nwe have done this, we can check each submitted field to see if it needs to be checked, pass\nit through the appropriate tests, and create a list of feedback. There are a number of ways\nto approach this. Here we will create an array of responses as our error flag. If there are no\nerrors, we will simply set it to \u201cOK.\u201d We will create a hidden field with a known value that\nwill be included every time the form is submitted. This will help deter outside scripts from\nusing our form, as they would need to know to include the hidden field (which we will\ncheck for in our logic) in order for our script to respond. In our example, we will make a\nshort registration form:\nif($_GET[hiddenDate]==now() [check]){\n$check = array('firstName', 'lastName', 'email', 'email2'); \/\/\nWe will require these fields\nforeach($check as $field){ [make sure & is in php section]\n[include \"for each thing in\" way to remember\nif($field in $_GET) [verify]{\n\/\/sanitize variable\nif(length < 3){ \/\/establishes that our required fields\nshould be at least 3 characters long\n$_GET[$field]=\"; \/\/clear the user submitted value as it\ndoes not qualify\n$errors[]=\"$field is required and must be at least 3\ncharacters long\";\n}\n}\n}\nif($_GET['email'] != $_GET['email2']){ \/\/ Make sure the\nuser entered the same email twice\n$errors[]=\"Bot h email fields must match\";\n$_GET['email'=''; $_GET['email2']='';\n}\nelse{ \/\/ email wasn't entered and\/or fields matched\n262 The Missing Link: An Introduction to Web Development and Programming Chapter 44\nif(!empty($_GET['email'])){ \/\/ Eliminate the possibility\nthat email is simply empty\nif(validate($_GET['email'], EMAIL)==false{$errors[]=\n\"Invalid email address\" [check]; \/\/ We only need to\nvalidate one, since they are the same\n$_GET['email']=''; $_GET['email2'];\n}\n}\nif(!isset($errors)){ \/\/ if nothing tripped an error, the\narray was never created\n$errors='ok'; \/\/ Set the flag to 'ok' (or 1, or whatever\nelse you like) so next section fires\n}\n}\nWe have now checked all of the required fields from our form. We may have had more\nfields, but for whatever reason are not concerned enough about their contents to require\nor validate them. You may be wondering why we are validating in PHP since JavaScript\ncan do this before the form is submitted in real time. There are two reasons (re)validating\nwith PHP can help you. First, is the more obvious case in which the end user\u2019s browser,\nfirewall network policy, etc. has disabled JavaScript. While your form would still function,\nyou would end up with possibly invalid data. Second is that any bots that find your form\nand attempt to use it maliciously are likely to read your form\u2019s destination and send data\ndirectly to your processing script, also circumventing your validation. This allows you to add\nsanitization through PHP in addition to other safety precautions to further harden your\nsite.\nNext we will take a look at some options of what we can do once the form has been\nchecked and is OK. Ultimately, there are two main tasks for you here. The first, is do what-\never it is you want to do with what the user gave you\u2014email the results, store them in a\ndatabase, process a registration or login, use them to search data or affect output, etc. The\nsecond, is to provide feedback that demonstrates to the user how their action affected the\nsystem. It could be search results, a \u201csuccessful\u201d notice like \u201cThank You for Registering!\u201d or\nthe result of their interaction, like them being logged into the system.\nif($check=='ok'){ \/\/ email ourselves a copy of what they sub-\nmitted and tell them they are done\nmail(\"us@oursite.com\",\"$_GET[firstName] created and account.\",\nprint_r($_GET,true),\"From: noreply@oursite.com\");\necho \"Thank you for registering!\";\n}\nFinally, our last logical test will be true if the user has not submitted anything or if there\nwere errors. By creating this section as follows, we can support both cases at the same time:\nif($errors!='ok'){ \/\/there were errors or the form is not\nsubmitted ?>\nforeach($errors as $error){echo \"$error<\/br>\";}\n<form action='<?php echo $_SERVER['PHP_SELF']; ?>'\nmethod='get' name='registration'>\n<input type='text' name='firstName' value='<?php echo\n$_GET['firstName']; ?>' \/><br\/>\n263 The Missing Link: An Introduction to Web Development and Programming Chapter 44\n<input type='text' name='lastName' value='<?php echo\n$_GET['lastName']; ?>' \/><br\/>\n<input type='text' name='email' value='<?php echo $_\nGET['email']; ?>' \/><br\/>\n<input type='text' name='email2' value='<?php echo\n$_GET['email2']; ?>' \/><br\/>\n<input type='submit' name='Register' value='submit' \/>\n<\/form>\n<?php } ?>\nIn our last section, the foreach in the second line will print any errors that were added\nto the array. Since we have reached this point, $errors either is an array and our entries will\nprint to the screen, or it was never set, and will not show anything on the screen if we are\nsuppressing notices. If you want to avoid the notice generated when the form has not been\nsubmitted, we could wrap line 2 with an If statement:\nif(!empty($errors)){foreach($errors as $error){echo \"$error<\/\nbr>\";}}\nIn our form you will see we re-entered PHP inside of the value attribute of each input.\nBy echoing the value of the input in our get array, if there is one, we will re-populate our\nform with what the user entered. Since the first section of our code already checked these\nvalues if the form was submitted, any bad entries will have already been reset to nothing,\nhelping the user see what needs to be re-entered.\nThis effectively completes our one page form, validation, and response. We could add\njQuery validation on top of our form elements to improve the user experience as well\nby validating during the form completion process, but bear in mind this is a progressive\nenhancement, meaning we should assume JavaScript is off, and that anything we use that\nworks improves upon an already working system.\nDrag and Drop\nCertain tags in HTML5 now support the ability to be treated as drag and droppable\nitems. Items that support the ability allow for attributes including draggable, ondragenter,\nondragover, ondragstart, ondragend, and ondrop. When we want to define the actions that\ntake place when one of these conditions is met, we need to call a JavaScript function, that\nwe define ourselves. We will look at our example by creating it in layers, first defining the\nstructure with HTML, then adding our CSS apply our visual, and finally we will add our\nJavaScript to give it full functionality.\nThe first piece of our structure is to define the places in our page where moveable objects\nare allowed to be. These will typically represent the start and end areas that we are allowed\nto move objects to and from, like a product page to a shopping cart icon, or just two big\nempty areas. We will create a simple two location page for now. To define our two areas that\nare drag and drop friendly, we define our divs as we are accustomed to doing and simply add\nthe references to actions that are allowed, or that we want to instigate actions or changes\nin our visual cues:\n264 The Missing Link: An Introduction to Web Development and Programming Chapter 44\n<div id=\"startingLocation\" ondragenter=\"return\ndragenter(event)\" ondragover=\"return hover(event)\"\nondrop=\"return drop(event)\"> <\/div>\n<div id=\"endingLocation\" ondragenter=\"return dragenter(event)\"\nondragover=\"return hover(event)\" ondrop=\"return drop(event)\">\n<\/div>\nNext, we will add the objects we want to interact with. They need a place to live when\nthe page loads, so we will put them in the startingLocation div.\n<div id=\"startingLocation\" ondragenter=\"return\ndragenter(event)\" ondragover=\"return hover(event)\"\nondrop=\"return drop(event)\">\n<div id=\"item1\" draggable=\"true\" ondragstart=\"return\nstart(event)\" ondragend=\"return end(event)\">Item #1<\/div>\n<div id=\"item2\" draggable=\"true\" ondragstart=\"return\nstart(event)\" ondragend=\"return end(event)\">Item #2<\/div>\n<div id=\"item3\" draggable=\"true\" ondragstart=\"return\nstart(event)\" ondragend=\"return end(event)\">Item #3<\/div>\n<\/div>\nWhile this now gives us a drag and drop foundation, it is not exactly user friendly yet.\nIf you save and test what we have, you will find a very blank screen that is probably rather\ndifficult to interact with as we cannot tell where the different objects start and end, and even\nat that we have no actions. To address this, we need to add some CSS to our file:\n<style type=\"text\/css\">\n#startingLocation, #endingLocation{\nFloat:left;\nWidth:200px;\nHeight:200px;\nMargin:10px;\n}\n#startingLocation{\nBackground-color:red;\n}\n#endingLocation{\nBackground-color:green;\n}\n#item1, #item2, #item3{\nWidth:60px;\nHeight:60px;\nPadding:5px;\nMargin:10px;\n}\n<\/style>\nTo give us functionality, we need to add JavaScript to dictate what happens when items\nare moved around on the screen. We need to provide the start function permission to move\nitems, dictate what information it needs to bring with the dragged object, and what to\ndisplay when the object is in motion:\n<script type=\"text\/javascript\">\n265 The Missing Link: An Introduction to Web Development and Programming Chapter 44\nfunction start(event){\n\/\/Give the draggable object permission to move\nevent.dataTransfer.effectAllowed='move';\n\/\/Grabs the dragged items ID for reference\nevent.dataTranser.setData(\"id\",event.target.\ngetAttribute('id'));\n\/\/ Sets our drag image with no offset\nevent.dataTransfer.setDragImage(event.target, 0, 0);\nreturn true;\n}\n<\/script>\nNext, we need to define what happens to our objects when they are held over an area\nthat takes drops. To do this, we will add the definition of the hover() function we referred\nto when we created our HTML:\nfunction hover(){\n\/\/reads the ID we provided of the dragged item\nvar iddraggable = event.dataTransfer.getData(\"id\");\n\/\/ reads the ID of the object we are hovering over\nvar id = event.target.getAttribute('id');\n\/\/All items can be dropped into endingLocation\nif(id=='endingLocation') return false; else return true;\n}\nIf we wanted to declare that only our first two draggable items are allowed into the\nendingLocation box, we would change our if statement to specify which items are allowed:\nIf(id=='endingLocation')&& (iddraggable== 'item1' ||\niddraggable=='item2') return false;\nNext we need to complete the act of moving our item to its new location. We will add\none more function we have already made reference to in our HTML, drop():\nfunction drop(){\nvar iddraggable event.dataTransfer.getData('id');\nevent.target.appendChild(document.\ngetElementById(iddraggable);\nevent.stopPropagation();\nreturn false;\n}\nFinally, we need to clean up. Now that our item is dropped, we do not need to worry\nabout its value any longer:\nfunction end(){\nevent.dataTransfer.clearData('id');\nreturn true;\n}\nIf we were going to use our drag and drop system as a shopping cart, we would want\nto flesh out more actions in our end function. We would add code to add the item to the\nsession or cookie record of our shopping cart, and could trigger other actions like updating\nour cart total on the screen or prompting for a number of that item we want in our cart.\n266 Chapter 45\nFinishing Touches\nSearch Engine Optimization (SEO)\nSearch engine optimization is the process of making your site the best possible candidate\nfor favorable listing placement in search engine results. The factors that weigh in on a site\u2019s\nscoring and ranking and constantly growing and evolving, and encompass far greater than\njust the correspondence between a searched word or phrase against the page content in\nyour site.\nCovering all aspects of SEO is a task in and of itself just for one search engine. Ac-\ncounting for the differences between Google, Yahoo, Bing, and all the others would be a\ntext in and of itself and would be out of date before the printer finished the first page.\nTrue optimization is an almost daily task, involving monitoring changes in algorithms,\nrefining the site as content changes, and using systems like Google\u2019s Ad Sense for commer-\ncial placements on search results pages. Even at that, portions of today\u2019s SEO algorithms\nare out of your control, in that they take into account things that are out of your control\nlike previous traffic, outside links, and more. Start with these basics first to get a good start:\n1. Make sure you are mobile optimized\n2. Use meta tags and <h> tags to emphasize important content\n3. Use those same keywords as page titles\n4. Do not include too many keywords in your meta tags\n5. Update your content regularly\n6. Integrate with social media for exposure\nAnalytics\nA close cousin to the tasks of optimizing your site for search engines is optimizing it\nfor your target audience. There is no better way to do this than to understand who your\naudience is, which you can find in your website logs. You can learn surprising things with\nanalytics, which has spurred many of the extreme large data sets now in existence, and\nresulted in some of the more controversial features of websites like tailoring ads to your\ninterests or recent searches.\n267 The Missing Link: An Introduction to Web Development and Programming Chapter 45\nWithin your web server\u2019s logs, you might find that your visitors are coming from countries\nyou had not anticipated\u2014signs that may induce you to add additional language support,\nimproving their experience. You might find that your users are trying to use mobile devices\nthat you were not quite supporting, or that they are using a resolution higher than you\nthought, allowing you to redesign your site to provide more content or a smaller interface.\nTracking where a user goes, what they look at, how long they look at it. In fact, every\naction they take can provide insight. Aggregating this data across a volume of users over\ntime give you the means to discover things you (and perhaps even your users) are not aware\nof.\nYou can see these data sets in use when you see features like \u201cOther users also viewed this\nshow\u201d or \u201cYou recently looked at this item.\u201d Following up on trends by interviewing users\nhas also shown companies how to covert more leads. To address users leaving with items\nin their shopping cart before purchasing, some companies discovered through surveys that\nmost of those users decided against a purchase because of shipping costs, or uncertainty\nover taxes and surcharges. This allowed them to make changes to their site, providing more\ninformation sooner to address concerns, and allowed for particular marketing techniques.\nInstead of making all shipping free, a number of companies will trigger automatic follow-\nup emails when digital shopping carts are abandoned, or orders are immediately canceled,\nby offering free shipping or additional coupons or discounts to convince the shopper to\ncomplete the sale, improving their conversion rate.\nTo begin with analytics, you can start by taking a look at the raw logs your server creates.\nSince our example throughout the book has been using a LAMP, your log location is prob-\nably in \/etc\/httpd\/logs. A file search for the word logs will likely reveal the correct folder\nfor your particular installation. Depending on your server configuration this folder may\nhave one or more files that track things like people accessing files on your site (everything\nfrom pages to images and anything else a user can see or use) as well as errors that were\nencountered or reported by elements of your server involved in rendering pages.\nThese files by themselves are not easy to interpret in aggregate form until you have spent\ntime working with them or are seeking answers that are small amounts of the record like\nthe last error or searching for a particular file. Instead, most people who interact with logs\nprefer to use an outside program that reads the files and helps them see trends over time\nso they can extrapolate more information than the raw file provides by itself. A free, open\nsource solution (for personal use) that you can use to this end is AWStats, which compiles\nyour logs into a variety of charts, graphs, and tables that focus on a number of aspects of\nyour site like where visitors are coming from, what browser they used, what pages are most\npopular, and more.\nFor more specialized information, many sites create databases that track everything\nabout their site, a user\u2019s entire experience, and apply everything else they know about a user\nto determine larger questions like how best to get the customer to return to the site again\nor what coupons to offer them like the shopping cart example above.\nPrivacy Statement\nYou may wish to include (and abide by) a privacy statement for your users. Spell out\nexactly what type of information you collect about them, how long it is stored, whether or\n268 The Missing Link: An Introduction to Web Development and Programming Chapter 45\nnot you will share or sell their information to another party, and so on. This is also a good\nplace to spell out or link to a location where they can request that their information be\nremoved as well.\nThis type of statement will allow users to determine if they are comfortable using your\nsite and gives transparency into how you will treat their data.\nTerms of Use\nIn much the same vein as a privacy statement you may also wish to include a terms of\nuse that clarifies to the user the extent to which they are allowed to use your site and its\ninformation. We are all familiar with the epic novel terms of use documents that are fre-\nquently included with software and hardware purchases these days, but there is a growing\nmovement to embrace a more non-lawyer friendly set of these types of documents.\nWhich one you decide to use is up to you, and there a great deal of examples in the wild.\nThis is one area in which you may still want to include a lawyer, attorney, or your company\u2019s\nlegal department before posting.\n269 Chapter 46\nNow What?\nBy this point you are hopefully comfortable with the fundamentals of web design, and\nhave the ability to balance and integrate at least those languages covered within in order\nto optimize your site and provide a positive, useful experience for your end users. You have,\nas some might say, just enough knowledge to be dangerous. There is still far more to learn.\nEach topic we covered in this text was a tip of the iceberg. The languages we covered,\nmethods and approaches, design techniques, histories and all go into much greater depth.\nThis text took effort to give you an understanding of each topic, but in many imple-\nmentations each of these topics is addressed by different parties. Fortune 500 companies\ntypically have one or more employees addressing focused topics such as networking, data-\nbase development, front-end programming, etc. The consumer research and design aspects\nalone have created entire departments. Who your team is composed of and how many\nof you there are become determined by the size of the project, the size of your company,\nthe particular needs and complexities of the project in questions, as well as time line and\nbudget. Similarly sized, timed, and budgeted projects may have distinctly difference staffing\nsimply because one is a financial system requiring input from accountants and lawyers and\nthe other is a museum, requiring input from librarians and art historians.\nNow it is time to get some real projects under your belt. After a few full implementa-\ntions, you will learn which aspects are of most interest or come most naturally to you. Once\nyou have these identified, you have found your niche. Then it is time to go deeper, learning\nthe facets and minutia of one or more of the topics we covered. The references section is a\ntreasure trove of excellent resources to go deeper into any of the topics covered here.\n270 "}