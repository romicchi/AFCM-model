{"text":"1.0 LEARNING OBJECTIVE\nAfter studying this unit student should be able to:\n\u2022 Know History of mobile application development\n\u2022 What Android is (and what it isn\u2019t)\n\u2022 List different version of Android\n\u2022 Describe Android SDK features\n\u2022 Understand Android architecture\n\u2022 Enumerate factors that affect Mobile Application development\n1.1 INTRODUCTION\nAndroid is an operating system that powers mobile devices and is one of the most\npopular mobile platforms today. Android platform runs on hundreds of millions of\nmobile devices throughout the world. It's the largest installed operating system of any\nmobile operating system and growing rapidly day by day.\nYou can develop apps and games using Android and it gives you an open\nmarketplace for distributing your apps and games instantly.\nAndroid is the operating system for powering screens of all sizes. Android version is\nnamed after a dessert. The latest version of android is Android 9.0 \u2013 Pie. Following\ntable shows how the android platform evolves.\n1.2HISTORY OF MOBILE APPLICATION DEVELOPMENT\nTo understand what makes Android so convincing, you must study how mobile\ndevelopmenthas evolved and how Android differs from othermobile platforms.\nThe Motorola DynaTAC 8000X was the first commercially available cell phone and it\nis of brick size. First-generation mobile were expensive, not particularly full featured\nand has Proprietary software.\nAs mobile phone prices dropped, batteries improved, and reception areas grew,\nmore and more people began carrying these handy devices. Customers began\npushing for more features and more games.They needed some way to provide a\nportal for entertainment and information services without allowing direct access to\nthe handset.\n3 Early phone have postage stamp-sized low-resolution screens and limited storage\nand processing power, these phones couldn\u2019t handle the data-intensive operations\nrequired by traditional web browsers.The bandwidth requirements for data\ntransmission were also costly to the user.\nWireless Application Protocol\nThe Wireless Application Protocol (WAP) standard emerged to address above\nconcerns. WAP was stripped-down version of HTTP. WAP browsers were designed\nto run within the memory and bandwidth constraints of the phone.Third-party WAP\nsites served up pages written in a mark-up language called Wireless Mark up\nLanguage (WML).The WAP solution was great for handset manufacturers and\nmobile operators.Phone users can access the news, stock market quotes, and\nsports scores on their phones.\nWAP fell short of commercial expectations due to following reasons and Critics\nbegan to call WAP \u201cWait and Pay.\u201d\n\u2022 Handset screens were too small for surfing.\n\u2022 WAP browsers, especially in the early days, were slow and frustrating.\n\u2022 Reading a sentence fragment at a time, and then waiting seconds for the next\nsegment to download, ruined the user experience, especially because every\nsecond of downloading was often charged to the user.\n\u2022 Mobile operators who provided the WAP portal often restricted which WAP\nsites were accessible.\nProprietary Mobile Platforms\nWriting robust applications with WAP, such as graphic-intensive video games, was\nnearly impossible.Memory was getting cheaper, batteries were getting better, and\nPDAs and other embedded devices were beginning to run compact versions of\ncommon operating systems such as Linux and Windows.A variety of different\nproprietary platforms emergedand developers are still actively creating applications\nfor them. Some of the examples of proprietary mobile platform are:\n\u2022 Palm OS (now Garnet OS)\n\u2022 RIM BlackBerry OS\n\u2022 Java Micro Edition [Java ME]\n4 \u2022 Binary Runtime Environment for Wireless (BREW)\n\u2022 Symbian OS\n\u2022 OS X iPhone\nEach platform has benefits and drawbacks.\n1.3OPEN HANDSET ALLIANCE (OHA)\nThe Open Handset Alliance (OHA) was formed in November 2007, comprised of\nmany of the largest and most successful mobile companies on the planet. Its\nmembers include chip makers, handset manufacturers, software developers, and\nservice providers.The entire mobile supply chain is well represented.\nIn their own words,the OHA represents the following: \u201cA commitment to openness, a\nshared vision for the future, and concrete plans tomake the vision a reality,to\naccelerate innovation in mobile and offerconsumers a richer, less expensive, and\nbetter mobile experience\u201d\nThe OHA hopes to deliver a better mobile software experience for consumers by\nproviding the platformneeded for innovative mobile development at a faster rate and\nwith higher quality than existingplatforms, without licensing fees for either software\ndevelopers or handset manufacturers.\n1.4THE ANDROID PLATFORM\nAndy Rubin has been credited as the father of the Android platform. His company,\nAndroid Inc., was acquired by Google in 2005.Working together, OHA members,\nincluding Google, began developing a non-proprietary open standard platform based\nupon technology developed at Android Inc. that would aim to solve the problems\nhindering the mobile community.The result is the Android project.\nMost Android platform development is completed by Rubin\u2019s team at Google, where\nhe acts as VP of Engineering and manages the Android platform roadmap.Google\nhosts the Android open source project and provides online Android documentation,\ntools, forums, and the Software Development Kit (SDK) for developers. All major\nAndroid news originates at Google.\n5 What is android?\nAndroid is called as \u201cthe first complete, open, and free mobile platform\u201d:\nComplete: allows for rich application development opportunities.\nOpen: It is provided through open source licensing.\nFree: Android applications are free to develop. Android applications can be\ndistributed and commercialized in a variety of ways.\nFeatures of Android\n\u2022 Free and Open Source\n\u2022 Familiar and inexpensive development tools\n\u2022 Freely available SDK\n\u2022 Familiar Language, Familiar Development Environments\n\u2022 Reasonable learning curve for developers\n\u2022 Enabling development of powerful applications\n\u2022 Rich, secure application integration\n\u2022 No costly obstacles to publication\n\u2022 Free \u201cMarket\u201d for application\n\u2022 A new growing platform\nWhat it is not?\nAndroid is not:\n\u2022 A Java ME implementation: Android applications are written in the Java\nlanguage, but they are not run within a Java ME virtual machine, and Java-\ncompiled classes and executable will not run natively in Android.\n\u2022 Part of the Linux Phone Standards Forum or the Open Mobile Alliance: Android\nruns on an open-source Linux kernel, but, while their goals are similar, Android\u2019s\ncomplete software stack approach goes further than the focus of these\nstandards-defining organizations.\n\u2022 Simply an application layer (like UIQ or S60): While Android does include an\napplication layer, \u2018\u2018Android\u2019\u2019 also describes the entire software stack\nencompassing the underlying operating system, the API libraries, and the\napplications themselves.\n6 \u2022 A mobile phone handset Android includes a reference design for mobile handset\nmanufacturers, but there is no single \u2018\u2018Android phone.\u2019\u2019 Instead, Android has been\ndesigned to support many alternative hardware devices.\n\u2022 Google\u2019s answer to the iPhone: The iPhone is a fully proprietary hardware and\nsoftware platform released by a single company (Apple), while Android is an\nopen-source software\nCheck Your Progress-1\na) Android is complete, free and open source (True\/False)\nb) Android is a Java ME implementation (True\/False)\nc) List some proprietary mobile platforms\nd) Give full form of OHA\ne) Why critics began to call WAP \u201cWait and Pay.\u201d\n1.5 THE ANDROID VERSION\nAndroid is the operating system for powering screens of all sizes. Android version is\nnamed after a dessert. The latest version of android is Android 9.0 \u2013 Pie. Following\ntable shows how the android platform evolves.\nAndroid Name Feature API\nVersion Level\n1.0 Alpha Web browser, Camera, Synchronization of 1\nGmail, Contact and Calendar, Google Maps,\nGoogle Search, Google Talk,\nInstant Messaging, Text Messaging and MMS,\nMedia Player, Notification, Voice Dialer,\nYouTube Video Player\nOther applications include: Alarm Clock,\nCalculator, Dialer (Phone), Home screen\n(Launcher), Pictures (Gallery), and Settings.\n1.1 Beta The update resolved bugs, changed the Android 2\n7 Android Name Feature API\nVersion Level\nAPI and added a number of features such as\nDetails and reviews available when a user\nsearches for businesses on Maps, Ability to\nshow\/hide dial pad and save attachments in\nmessages.\n1.5 Cupcake Virtual keyboards with text prediction and user 3\ndictionary for custom words, widgets, video\nrecording and playback, Bluetooth, Copy and\nPaste, animated screen transition, auto rotation,\nupload video on YouTube, upload photo to\nPicasa.\n1.6 Donut Voice and text entry search, Multi-lingual 4\nspeech synthesis, updated technology support\nfor CDMA\/EVDO, 802.1x, VPNs, and a text-to-\nspeech engine, WVGA screen resolutions,\nExpanded Gesture framework and new Gesture\nBuilder development tool\n2.0 \u00c9clair Customize your home screen just the way you 5\n2.0.1 want it. Arrange apps and widgets across 6\n2.1 multiple screens and in folders. Stunning live 7\nwallpapers respond to your touch.\n2.2-2.2.3 Froyo Voice Typing lets you input text, while Voice 8\nActions allow you to control your phone, just by\nspeaking.\n2.3 Gingerbread New sensors make Android great for gaming \u2013 9-10\nso you can touch, tap, tilt and play away.\n3.0 Honeycomb Optimized for tablets. 11-13\n4.0 Ice Cream A new, refined design. Simple, beautiful and 14-15\nSandwich beyond smart.\n4.1-4.3 Jelly Bean Fast and smooth with slick graphics. With 16-18\nGoogle Now, you get just the right information\n8 Android Name Feature API\nVersion Level\nat the right time.\n4.4 Kit Kat A more polished design, improved performance 19-20\nand new features.\n5.0 Lolipop Get the smarts of Android on screens big and 21-22\nsmall with the right information at the right\nmoment.\n6.0 Marshmallow New App Drawer, Doze mode, Native finger 23\nprint support, Android pay, USB type-C and\nUSB 3.1 support, Direct share.\n7.0 Nougat Revamped notification, Split-screen use, file 24-25\nbased encryption, direct boot, data saver\n8.0 Oreo Picture in picture, Google play protect, emoji 26-27\n9.0 Pie Adaptive Battery, adaptive brightness, intuitive 28\nnavigation, dashboard, App timers, Wind down\nand do not disturb, Digital wellbeing.\nTable-1 Android Versions\n1.6 NATIVE ANDROID APPLICATIONS\nAndroid phones will normally come with a suite of generic preinstalled applications\nthat are part of theAndroid Open Source Project (AOSP), including, but not\nnecessarily limited to:\n\u2022 An e-mail client\n\u2022 An SMS management application\n\u2022 A full PIM (personal information management) suite including a calendar and\ncontacts list\n\u2022 AWebKit-based web browser\n\u2022 A music player and picture gallery\n\u2022 A camera and video recording application\n\u2022 A calculator\n9 \u2022 The home screen\n\u2022 An alarm clock\nIn many cases Android devices will also ship with the following proprietary Google\nmobileapplications:\n\u2022 The AndroidMarket client for downloading third-party Android applications\n\u2022 A fully-featured mobile Google Maps application including StreetView, driving\ndirectionsand turn-by-turn navigation, satellite view, and traffic conditions\n\u2022 The Gmail mail client\n\u2022 The Google Talk instant-messaging client\n\u2022 The YouTube video player\n1.7 ANDROID SDK FEATURES\nThe true appeal of Android as a development environment lays in the APIs it\nprovides.As an application-neutral platform, Android gives you the opportunity to\ncreate applications that areas much a part of the phone as anything provided out of\nthe box. The following list highlights some ofthe most noteworthy Android features:\n\u2022 No licensing, distribution, or development fees or release approval processes\n\u2022 Wi-Fi hardware access\n\u2022 GSM, EDGE, and 3G networks for telephony or data transfer, enabling you to\nmake or receive calls or SMS messages, or to send and retrieve data across\nmobile networks\n\u2022 Comprehensive APIs for location-based services such as GPS\n\u2022 Full multimedia hardware control, including playback and recording with the\ncamera and microphone\n\u2022 APIs for using sensor hardware, including accelerometers and the compass\n\u2022 Libraries for using Bluetooth for peer-to-peer data transfer\n\u2022 IPC message passing\n\u2022 Shared data stores\n\u2022 Background applications and processes\n\u2022 Home-screen Widgets, Live Folders, and LiveWallpaper\n\u2022 The ability to integrate application search results into the system search\n\u2022 An integrated open-source HTML5WebKit-based browser\n10 \u2022 Full support for applications that integrate map controls as part of their user\ninterface\n\u2022 Mobile-optimized hardware-accelerated graphics, including a path-based 2D\ngraphics libraryand support for 3D graphics using OpenGL ES 2.0\n\u2022 Media libraries for playing and recording a variety of audio\/video or still image\nformats\n\u2022 Localization through a dynamic resource framework\n\u2022 An application framework that encourages reuse of application components and\nthe replacement of native applications\nCheck your progress-2\na) Android version is named after a dessert. (True\/False)\nb) Android version name is in ascending order of alphabets (True\/False)\nc) Which is the latest version of Android?\nd) What is Android SDK?\n1.8 ANDROID ARCHITECTURE\nAndroid is an open source, Linux-based software stack created for a wide array of\ndevices and form factors. The following diagram shows the major components of the\nAndroid platform.\nThe Linux Kernel\nThe foundation of the Android platform is the Linux kernel. For example, the Android\nRuntime (ART) relies on the Linux kernel for underlying functionalities such as\nthreading and low-level memory management.Using a Linux kernel allows Android to\ntake advantage of key security features and allows device manufacturers to develop\nhardware drivers for a well-known kernel.\nHardware Abstraction Layer (HAL)\nThe hardware abstraction layer (HAL) provides standard interfaces that expose\ndevice hardware capabilities to the higher-level Java API framework. The HAL\nconsists of multiple library modules, each of which implements an interface for a\n11 specific type of hardware component, such as the camera or Bluetooth module.\nWhen a framework API makes a call to access device hardware, the Android system\nloads the library module for that hardware component.\nAndroid Runtime\nFor devices running Android version 5.0 (API level 21) or higher, each app runs in its\nown process and with its own instance of the Android Runtime (ART). ART is written\nto run multiple virtual machines on low-memory devices by executing DEX files, a\nbyte code format designed especially for Android that's optimized for minimal\nmemory footprint. Build tool chains, such as Jack, compile Java sources into DEX\nbyte code, which can run on the Android platform.\nSome of the major features of ART include the following:\n\u2022 Ahead-of-time (AOT) and just-in-time (JIT) compilation\n\u2022 Optimized garbage collection (GC)\n\u2022 On Android 9 (API level 28) and higher, conversion of an app package's\nDalvik Executable format (DEX) files to more compact machine code.\n\u2022 Better debugging support, including a dedicated sampling profiler, detailed\ndiagnostic exceptions and crash reporting, and the ability to set watch points\nto monitor specific fields\nPrior to Android version 5.0 (API level 21), Dalvik was the Android runtime. If your\napp runs well on ART, then it should work on Dalvik as well, but the reverse may not\nbe true. Android also includes a set of core runtime libraries that provide most of the\nfunctionality of the Java programming language, including some Java 8 language\nfeatures that the Java API framework uses.\nNative C\/C++ Libraries\nMany core Android system components and services, such as ART and HAL, are\nbuilt from native code that requires native libraries written in C and C++. The Android\nplatform provides Java framework APIs to expose the functionality of some of these\nnative libraries to apps. For example, you can access OpenGL ES through the\nAndroid framework\u2019s Java OpenGL API to add support for drawing and manipulating\n2D and 3D graphics in your app.If you are developing an app that requires C or C++\n12 code, you can use the Android NDK to access some of these native platform libraries\ndirectly from your native code.\nFigure-1: Android Software Stack\nJava API Framework\nThe entire feature-set of the Android OS is available to you through APIs written in\nthe Java language. These APIs form the building blocks you need to create Android\n13 apps by simplifying the reuse of core, modular system components and services,\nwhich include the following:\n\u2022 A rich and extensible View System you can use to build an app\u2019s UI, including\nlists, grids, text boxes, buttons, and even an embeddable web browser\n\u2022 A Resource Manager, providing access to non-code resources such as\nlocalized strings, graphics, and layout files\n\u2022 A Notification Manager that enables all apps to display custom alerts in the\nstatus bar\n\u2022 An Activity Manager that manages the lifecycle of apps and provides a\ncommon navigation back stack\n\u2022 Content Providers that enable apps to access data from other apps, such as\nthe Contacts app, or to share their own data\nDevelopers have full access to the same framework APIs that Android system apps\nuse.\nSystem Apps\nAndroid comes with a set of core apps for email, SMS messaging, calendars,\ninternet browsing, contacts, and more. Apps included with the platform have no\nspecial status among the apps the user chooses to install. So a third-party app can\nbecome the user's default web browser, SMS messenger, or even the default\nkeyboard (some exceptions apply, such as the system's Settings app).\nThe system apps function both as apps for users and to provide key capabilities that\ndevelopers can access from their own app. For example, if your app would like to\ndeliver an SMS message, you don't need to build that functionality you\u2014you can\ninstead invoke whichever SMS app is already installed to deliver a message to the\nrecipient you specify.\n1.9 Factors that affect Mobile Application development\nYou should keep in mind the following factors while developing mobile application:\n\u2022 Low processing power\n\u2022 Limited RAM\n14 \u2022 Limited permanent storage capacity\n\u2022 Small screens with low resolution\n\u2022 High costs associated with data transfer\n\u2022 Slow data transfer rates with high latency\n\u2022 Unreliable data connections\n\u2022 Limited battery life\nFollowing are some of the factors that affect app development time:\n\u2022 User Interface & User Experience.\n\u2022 Custom application\n\u2022 Resource availability\n\u2022 App security and publishing the app\n\u2022 App designing\n\u2022 Number of screens\/devices\/platforms\/operating systems\n\u2022 Third party integration\n\u2022 Features\n\u2022 Understanding the business logic\n\u2022 Complexity of the App\nCheck your progress-3\na) List components of Android Software Stack\nb) The foundation of the Android platform is the ____________\nc) Give full form: JIT, ART, HAL\nd) What are the important features of Android Run Time?\n1.10Let us sum up\nIn this unit we have discussed the history of mobile application development, you\nhave got detailed understanding of android and its version, android SDK features\nand architecture, and we also elaborate factors that should be given consideration\nwhile developing mobile application\n15 1.11Check your progress: Possible Answers\n1-a True\n1-b False\n1-c Some of the examples of proprietary mobile platform are:\n\u2022 Palm OS (now Garnet OS)\n\u2022 RIM BlackBerry OS\n\u2022 Java Micro Edition [Java ME]\n\u2022 Binary Runtime Environment for Wireless (BREW)\n\u2022 Symbian OS\n\u2022 OS X iPhone\n1-d OHA stands for Open Handset Alliance\n1-e Due to following reasons and Critics began to call WAP \u201cWait and Pay.\u201d\n\u2022 Handset screens were too small for surfing.\n\u2022 WAP browsers, especially in the early days, were slow and frustrating.\n\u2022 Reading a sentence fragment at a time, and then waiting seconds for the next\nsegment to download, ruined the user experience, especially because every\nsecond of downloading was often charged to the user.\n\u2022 Mobile operators who provided the WAP portal often restricted which WAP\nsites were accessible.\n2-a True\n2-b True\n2-c Android version 9 Pie is the latest version of Android\n2-d A software development kit that enables developers to create applications for\nthe Android platform. The Android SDK includes sample projects with source\ncode, development tools, an emulator, and required libraries to build Android\napplications.\n3-a) Following are the components of Android Software Stack\n\u2022 The Linux Kernel\n\u2022 Hardware Abstraction Layer (HAL)\n\u2022 Android Runtime\n\u2022 Native C\/C++ Libraries\n16 \u2022 Java API Framework\n\u2022 System Apps\n3-b) The foundation of the Android platform is the Linux kernel\n3-c)\n\u2022 JIT \u2013 Just In Time\n\u2022 ART \u2013 Android Run Time\n\u2022 HAL \u2013 Hardware Abstraction Layer\n3-d) Following are the important features of Android Run Time\n\u2022 Ahead-of-time (AOT) and just-in-time (JIT) compilation\n\u2022 Optimized garbage collection (GC)\n\u2022 On Android 9 (API level 28) and higher, conversion of an app package's\nDalvik Executable format (DEX) files to more compact machine code.\n\u2022 Better debugging support, including a dedicated sampling profiler, detailed\ndiagnostic exceptions and crash reporting, and the ability to set watch points\nto monitor specific fields\n1.12 Further Reading\n\u2022 Android\u2122 Wireless Application Development, Second Edition, Shane Conder\nLauren Darcey, Addison-Wesley, 2010\n\u2022 Beginning Android\u2122 Application Development, Wei-Meng Lee, Wiley Publishing\nInc., 2011\n1.13Assignments\n\u2022 What is android? Explain history of android version with API level\n\u2022 Explain android architecture and features of android SDK\n17 2\nUnit-2: Installing Android Studio\nUnit Structure\n2.0 Learning Objectives\n2.1 Introduction\n2.2 System Requirements for Android Studio\n2.3 Downloading Android Studio\n2.4 Downloading JDK\n2.5 Installing JDK\n2.6 Installing Android Studio\n2.7 Launching Android Studio\n2.8 Let us sum up\n2.9 Check your Progress: Possible Answers\n2.10 Further Reading\n2.11 Assignment\n2.12 Activities\n18 2.0 Learning Objectives\nAfter studying this unit student should be able to:\n\u2022 Know about android studio\n\u2022 List system requirements for android studio\n\u2022 How to download and install android studio\n\u2022 List the steps for downloading and installing android studio\n\u2022 Launch the android studio\n2.1 Introduction\nFor developing application for android platform, you will require Integrated\nDevelopment Environment (IDE). Android Studio is the official IDE for Android\napplication development. Android Studio provides everything you need to start\ndeveloping apps for Android, including the Android Studio IDE and the Android SDK\ntools. First we discuss what the system requirements for android studio are and how\nto install and configure android studio.\n2.2 System Requirements for Android Studio\nWindows\n\u2022 Microsoft\u00ae Windows\u00ae 8\/7\/Vista\/2003 (32 or 64-bit)\n\u2022 GB RAM minimum, 4 GB RAM recommended\n\u2022 400 MB hard disk space\n\u2022 At least 1 GB for Android SDK, emulator system images, and caches\n\u2022 1280 x 800 minimum screen resolution\n\u2022 Java Development Kit (JDK) 7\n\u2022 Optional for accelerated emulator: Intel\u00ae processor with support for Intel\u00ae VT-x,\nIntel\u00ae EM64T (Intel\u00ae 64), and Execute Disable (XD) Bit functionality\n2.3 Downloading Android Studio\nDownload android studio from http:\/\/developer.android.com\/sdk\/index.html. It will\nopen following web page.\n19 Figure-2\nClick green button \u201cDownload Android Studio for Windows\u201d it will open following\npage.\nFigure-3\nAccept term and condition at the bottom and press blue button \u201cDownload Android\nStudio for Windows\u201d. It will start downloading android studio for windows. Do not\nstart installation before downloading and installing JDK 1.7 is over.\n20 2.4 Downloading JDK\nTo download JDK 1.7 type following URL in browser.\nhttp:\/\/www.oracle.com\/technetwork\/java\/javase\/downloads\/jdk7-downloads-\n1880260.html. It will open page shown below.\nFigure-4\nGo to bottom of the page and accept License agreement and download JDK for\nWindows x86 or Windows x64 for windows 32 bit and windows 64 bit respectively.\nFigure-5\n21 2.5 Installing JDK\nDouble click downloaded JDK Installation file and follow instructions on screen.\nFigure-6\nPress Next Button\nFigure-7\n22 Press Next Button this will start installation as shown below.\nFigure-8\nAfter installation starts it will asks for Java Runtime Environment (JRE) Installation\nlocation.\nFigure-9\nPress Next Button it will start installing JRE as shown below.\n23 Figure-10\nOnce Java SDK installation is finished it will display following screen.\nFigure-11\nPress close button to finish Java SDK installation.\n24 To ensure that JDK is properly installed, open a terminal and type javac \u2013version\nand press enter as shown below.\nFigure-12\n2.6 Installing Android Studio\nLaunch the .exe file you just downloaded. It will open following screen.\nFigure-13\nClick on Next button.\n25 Figure-14\nClick Next button.\nFigure-15\nClick on I Agree button.\n26 Figure-16\nSpecify path for Android Studio Installation and Android SDK Installation or use\ndefault and press Next button.\nFigure-17\nPress Install Button. This will start installation as shown below.\n27 Figure-18\nOnce installation is finished completed message will be displayed as shown\nbelow.\nFigure-19\nPress next button to finish installation and launch Android Studio.\n28 Figure-20\nImportant Note:On some Windows systems, the launcher script does not find\nwhere Java is installed. If you encounter this problem, you need to set an\nenvironment variable indicating the correct location. Select Start menu >\nComputer > System Properties > Advanced System Properties. Then open\nAdvanced tab > Environment Variables and add a new system variable\nJAVA_HOME that points to your JDK folder, for example C:\\Program\nFiles\\Java\\jdk1.7.0_XX.\n2.7 Launching Android Studio\nClick on Finish button to launch Android Studio. It will display following screen\nFigure-21\nSelect last option and press OK. It will download updates and create virtual device\nfor you.\n29 Figure-22\nPress finish button to start Android Studio with following initial welcome screen.\nFigure-23\n30 Check your Progress \u2013 1\n1) Downloading Android Studio is free of cost (True \/False)\n2) We can install Android Studio without installing Java (True\/False)\n3) If the Android launcher script does not find where Java is installed, you need to\nset an environment variable indicating the correct location of Java.\n2.8 Lets us sum up\nIn this unit we have learn about the System Requirements for Android Studio and\nsystematic method of downloading and installing JDK and android studio. Once the\ninstallation is finished successfully we can launch the Android Studio.\n2.9 Check your progress: Possible Answers\n1-a) True\n1-b) False\n1-c) True\n2.10 Further Reading\n\u2022 https:\/\/developer.android.com\/studio\n\u2022 https:\/\/developer.android.com\/studio\/install\n\u2022 https:\/\/www.oracle.com\/technetwork\/java\/javase\/downloads\/jdk8-downloads-\n2133151.html\n2.11 Assignments\n\u2022 Explain the steps for downloading, installing and launching Android Studio\n2.13 Activities\n\u2022 Download and install android studio\n31 Unit-3: Android Studio for 3\nAndroid Software Development\nUnit Structure\n3.0 Learning Objectives\n3.1 Introduction\n3.2 Features of Android Studio\n3.3 App Workflow\n3.4 Android Virtual Devices (AVD)\n3.5 Using Hardware Device to test Application\n3.6 Android Studio IDE Components\n3.7 Android Studio Code Editor Customization\n3.8 Coding Best Practices\n3.9 Let us sum up\n3.10 Check your Progress: Possible Answers\n3.11 Further Reading\n3.12 Assignment\n3.13 Activities\n32 3.0 Learning Objectives\nAfter studying this unit student should be able to:\n\u2022 List features of Android Studio\n\u2022 Understand App Workflow\n\u2022 Define Android Virtual Devices (AVD)\n\u2022 Use Hardware Device to test an Application\n\u2022 Use Android Studio IDE Components\n\u2022 Customize the Android Studio Code Editor\n\u2022 Learn Coding Best Practices\n3.1 Introduction\nAndroid Studio is the official Integrated Development Environment (IDE) for Android\napp development. Android Studio offers many features that enhance your\nproductivity when building Android apps. In this unit we will explore in great details\nabout Android Studio.\n3.2 Features of Android Studio\nAndroid Studio has following salient features for android application development:\nIntelligent code editor: Android Studio provides an intelligent code editor capable\nof advanced code completion, refactoring, and code analysis. The powerful code\neditor helps you be a more productive Android app developer.\nProject Wizard: New project wizards make it easier than ever to start a new project.\nStart projects using template code for patterns such as navigation drawer and view\npagers, and even import Google code samples from GitHub.\nMulti-screen app development: Build apps for Android phones, tablets, Android\nWear, Android TV, Android Auto and Google Glass. With the new Android Project\n33 View and module support in Android Studio, it's easier to manage app projects and\nresources.\nVirtual devices for all shapes and sizes: Android Studio comes pre-configured\nwith an optimized emulator image. The updated and streamlined Virtual Device\nManager provides pre-defined device profiles for common Android devices.\nAndroid builds evolved, with Gradle: Create multiple APKs for your Android app\nwith different features using the same project.\nTo develop apps for Android, you use a set of tools that are included in Android\nStudio. In addition to using the tools from Android Studio, you can also access most\nof the SDK tools from the command line.\n3.3 App Workflow\nThe basic steps for developing applications encompass four development phases,\nwhich include:\n\u2022 Environment Setup: During this phase you install and set up your development\nenvironment. You also create Android Virtual Devices (AVDs) and connect\nhardware devices on which you can install your applications.\n\u2022 Project Setup and Development: During this phase you set up and develop\nyour Android Studio project and application modules, which contain all of the\nsource code and resource files for your application.\n\u2022 Building, Debugging and Testing: During this phase you build your project into\na debuggable .apk package(s) that you can install and run on the emulator or an\nAndroid-powered device. Android Studio uses a build system based on Gradle\nthat provides flexibility, customized build variants, dependency resolution, and\nmuch more. If you're using another IDE, you can build your project using Gradle\nand install it on a device using adb.\n34 Next, with Android Studio you debug your application using the Android Debug\nMonitor and device log messages along with the IntelliJ IDEA intelligent coding\nfeatures. You can also use a JDWP-compliant debugger along with the\ndebugging and logging tools that are provided with the Android SDK.\nLast, you test your application using various Android SDK testing tools.\n\u2022 Publishing: During this phase you configure and build your application for\nrelease and distribute your application to users.\n3.4 Android Virtual Devices (AVD)\nAn Android Virtual Device (AVD) is an emulator configuration that lets you model an\nactual device by defining hardware and software options to be emulated by the\nAndroid Emulator.An AVD consists of:\nA hardware profile: Defines the hardware features of the virtual device. For\nexample, you can define whether the device has a camera, whether it uses a\nphysical QWERTY keyboard or a dialing pad, how much memory it has, and so on.\nA mapping to a system image: You can define what version of the Android\nplatform will run on the virtual device. You can choose a version of the standard\nAndroid platform or the system image packaged with an SDK add-on.\nOther options: You can specify the emulator skin you want to use with the AVD,\nwhich lets you control the screen dimensions, appearance, and so on. You can also\nspecify the emulated SD card to use with the AVD.\nA dedicated storage area on your development machine: the device's user data\n(installed applications, settings, and so on) and emulated SD card are stored in this\narea.\nThe easiest way to create an AVD is to use the graphical AVD Manager. You can\nalso start the AVD Manager from the command line by calling the android tool with\nthe avd options, from the <sdk>\/tools\/ directory.\n35 You can also create AVDs on the command line by passing the android tool options.\nYou can create as many AVDs as you need, based on the types of device you want\nto model. To thoroughly test your application, you should create an AVD for each\ngeneral device configuration (for example, different screen sizes and platform\nversions) with which your application is compatible and test your application on each\none.Keep these points in mind when you are selecting a system image target for\nyour AVD:\n\u2022 The API Level of the target is important, because your application will not be able\nto run on a system image whose API Level is less than that required by your\napplication, as specified in the minSdkVersion attribute of the application's\nmanifest file.\n\u2022 You should create at least one AVD that uses a target whose API Level is greater\nthan that required by your application, because it allows you to test the forward-\ncompatibility of your application. Forward-compatibility testing ensures that, when\nusers who have downloaded your application receive a system update, your\napplication will continue to function normally.\n\u2022 If your application declares a uses-library element in its manifest file, the\napplication can only run on a system image in which that external library is\npresent. If you want to run your application on an emulator, create an AVD that\nincludes the required library. Usually, you must create such an AVD using an\nAdd-on component for the AVD's platform.\nCheck Your Progress -1\na) How may AVDs you will be able to be create in Android Studio?\n(A) One (B) Two (C) Three (D) As many as you want\nb) During _______ phase you build your project into a debuggable .apk package(s)\nthat you can install and run on the emulator or an Android-powered device.\n(A) Environment Setup (B) Development (C) Building (D) Publishing\nc) An AVD consist of\n(A) Hardware Profile (B) A mapping to a System Image\n(C) Dedicated Storage Area (D) All of these\n36 3.5 Using Hardware Device to test Application\nWhen building a mobile application, it's important that you always test your\napplication on a real device before releasing it to users.\nYou can use any Android-powered device as an environment for running, debugging,\nand testing your applications. The tools included in the SDK make it easy to install\nand run your application on the device each time you compile. You can install your\napplication on the device directly from Android Studio or from the command line with\nADB.\n3.6 Android Studio IDE Components\nAndroid Studio has just created an application project and opened the main window\nas shown below.\nFigure-24: Android studio IDE\nProject Tool Window\nThe newly created project and references to associated files are listed in the Project\ntool window located on the left hand side of the main project window. The user\ninterface design for our activity is stored in a file named activity_hello_world.xml\nwhich can be located using the Project tool window as shown below in Figure\n37 Figure-25: Android studio IDE\nDouble click on the file to load it into the User Interface Designer tool which will\nappear in the center panel of the Android Studio main window as shown below:\nDesigner Window\nThis is where you design your user interface. In the top of the Designer window is a\nmenu set to Nexus 4 device which is shown in the Designer panel.\nTo change the orientation of the device representation between landscape and\nportrait simply use the drop down menu immediately to the right of the device\nselection menu showing the icon .\nFigure-26: Designer Window\n38 Pellet\nOn left hand side of the panel is a palette containing different categories of user\ninterface components that may be used to construct a user interface, such as\nbuttons, labels and text fields. Android supports a variety of different layouts that\nprovide different levels of control over how visual user interface components are\npositioned and managed on the screen.\nComponent Tree Panel\nComponent Tree panel is by default located in the upper right hand corner of the\nDesigner panel and is shown in Figure and shows layout used for user interface.\nFigure-27: Component Tree Panel\nProperty Window\nProperty Window allows setting different properties of selected component.\nFigure-28: Property Window\n39 XML Editing Panel\nWe can modify user interface by modifying the activity_hello_world.xml using UI\nDesigner tool but we can also modify design by editing XML file also. At the bottom\nof the Designer panel are two tabs labeled Design and Text respectively. To switch\nto the XML view simply select the Text tab as shown in Figure. At the right hand side\nof the XML editing panel is the Preview panel and shows the current visual state of\nthe layout.\nFigure-29: XML Editing Panel\nPreviewing the Layout\nIn above figure layout has been previewed of the Nexus 4 device. The layout can be\ntested for other devices by making selections from the device menu in the toolbar\nacross the top edge of the Designer panel. We can also preview screen size for all\ncurrently configured device as shown in figure.\nCheck Your Progress \u2013 2\na) Component Tree panel is by default located in the upper left hand corner of the\nDesigner panel (True\/False)\nb) Property Window allows setting different properties of selected component.\n(True\/False)\n40 Figure-30:Previewing the Layout\n3.7 Android Studio Code Editor Customization\nWe customize code editor for font, displaying quick help when mouse moves over\ncode.\nFont Customization:\nFrom File menu select settings option following dialog will open.\nFigure-31\nSelect Colors & Fonts option. In scheme Default scheme is displayed. Click \u201cSave\nAs\u2026\u201d Button and give new name as \u201cMy Settings\u201d to scheme. Now select font\noption as shown below and customize font as per your requirement.\n41 Figure-32\nShow quick doc on mouse move\nIn android studio code editor, when you move your mouse over a method, class or\ninterface, a documentation window would appear with a description of that\nprogramming element. This feature is by default disabled in android studio. This\nfeature can be enabled in android studio as follows.\nFrom file menu select settings option following dialog box appears. Select General\noption from list and scroll down to checkbox highlighted with red rectangle in below\nfigure. Then press OK.\nFigure-33\n42 3.8 Coding Best Practices\nFollowing are some of the code editing practices you should follow when creating\nAndroid Studio apps.\nCode Practice Description\nAlt + Enter key For quick fixes to coding errors such as missing imports, variable\nassignments, missing references, etc. You can use Alt + Enter key\nto fix errors for the most probable solution.\nCtrl + D The Ctrl + D key are used for quickly duplicating code lines or\nfragments. Instead of copy and paste, you can select the desired\nline or fragment and enter this key.\nNavigate menu Use the Navigate menu to jump directly to the class of a method or\nfield name without having to search through individual classes.\nCode folding This allows you to selectively hide and display sections of the code\nfor readability. For example, resource expressions or code for a\nnested class can be folded or hidden in to one line to make the\nouter class structure easier to read. The inner class can be later\nexpanded for updates.\nImage and When referencing images and icons in your code, a preview of the\ncolor preview\nimage or icon appears (in actual size at different densities) in the\ncode margin to help you verify the image or icon reference.\nPressing F1 with the preview image or icon selected displays\nresource asset details, such as the dp settings.\nQuick You can inspect theme attributes using View > Quick\ndocumentation\nDocumentation (Ctrl+Q), If you invoke View > Quick\nDocumentation on the theme attribute\n?android:textAppearanceLarge, you will see the theme inheritance\nhierarchy and resolved values for the various attributes that are\npulled in.\nTable-2\n43 The following tables list keyboard shortcuts for common operations.\nAction Android Studio Key Command\nCommand look-up CTRL + SHIFT + A\n(autocomplete command name)\nProject quick fix ALT + ENTER\nReformat code CTRL + ALT + L (Win)\nOPTION + CMD + L (Mac)\nShow docs for selected API CTRL + Q (Win)\nF1 (Mac)\nShow parameters for selected method CTRL + P\nGenerate method ALT + Insert (Win)\nCMD + N (Mac)\nJump to source F4 (Win)\nCMD + down-arrow (Mac)\nDelete line CTRL + Y (Win)\nCMD + Backspace (Mac)\nSearch by symbol name CTRL + ALT + SHIFT + N (Win)\nOPTION + CMD + O (Mac)\nTable-3\nFollowing table lists project and editor key commands:\nAction Android Studio Key Command\nBuild CTRL + F9 (Win), CMD + F9 (Mac)\nBuild and run SHIFT + F10 (Win), CTRL + R (Mac)\nToggle project visibility ALT + 1 (Win), CMD + 1 (Mac)\nNavigate open tabs ALT + left-arrow; ALT + right-arrow (Win)\nCTRL + left-arrow; CTRL + right-arrow (Mac)\nTable-4\nYou can change these shortcuts from file menu settings option as shown below.\nCheck your Progress \u2013 3\na) The short cut key to access quick documentation is F1 (True\/False)\nb) The Ctrl+Dare used for quickly duplicating code lines or fragments. (True\/False)\nc) You can use Ctrl+Enter to fix errors for the most probable solution (True\/False)\n44 d) We can customize the code editor for font, displaying quick help when mouse\nmoves over code. (True\/False)\nFigure-34\n3.9 Letus sum up\nBefore starting the development of Android based applications, the major step is to\nset up a suitable development environment. This consists of the Java Development\nKit (JDK), Android SDKs, and Android Studio IDE. In this chapter, we have covered\nthe steps necessary to install these packages on Windows operating system and\nhow to create Hello World application project using Android Studio. We have also\ndiscussed android studio IDE component and project structure and how to do code\neditor customization and discuss some of the best practices for coding.\n3.10 Check your Progress: Possible Answers\n1-a) D 1-b) C 1-c) D\n2-a) False 2-b) True\n3-a) False 3-b) True 3-c) False 3-d) True\n3.11 Further Reading\n45 \u2022 https:\/\/developer.android.com\/studio\/intro\n3.12 Assignment\n\u2022 Explain different components of Android Studio\n3.13 Activities\n\u2022 Create two AVDs with different configuration in Android Studio\n\u2022 Customize Android Studio for font and show quick doc on mouse move\n46 Block-2\nAndroid Application\nDevelopment Basics\n47 Unit-1: Building a sample\n1\nAndroid application using\nAndroid Studio\n1.0. Learning Objectives\n1.1. Introduction\n1.2. Building a sample Android application using Android Studio\n1.3. Creating a new Android Project\n1.4. Defining the Project and SDK Settings\n1.5. Creating Activity\n1.6. Running a HelloWorld Application\n1.7. Let us sum up\n1.8. Check your Progress: Possible Answers\n1.9. Further Reading\n1.10. Assignment\n1.11. Activities\n48 1.0 Learning Objectives\nAfter studying this unit student should be able to:\n\u2022 Create a new android studio project\n\u2022 List the steps for creating an Android Application\n\u2022 Configure project and SDK setting for Android Application\n\u2022 Create an activity\n\u2022 Run an Android Application\n1.1 Introduction\nWith all the tools and the SDK downloaded and installed, it is now time to start your\nengine! Asin all programming books, the first example uses the ubiquitous Hello\nWorld application. This willenable you to have a detailed look at the various\ncomponents that make up an Android project.\nSo, without any further ado, let\u2019s dive straight in!Generally a program is defined in\nterms of functionality and data, and an Android application is not an exception. It\nperforms processing, show information on the screen, and takes data from a variety\nof sources.\nTo Develop Android applications for mobile devices with resource constraint requires\na systematic understanding of the application lifecycle. This unit introduces you with\nthe most important components of Android applications and provides you with a\nmore detailed understanding of how to create and run an Android application.\n1.2 Building a sample Android application using Android\nStudio\nBefore developing sophisticated Android application, it is necessary to check\nwhether all of the required development packages are installed and functioning\ncorrectly. The simple way to realize this aim is to create an Android application and\ncompile and run it. This topic will explain how to create a simple Android application\nproject using Android Studio. Once the project has been created, a later chapter will\n49 explore the use of the Android emulator environment to perform a test run of the\napplication.\n1.3 Creating a New Android Project\nThe first step in the application development process is to create a new project within\nthe Android Studio environment. Launch Android Studio so that the \u201cWelcome to\nAndroid Studio\u201d screen appears as shown Figure:\nFigure-35\nTo create the new project, simply click on the Start a new Android Studio project\noption to display the first screen of the New Project wizard as shown in Figure:\nFigure-36\nIn the New Project window, set the Application name field to HelloWorld. The\napplication name is the name by which the application will be referenced and\n50 identified within Android Studio and is also the name that will be used when the\ncompleted application goes on sale in the Google Play store.\nThe Package Name is used to uniquely identify the application within the Android\napplication ecosystem. It should be based on the reversed URL of your domain\nname followed by the name of the application. For example, if your domain is\nwww.baou.edu, and the application has been named HelloWorld, then the package\nname might be specified as follows:\nedu.baou.HelloWorld\nThe Project location setting will default to a location in the folder named\nAndroidStudioProjects located in your home directory and may be changed by\nclicking on the button to the right of the text field containing the current path setting.\nClick Next to proceed.\n1.4 Defining the Project and SDK Settings\nOn the form factors screen, enable the Phone and Tablet option and set the\nminimum SDK setting to API 8: Android 2.2 (Froyo). The reason for selecting an\nolder SDK release is that this ensures that the finished application will be able to run\non the widest possible range of Android devices. The higher the minimum SDK\nselection, the more the application will be restricted to newer Android devices.\nFigure-37\nClick Next to proceed.\n51 1.5 Creating Activity\nThe next step is to define the type of initial activity that is to be created for the\napplication. A range of different activity types is available when developing Android\napplications. For sack of simplicity we select the option to create a Blank Activity and\nClick Next to proceed.\nFigure-38\nOn the final screen name the activity and title HelloWorldActivity. The activity will\nconsist of a single user interface screen layout which, for the purposes of this\nexample, should be named activity_hello_world as shown in Figure and with a menu\nresource named menu_hello_world:\nFigure-39\nFinally, click on Finish to initiate the project creation process.\n52 1.6 Running a HelloWorld Application\n1. Press Shift+F10 or \u2018Run App\u2019 button in taskbar. It will launch following dialog box.\nFigure-40\n2. Select Launch emulator option and select your Android virtual device and Press\nOK.\n3. The Android emulator starts up, which might take a moment\n4. Press the Menu button to unlock the emulator.\n5. The application starts, as shown in Figure below.\nFigure-41\n6. Click the Home button in the Emulator to end the application.\n53 7. Pull up the Application Drawer to see installed applications. Your screen looks\nsomething\n8. like Figure shown below\nFigure-42\nRecall that earlier you created a few AVDs using the AVD Manager. So which one\nwill be launched by Android Studio when you run an Android application? Android\nstudio will check the target that you specified (when you created a new project),\ncomparing it against the list of AVDs that you have created. The first one that\nmatches will be launched to run your application.\nIf you have more than one suitable AVD running prior to debugging the application,\nAndroid Studio will display the Android Device Chooser window, which enables you\nto select the desired emulator\/device to debug the application.\nCheck your progress-1\na) What is reason for selecting an older version SDK for android application?\nb) What is short cut key for running an application?\nc) The Package Name is used to uniquely identify the application within the Android\napplication ecosystem (True\/False)\n54 d) __________ should be based on the reversed URL of your domain name\nfollowed by the name of the application.\n1.7 Let\u2019s sum up\nThis chapter has provided a brief overview of Android Application Development\nsteps, and highlighted some of its capabilities. Ifyou have followed the sections on\ndownloading the tools and SDK, you should now have a workingsystem one that is\nthe Hello World application. In the next chapter, you will learn about the concepts of\nA Framework for a Well-Behaved Application in Android.\n1.8 Check your Progress: Possible Answers\n1-a) The reason for selecting an older SDK release is that this ensures that the\nfinished application will be able to run on the widest possible range of Android\ndevices\n1-b) Shift+F10\n1-c) True\n1-d) Package Name\n1.9 Further Reading\n\u2022 https:\/\/developer.android.com\/training\/basics\/firstapp\n1.10 Assignment\n\u2022 Write steps for creating an Android Application\n1.11 Activities\n\u2022 Create HelloWorld Application in Android Studio\n55 Unit-2: Android Project\n2\nStructure and Basics\nUnit Structure\n2.0 Learning Objectives\n2.1 Introduction\n2.2 Android Project Structure\n2.3 Android Project Files\n2.4 Android Application Modules\n2.5 Types of Modules\n2.6 Project structure settings\n2.7 Anatomy of an Android Application\n2.8 Important Android Terminology\n2.9 Basic Android API Packages\n2.10 Android Advanced API Packages\n2.11 Let us sum up\n2.12 Check your Progress: Possible Answers\n2.13 Further Reading\n2.14 Assignment\n56 2.0 Learning Objectives\nAfter studying this unit student should be able to:\n\u2022 Know the structure of Android Project\n\u2022 List the various types of Android Project files\n\u2022 Define Android application modules\n\u2022 Enumerate the types of modules\n\u2022 Modify project structure setting\n\u2022 Understand anatomy of an android application\n\u2022 Know basic and advanced Android API\n2.1 Introduction\nThe Android build system is organized around a specific directory tree structure for\nthe Androidproject, similar to theany Java project. The project prepares the actual\napplication that will run on the device or emulator. When you create a new Android\nproject, you get several items in the project\u2019s root directory which is discussed in sub\nsequent sections.\nWhen you create an Android project as discussed in previous unit, you provide the\nfully-qualifiedclass name of the \u201cmain\u201d activity for the application\n(e.g.,edu.baou.HelloWorld).\nYou will then find that your project\u2019s src\/ tree already has the namespace directory\ntree inplace, plus a stub Activity subclass representing your main activity (e.g.,\nsrc\/edu\/baou\/HelloWorld.java). You can modify this file and add others to the src\/\ntree as per requirement implement your application.\nWhen you compile the project for first time, in the \u201cmain\u201d activity\u2019s\nnamespacedirectory, the Android build chain will create R.java. This contains a\nnumber of constants tiedto the various resources you placed out in the res\/ directory\n57 tree. You should not modify R.javayourself, letting the Android tools handle it for you.\nYou will see throughout many of the sampleswhere we reference things in R.java\n(e.g., referring to a layout\u2019s identifier via R.layout.main).\n2.2 Android Project Structure\nAn Android project contains everything that defines your Android app. The SDK tools\nrequire that your projects follow a specific structure so it can compile and package\nyour application correctly. Android Studio takes care of all this for you.\nA module is the first level of control within a project that encapsulates specific types\nof source code files and resources. There are several types of modules with a\nproject:\nModule Description\nAndroid It contain source code, resource files, and application level\nApplication settings, such as the module-level build file, resource files, and\nModules Android Manifest file.\nTest Modules It contains code to test your application projects and is built into\ntest applications that run on a device.\nLibrary It contains shareable Android source code and resources that you\nModules can reference in Android projects. This is useful when you have\ncommon code that you want to reuse.\nApp Engine They are App Engine java Servlet Module for backend\nModules development, App Engine java Endpoints Module to convert\nserver-side Java code annotations into RESTful backend APIs,\nand App Engine Backend with Google Cloud Messaging to send\npush notifications from your server to your Android devices.\nTable-4\nWhen you use the Android development tools to create a new project and the\nmodule, the essential files and folders will be created for you. As your application\ngrows in complexity, you might require new kinds of resources, directories, and files.\n58 2.3 Android Project Files\nAndroid Studio project files and settings provide project-wide settings that apply\nacross all modules in the project.\nFigure-43\nFile Meaning\n.idea Directory for IntelliJ IDEA settings.\nApp Application module directories and files.\nBuild This directory stores the build output for all project modules.\nGradle Contains the gradler-wrapper files.\n.gitignore Specifies the untracked files that Git should ignore.\nbuild.gradle Customizable properties for the build system.\ngradle.properties Project-wide Gradle settings.\ngradlew Gradle startup script for Unix.\ngradlew.bat Gradle startup script for Windows.\nlocal.properties Customizable computer-specific properties for the build system,\nsuch as the path to the SDK installation.\n.iml Module file created by the IntelliJ IDEA to store module\ninformation.\nsettings.gradle Specifies the sub-projects to build.\nTable-5\n59 Check your progress-1\na) _________contains shareable Android source code and resources that you can\nreference in Android projects.\nb) _________ contain source code, resource files, and application level settings,\nsuch as the module-level build file, resource files, and Android Manifest file.\nc) When you compile the project for first time, in the \u201cmain\u201d activity\u2019s namespace\ndirectory, the Android build chain will create _________\n2.4 Android Application Modules\nAndroid Application Modules contain things such as application source code and\nresource files. Most code and resource files are generated for you by default, while\nothers should be created if required. The following directories and files comprise an\nAndroid application module:\nFigure-44\n60 File Meaning\nbuild\/ Contains build folders for the specified build variants. Stored in the\nmain application module.\nlibs\/ Contains private libraries. Stored in the main application module.\nsrc\/ Contains your stub Activity file, which is stored at\nsrc\/main\/java\/<ActivityName>.java. All other source code files\n(such as .java or .aidl files) go here as well.\nandroidTest\/ Contains the instrumentation tests.\nmain\/jni\/ Contains native code using the Java Native Interface (JNI).\nmain\/gen\/ Contains the Java files generated by Android Studio, such as your\nR.java file and interfaces created from AIDL files.\nmain\/assets\/ This is empty. You can use it to store raw asset files. For example,\nthis is a good location for textures and game data. Files that you\nsave here are compiled into an .apk file as-is, and the original\nfilename is preserved. You can navigate this directory and read\nfiles as a stream of bytes using the AssetManager.\nmain\/res\/ Contains application resources, such as drawable files, layout files,\nand string values in the following directories.\nanim\/ For XML files that are compiled into animation objects.\ncolor\/ For XML files that describe colors.\ndrawable\/ For bitmap files (PNG, JPEG, or GIF), 9-Patch image files, and\nXML files that describe Drawable shapes or Drawable objects that\ncontain multiple states (normal, pressed, or focused).\nmipmap\/ For app launcher icons. The Android system retains the resources\nin this folder (and density-specific folders such as mipmap-\nxxxhdpi) regardless of the screen resolution of the device where\nyour app is installed. This behavior allows launcher apps to pick\nthe best resolution icon for your app to display on the home\nscreen.\nlayout\/ XML files that are compiled into screen layouts (or part of a\nscreen).\nmenu\/ For XML files that define application menus.\n61 File Meaning\nraw\/ For arbitrary raw asset files. Saving asset files here is essentially\nthe same as saving them in the assets\/ directory. The only\ndifference is how you access them. These files are processed by\naapt and must be referenced from the application using a resource\nidentifier in the R class. For example, this is a good place for\nmedia, such as MP3 or Ogg files.\nvalues\/ For XML files that define resources by XML element type. Unlike\nother resources in the res\/ directory, resources written to XML files\nin this folder are not referenced by the file name. Instead, the XML\nelement type controls how the resources defined within the XML\nfiles are placed into the R class.\nxml\/ For miscellaneous XML files that configure application\ncomponents. For example, an XML file that defines a\nPreferenceScreen, AppWidgetProviderInfo, or Searchability\nMetadata.\nAndroidManife The control file that describes the nature of the application and\nst.xml each of its components. For instance, it describes: certain qualities\nabout the activities, services, intent receivers, and content\nproviders; what permissions are requested; what external libraries\nare needed; what device features are required, what API Levels\nare supported or required; and others.\n.gitignore\/ Specifies the untracked files ignored by git.\napp.iml\/ IntelliJ IDEA module\nbuild.gradle Customizable properties for the build system. You can edit this file\nto override default build settings used by the manifest file and also\nset the location of your keystore and key alias so that the build\ntools can sign your application when building in release mode. This\nfile is integral to the project, so maintain it in a source revision\ncontrol system.\nproguard- ProGuard settings file.\nrules.pro\nTable-6\n62 2.5 Types of Modules\nAndroid Studio offers a few distinct types of module:\nAndroid app module: It provides a container for your app's source code, resource\nfiles, and app level settings such as the module-level build file and Android Manifest\nfile. When you create a new project, the default module name is \"app\".In the Create\nNew Module window, Android Studio offers the following types of app modules:\n\u2022 Phone & Tablet Module\n\u2022 Wear OS Module\n\u2022 Android TV Module\n\u2022 Glass Module\nThey each provide essential files and some code templates that are appropriate for\nthe corresponding app or device type.\nDynamic feature module: Itdenotes a modularized feature of your app that can take\nadvantage of Google Play's Dynamic Delivery. For example, with dynamic feature\nmodules, you can provide your users with certain features of your app on-demand or\nas instant experiences through Google Play Instant.\nLibrary module: Itprovides a container for your reusable code, which you can use\nas a dependency in other app modules or import into other projects. Structurally, a\nlibrary module is the same as an app module, but when built, it creates a code\narchive file instead of an APK, so it can't be installed on a device.\nIn the Create New Module window, Android Studio offers the following library\nmodules:\n\u2022 Android Library: This type of library can hold all file types supported in an\nAndroid project, including source code, resources, and manifest files. The\nbuild result is an Android Archive file or AAR file that can be added as a\ndependency for your Android app modules.\n63 \u2022 Java Library: This type of library can contain only Java source files. The build\nresult is a Java Archive or JAR file that can be added as a dependency for\nyour Android app modules or other Java projects.\nGoogle Cloud module: it provides a container for your Google Cloud backend\ncode. It has the required code and dependencies for a Java App Engine backend\nthat uses HTTP, Cloud Endpoints, and Cloud Messaging to connect to your app. You\ncan develop your backend to provide cloud services need by your app.\n2.6 Project structure settings\nTo change various settings for your Android Studio project, open the project\nstructure dialog by clicking File \uf0e0Project Structure. It contains the following sections:\n\u2022 SDK Location: Sets the location of the JDK, Android SDK, and Android NDK\nthat your project uses.\n\u2022 Project: Sets the version for Gradle and the Android plugin for Gradle, and\nthe repository location name.\n\u2022 Developer Services: Contains settings for Android Studio add-in components\nfrom Google or other third parties. See Developer Services, below.\n\u2022 Modules: Allows you to edit module-specific build configurations, including\nthe target and minimum SDK, the app signature, and library dependencies.\n2.7 Anatomy of an Android Application\nGenerally a program is defined in terms of functionality and data, and an Android\napplication is not an exception. It performs processing, show information on the\nscreen, and takes data from a variety of sources.\nTo Develop Android applications for mobile devices with resource constraint requires\na systematic understanding of the application lifecycle. Important terminology for\napplication building blocks terms are Context, Activity, and Intent. This section\nintroduces you with the most important components of Android applications and\n64 provides you with a more detailed understanding of how Android applications\nfunction and interact with one another.\n2.8 Important Android Terminology\nThe followings are the important terminology used in Android application\ndevelopment.\n\u2022 Context: The context is the essential command for an Android application. It\nstores the current state of the application\/object and all application related\nfunctionality can be accessed through the context. Typically you call it to get\ninformation regarding another part of your program such as an activity, package,\nand application.\n\u2022 Activity: It is core to any Android application. An Android application is a\ncollection of tasks, each of which is called an Activity. Each Activity within an\napplication has an exclusive task or purpose. Typically, applications have one or\nmore activities, and the main objective of an activity is to interact with the user.\n\u2022 Intent: Intent is a messaging object which can be used to request an action from\nanother app component. Each request is packaged as Intent. You can think of\neach such request as a message stating intent to do something. Intent mainly\nused for three tasks 1) to start an activity, 2) to start a service and 3) to deliver a\nbroadcast.\n\u2022 Service: Tasks that do not require user interaction can be encapsulated in a\nservice. A service is most useful when the operations are lengthy (offloading\ntime-consuming processing) or need to be done regularly (such as checking a\nserver for new mail).\n2.9 Basic Android API Packages\nApplication program interface (API) is a set of routines, protocols, and tools for\nbuilding software applications. An API specifies how software components should\ninteract and APIs are used when programming graphical user interface (GUI)\ncomponents.Android offers a number of APIs for developing your applications. The\n65 following list of core APIs should provide an insight into what\u2019s available; all Android\ndevices will offer support for at leastthese APIs:\nAPI Package Use\nandroid.util Provides common utility methods such as date\/time\nmanipulation, base64 encoders and decoders, string and\nnumber conversion methods, and XML utilities.\nandroid.os Provides basic operating system services, message passing,\nand inter-process communication on the device.\nandroid.graphics Provides low level graphics tools such as canvases, color filters,\npoints, and rectangles that let you handle drawing to the screen\ndirectly.\nandroid.text Provides classes used to render or track text and text spans on\nthe screen.\nandroid.database Contains classes to explore data returned through a content\nprovider.\nandroid.content Contains classes for accessing and publishing data on a device.\nandroid.view Provides classes that expose basic user interface classes that\nhandle screen layout and interaction with the user.\nandroid.widget The widget package contains (mostly visual) UI elements to use\non your Application screen.\nandroid.app Contains high-level classes encapsulating the overall Android\napplication model.\nandroid.provider Provides convenience classes to access the content providers\nsupplied by Android.\nandroid.webkit Provides tools for browsing the web.\nTable-7\n2.10 Advanced Android API Packages\nThe core libraries provide all the functionality you need to start creating applications\nfor Android,but it won\u2019t be long before you\u2019re ready to delve into the advanced APIs\nthat offer the really excitingfunctionality.\n66 Android hopes to target a wide range of mobile hardware, so be aware that the\nsuitability and implementationof the following APIs will vary depending on the device\nupon which they are implemented.\nAPI Package Use\nandroid.location Contains the framework API classes that define Android\nlocation-based and related services.\nandroid.media Provides classes that manage various media interfaces in\naudio and video.\nandroid.opengl Provides an OpenGL ES static interface and utilities.\nandroid.hardware Provides support for hardware features, such as the camera\nand other sensors.\nandroid.bluetooth Provides classes that manage Bluetooth functionality, such as\nscanning for devices, connecting with devices, and managing\ndata transfer between devices. The Bluetooth API supports\nboth \"Classic Bluetooth\" and Bluetooth Low Energy.\nandroid.net.wifi Provides classes to manage Wi-Fi functionality on the device.\nandroid.telephony Provides APIs for monitoring the basic phone information, such\nas the network type and connection state, plus utilities for\nmanipulating phone number strings.\nTable-8\nCheck your progress-2\na) All application related functionality can be accessed through the ________\nb) _____ Package provide classes that manage various media interfaces in audio\nand video.\nc) Tasks that do not require user interaction can be encapsulated in a _______.\nd) Application Program Interface is a set of routines, protocols, and tools for building\nsoftware applications (True\/False)\ne) Service is a messaging object which can be used to request an action from\nanother app component. (True\/False)\nf) An Android application is a collection of tasks, each of which is called an Activity\n(True\/False)\n67 2.11Let us sum up\nIn this unit you have lean about the structure of Android Project, various types of\nAndroid Project files, Android application modules and understand anatomy of an\nandroid application. You have also learnt about basic and advanced Application\nProgram Interface.\n2.12Check your Progress: Possible Answers\n1-a) Library Modules 1-b) Android Application Modules 1-c) R.java\n2-a) Context 2-b) android.media 2-c) Service\n2-d) True 2-e) False 2-f) True\n2.13Further Reading\n\u2022 https:\/\/developer.android.com\/studio\/projects\n2.14Assignment\n\u2022 Explain Android Project Structure\n\u2022 Write detailed note on basic and advanced API packages\n\u2022 Define: Activity, Service, Context, Intent\n68 3\nUnit-3: Android Manifest File\nand its common settings\nUnit Structure\n3.0 Learning Objectives\n1.3 Introduction\n1.4 Components of Manifest file\n1.5 Package name and application ID\n1.6 App components\n1.7 Permissions\n1.8 Device compatibility\n1.9 File conventions\n1.10 Manifest elements reference\n1.11 Example of Manifest file\n1.12 Let us sum up\n1.13 Check your Progress: Possible Answers\n1.14 Further Reading\n1.15 Assignment\n1.16 Activities\n69 3.0 Learning Objectives\nAfter studying this unit students should be able to\n\u2022 What is AndroidManifest.xml file\n\u2022 Understand various components of Manifest file\n\u2022 Specify package, activity, permission, device configuration in Manifest file\n\u2022 Understand File convention used in Manifest file\n\u2022 Modify the default Manifest file as per requirement\n3.1 Introduction\nEach and every android app project must have an AndroidManifest.xml file in theroot\nof your project. The manifest file describes important information about your app.\nThe manifest file declares the following:\n\u2022 The app's package name\n\u2022 The components of the app such as activities, services, broadcast receivers, and\ncontent providers.\n\u2022 Which device configurations it can handle\n\u2022 Intent filters that describe how the component can be started.\n\u2022 Permissions required by the app\n\u2022 The hardware and software features the app requires\nAndroid Studio generally builds the manifest file for you when you create a project.\nFor a simple application with a single activity and nothing else, the auto-generated\nmanifest willwork fine with little or no modifications.\n3.2 Component of Manifest file\nAndroid manifest file is global application description file which defines your\napplication\u2019s capabilities and permissions and how it runs.This topic describes some\nof the most important characteristics of your app which is stored in the manifest file.\n70 3.3 Package name and application ID\nThe manifest file's root element requires an attribute for your app's package name,\nFor example, the following snippet shows the root <manifest> element with the\npackage name \"in.edu.baou.databasedemo\":\n<? xml version=\"1.0\" encoding=\"utf-8\"?>\n<manifest xmlns:android=\"http:\/\/schemas.android.com\/apk\/res\/android\"\npackage=\"in.edu.baou.databasedemo\"\nandroid:versionCode=\"1\"\nandroid:versionName=\"1.0\" >\n...\n<\/manifest>\nWhile building your app into the final APK, the Android build tools use the package\nattribute for two things:\nIt applies this name as the namespace for your app's generated R.java class. With\nthe above manifest, the R class is created at in.edu.baou.databasedemo.R.\nAndroid manifest file uses package this name to resolve any relative class names\nthat are declared in the manifest file.\nIf, an activity declared as <activity android:name=\".MainActivity\"> is resolved to be\nin.edu.baou.databasedemo.MainActivity.\nYou should keep in mind that once the APK is compiled, the package attribute also\nrepresents your app's universally unique application ID.After the build tools perform\nthe above tasks based on the package name, they replace the package value with\nthe value given to the applicationId property in your project's build.gradle file.\n71 3.4 App Components\nFor each app component that you create in your app, you must declare a\ncorresponding XML element in the manifest file so that the system can start it.\nForeach subclass of Activity,we have <activity>\nForeach subclass of Service,we have <service>\nForeach subclass of BroadcastReceiver we have <receiver>.\nFor each subclass of ContentProvider, we have <provider>\nThe name of your subclass must be specified with the name attribute, using the full\npackage designation,e.g. an Activity subclass can be declared as follows\n<manifest package=\"in.edu.baou.databasedemo\" ... >\n<application ... >\n<activity android:name=\".SQLiteDBActivity\" ... >\n...\n<\/activity>\n<\/application>\n<\/manifest>\nIn above example, the activity name is resolved to\n\"in.edu.baou.databasedemo.SQLiteDBActivity\"\nApp activities, services, and broadcast receivers are activated by intents. It is an\nasynchronous messaging mechanism to match task requests with the appropriate\nActivity.\nWhen an app issues intent to the system, the system locates an app component that\ncan handle the intent based on intent filter declarations in each app's manifest file.\nThe system launches an instance of the matching component and passes the Intent\nobject to that component. If more than one app can handle the intent, then the user\ncan select which app to use.An intent filters is defined with the <intent-filter> element\nas shown below.\n72 <activity\nandroid:name=\".SQLiteDBActivity\">\n<intent-filter>\n<action android:name=\"android.intent.action.MAIN\" \/>\n<category android:name=\"android.intent.category.LAUNCHER\" \/>\n<\/intent-filter>\n<\/activity>\nA number of manifest elements have icon and label attributes for displaying a small\nicon and a text label, respectively, to users for the corresponding app component.\nFor example, the icon and label that are set in the <application> element are the\ndefault icon and label for each of the app's components.\nThe icon and label that are set in a component's <intent-filter> are shown to the user\nwhenever that component is presented as an option to fulfill intent.\n3.5 Permissions\nAndroid apps must request permission to access personnel user data such as\ncontacts, SMS, camera, files, internet etc. Each permission is identified by a unique\nlabel. For example, an app that needs to send and receive SMS messages must\nhave the following line in the manifest:\n<manifest ... >\n<uses-permission android:name=\"android.permission.SEND_SMS\" \/>\n<uses-permission android:name=\"android.permission.RECEIVE_SMS\" \/>\n...\n<\/manifest>\nFrom API level 23, the user can approve or reject some app permissions at runtime.\nYou must declare all permission requests with a <uses-permission> element in the\nmanifest. If the permission is granted, the app is able to use the protected features. If\n73 not, its attempts to access those features fail.A new permission is declared with the\n<permission> element.\n3.6 Device Compatibility\nIn manifest file is you can declare what types of hardware or software features your\napp requires and types of devices with which your app is compatible. It can\u2019t be\ninstalled on devices that don't provide the features or system version that your app\nrequires.The following table shows the most common tags for specifying device\ncompatibility.\nTag Description\n<uses-feature> It allows you to declare hardware and software features your app\nneeds\nExample\n<manifest ... >\n<uses-feature\nandroid:name=\"android.hardware.sensor.compass\"\nandroid:required=\"true\" \/>\n...\n<\/manifest>\n<uses-sdk> It indicates the minimum version with which your app is\ncompatibleelement are overridden by corresponding properties in\nthe build.gradle file.\n<manifest>\n<uses-sdkandroid:minSdkVersion=\"5\" \/>\n...\n<\/manifest>\nTable-9\n3.7 File conventions\nFollowing are the conventions and rules that generally apply to all elements and\nattributes in the manifest file.\n74 \u2022 Only the <manifest> and <application> elements are required. They each must\noccur only once, other elements can occur zero or more times.\n\u2022 Elements at the same level are generally not ordered hence elements can be\nplaced in any order\n\u2022 All attributes are optional but attributes must be specified so that an element can\nserve its purpose. If attributes are not provided then it indicates the default value\n\u2022 Except for some attributes of the root <manifest> element, all attribute names\nbegin with an android: prefix.\n3.8 Manifest elements reference\nThe following table provides links to reference documents for all valid elements in\nthe AndroidManifest.xml file.\nElement Description\n<action> It is used to add an action to an intent filter.\n<activity> It is used to declare an activity component.\n<activity-alias> It is used to declare an alias for an activity.\n<application> It is used to declare the application.\n<category> It is used to add category name to an intent filter.\n<compatible-screens> It is used to specifies each screen configuration with which\nthe application is compatible.\n<data> Adds a data specification to an intent filter.\n<grant-uri-permission> Specifies the subsets of app data that the parent content\nprovider has permission to access.\n<instrumentation> Declares an Instrumentation class that enables you to\nmonitor an application's interaction with the system.\n<intent-filter> Specifies the types of intents that an activity, service, or\nbroadcast receiver can respond to.\n<manifest> The root element of the AndroidManifest.xml file.\n<meta-data> A name-value pair for an item of additional, arbitrary data\nthat can be supplied to the parent component.\n<path-permission> Defines the path and required permissions for a specific\nsubset of data within a content provider.\n<permission> Declares a security permission that can be used to limit\naccess to specific components or features of this or other\napplications.\n75 <permission-group> Declares a name for a logical grouping of related\npermissions.\n<permission-tree> Declares the base name for a tree of permissions.\n<provider> Declares a content provider component.\n<receiver> Declares a broadcast receiver component.\n<service> Declares a service component.\n<supports-gl-texture> Declares a single GL texture compression format that the\napp supports.\n<supports-screens> Declares the screen sizes your app supports and enables\nscreen compatibility mode for screens larger than what\nyour app supports.\n<uses-configuration> Indicates specific input features the application requires.\n<uses-feature> Declares a single hardware or software feature that is used\nby the application.\n<uses-library> Specifies a shared library that the application must be\nlinked against.\n<uses-permission> Specifies a system permission that the user must grant in\norder for the app to operate correctly.\n<uses-sdk> Lets you express an application's compatibility with one or\nmore versions of the Android platform, by means of an API\nlevel integer.\nTable-10\n3.9 Example of Manifest file\nThe XML below is a simple example AndroidManifest.xml that declares two activities\nfor the app.\n<?xml version=\"1.0\" encoding=\"utf-8\"?>\n<manifest xmlns:android=\"http:\/\/schemas.android.com\/apk\/res\/android\"\npackage=\"in.edu.baou.listnameactivity\"\nandroid:versionCode=\"1\"\nandroid:versionName=\"1.0\" >\n<uses-sdk\nandroid:minSdkVersion=\"8\"\nandroid:targetSdkVersion=\"22\" \/>\n<application\n76 android:allowBackup=\"true\"\nandroid:icon=\"@mipmap\/ic_launcher\"\nandroid:label=\"@string\/app_name\"\nandroid:theme=\"@style\/AppTheme\" >\n<activity\nandroid:name=\"in.edu.baou.listnameactivity.NameDisplayActivity\"\nandroid:label=\"@string\/app_name\" >\n<intent-filter>\n<action android:name=\"android.intent.action.MAIN\" \/>\n<category android:name=\"android.intent.category.LAUNCHER\" \/>\n<\/intent-filter>\n<\/activity>\n<activity\nandroid:name=\"in.edu.baou.listnameactivity.MultipleChoiceActivity\"\nandroid:label=\"@string\/title_activity_multiple_choice\" >\n<\/activity>\n<\/application>\n<\/manifest>\nCheck your progress-1\na) Android Studio generally builds the manifest file for you when you create a\nproject. (True\/False)\nb) <uses-feature> indicates specific input features the application requires.\n(True\/False)\nc) _________ declares a security permission that can be used to limit access to\nspecific components or features of this or other applications.\nd) In manifest file is you can declare __________ features your app requires\n(i) Ha rdware feature (ii) S oftware feature\n(iii) Device compatibility (iv) All of these\ne) In Manifest file ___________ tag is compulsory\n(i) <manifest> (ii) <application>\n(iii) Both (i) and (ii) (iv) None of these\n77 3.10 Let us sum up\nThe AndroidManifest.xml file contains important information regarding package, and\ncomponents of the application such as activities, services, broadcast receivers,\ncontent providers etc.It performs some other tasks such as to protect the application\nto access any protected parts by providing the permissions.It also declares the\nandroid api that the application is going to use.It lists the instrumentation classes.\nThe instrumentation classesprovide profiling and other information. This information\nis removed just before the application is published etc.This is the required xml file for\nall the android application and located inside the root directory.\nEach Android application has a specially formatted XML file\ncalledAndroidManifest.xml.This file describes the application\u2019s identity in great detail.\nSomeinformation you must define within the Android manifest file includes the\napplication\u2019sname and version information, what application components it contains,\nwhich deviceconfigurations it requires, and what permissions it needs to run.The\nAndroid manifest fileis used by the Android operating system to install, upgrade, and\nrun the application package.\n3.11 Check your Progress: Possible Answers\n1-a) True\n1-b) False\n1-c) <permission>\n1-d) (iv) All of these\n1-e) (iii) Both (i) and (ii)\n3.12 Further Reading\n\u2022 https:\/\/developer.android.com\/guide\/topics\/manifest\/manifest-intro\n\u2022 http:\/\/www.androiddocs.com\/guide\/topics\/manifest\/manifest-intro.html\n\u2022 https:\/\/www.javatpoint.com\/AndroidManifest-xml-file-in-android\n78 3.13 Assignment\n\u2022 Write detailed note on AndroidManifest.xml file\n\u2022 How can we specify permission in Android Manifest file?\n\u2022 Explain with example how can we specify device compatibility in Android\nManifest file.\n3.14 Activities\n\u2022 Create Android Studio Project and study the default AndroidManifest.xml file\ncreated for you and try to modified as per your requirement\n79 Block-3\nAndroid Application Design\nEssentials\n80 1\nUnit-1: Activities\nUnit Structure\n2.1 Learning Objectives\n2.2 Introduction\n2.3 What is activity?\n2.4 Configuring the AndroidManifest.xml file\n2.5 Life Cycle of an Activity\n2.6 Understanding Life Cycle of an Activity\n2.7 Context\n2.8 Activity Transition\n2.9 Let us sum up\n2.10 Check your Progress: Possible Answers\n2.11 Further Reading\n2.12 Assignment\n2.13 Activities\n81 1.0 Learning Objectives\nAfter studying this unit, the students will be able to\n\u2022 Understand the activity and life cycle of an activity\n\u2022 Configure activity in AndroidManifest.xml file\n\u2022 Know activity transition\n1.1 Introduction\nGenerally a program is defined in terms of functionality and data, and an Android\napplication is not an exception. It performs processing, show information on the\nscreen, and takes data from a variety of sources.\nTo Develop Android applications for mobile devices with resource constraint requires\na systematic understanding of the application lifecycle. Important terminology for\napplication building blocks terms are Context, Activity, and Intent. This unit\nintroduces you with the most important components of Android applications and\nprovides you with a more detailed understanding of how Android applications\nfunction and interact with one another.\nThe Activity class is a crucial component of an Android app, and the way activities\nare launched and put together is a fundamental part of the platform's application\nmodel. Unlike programming paradigms in which apps are launched with a main()\nmethod, the Android system initiates code in an Activity instance by invoking specific\ncallback methods that correspond to specific stages of its lifecycle.\nThis document introduces the concept of activities, and then provides some\nlightweight guidance about how to work with them. For additional information about\nbest practices in architecting your app, see Guide to App Architecture.\n1.2 What is activity?\nThe mobile-app experience differs from its desktop counterpart in that a user's\ninteraction with the app doesn't always begin in the same place. Instead, the user\n82 journey often begins non-deterministically. For instance, if you open an email app\nfrom your home screen, you might see a list of emails. By contrast, if you are using a\nsocial media app that then launches your email app, you might go directly to the\nemail app's screen for composing an email.\nThe Activity class is designed to facilitate this paradigm. When one app invokes\nanother, the calling app invokes an activity in the other app, rather than the app as\nan atomic whole. In this way, the activity serves as the entry point for an app's\ninteraction with the user. You implement an activity as a subclass of the Activity\nclass.\nAn activity provides the window in which the app draws its UI. This window typically\nfills the screen, but may be smaller than the screen and float on top of other\nwindows. Generally, one activity implements one screen in an app. For instance, one\nof an app\u2019s activities may implement a Preferences screen, while another activity\nimplements a Select Photo screen.\nMost apps contain multiple screens, which means they comprise multiple activities.\nTypically, one activity in an app is specified as the main activity, which is the first\nscreen to appear when the user launches the app. Each activity can then start\nanother activity in order to perform different actions. For example, the main activity in\na simple e-mail app may provide the screen that shows an e-mail inbox. From there,\nthe main activity might launch other activities that provide screens for tasks like\nwriting e-mails and opening individual e-mails.\nAlthough activities work together to form a cohesive user experience in an app, each\nactivity is only loosely bound to the other activities; there are usually minimal\ndependencies among the activities in an app. In fact, activities often start up\nactivities belonging to other apps. For example, a browser app might launch the\nShare activity of a social-media app.\nTo use activities in your app, you must register information about them in the app\u2019s\nmanifest, and you must manage activity lifecycles appropriately. The rest of this\ndocument introduces these subjects.\n83 1.3 Configuring the AndroidManifest.xml\nFor your app to be able to use activities, you must declare the activities, and certain\nof their attributes, in the manifest.\nDeclare activities: To declare your activity, open your manifest file and add an\n<activity> element as a child of the <application> element. For example:\n<manifest ... >\n<application ... >\n<activity android:name=\".ExampleActivity\" \/>\n...\n<\/application ... >\n...\n<\/manifest >\nThe only required attribute for this element is android:name, which specifies the\nclass name of the activity. You can also add attributes that define activity\ncharacteristics such as label, icon, or UI theme.\nDeclare intent filters:Intent filters are a very powerful feature of the Android\nplatform. They provide the ability to launch an activity based not only on an explicit\nrequest, but also an implicit one. For example, an explicit request might tell the\nsystem to \u201cStart the Send Email activity in the Gmail app\". By contrast, an implicit\nrequest tells the system to \u201cStart a Send Email screen in any activity that can do the\njob.\" When the system UI asks a user which app to use in performing a task, that\u2019s\nan intent filter at work.\nYou can take advantage of this feature by declaring an <intent-filter> attribute in the\n<activity> element. The definition of this element includes an <action> element and,\noptionally, a <category> element and\/or a <data> element. These elements combine\nto specify the type of intent to which your activity can respond. For example, the\nfollowing code snippet shows how to configure an activity that sends text data, and\nreceives requests from other activities to do so:\n84 <activity android:name=\".ExampleActivity\" android:icon=\"@drawable\/app_icon\">\n<intent-filter>\n<action android:name=\"android.intent.action.SEND\" \/>\n<category android:name=\"android.intent.category.DEFAULT\" \/>\n<data android:mimeType=\"text\/plain\" \/>\n<\/intent-filter>\n<\/activity>\nIn this example, the <action> element specifies that this activity sends data.\nDeclaring the <category> element as DEFAULT enables the activity to receive\nlaunch requests. The <data> element specifies the type of data that this activity can\nsend. The following code snippet shows how to call the activity described above\n\/\/ Create the text message with a string\nIntent sendIntent = new Intent();\nsendIntent.setAction(Intent.ACTION_SEND);\nsendIntent.setType(\"text\/plain\");\nsendIntent.putExtra(Intent.EXTRA_TEXT, textMessage);\n\/\/ Start the activity\nstartActivity(sendIntent);\nIf you intend for your app to be self-contained and not allow other apps to activate its\nactivities, you don't need any other intent filters. Activities that you don't want to\nmake available to other applications should have no intent filters, and you can start\nthem yourself using explicit intents.\nDeclare permissions: You can use the manifest's <activity> tag to control which\napps can start a particular activity. A parent activity cannot launch a child activity\nunless both activities have the same permissions in their manifest. If you declare\na <uses-permission> element for a particular activity, the calling activity must have a\nmatching<uses-permission> element.\n85 For example, if your app wants to use a hypothetical app named SocialApp to share\na post on social media, SocialApp itself must define the permission that an app\ncalling it must have:\n<manifest>\n<activity android:name=\"....\"\nandroid:permission=\u201dcom.google.socialapp.permission.SHARE_POST\u201d\n\/>\nThen, to be allowed to call SocialApp, your app must match the permission set in\nSocialApp's manifest:\n<manifest>\n<uses-permission android:name=\"com.google.socialapp.permission.SHARE_POST\"\n\/>\n<\/manifest>\nCheck your progress-1\na) When one app invokes another, the calling app invokes an activity in the other\napp, rather than the app as an atomic whole (True\/False)\nb) Most apps contain multiple screens, which means they comprise multiple _____\n(A) Activities (B) Services (C) Contexts (D) Intents\nc) You can use activities in your app, without registering the information about them\nin the app\u2019s manifest,\nd) By default, the activity created for you contains the ________ event\ne) The only required attribute for <activity> element is __________\n1.4 Life Cycle of an Activity\nThe Activity class is an important for application's whole lifecycle. Android\napplications can be multi-process, and the multiple applications to run concurrently if\nmemory and processing power is available. Applications can have background\nprocesses, and applications can be interrupted\/paused when events such as\nmessage or phone calls occur. There can be only one active application visible to the\nuser at a time or in other words only a single Activity is in the foreground at any given\ntime.\n86 Activities in the Android operating system are managed using an activity stack.\nWhen a new activity is started, it is placed on the top of the stack and becomes the\nrunning\/foreground activity the previous activity always remains below it in the stack,\nand will not come to the foreground again until the new activity exits.\nActivity States\nAn activity has essentially four states:\nState Description\nActive or running When an activity is in the foreground of the screen (at the top of\nthe stack).\nPaused If an activity has lost focus but is still visible, it is paused. A\npaused activity maintains all state and member information and\nremains attached to the window manager, but can be killed by the\nsystem in extreme low memory situations.\nStopped If an activity is completely hidden by another activity, it is stopped.\nIt still retains all state and member information, it will often be\nkilled by the system when memory is needed elsewhere.\nDestroyed If an activity is paused or stopped, the system can drop the\nactivity from memory by either asking it to finish, or simply killing\nits process. When it is displayed again to the user, it must be\ncompletely restarted and restored to its previous state.\nTable-11\nActivity Events\nThe Activity base class defines a series of events that governs the life cycle of an\nactivity. The Activity class defines the following events:\nEvent Description\nonCreate() Called when the activity is first created\nonStart() Called when the activity becomes visible to the user\nonResume() Called when the activity starts interacting with the user\nonPause() Called when the current activity is being paused and the previous\nactivity is being resumed\n87 onStop() Called when the activity is no longer visible to the user\nonDestroy() Called before the activity is destroyed by the system\nonRestart() Called when the activity has been stopped and is restarting again\nTable-12\nBy default, the activity created for you contains the onCreate() event. Within this\nevent handler is the code that helps to display the UI elements of your screen.\nFigure-45: important state paths of an Activity\nThe abovefigure shows the important state paths of an Activity. The square\nrectangles represent callback methods you can implement to perform operations\nwhen the Activity moves between states. The colored ovals are major states the\nActivity can be in.\n88 1.5 Understanding Life Cycle of an Activity\nThe best way to understand the various stages experienced by an activity is to\ncreate a new project, implement the various events, and then subject the activity to\nvarious user interactions.\n1. Create a New Android Studio Project as discussed in section 1.4 with project\nname ActivityDemo and Main Activity name as MainActivity\n2. In the MainActivity.java file, add the following statements in bold:\npackage in.edu.baou.activitydemo;\nimport android.util.Log;\npublic class MainActivityextends ActionBarActivity {\n@Override\nprotected void onCreate(Bundle savedInstanceState) {\nsuper.onCreate(savedInstanceState);\nsetContentView(R.layout.activity_main);\nLog.d(\"Event\", \"In the onCreate() event\");\n}\npublic void onStart()\n{\nsuper.onStart();\nLog.d(\"Event\", \"In the onStart() event\");\n}\npublic void onRestart()\n{\nsuper.onRestart();\nLog.d(\"Event\", \"In the onRestart() event\");\n}\npublic void onResume()\n{\nsuper.onResume();\nLog.d(\"Event\", \"In the onResume() event\");\n}\npublic void onPause()\n{\nsuper.onPause();\nLog.d(\"Event\", \"In the onPause() event\");\n}\npublic void onStop()\n{\nsuper.onStop();\nLog.d(\"Event\", \"In the onStop() event\");\n89 }\npublic void onDestroy()\n{\nsuper.onDestroy();\nLog.d(\"Event\", \"In the onDestroy() event\");\n}\n}\n3. Press Shift+F10 or \u2018Run App\u2019 button in taskbar. It will launch following dialog box.\nPress OK.\nFigure-46\n4. When the activity is first loaded, you should see the following in the LogCat\nwindow.\nFigure-47\n5. Now press the back button on the Android Emulator, observe that the following is\nprinted:\nFigure-48\n90 6. Click the Home button and hold it there. Click the ActivityDemo icon and observe\nthe following:\nFigure-49\n7. On Android Emulator from notification area open settings on so that the activity is\npushed to the background. Observe the output in the LogCat window:\nFigure-50\n8. Notice that the onDestroy() event is not called, indicating that the activity is still in\nmemory. Exit the settings by pressing the Back button. The activity is now visible\nagain. Observe the output in the LogCat window:\nFigure-51\nPlease note that the onRestart() event is now fired, followed by the onStart() and\nonResume() events.\n91 This application uses logging feature of Android. To add logging support to\nActivityDemo app, edit the file MainActivity.java to add the following import statement\nfor the Log class:\nimport android.util.Log;\nLogging is a valuable resource for debugging and learning Android. Android logging\nfeatures are in the Log class of the android.util package. Some helpful methods in\nthe android.util.Log class are shown in Table. We have used Log.d() method to print\nmessage in LogCat Window when particular event of activity fired.\nMethod Purpose\nLog.e() Log errors\nLog.w() Log warnings\nLog.i() Log information messages\nLog.d() Log debug messages\nLog.v() Log verbose messages\nTable-13\n1.6 Context\nAs the name suggests, it is the context of current state of the application\/object. It\nlets newly created objects understand what has been going on. Typically you call it\nto get information regarding other part of your program (activity,\npackage\/application). The application Context is the central location for all top-level\napplication functionality. The Context class can be used to manage application-\nspecific configuration details as well as application-wide operations and data. Use\nthe application Context to access settings and resources shared across multiple\nActivity instances.\nRetrieving the Application Context\nYou can get the context by invoking getApplicationContext(), getContext(),\ngetBaseContext()or this (when in the activity class). You can retrieve the Context\nfor the current process using the getApplicationContext() method, like this: Context\ncontext = getApplicationContext();\n92 Uses of the Application Context\nAfter you have retrieved a valid application Context, it can be used to access\napplication-wide features and services. Typical uses of context are:\n1) Creating new views, adapters, listeners object\nTextView tv = new TextView(getContext());\nListAdapter adapter = new SimpleCursorAdapter(getApplicationContext(), ...);\n2) Retrieving Application Resources: You can retrieve application resources\nusing the getResources() method of the application Context. The most\nstraightforward way to retrieve a resource is by using its resource identifier, a\nunique number automatically generated within the R.java class.The following\nexample retrieves a String instance from the application resources by its resource\nID:\nString greeting = getResources().getString(R.string.settings);\n3) Retrieving Shared Application Preferences: You can retrieve shared\napplication preferences using the getSharedPreferences() method of the\napplication Context. The SharedPreferences class can be used to save simple\napplication data, such as configuration settings.\n4) Accessing Other Application Functionality Using Context: The application\nContext provides access to a number of other top-level application features.\nHere are a few more things you can do with the application Context:\n\u2022 Launch Activity instances\n\u2022 Inspect and enforce application permissions\n\u2022 Retrieve assets packaged with the application\n\u2022 Request a system service (for example, location service)\n\u2022 Manage private application files, directories, and databases\n93 1.7 Activity Transition\nIn the course of the lifetime of an Android application, the user might transition\nbetweena numbers of different Activity instances. At times, there might be multiple\nActivity instanceson the activity stack. Developers need to pay attention to the\nlifecycle of eachActivity during these transitions.\nSome Activity instancessuch as the application splash\/startup screenare shownand\nthen permanently discarded when the Main menu screen Activity takes over.Theuser\ncannot return to the splash screen Activity without re-launching the application.\nOther Activity transitions are temporary, such as a child Activity displaying a\ndialogbox, and then returning to the original Activity (which was paused on the\nactivity stackand now resumes). In this case, the parent Activity launches the child\nActivity and expectsa result.\nTransitioning between Activities with Intents: As previously mentioned,Android\napplications can have multiple entry points.There is nomain() function, such as you\nfind in iPhone development. Instead, a specific Activitycan be designated as the\nmain Activity to launch by default within theAndroidManifest.xml file;Other Activities\nmight be designated to launch under specific circumstances. For example,a music\napplication might designate a generic Activity to launch by default fromthe\nApplication menu, but also define specific alternative entry point Activities for\naccessingspecific music playlists by playlist ID or artists by name.\nLaunching a New Activity by Class Name: You can start activities in several\nways.The simplest method is to use the Application Context object to call the\nstartActivity() method, which takes a single parameter, an Intent.\nIntent (android.content.Intent) is an asynchronous message mechanism usedby the\nAndroid operating system to match task requests with the appropriate Activity or\nService (launching it, if necessary) and to dispatch broadcast Intents events to the\nsystem at large.For now, though, we focus on Intents and how they are used with\nActivities.The following line of code calls the startActivity() method with an explicit\n94 Intent.ThisIntent requests the launch of the target Activity named MyDrawActivity by\nits class.This class is implemented elsewhere within the package.\nstartActivity(new Intent(getApplicationContext(),\nMyDrawActivity.class));\nThis line of code might be sufficient for some applications, which simply transition\nfromone Activity to the next. However, you can use the Intent mechanism in a much\nmorerobust manner. For example, you can use the Intent structure to pass data\nbetweenActivities.\nCreating Intents with Action and Data: You\u2019ve seen the simplest case to use\nIntent to launch a class by name. Intents need notspecify the component or class\nthey want to launch explicitly. Instead, you can create anIntent Filter and register it\nwithin the Android Manifest file.The Android operating systemattempts to resolve the\nIntent requirements and launch the appropriate Activitybased on the filter criteria.\nThe guts of the Intent object are composed of two main parts: the action to be\nperformedand the data to be acted upon.You can also specify action\/data pairs using\nIntentAction types and Uri objects. An Uri object represents a string that gives the\nlocation and name of an object.Therefore, an Intent is basically saying \u201cdo this\u201d (the\naction) to \u201cthat\u201d (the Uri describingwhat resource to do the action to).The most\ncommon action types are defined in the Intent class, includingACTION_MAIN\n(describes the main entry point of an Activity) and ACTION_EDIT (used\ninconjunction with a Uri to the data edited).You also find Action types that generate\nintegrationpoints with Activities in other applications, such as the Browser or Phone\nDialer.\nLaunching an Activity Belonging to another Application: Initially, your\napplication might be starting only Activities defined within its own package\nHowever, with the appropriate permissions, applications might also launch external\nActivitieswithin other applications. For example, a Customer Relationship\nManagement(CRM) application might launch the Contacts application to browse the\nContact database,choose a specific contact, and return that Contact\u2019s unique\nidentifier to the CRMapplication for use.\n95 Here is an example of how to create a simple Intent with a predefined\nAction(ACTION_DIAL) to launch the Phone Dialer with a specific phone number to\ndial in theform of a simple Uri object:\nUri number = Uri.parse(tel:5555551212);\nIntent dial = new Intent(Intent.ACTION_DIAL, number);\nstartActivity(dial);\nCheck your progress-2\na) There can be ____________ activities in application are visible to the user at a\ntime (A) One (B) Two (C) Three (D) Many\nb) You can use the ___________to access settings and resources shared across\nmultiple Activity instances.\nc) Which of the following you can do with Context\n(A) Launch Activity instances\n(B) Inspect and enforce application permissions\n(C) Request a system service (for example, location service)\n(D) All of the above\nd) Android logging features are in the Log class of the __________ package.\ne) The Intent object are composed of\n(A) Action (B) Data (C) Both (A) and (B) (D) None of these\nf) You can get the context by invoking\n(A) getApplicationContext()\n(B) getContext()\n(C) getBaseContext()\n(D) Any of these\ng) The simplest method is to use the Application Context object to call the\n_____________method, which takes a single parameter, an Intent\n1.8 Let us sum up\n96 In this unit you have learn all about android activity, important terminology. You have\nunderstand the life cycle of an activity through practical example and you have also\nlean about how to onfigure activity in AndroidManifest.xml file at the end of unit we\nhave discuss activity transition.\n1.9 Check your Progress: Possible Answers\n1-a) True 1-b) Activities 1-c) False\n1-d) onCreate() 1-e) android:name\n2-a) One 2-b) ApplicationContext 2-c) (D)All of the above\n2-d) android.util 2-e) Both (A) and (B) 2-f) (D)Any of these\n2-g) startActivity()\n1.10 Further Reading\n\u2022 http:\/\/developer.android.com\/guide\/appendix\/g-app-intents.html.\n1.11 Assignment\n\u2022 What is activity? Explain activity life cycle\n\u2022 Explain activity transition\n\u2022 Write short note on activity state and activity events\n1.12 Activity\n\u2022 Write android activity using logging feature to demonstrate activity life cycle\n97 2\nUnit-2: Services\nUnit Structure\n2.0 Learning Objectives\n2.1 Introduction\n2.2 Use of services\n2.3 Creating a service\n2.4 Start and Stop Service\n2.5 Service Life Cycle\n2.6 Creating your own Service\n2.7 Let us sum up\n2.8 Check your Progress: Possible Answers\n2.9 Further Reading\n2.10 Assignment\n2.11 Activities\n98 2.0 Learning Objectives\nAfter studying this unit student will be able to\n\u2022 Define service\n\u2022 List the uses of services\n\u2022 Create, start and stop service\n\u2022 Understand service life cycle\n\u2022 Create own service\n2.1 Introduction\nIn Android a service is an application that runs in the background without any\ninteraction with the user. For example, while using an application, you may want to\ndownload some file at the same time. In this case, the code that is downloading file\nhas no need to interact with the user, and hence it can be run as a service. Services\nare also perfect for circumstances in which there is no need to present a user\ninterface (UI) to the user. For example, consider an application that continually logs\nthe geographical coordinates of the device. In this case, you can write a service to\ndo that in the background. You can create your own services and use them to\nperform background tasks asynchronously.\nTo improve application responsiveness and performance, consider implementing a\nservice to handle the task outside the main application lifecycle. Any Services\nexposed by an Android application must be registered in the Android Manifest file.\n2.2 Uses Services\nYou can use services for different purposes. Generally, you use a service when no\ninput is required from the user. Here are some circumstances in which you might\nwant to implement or use an Android service:\n\u2022 A weather, email, or social network app might implement a service to routinely\ncheck for updates.\n99 \u2022 A photo or media app that keeps its data in sync online might implement a\nservice to package and upload new content in the background when the device is\nidle.\n\u2022 A video-editing app might offload heavy processing to a queue on its service in\norder to avoid affecting overall system performance for non-essential tasks.\n\u2022 A news application might implement a service to \u201cpre-load\u201d content by\ndownloading news stories in advance of when the user launches the application,\nto improve performance.\n2.3 Creating a Service\nTo create service you must defined a class that extends the Service base class.\nInside your service class, you have to implement four methods discussed below:\nMethod Description\nonStartCommand() \u2022 The system calls this method when another component,\nsuch as an activity, requests that the service be started, by\ncalling startService().\n\u2022 Once this method executes, the service is started and can\nrun in the background indefinitely.\n\u2022 It is your responsibility to stop the service when its work is\ndone, by calling stopSelf() or stopService().\n\u2022 If you only want to provide binding, you don't need to\nimplement this method.\nonBind() \u2022 The system calls this method when another component\nwants to bind with the service by calling bindService().\n\u2022 In your implementation of this method, you must provide\nan interface that clients use to communicate with the\nservice, by returning an IBinder.\n\u2022 If you don't want to allow binding, then you should return\nnull.\nonCreate() \u2022 The system calls this method when the service is first\ncreated, to perform one-time setup procedures before it\n100 Method Description\ncalls either onStartCommand() or onBind().\n\u2022 If the service is already running, this method is not called.\nonDestroy() \u2022 The system calls this method when the service is no longer\nused and is being destroyed.\n\u2022 This method should be implemented to clean up any\nresources such as threads, registered listeners, receivers,\netc.\n\u2022 This is the last call the service receives.\nTable-14\n2.4 Start and Stop a Service\nYou can use Intents and Activities to launch services using the startService() and\nbindService() methods. A service can essentially take two forms. The difference\nbetween two is as follows:\nstartService() bindService()\nA service is \"started\" when an application A service is \"bound\" when an application\ncomponent starts it by calling component binds to it by calling\nstartService() bindService()\nOnce started, a service can run in the A bound service runs only as long as\nbackground indefinitely, even if the another application component is bound\ncomponent that started it is destroyed to it. Multiple components can bind to the\nservice.\nUsually, a started service performs a A bound service offers a client-server\nsingle operation and does not return a interface that allows components to\nresult to the caller. For example, it might interact with the service, send requests,\ndownload or upload a file over the get results, and even do so across\nnetwork. When the operation is done, the processes with inter process\nservice should stop itself communication (IPC)\nTable-15\n101 2.5 Service Life Cycle\nLike an activity, a service has lifecycle callback methods that you can implement to\nmonitor changes in the service's state and perform work at the appropriate times as\ndiscussed above. Below Figure illustrates the typical callback methods for a service\nfor that are created by startService() and from those created by bindService.\nFigure-52\n2.6 Creating your own service\nWe will create service to logs counter which starts from 1 and incremented by one at\ninterval of one second. To do so perform following steps:\n1. Create a New Android Studio Project with project name ServiceDemo and Main\nActivity name as ServiceActivity\n2. Add new service by right click on package and select New \uf0e8 Service \uf0e8Service\nand click.\n102 Figure-53\n3. In dialog box, Enter class name as TimerService as shown in figure and press\nfinish Button.\nFigure-54\n4. Write following code inside TimerService class\npackage in.edu.baou.servicesdemo;\nimport android.util.Log;\nimport android.widget.Toast;\nimport java.util.Timer;\nimport java.util.TimerTask;\n103 public class TimerService extends Service {\nint counter = 0;\nTimer timer = new Timer();\npublic TimerService() {\n}\n@Override\npublic IBinderonBind(Intent intent) {\nreturn null;\n}\n@Override\npublic int onStartCommand(Intent intent, int flags, int startId) {\nToast.makeText(this, \"Service Started!\", Toast.LENGTH_LONG).show();\ntimer.scheduleAtFixedRate(new TimerTask() {\npublic void run() {\nLog.d(\"MyService\", String.valueOf(++counter));\n}\n}, 0, 1000);\nreturn START_STICKY;\n}\n@Override\npublic void onDestroy() {\nsuper.onDestroy();\nif (timer != null){\ntimer.cancel();\n}\nToast.makeText(this, \"Service Destroyed!\", Toast.LENGTH_LONG).show();\n}\n}\n5. In android_service.xml file add the following statements in bold\n<RelativeLayoutxmlns:android=\"http:\/\/schemas.android.com\/apk\/res\/android\"\nxmlns:tools=\"http:\/\/schemas.android.com\/tools\"\nandroid:layout_width=\"match_parent\"\nandroid:layout_height=\"match_parent\"\nandroid:paddingLeft=\"@dimen\/activity_horizontal_margin\"\nandroid:paddingRight=\"@dimen\/activity_horizontal_margin\"\nandroid:paddingTop=\"@dimen\/activity_vertical_margin\"\nandroid:paddingBottom=\"@dimen\/activity_vertical_margin\"\ntools:context=\".ServiceActivity\">\n<TextViewandroid:text=\"Service Demonstration\"\nandroid:layout_width=\"match_parent\"\nandroid:layout_height=\"wrap_content\"\nandroid:id=\"@+id\/textView\" \/>\n<Button\nandroid:layout_width=\"match_parent\"\n104 android:layout_height=\"wrap_content\"\nandroid:text=\"Start Timer Service\"\nandroid:id=\"@+id\/btnStartTimer\"\nandroid:layout_alignParentLeft=\"true\"\nandroid:layout_alignParentStart=\"true\"\nandroid:layout_below=\"@+id\/textView\" \/>\n<Button\nandroid:layout_width=\"match_parent\"\nandroid:layout_height=\"wrap_content\"\nandroid:text=\"Stop Timer Service\"\nandroid:id=\"@+id\/btnStopTimer\"\nandroid:layout_below=\"@+id\/btnStartTimer\"\nandroid:layout_alignParentLeft=\"true\"\nandroid:layout_alignParentStart=\"true\" \/>\n<\/RelativeLayout>\n6. Add the following statements in bold to the ServiceActivity.java file:\npackage in.edu.baou.servicesdemo;\nimport android.content.Intent;\nimport android.view.View;\nimport android.widget.Button;\npublic class ServiceActivity extends ActionBarActivity {\nButton startTimer,stopTimer;\n@Override\nprotected void onCreate(Bundle savedInstanceState) {\nsuper.onCreate(savedInstanceState);\nsetContentView(R.layout.activity_service);\nstartTimer = (Button)findViewById(R.id.btnStartTimer);\nstopTimer = (Button)findViewById(R.id.btnStopTimer);\nstartTimer.setOnClickListener(new View.OnClickListener() {\n@Override\npublic void onClick(View v) {\nstartService(new Intent(getBaseContext(), TimerService.class));\n}\n});\nstopTimer.setOnClickListener(new View.OnClickListener() {\n@Override\npublic void onClick(View v) {\nstopService(new Intent(getBaseContext(), TimerService.class));\n}\n105 });\n}\n7. Press Shift+F10 or \u2018Run App\u2019 button in taskbar. It will launch following dialog box.\nPress OK.\nFigure-55\n8. It will open activity in emulator as shown below. Clicking the START TIMER\nSERVICE button will start the service as shown below. To stop the service, click\nthe STOP TIMER SERVICE.\nFigure-56\n106 9. Once service is started, you can see counter value incremented by in LogCat\nwindow\nFigure-57\nExplanation\n\uf0f0 Inside project layout file we created two buttons to start and stop service with ID\nbtnStartTimer and btnStopTimer..\n\uf0f0 Inside ServiceActivity we define two button objects that represents button in\nlayout file.\n\uf0f0 The findViewByID() method is used to take reference of button.\n\uf0f0 Button clicked event is handled by onClick() method of OnClickListener\nassociated to button using setOnClickListener().\n\uf0f0 Inside TimerService class we define counter variable which initialized to zero at\nthe start of service and increment by one every one second using Timer class\nscheduledAtFixedRate() Method.\n\uf0f0 The value of counter is logs inside LogCat window using Log.d() Method with tag\n\u201cMyService\u201d.\n\uf0f0 Toast is temporary message displayed on screen such as \u201cService Started\u201d in\nstep-8 and is displayed using makeText method of Toast class.\nCheck you progress-1\na) Services are perfect for circumstances in which there are no need to present a\nuser interface (UI) to the user. (True\/False)\nb) You can use Intents and Activities to launch services using the _____ methods.\n(A) startService() (B) bindService()\n(C) Either (A) or (B) (D) None of these\nc) Once _________ method executes, the service is started and can run in the\nbackground indefinitely.\nd) A service is \"bound\" when an application component binds to it by calling ______\n107 e) Generally, you use a service when to interact with the user.\nf) Any Services exposed by an Android application must be registered in the\nAndroid Manifest file.\n2.7 Let us sum up\nIn this unit we have learn about service, uses of services, how to create, start and\nstop services. We have also discussed service life cycle and demonstrated how to\ncreate your own service.\n2.8 Check your Progress: Possible Answers\n1-a) True\n1-b) (C) Either (A) or (B)\n1-c) onStartCommand()\n1-d) bindService()\n1-e) False\n1-f) True\n2.9 Further Reading\n1. https:\/\/developer.android.com\/reference\/android\/app\/Service\n2.10 Assignment\n\u2022 Differentiate between startService() and bindService()\n\u2022 Explain service life cycle\n\u2022 List uses of services\n2.11 Activity\n\u2022 Creating your own service\n108 3\nUnit-3: Intent\nUnit Structure\n4.0 Learning Objectives\n4.1 Introduction\n4.2 Intent Structure\n4.3 Other Operations on Intent\n4.4 Types of Intent\n4.5 Intent Resolution\n4.6 Example of Intent\n4.7 Explanation of Example\n4.8 Standard Activity Actions\n4.9 Standard Broadcast Actions\n4.10 Let us sum up\n4.11 Check your Progress: Possible Answers\n4.12 Further Reading\n4.13 Assignment\n4.14 Activity\n109 3.0 Learning Objective\nAfter studying this unit, the student should be able to\n\u2022 Understand the structure of an Intent\n\u2022 Perform operations on Intent\n\u2022 List the types of Intent\n\u2022 Know what is Intent Resolution?\n\u2022 Give example of Intent\n\u2022 List standard Activity Actions\n\u2022 List standard Broadcast Actions\n3.1 Introduction\nIntent is an abstract description of an operation to be performed. It can be used to\nlaunch an Activity, broadcastIntent to send it to any interested BroadcastReceiver\ncomponents, and to communicate with a background Service.\nIntent provides a facility for performing late runtime binding between the codes in\ndifferent applications. Its most significant use is in the launching of activities, where it\ncan be thought of as the glue between activities. It is basically a passive data\nstructure holding an abstract description of an action to be performed.\n3.2 Intent Structure\nThe intent has primary attributes which are mandatory and secondary attributes\nwhich are optional.\nPrimary Attributes\nPrimary Attributes: The primary pieces of information in intent are:\n1. Action: The general action to be performed, such as ACTION_VIEW,\nACTION_EDIT, ACTION_MAIN, etc.\n2. Data: The data to operate on, such as a person record in the contacts database,\nexpressed as an Uri.\n110 Some examples of action\/data pairs are:\n\u2022 ACTION_VIEW content:\/\/contacts\/people\/9 :Display information about the person\nwhose identifier is \"9\".\n\u2022 ACTION_DIAL content:\/\/contacts\/people\/9 :Display the phone dialer with the person\nfilled in.\n\u2022 ACTION_VIEW tel:123 : Display the phone dialer with the given number filled in. Note\nhow the VIEW action does what is considered the most reasonable thing for a\nparticular URI.\n\u2022 ACTION_DIAL tel:123 : Display the phone dialer with the given number filled in.\n\u2022 ACTION_EDIT content:\/\/contacts\/people\/9 : Edit information about the person whose\nidentifier is \"9\".\n\u2022 ACTION_VIEW content:\/\/contacts\/people\/ : Display a list of people, which the user\ncan browse through. This example is a typical top-level entry into the Contacts\napplication, showing you the list of people. Selecting a particular person to view\nwould result in a new intent {ACTION_VIEWcontent:\/\/contacts\/people\/N } being used\nto start an activity to display that person.\nSecondary Attributes\nIn addition to these primary attributes, there are a number of secondary attributes\nthat you can also include with intent:\n\u2022 Category: Gives additional information about the action to execute. For\nexample, CATEGORY_LAUNCHERmeans it should appear in the Launcher as a\ntop-level application, while CATEGORY_ALTERNATIVE means it should be\nincluded in a list of alternative actions the user can perform on a piece of data.\n\u2022 Type: Specifies an explicit type (a MIME type) of the intent data. Normally the type is\ninferred from the data itself. By setting this attribute, you disable that evaluation and\nforce an explicit type.\n\u2022 Component: Specifies an explicit name of a component class to use for the intent.\nNormally this is determined by looking at the other information in the intent (the\naction, data\/type, and categories) and matching that with a component that can\nhandle it. If this attribute is set then none of the evaluation is performed, and this\n111 component is used exactly as is. By specifying this attribute, all of the other Intent\nattributes become optional.\n\u2022 Extras: This is a Bundle of any additional information. This can be used to provide\nextended information to the component. For example, if we have a action to send an\ne-mail message, we could also include extra pieces of data here to supply a subject,\nbody, etc.\n3.3 Other Operations on Intent\nHere are some examples of other operations you can specify as intents using these\nadditional parameters:\n\u2022 ACTION_MAIN with category CATEGORY_HOME: Launch the home screen.\n\u2022 ACTION_GET_CONTENT with MIME type vnd.android.cursor.item\/phone:\nDisplay the list of people's phone numbers, allowing the user to browse through\nthem and pick one and return it to the parent activity.\n\u2022 ACTION_GET_CONTENT with MIME type *\/* and category\nCATEGORY_OPENABLE: Display all pickers for data that can be opened and\nallowing the user to pick one of them and then some data inside of it and\nreturning the resulting URI to the caller. This can be used, for example, in an e-\nmail application to allow the user to pick some data to include as an attachment.\nThere are a variety of standard Intent action and category constants defined in the\nIntent class, but applications can also define their own, for example, the standard\nACTION_VIEW is called \"android.intent.action.VIEW\".\n3.4 Types of Intent\nThere are two primary forms of intents you will use.\n\u2022 Explicit Intents have specified a component which provides the exact class to be\nrun. Often these will not include any other information, simply being a way for an\napplication to launch various internal activities it has as the user interacts with the\napplication.\n112 \u2022 Implicit Intents have not specified a component; instead, they must include enough\ninformation for the system to determine which of the available components is best to\nrun for that intent.\n3.5 Intent Resolution\nWhen using implicit intents, given such an arbitrary intent we need to know what to\ndo with it. This is handled by the process of Intent resolution, which maps an Intent\nto an Activity, BroadcastReceiver, or Service that can handle it.\nThe intent resolution mechanism basically revolves around matching Intent against\nall of the <intent-filter> descriptions in the installed application packages.\nThere are three pieces of information in the Intent that are used for resolution: the\naction, type, and category. Using this information, a query is done on the\nPackageManager for a component that can handle the intent. The appropriate\ncomponent is determined based on the intent information supplied in the\nAndroidManifest.xml file as follows:\n\u2022 The action, if given, must be listed by the component as one it handles.\n\u2022 The type is retrieved from the Intent's data, if not already supplied in the Intent.\nLike the action, if a type is included in the intent (either explicitly or implicitly in its\ndata), then this must be listed by the component as one it handles.\n\u2022 For data that is not a content: URI and where no explicit type is included in the\nIntent, instead the scheme of the intent data (such as http: or mailto:) is\nconsidered. Again like the action, if we are matching a scheme it must be listed\nby the component as one it can handle.\n\u2022 The categories, if supplied, must all be listed by the activity as categories it\nhandles. That is, if you include the categories CATEGORY_LAUNCHER and\nCATEGORY_ALTERNATIVE, then you will only resolve to components with an\nintent that lists both of those categories. Activities will very often need to support\nthe CATEGORY_DEFAULT so that they can be found by startActivity.\n113 3.6 Example of Intent\nFor example, consider the Note Pad sample application that allows a user to browse\nthrough a list of notes data and view details about individual items.\n<manifest xmlns:android=\"http:\/\/schemas.android.com\/apk\/res\/android\"\npackage=\"in.edu.baou.notepad\">\n<application android:icon=\"@drawable\/app_notes\"android:label=\"@string\/app_name\">\n<provider class=\".NotePadProvider\"android:authorities=\"in.edu.baou.provider.NotePad\" \/>\n<activity class=\".NotesList\" android:label=\"@string\/title_notes_list\">\n<intent-filter>\n<action android:name=\"android.intent.action.MAIN\" \/>\n<category android:name=\"android.intent.category.LAUNCHER\" \/>\n<\/intent-filter>\n<intent-filter>\n<action android:name=\"android.intent.action.VIEW\" \/>\n<action android:name=\"android.intent.action.EDIT\" \/>\n<action android:name=\"android.intent.action.PICK\" \/>\n<category android:name=\"android.intent.category.DEFAULT\" \/>\n<data android:mimeType=\"vnd.android.cursor.dir\/vnd.google.note\" \/>\n<\/intent-filter>\n<intent-filter>\n<action android:name=\"android.intent.action.GET_CONTENT\" \/>\n<category android:name=\"android.intent.category.DEFAULT\" \/>\n<data android:mimeType=\"vnd.android.cursor.item\/vnd.google.note\" \/>\n<\/intent-filter>\n<\/activity>\n<activity class=\".NoteEditor\" android:label=\"@string\/title_note\">\n<intent-filter android:label=\"@string\/resolve_edit\">\n<action android:name=\"android.intent.action.VIEW\" \/>\n<action android:name=\"android.intent.action.EDIT\" \/>\n<category android:name=\"android.intent.category.DEFAULT\" \/>\n<data android:mimeType=\"vnd.android.cursor.item\/vnd.google.note\" \/>\n<\/intent-filter>\n<intent-filter>\n<action android:name=\"android.intent.action.INSERT\" \/>\n<category android:name=\"android.intent.category.DEFAULT\" \/>\n<data android:mimeType=\"vnd.android.cursor.dir\/vnd.google.note\" \/>\n114 <\/intent-filter>\n<\/activity>\n<activity class=\".TitleEditor\" android:label=\"@string\/title_edit_title\"\nandroid:theme=\"@android:style\/Theme.Dialog\">\n<intent-filter android:label=\"@string\/resolve_title\">\n<action android:name=\"com.android.notepad.action.EDIT_TITLE\" \/>\n<category android:name=\"android.intent.category.DEFAULT\" \/>\n<category android:name=\"android.intent.category.ALTERNATIVE\" \/>\n<category android:name=\"android.intent.category.SELECTED_ALTERNATIVE\" \/>\n<data android:mimeType=\"vnd.android.cursor.item\/vnd.google.note\" \/>\n<\/intent-filter>\n<\/activity>\n<\/application>\n<\/manifest>\n3.7 Explanation of Example\nIn above example, the first activity, in.edu.baou.provider.notepad,NotesList, serves\nas our main entry into the app. It can do three things as described by its three intent\ntemplates:\n<intent-filter>\n<action android:name=\"android.intent.action.MAIN\" \/>\n<category android:name=\"android.intent.category.LAUNCHER\" \/>\n<\/intent-filter>\nThis provides a top-level entry into the NotePad application: the standard MAIN\naction is a main entry point (not requiring any other information in the Intent), and the\nLAUNCHER category says that this entry point should be listed in the application\nlauncher.\n<intent-filter>\n<action android:name=\"android.intent.action.VIEW\" \/>\n<action android:name=\"android.intent.action.EDIT\" \/>\n<action android:name=\"android.intent.action.PICK\" \/>\n<category android:name=\"android.intent.category.DEFAULT\" \/>\n<data android:mimeType=\"vnd.android.cursor.dir\/vnd.google.note\" \/>\n<\/intent-filter>\n115 This declares the things that the activity can do on a directory of notes. The type\nbeing supported is given with the <type> tag,\nwhere vnd.android.cursor.dir\/vnd.google.note is a URI from which a Cursor of zero\nor more items (vnd.android.cursor.dir) can be retrieved which holds our note pad\ndata (vnd.google.note). The activity allows the user to view or edit the directory of\ndata (via the VIEW and EDIT actions), or to pick a particular note and return it to the\ncaller (via the PICK action). Note also the DEFAULT category supplied here: this\nis required for the startActivity method to resolve your activity when its component\nname is not explicitly specified.\n<intent-filter>\n<action android:name=\"android.intent.action.GET_CONTENT\" \/>\n<category android:name=\"android.intent.category.DEFAULT\" \/>\n<data android:mimeType=\"vnd.android.cursor.item\/vnd.google.note\" \/>\n<\/intent-filter>\nThis filter describes the ability to return to the caller a note selected by the user\nwithout needing to know where it came from. The data\ntype vnd.android.cursor.item\/vnd.google.note is a URI from which a Cursor of exactly\none (vnd.android.cursor.item) item can be retrieved which contains our note pad\ndata (vnd.google.note). The GET_CONTENT action is similar to the PICK action,\nwhere the activity will return to its caller a piece of data selected by the user. Here,\nhowever, the caller specifies the type of data they desire instead of the type of data\nthe user will be picking from.\nGiven these capabilities, the following intents will resolve to the NotesList activity:\n\u2022 { action=android.app.action.MAIN } matches all of the activities that can be used\nas top-level entry points into an application.\n\u2022 { action=android.app.action.MAIN, category=android.app.category.LAUNCHER\n} is the actual intent used by the Launcher to populate its top-level list.\n\u2022 { action=android.intent.action.VIEW\ndata=content:\/\/com.google.provider.NotePad\/notes } displays a list of all the\nnotes under \"content:\/\/com.google.provider.NotePad\/notes\", which the user can\nbrowse through and see the details on.\n116 \u2022 { action=android.app.action.PICK\ndata=content:\/\/com.google.provider.NotePad\/notes } provides a list of the notes\nunder \"content:\/\/com.google.provider.NotePad\/notes\", from which the user can pick\na note whose data URL is returned back to the caller.\n\u2022 { action=android.app.action.GET_CONTENT\ntype=vnd.android.cursor.item\/vnd.google.note } is similar to the pick action, but\nallows the caller to specify the kind of data they want back so that the system can\nfind the appropriate activity to pick something of that data type.\n\u2022 The second activity, in.edu.baou.notepad.NoteEditor, shows the user a single note\nentry and allows them to edit it. It can do two things as described by its two intent\ntemplates:\n<intent-filter android:label=\"@string\/resolve_edit\">\n<action android:name=\"android.intent.action.VIEW\" \/>\n<action android:name=\"android.intent.action.EDIT\" \/>\n<category android:name=\"android.intent.category.DEFAULT\" \/>\n<data android:mimeType=\"vnd.android.cursor.item\/vnd.google.note\" \/>\n<\/intent-filter>\nThe first, primary, purpose of this activity is to let the user interact with a single note,\nas described by the MIME type vnd.android.cursor.item\/vnd.google.note. The activity\ncan either VIEW a note or allow the user to EDIT it. Again we support the DEFAULT\ncategory to allow the activity to be launched without explicitly specifying its\ncomponent.\n<intent-filter>\n<action android:name=\"android.intent.action.INSERT\" \/>\n<category android:name=\"android.intent.category.DEFAULT\" \/>\n<data android:mimeType=\"vnd.android.cursor.dir\/vnd.google.note\" \/>\n<\/intent-filter>\nThe secondary use of this activity is to insert a new note entry into an existing\ndirectory of notes. This is used when the user creates a new note: the INSERT\naction is executed on the directory of notes, causing this activity to run and have the\nuser create the new note data which it then adds to the content provider.\nGiven these capabilities, the following intents will resolve to the NoteEditor activity:\n117 \u2022 {action=android.intent.action.VIEW\ndata=content:\/\/in.edu.baou.provider.NotePad\/notes\/{ID}} shows the user the\ncontent of note {ID}.\n\u2022 { action=android.app.action.EDIT\ndata=content:\/\/in.edu.baou.provider.NotePad\/notes\/{ID} } allows the user to edit\nthe content of note {ID}.\n\u2022 { action=android.app.action.INSERT\ndata=content:\/\/in.edu.baou.provider.NotePad\/notes } creates a new, empty note\nin the notes list at \"content:\/\/com.google.provider.NotePad\/notes\" and allows the\nuser to edit it. If they keep their changes, the URI of the newly created note is\nreturned to the caller.\n\u2022 The last activity, com.android.notepad.TitleEditor, allows the user to edit the title of a\nnote. This could be implemented as a class that the application directly invokes (by\nexplicitly setting its component in the Intent), but here we show a way you can\npublish alternative operations on existing data:\n<intent-filter android:label=\"@string\/resolve_title\">\n<action android:name=\"com.android.notepad.action.EDIT_TITLE\" \/>\n<category android:name=\"android.intent.category.DEFAULT\" \/>\n<category android:name=\"android.intent.category.ALTERNATIVE\" \/>\n<category android:name=\"android.intent.category.SELECTED_ALTERNATIVE\" \/>\n<data android:mimeType=\"vnd.android.cursor.item\/vnd.google.note\" \/>\n<\/intent-filter>\n\u2022 In the single intent template here, we have created our own private action\ncalledcom.android.notepad.action.EDIT_TITLE which means to edit the title of a\nnote. It must be invoked on a specific note like the previous view and edit actions,\nbut here displays and edits the title contained in the note data.\n\u2022 In addition to supporting the default category as usual, our title editor also supports\ntwo other standard categories: ALTERNATIVE and SELECTED_ALTERNATIVE.\nImplementing these categories allows others to find the special action it provides\nwithout directly knowing about it, through the\nPackageManager.queryIntentActivityOptions(ComponentName, Intent[], Intent,\nint) method, or more often to build dynamic menu items\nwith Menu.addIntentOptions(int, int, int, ComponentName, Intent[], Intent, int,\n118 MenuItem[]). Note that in the intent template here was also supply an explicit name\nfor the template (via android:label=\"@string\/resolve_title\") to better control what the\nuser sees when presented with this activity as an alternative action to the data they\nare viewing.\n\u2022 Given these capabilities, the following intent will resolve to the TitleEditor activity:\n\u2022 {action=com.android.notepad.action.EDIT_TITLE\ndata=content:\/\/com.google.provider.NotePad\/notes\/{ID}} displays and allows the\nuser to edit the title associated with note {ID}.\n3.8 Standard Activity Actions\nThese are the current standard actions that Intent defines for launching activities\n(usually through Context#startActivity. The most important, and by far most\nfrequently used, are ACTION_MAIN and ACTION_EDIT.\nACTION_MAIN ACTION_DIAL ACTION_RUN\nACTION_VIEW ACTION_CALL ACTION_SYNC\nACTION_ATTACH_DATA ACTION_SEND ACTION_PICK_ACTIVITY\nACTION_EDIT ACTION_SENDTO ACTION_SEARCH\nACTION_PICK ACTION_ANSWER ACTION_WEB_SEARCH\nACTION_CHOOSER ACTION_INSERT ACTION_FACTORY_TEST\nACTION_GET_CONTENT ACTION_DELETE\n3.9 Standard Broadcast Actions\nThese are the current standard actions that Intent defines for receiving broadcasts\n(usually through registerReceiver or a <receiver> tag in a manifest).\nACTION_TIME_TICK ACTION_PACKAGE_DATA_CLEARED\nACTION_TIME_CHANGED ACTION_PACKAGES_SUSPENDED\nACTION_TIMEZONE_CHANGED ACTION_PACKAGES_UNSUSPENDED\nACTION_BOOT_COMPLETED ACTION_UID_REMOVED\nACTION_PACKAGE_ADDED ACTION_BATTERY_CHANGED\nACTION_PACKAGE_CHANGED ACTION_POWER_CONNECTED\nACTION_PACKAGE_REMOVED ACTION_POWER_DISCONNECTED\nACTION_PACKAGE_RESTARTED ACTION_SHUTDOWN\n119 Check your progress-1\n\u2022 Intent provides a facility for performing late runtime binding between the codes\nin similar applications. (True\/False)\n\u2022 Which of the following is a type of intent\n(A) Primary (B) Secondary (C) Both (A) and (B) (D) Neither (A) nor (B)\n\u2022 Which of the following pieces of information is used for intent resolution?\n(A) Action (B) Type (C) Category (D) All of these\n\u2022 The intent has secondary attributes which are optional\n\u2022 Which of the following is standard activity action?\n(A) ACTION_MAIN (B) ACTION_VIEW (C) ACTION_EDIT (D) All of these\n\u2022 Intent is an abstract description of an operation to be performed\n3.10 Let us sum up\nIn this unit we have learned about the structure of Intent, what type of operation can\nbe performed on Intent, types of Intent, Intent Resolution, take example of Intent,\ndiscussed standard Activity actions and standard broadcast actions.\n3.11 Check your Progress: Possible Answers\n1-a) False1-b) (C) Both (A) and (B)1-c) (D) All of these\n1-d) True1-e) All of these 1-f) True\n3.12 Further Reading\n\u2022 https:\/\/developer.android.com\/reference\/android\/content\/Intent\n3.13 Assignment\n\u2022 Write detailed note on Intent\n\u2022 Explain types of intent\n\u2022 What is Intent Resolution?\n\u2022 List standard activity actions and standard broadcast actions\n120 4\nUnit-4: Permissions\nUnit Structure\n4.0 Learning Objectives\n4.1 Introduction\n4.2 Permission approval\n4.3 Request prompts for dangerous permissions\n4.4 Permission for optional hardware features\n4.5 Custom App Permission\n4.6 Permission Protection Level\n4.7 How to view App\u2019s permission?\n4.8 Let us sum up\n4.9 Check your Progress: Possible Answers\n4.10 Further Reading\n4.11 Assignment\n4.12 Activity\n121 4.0 Learning Objectives\nAfter studying this unit, students will be able to:\n\u2022 Define permission\n\u2022 List different types of permission and their uses\n\u2022 Define custom app permission\n\u2022 Understand various permission protection levels\n4.1 Introduction\nThe purpose of a permission is to protect the privacy of an Android user. Android\napps must request permission to access sensitive user data (such as contacts and\nSMS), as well as certain system features (such as camera and internet). Depending\non the feature, the system might grant the permission automatically or might prompt\nthe user to approve the request.\nA central design point of the Android security architecture is that no app, by default,\nhas permission to perform any operations that would adversely impact other apps,\nthe operating system, or the user. This includes reading or writing the user's private\ndata (such as contacts or emails), reading or writing another app's files, performing\nnetwork access, keeping the device awake, and so on.\nThis unit provides an overview of how Android permissions work, including: how\npermissions are presented to the user, the difference between install-time and\nruntime permission requests, how permissions are enforced, and the types of\npermissions and their groups.\n4.2 Permission Approval\nAn app must publicize the permissions it requires by including <uses-permission>\ntags in the app manifest. For example, an app that needs to send SMS messages\nwould have this line in the manifest:\n<manifest xmlns:android=\"http:\/\/schemas.android.com\/apk\/res\/android\"\npackage=\"com.example.snazzyapp\">\n<uses-permission android:name=\"android.permission.SEND_SMS\"\/>\n122 <application ...>\n...\n<\/application>\n<\/manifest>\nIf your app lists normal permissions in its manifest (that is, permissions that don't\npose much risk to the user's privacy or the device's operation), the system\nautomatically grants those permissions to your app.\nIf your app lists dangerous permissions in its manifest (that is, permissions that could\npotentially affect the user's privacy or the device's normal operation), such as the\nSEND_SMS permission above, the user must explicitly agree to grant those\npermissions.\n4.3 Request prompts for dangerous permissions\nOnly dangerous permissions require user agreement. The way Android asks the\nuser to grant dangerous permissions depends on the version of Android running on\nthe user's device, and the system version targeted by your app.\nRuntime requests (Android 6.0 and higher)\nIf the device is running Android 6.0 (API level 23) or higher, and the app's\ntargetSdkVersion is 23 or higher, the user isn't notified of any app permissions at\ninstall time. Your app must ask the user to grant the dangerous permissions at\nruntime. When your app requests permission, the user sees a system dialog as\nshown in figure 1 telling the user which permission group your app is trying to\naccess. The dialog includes a Deny and Allow button.\nIf the user denies the permission request, the next time your app requests the\npermission, the dialog contains a checkbox that, when checked, indicates the user\ndoesn't want to be prompted for the permission again as shown in figure 2.\n123 Figure-58\nIf the user checks the Never ask again box and taps Deny, the system no longer\nprompts the user if you later attempt to requests the same permission.\nEven if the user grants your app the permission it requested you cannot always rely\non having it. Users also have the option to enable and disable permissions one-by-\none in system settings. You should always check for and request permissions at\nruntime to guard against runtime errors (SecurityException).\nInstall-time requests (Android 5.1.1 and below)\nIf the device is running Android 5.1.1 (API level 22) or lower, or the app's\ntargetSdkVersion is 22 or lower while running on any version of Android, the system\nautomatically asks the user to grant all dangerous permissions for your app at install-\ntime as shown in figure 2.\n124 Figure-59\nIf the user clicks Accept, all permissions the app requests are granted. If the user\ndenies the permissions request, the system cancels the installation of the app.\nIf an app update includes the need for additional permissions the user is prompted to\naccept those new permissions before updating the app.\n4.4 Permissions for optional hardware features\nAccess to some hardware features such as Bluetooth or the camera requires app\npermission. However, not all Android devices actually have these hardware features.\nSo if your app requests the CAMERA permission, it's important that you also include\nthe <uses-feature> tag in your manifest to declare whether or not this feature is\nactually required. For example:\n<uses-feature android:name=\"android.hardware.camera\" android:required=\"false\" \/>\nIf you declare android:required=\"false\" for the feature, then Google Play allows your\napp to be installed on devices that don't have the feature. You then must check if the\ncurrent device has the feature at runtime by calling\n125 PackageManager.hasSystemFeature(), and gracefully disable that feature if it's not\navailable.\nIf you don't provide the <uses-feature> tag, then when Google Play sees that your\napp requests the corresponding permission, it assumes your app requires this\nfeature. So it filters your app from devices without the feature, as if you declared\nandroid:required=\"true\" in the <uses-feature> tag.\n4.5 Custom App Permission\nPermissions aren't only for requesting system functionality. Services provided by\napps can enforce custom permissions to restrict who can use them.\nActivity permission enforcement\nPermissions applied using the android:permission attribute to the <activity> tag in the\nmanifest restrict who can start that Activity. The permission is checked during\nContext.startActivity() and Activity.startActivityForResult(). If the caller doesn't have\nthe required permission then SecurityException is thrown from the call.\nService permission enforcement\nPermissions applied using the android:permission attribute to the <service> tag in\nthe manifest restrict who can start or bind to the associated Service. The permission\nis checked during Context.startService(), Context.stopService() and\nContext.bindService(). If the caller doesn't have the required permission then\nSecurityException is thrown from the call.\nBroadcast permission enforcement\nPermissions applied using the android:permission attribute to the <receiver> tag\nrestrict who can send broadcasts to the associated BroadcastReceiver. The\npermission is checked after Context.sendBroadcast() returns, as the system tries to\ndeliver the submitted broadcast to the given receiver. As a result, a permission\nfailure doesn't result in an exception being thrown back to the caller; it just doesn't\ndeliver the Intent.\n126 In the same way, a permission can be supplied to Context.registerReceiver() to\ncontrol who can broadcast to a programmatically registered receiver. Going the other\nway, a permission can be supplied when calling Context.sendBroadcast() to restrict\nwhich broadcast receivers are allowed to receive the broadcast.\nNote that both a receiver and a broadcaster can require permission. When this\nhappens, both permission checks must pass for the intent to be delivered to the\nassociated target.\nContent Provider permission enforcement\nPermissions applied using the android:permission attribute to the <provider> tag\nrestrict who can access the data in a ContentProvider. Unlike the other components,\nthere are two separate permission attributes you can set: android:readPermission\nrestricts who can read from the provider, and android:writePermission restricts who\ncan write to it. Note that if a provider is protected with both a read and write\npermission, holding only the write permission doesn't mean you can read from a\nprovider.\nThe permissions are checked when you first retrieve a provider and as you perform\noperations on the provider.\nUsing ContentResolver.query() requires holding the read permission;\nusing ContentResolver.insert(), ContentResolver.update(), ContentResolver.delete()\nrequires the write permission. In all of these cases, not holding the required\npermission results in a SecurityException being thrown from the call.\nURI permissions\nThe standard permission system described so far is often not sufficient when used\nwith content providers. A content provider may want to protect itself with read and\nwrite permissions, while its direct clients also need to hand specific URIs to other\napps for them to operate on.\n127 A typical example is attachments in a email app. Access to the emails should be\nprotected by permissions, since this is sensitive user data. However, if a URI to an\nimage attachment is given to an image viewer, that image viewer no longer has\npermission to open the attachment since it has no reason to hold a permission to\naccess all email.\nThe solution to this problem is per-URI permissions: when starting an activity or\nreturning a result to an activity, the caller can set\nIntent.FLAG_GRANT_READ_URI_PERMISSION and\/or\nIntent.FLAG_GRANT_WRITE_URI_PERMISSION. This grants the receiving activity\npermission access the specific data URI in the intent, regardless of whether it has\nany permission to access data in the content provider corresponding to the intent.\nThis mechanism allows a common capability-style model where user interaction\n(such as opening an attachment or selecting a contact from a list) drives ad-hoc\ngranting of fine-grained permission. This can be a key facility for reducing the\npermissions needed by apps to only those directly related to their behavior.\nTo build the most secure implementation that makes other apps accountable for their\nactions within yor app, you should use fine-grained permissions in this manner and\ndeclare your app's support for it with the android:grantUriPermissions attribute or\n<grant-uri-permissions> tag.\nOther permission enforcement\nArbitrarily fine-grained permissions can be enforced at any call into a service. This is\naccomplished with the Context.checkCallingPermission() method. Call with a desired\npermission string and it returns an integer indicating whether that permission has\nbeen granted to the current calling process. Note that this can only be used when\nyou are executing a call coming in from another process, usually through an IDL\ninterface published from a service or in some other way given to another process.\nThere are a number of other useful ways to check permissions. If you have the\nprocess ID (PID) of another process, you can use the Context.checkPermission()\nmethod to check a permission against that PID. If you have the package name of\n128 another app, you can use the PackageManager.checkPermission() method to find\nout whether that particular package has been granted a specific permission.\nCheck your progress-1\na) What is purpose of permission?\nb) Every apphas by default, permission to perform any operations that would\nadversely impact other apps, the operating system, or the user (True\/False)\nc) An app must publicize the permissions it requires by including ______tags in the\napp manifest.\nd) In mobile with Android 6.0 and higher, the request for permission is requested to\nuser at __________\n(A) Runtime (B) Install-time (C) Either (A) or (B) (D) Neither (A) nor (B)\ne) Services provided by apps can enforce custom permissions to restrict who can\nuse them.\n4.6 Permission Protection levels\nPermissions are divided into several protection levels. The protection level affects\nwhether runtime permission requests are required.\nThere are three protection levels that affect third-party apps: normal, signature, and\ndangerous permissions.\nNormal permissions\nNormal permissions cover areas where your app needs to access data or resources\noutside the app's sandbox, but where there's very little risk to the user's privacy or\nthe operation of other apps. For example, permission to set the time zone is a\nnormal permission.\n129 If an app declares in its manifest that it needs a normal permission, the system\nautomatically grants the app that permission at install time. The system doesn't\nprompt the user to grant normal permissions, and users cannot revoke these\npermissions.\nAs of Android 9 (API level 28), the following permissions are classified as\nPROTECTION_NORMAL:\nACCESS_LOCATION_EXTRA_COMMANDS MANAGE_OWN_CALLS\nACCESS_NETWORK_STATE MODIFY_AUDIO_SETTINGS\nACCESS_NOTIFICATION_POLICY NFC\nACCESS_WIFI_STATE READ_SYNC_SETTINGS\nBLUETOOTH READ_SYNC_STATS\nBLUETOOTH_ADMIN RECEIVE_BOOT_COMPLETED\nBROADCAST_STICKY REORDER_TASKS\nCHANGE_NETWORK_STATE REQUEST_DELETE_PACKAGES\nCHANGE_WIFI_MULTICAST_STATE SET_ALARM\nCHANGE_WIFI_STATE SET_WALLPAPER\nDISABLE_KEYGUARD SET_WALLPAPER_HINTS\nEXPAND_STATUS_BAR TRANSMIT_IR\nFOREGROUND_SERVICE USE_FINGERPRINT\nGET_PACKAGE_SIZE VIBRATE\nINSTALL_SHORTCUT WAKE_LOCK\nINTERNET WRITE_SYNC_SETTINGS\nKILL_BACKGROUND_PROCESSES\nSignature permissions\nThe system grants these app permissions at install time, but only when the app that\nattempts to use permission is signed by the same certificate as the app that defines\nthe permission.\nAs of Android 8.1 (API level 27), the following permissions that third-party apps can\nuse are classified as PROTECTION_SIGNATURE:\n130 BIND_ACCESSIBILITY_SERVICE\nBIND_AUTOFILL_SERVICE\nBIND_CARRIER_SERVICES\nBIND_CHOOSER_TARGET_SERVICE\nBIND_CONDITION_PROVIDER_SERVICE\nBIND_DEVICE_ADMIN\nBIND_DREAM_SERVICE\nBIND_INCALL_SERVICE\nBIND_INPUT_METHOD\nBIND_MIDI_DEVICE_SERVICE\nBIND_NFC_SERVICE\nBIND_NOTIFICATION_LISTENER_SERVICE\nBIND_PRINT_SERVICE\nBIND_SCREENING_SERVICE\nBIND_TELECOM_CONNECTION_SERVICE\nBIND_TEXT_SERVICE\nBIND_TV_INPUT\nBIND_VISUAL_VOICEMAIL_SERVICE\nBIND_VOICE_INTERACTION\nBIND_VPN_SERVICE\nBIND_VR_LISTENER_SERVICE\nBIND_WALLPAPER\nCLEAR_APP_CACHE\nMANAGE_DOCUMENTS\nREAD_VOICEMAIL\nREQUEST_INSTALL_PACKAGES\nSYSTEM_ALERT_WINDOW\nWRITE_SETTINGS\nWRITE_VOICEM\nDangerous permissions\nDangerous permissions cover areas where the app wants data or resources that\ninvolve the user's private information, or could potentially affect the user's stored\ndata or the operation of other apps. For example, the ability to read the user's\ncontacts is a dangerous permission. If an app declares that it needs a dangerous\npermission, the user has to explicitly grant the permission to the app. Until the user\n131 approves the permission, your app cannot provide functionality that depends on that\npermission.\nTo use a dangerous permission, your app must prompt the user to grant permission\nat runtime. For a list of dangerous permissions, see table 16 below.\nPermission Group Permissions\nCALENDAR READ_CALENDAR\nWRITE_CALENDAR\nCALL_LOG READ_CALL_LOG\nWRITE_CALL_LOG\nPROCESS_OUTGOING_CALLS\nCAMERA CAMERA\nCONTACTS READ_CONTACTS\nWRITE_CONTACTS\nGET_ACCOUNTS\nLOCATION ACCESS_FINE_LOCATION\nACCESS_COARSE_LOCATION\nMICROPHONE RECORD_AUDIO\nPHONE READ_PHONE_STATE\nREAD_PHONE_NUMBERS\nCALL_PHONE\nANSWER_PHONE_CALLS\nADD_VOICEMAIL\nUSE_SIP\nSENSORS BODY_SENSORS\nSMS SEND_SMS\nRECEIVE_SMS\nREAD_SMS\nRECEIVE_WAP_PUSH\nRECEIVE_MMS\nSTORAGE READ_EXTERNAL_STORAGE\nWRITE_EXTERNAL_STORAGE\nTable-16: Dangerous permissions and permission groups.\nSpecial permissions\nThere are a couple of permissions that don't behave like normal and dangerous\npermissions. SYSTEM_ALERT_WINDOW and WRITE_SETTINGS are particularly\nsensitive, so most apps should not use them. If an app needs one of these\npermissions, it must declare the permission in the manifest, and send an intent\nrequesting the user's authorization. The system responds to the intent by showing a\ndetailed management screen to the user.\n132 4.7 How to View app's permissions\nYou can view all the permissions currently defined in the system using the Settings\napp and the shell command adb shell pm list permissions. To use the Settings app,\ngo to Settings > Apps. Pick an app and scroll down to see the permissions that the\napp uses. For developers, the adb '-s' option displays the permissions in a form\nsimilar to how the user sees them:\n$ adb shell pm list permissions -s\nAll Permissions:\nNetwork communication: view Wi-Fi state, create Bluetooth connections, fullinternet\naccess, view network state\nYour location: access extra location provider commands, fine (GPS) location,mock\nlocation sources for testing, coarse (network-based) location\nServices that cost you money: send SMS messages, directly call phone numbers\n...\nYou can also use the adb -g option to grant all permissions automatically when\ninstalling an app on an emulator or test device:\n$ adb shell install -g MyApp.apk\nCheck your progress-2\n\u2022 Which of the following is a protection level that affects third-party apps?\n(A) Normal (B) Signature (C) Dangerous (D) All of these\n\u2022 SEND_SMS is ____________ type of permission\n(A) Normal (B) Signature (C) Dangerous (D) All of these\n\u2022 READ_VOICEMAIL is ____________ type of permission\n133 (A) Normal (B) Signature (C) Dangerous (D) All of these\nd) SET_WALLPAPER is ____________ type of permission\n(A) Normal (B) Signature (C) Dangerous (D) All of these\n4.8 Let us sum up\nIn this unit you have learned about permission, different types of permissions, how to\ndefine custom permission and various permission protection levels that affect third-\nparty apps.\n4.9 Check your Progress: Possible Answers\n1-a) The purpose of a permission is to protect the privacy of an Android user\n1-b) False\n1-c) <uses-permission>\n1-d) (C)Either (A) or (B)\n1-e) True\n2-a) (D) All of these\n2-b) (C) Dangerous\n2-c) (B) Signature\n2-d) (A) Normal\n4.10 Further Reading\n\u2022 https:\/\/developer.android.com\/training\/permissions\/usage-notes\n\u2022 https:\/\/developer.android.com\/guide\/topics\/permissions\/default-handlers\n\u2022 https:\/\/developer.android.com\/guide\/topics\/permissions\/defining\n134 4.11 Assignment\n\u2022 Write detailed note on permissions\n\u2022 Explain permissions for optional hardware features\n\u2022 Explain Permission Protection levels in details\n4.12 Activity\n\u2022 Check the permissions used by different Apps installed in your Android Mobile\nand remove any unnecessary permission granted.\n135 5\nUnit-5: Application Resources\nUnit Structure\n3.0 Learning Objectives\n5.1 Introduction\n5.2 What are resources?\n5.3 Resource Directory Hierarchy\n5.4 Resource Value Types\n5.5 Storing Different Resource Value Types\n5.6 Accessing Resource Programmatically\n5.7 Referencing System Resources\n5.8 Let us sum up\n5.9 Check your Progress: Possible Answers\n5.10 Further Reading\n5.11 Assignment\n5.12 Activity\n136 5.0 Learning Objectives\nAfter studying this unit student should be able to learn:\n\u2022 Define Application Resources\n\u2022 List different types of resources\n\u2022 Understand resource directory hierarchy within android project\n\u2022 How resources are stored\n\u2022 Access user resources and system resources programmatically.\n5.1 Introduction\nResources are the additional files and static content that your code uses, such as\nbitmaps, layout definitions, user interface strings, animation instructions, and more.\nYou should always externalize app resources such as images and strings from your\ncode, so that you can maintain them independently. You should also provide\nalternative resources for specific device configurations, by grouping them in\nspecially-named resource directories. At runtime, Android uses the appropriate\nresource based on the current configuration. For example, you might want to provide\na different UI layout depending on the screen size or different strings depending on\nthe language setting.\nOnce you externalize your app resources, you can access them using resource IDs\nthat are generated in your project's R class. This document shows you how to group\nyour resources in your Android project and provide alternative resources for specific\ndevice configurations, and then access them from your app code or other XML files.\nThe well-written application accesses its resources programmatically instead of hard\ncoding them into the source code.This is done for a variety of reasons. Storing\napplicationresources in a single place is a more organized approach to development\nand makesthe code more readable and maintainable. Externalizing resources such\nas strings makes iteasier to localize applications for different languages and\ngeographic regions.\n137 5.2 What are resources?\nAll Android applications are composed of two things: functionality (code instructions)\nanddata (resources).The functionality is the code that determines how your\napplication behaves.This includes any algorithms that make the application run.\nResources include textstrings, images and icons, audio files, videos, and other data\nused by the application.Android resource files are stored separately from the java\nclass files in the Android project.Most common resource types are stored in\nXML.You can also store raw data files\n5.3 Resource Directory Hierarchy\nResources are organized in a strict directory hierarchy within the Android project. All\nresourcesmust be stored under the \/res project directory in specially named\nsubdirectoriesthat must be lowercase.Different resource types are stored in different\ndirectories.The resource sub-directoriesgenerated when you create an Android\nproject are shown in below.\nFigure-60: Resource Hierarchy\n138 Each resource type corresponds to a specific resource subdirectory name. For\nexample, all graphics are stored under the \/res\/drawable directory structure.\nResources can be furtherorganized in a variety of ways using even more specially\nnamed directory qualifiers.\nFor example, the \/res\/drawable-hdpi directory stores graphics for high-density\nscreens,the \/res\/drawable-ldpi directory stores graphics for low-density screens, and\nthe\/res\/drawable-mdpi directory stores graphics for medium-density screens. If you\nhad agraphic resource that was shared by all screens, you would simply store that\nresource in the\/res\/drawable directory.\n5.4 Resource Value Types\nAndroid applications rely on many different types of resources\u2014such as text strings,\ngraphics, and color schemes\u2014for user interface design.\nThese resources are stored in the \/res directory of your Android project in a strict\n(butreasonably flexible) set of directories and files.All resources filenames must be\nlowercaseand simple (letters, numbers, and underscores only).\nThe resource types supported by the Android SDK and how they are stored within\ntheproject are shown in table below\nResource Type Directory Filename XML Tag\nStrings \/res\/values\/ strings.xml <string>\nStringPluralization \/res\/values\/ strings.xml <plurals>, <item>\nArrays ofStrings \/res\/values\/ strings.xml <string-array>,<item>\nBooleans \/res\/values\/ bools.xml <bool>\nColors \/res\/values\/ Colors.xml <color>\nColor StateLists \/res\/color\/ Examples include <selector>, <item>\nbuttonstates.xml\nindicators.xml\nDimensions \/res\/values\/ Dimens.xml <dimen>\nIntegers \/res\/values\/ integers.xml <integer>\n139 Resource Type Directory Filename XML Tag\nArrays ofIntegers \/res\/values\/ integers.xml <integer-array>,<item>\nMixed-TypeArrays \/res\/values\/ Arrays.xml <array>, <item>\nSimpleDrawables \/res\/values\/ drawables.xml <drawable>\nGraphics \/res\/drawable\/ Examples include Supported graphics\nicon.png logo.jpg files\nor drawable definition\nXML files such\nasshapes.\nTweenedAnimations \/res\/anim\/ Examples include <set>, <alpha>,\nfadesequence.xml <scale>, <translate>,\nspinsequence.xml <rotate>\nFrame-by-Frame \/res\/drawable\/ Examples include <animation-list>,\nAnimations sequence1.xml <item>\nsequence2.xml\nMenus \/res\/menu\/ Examples include <menu>\nmainmenu.xml\nhelpmenu.xml\nXML Files \/res\/xml\/ Examples include Defined by the\ndata.xml developer\ndata2.xml\nRaw Files \/res\/raw\/ Examples include Defined by the\njingle.mp3 developer\nsomevideo.mp4\nhelptext.txt\nLayouts \/res\/layout\/ Examples include Varies. Must be a\nmain.xml layoutcontrol.\nhelp.xml\nStyles andThemes \/res\/values\/ styles.xml <style>\nthemes.xml\nTable-17\n140 5.5 Storing Different Resource Value Types\nStoring Simple Resource Types Such as Strings\nSimple resource value types, such as strings, colors, dimensions, and other\nprimitives, arestored under the \/res\/values project directory in XML files. Each\nresource file underthe \/res\/values directory should begin with the following XML\nheader:\n<?xml version=\u201d1.0\u201d encoding=\u201dutf-8\u201d?>\nNext comes the root node <resources> followed by the specific resource element\ntypessuch as <string> or <color>. Each resource is defined using a different element\nname.Although the XML file names are arbitrary, the best practice is to store your\nresourcesin separate files to reflect their types, such as strings.xml, colors.xml, and\nso on. However,there\u2019s nothing stopping the developers from creating multiple\nresource files for agiven type, such as two separate xml files called bright_colors.xml\nandmuted_colors.xml, if they so choose.\nStoring Graphics, Animations, Menus, and Files\nIn addition to simple resource types stored in the \/res\/values directory, you can\nalsostore numerous other types of resources, such as animation sequences,\ngraphics, arbitraryXML files, and raw files.These types of resources are not stored in\nthe \/res\/values directory,but instead stored in specially named directories according\nto their type. For example,you can include animation sequence definitions in the\n\/res\/anim directory. Makesure you name resource files appropriately because the\nresource name is derived from thefilename of the specific resource. For example, a\nfile called flag.png in the\/res\/drawable directory is given the name R.drawable.flag.\n5.6 Accessing Resource Programmatically\nWhen android application is compiled, a R class gets generated, which contains\nresource IDs for all the resources available in your res\/ directory. You can use R\n141 class to access that resource using sub-directory and resource name or directly\nresource ID.\nDuring your application development you will need to access defined resources\neither in your code, or in your layout XML files. Following section explains how to\naccess your resources in both the scenarios.\nExample-1: To access res\/drawable\/myimage.png and set an ImageView you will\nuse following code \u2212\nImageViewimageView = (ImageView) findViewById(R.id.myimageview);\nimageView.setImageResource(R.drawable.myimage);\nHere first line of the code make use of R.id.myimageview to get ImageView defined\nwith id myimageview in a Layout file. Second line of code makes use of\nR.drawable.myimage to get an image with name myimage available in drawable sub-\ndirectory under \/res.\nExample-2: Consider next example where res\/values\/strings.xml has following\ndefinition:\n<?xml version=\"1.0\" encoding=\"utf-8\"?>\n<resources>\n<string name=\"hello\">Hello, World!<\/string>\n<\/resources>\nNow you can set the text on a TextView object with ID msg using a resource ID as\nfollows:\nTextViewmsgTextView = (TextView) findViewById(R.id.msg);\nmsgTextView.setText(R.string.hello);\nExample-3:Consider a layout res\/layout\/activity_main.xml with the following\ndefinition\n<?xml version=\"1.0\" encoding=\"utf-8\"?>\n142 <LinearLayoutxmlns:android=\"http:\/\/schemas.android.com\/apk\/res\/android\"\nandroid:layout_width=\"fill_parent\"\nandroid:layout_height=\"fill_parent\"\nandroid:orientation=\"vertical\" >\n<TextViewandroid:id=\"@+id\/text\"\nandroid:layout_width=\"wrap_content\"\nandroid:layout_height=\"wrap_content\"\nandroid:text=\"Hello, I am a TextView\" \/>\n<Button android:id=\"@+id\/button\"\nandroid:layout_width=\"wrap_content\"\nandroid:layout_height=\"wrap_content\"\nandroid:text=\"Hello, I am a Button\" \/>\n<\/LinearLayout>\nThis application code will load this layout for an Activity, in the onCreate() method as\nfollows:\npublic void onCreate(Bundle savedInstanceState) {\nsuper.onCreate(savedInstanceState);\nsetContentView(R.layout.activity_main);\n}\nAccessing Resources in XML Layout\nConsider the following resource XML res\/values\/strings.xml file that includes a color\nresource and a string resource:\n<?xml version=\"1.0\" encoding=\"utf-8\"?>\n<resources>\n<color name=\"opaque_red\">#f00<\/color>\n<string name=\"hello\">Hello!<\/string>\n<\/resources>\n143 Now you can use these resources in the following layout file to set the text color and\ntext string as follows:\n<?xml version=\"1.0\" encoding=\"utf-8\"?>\n<EditTextxmlns:android=\"http:\/\/schemas.android.com\/apk\/res\/android\"\nandroid:layout_width=\"fill_parent\"\nandroid:layout_height=\"fill_parent\"\nandroid:textColor=\"@color\/opaque_red\"\nandroid:text=\"@string\/hello\" \/>\n5.7 Referencing System Resources\nYou can access system resources in addition to your own resources.The android\npackagecontains all kinds of resources, which you can browse by looking in the\nandroid.R subclasses.Here you find system resources for\n\u2022 Animation sequences for fading in and out\n\u2022 Arrays of email\/phone types (home, work, and such)\n\u2022 Standard system colors\n\u2022 Dimensions for application thumbnails and icons\n\u2022 Many commonly used drawable and layout types\n\u2022 Error strings and standard button text\n\u2022 System styles and themes\nYou can reference system resources the same way you use your own; set the\npackage nameto android. For example, to set the background to the system color for\ndarker gray, youset the appropriate background color attribute to\n@android:color\/darker_gray.\nYou can access system resources much like you access your application\u2019s\nresources. Insteadof using your application resources, use the Android package\u2019s\nresources under theandroid.R class.\n144 Check your progress-1\na) All Android applications is composed of ___________\n(A) Functionality (B) Data (C) Both A and B (D) Neither A nor B\nb) You should always externalize app resources from your code, so that you can\nmaintain them independently (True\/False)\nc) You can use R class to access that resource using sub-directory and resource\nname or directly resource ID. (True\/False)\nd) You cannot store resources, such as animation sequences, graphics, arbitrary\nXML files, and raw files. (True\/False)\ne) All resources filenames must be in uppercase and simple (True\/False)\nf) Different resource types are stored in different directories (True\/False)\ng) You can access system resources much like you access your application\u2019s\nresources. (True\/False)\n5.8 Let us sum up\nAndroid applications rely on various types of resources, including strings, string\narrays,colors, dimensions, drawable objects, graphics, animation sequences,\nlayouts, styles, andthemes. Resources can also be raw files. Many of these\nresources are defined with XMLand organized into specially named project\ndirectories. Both default and alternativeresources can be defined using this resource\nhierarchy.\nResources are compiled and accessed using the R.java class file, which is\nautomaticallygenerated when the application resources are compiled. Developers\naccess applicationand system resources programmatically using this special class.\n145 5.9 Check your Progress: Possible Answers\n1-a) Both A and B 1-b) True 1-c) True\n1-d) False 1-e) False 1-f) True\n1-g) True\n5.10 Further Reading\n\u2022 https:\/\/developer.android.com\/reference\/android\/content\/res\/Resources\n\u2022 https:\/\/developer.android.com\/guide\/topics\/resources\/providing-resources\n5.11 Assignment\n\u2022 What are resources?\n\u2022 Explain Resource Directory Hierarchy\n\u2022 How can we reference the system resources?\n\u2022 Explain with example how can we access resource programmatically?\n5.12 Activity\n\u2022 Create String Resource for Title and Welcome message for Main Activity and use\nit at design time and programmatically to set at runtime.\n146 Block-4\nAndroid User\nInterface Design\n147 Unit-1: Basic User Interface\n1\nScreen elements\nUnit Structure\n1.0. Learning Objectives\n1.1. Introduction\n1.2. Introduction to Views, Controls and Layout\n1.3. TextView\n1.4. EditText\n1.5. AutoCompleteTextView\n1.6. Spinner\n1.7. Buttons\n1.8. Check Boxes\n1.9. Radio Groups\n1.10. Pickers\n1.11. Let us sum up\n1.12. Check your Progress: Possible Answers\n1.13. Further Reading\n1.14. Activities\n148 1.0 Learning Objective\nAfter studying this unit you will be able to learn\n\u2022 The user interface elements available within the Android Software\nDevelopmentKit (SDK).\n\u2022 Uses of various user interface elements\n\u2022 How to use a variety of different components and controls to build a screen\n\u2022 How your application can listen for various actions performed by the user.\n\u2022 How to style controls and apply themes to entire screens.\n1.1 Introduction\nMost Android applications inevitably need some form of user interface. In this unit,we\nwill discuss the user interface elements available within the Android Software\nDevelopmentKit (SDK). Some of these elements display information to the user,\nwhereas othersgather information from the user.\nYou learn how to use a variety of different components and controls to build a\nscreenand how your application can listen for various actions performed by the user.\nFinally, youlearn how to style controls and apply themes to entire screens.\n1.2 Introduction to Views, Controls and Layout\nBefore we go any further, we need to define a few terms.This gives you a better\nunderstandingof certain capabilities provided by the Android SDK before they are\nfully introduced.First, let\u2019s talk about the View class.\nIntroduction to Android Views\nThis class represents the basic building block for user interface components. A View\noccupies a rectangular area on the screen and is responsible for drawing and event\nhandling. View is the base class for widgets, which are used to create interactive UI\ncomponents (buttons, text fields, etc.). The ViewGroup subclass is the base class for\n149 layouts, which are invisible containers that hold other Views (or other ViewGroups)\nand define their layout properties.\nAll of the views in a window are arranged in a single tree. You can add views either\nfrom code or by specifying a tree of views in one or more XML layout files. There are\nmany specialized subclasses of views that act as controls or are capable of\ndisplaying text, images, or other content.\nOnce you have created a tree of views, there are typically a few types of common\noperations you may wish to perform:\nSet properties: for example setting the text of a TextView. The available properties\nand the methods that set them will vary among the different subclasses of views.\nNote that properties that are known at build time can be set in the XML layout files.\nSet focus: The framework will handle moving focus in response to user input. To\nforce focus to a specific view, call requestFocus().\nSet up listeners: Views allow clients to set listeners that will be notified when\nsomething interesting happens to the view. For example, all views will let you set a\nlistener to be notified when the view gains or loses focus. You can register such a\nlistener using setOnFocusChangeListener(android.view.View.OnFocusChangeListener).\nOther view subclasses offer more specialized listeners. For example, a Button\nexposes a listener to notify clients when the button is clicked.\nSet visibility: You can hide or show views using setVisibility(int).\nIntroduction to Android Controls\nThe Android SDK contains a Java package named android.widget.When we refer to\ncontrols, we are typically referring to a class within this package.The Android SDK\nincludesclasses to draw most common objects, including ImageView,\nFrameLayout,EditText, and Button classes. All controls are typically derivedfrom the\nView class.Wecover many of these basic controls in detail.\n150 Introduction to Android Layout\nOne special type of control found within the android.widget package is called a\nlayout.A layout control is still a View object, but it doesn\u2019t actually draw anything\nspecific on thescreen. Instead, it is a parent container for organizing other controls\n(children). Layoutcontrols determine how and where on the screen child controls are\ndrawn. Each type oflayout control draws its children using particular rules. For\ninstance, the LinearLayoutcontrol draws its child controls in a single horizontal row or\na single vertical column. Similarly,a TableLayout control displays each child control\nin tabular format (in cells withinspecific rows and columns).\nBy necessity, we use some of the layout View objectswithin this unit to illustrate how\nto use the controls previously mentioned.However, we don\u2019t go into the details of the\nvarious layout types available as part of theAndroid SDK until the next unit. We will\nlean in more details about layout in next unit.\n1.3 TextView\nTextView is a user interface element that displays text to the user. Following table\nshows important XML Attributes of TextView control.\nAttribute Description\nid id is an attribute used to uniquely identify a text view\ngravity The gravity attribute is an optional attribute which is used to control the\nalignment of the text like left, right, center, top, bottom, center_vertical,\ncenter_horizontal etc.\ntext text attribute is used to set the text in a text view.\ntextColor textColor attribute is used to set the text color of a text view. Color\nvalue is in the form of \u201c#argb\u201d, \u201c#rgb\u201d, \u201c#rrggbb\u201d, or \u201c#aarrggbb\u201d.\ntextSize textSize attribute is used to set the size of text of a text view. We can\nset the text size in sp(scale independent pixel) or dp(density pixel).\ntextStyle textStyle attribute is used to set the text style of a text view. The\npossible text styles are bold, italic and normal.\n151 background background attribute is used to set the background of a text view. We\ncan set a color or a drawable in the background of a text view\npadding padding attribute is used to set the padding from left, right, top or\nbottom.\nTable-18\nThe following code sample shows a typical use, with an XML layout and code to\nmodify the contents of the text view:\n<LinearLayout\nxmlns:android=\"http:\/\/schemas.android.com\/apk\/res\/android\"\nandroid:layout_width=\"match_parent\"\nandroid:layout_height=\"match_parent\">\n<TextView\nandroid:id=\"@+id\/text_view_id\"\nandroid:layout_width=\"wrap_content\"\nandroid:layout_height=\"wrap_content\"\nandroid:text=\"This is TextView\"\nandroid:layout_centerInParent=\"true\"\nandroid:textSize=\"35sp\"\nandroid:padding=\"15dp\"\nandroid:textColor=\"#aaa\"\nandroid:background=\"#fff\"\/>\n<\/LinearLayout>\nThis code sample demonstrates how to modify the contents of the text view defined\nin the previous XML layout:\npublic class MainActivity extends Activity {\nprotected void onCreate(Bundle savedInstanceState) {\nsuper.onCreate(savedInstanceState);\nsetContentView(R.layout.activity_main);\nfinal TextViewhelloTextView = (TextView) findViewById(R.id.text_view_id);\n152 helloTextView.setText(R.string.user_greeting);\n}\n}\nTo display this TextView on the screen, all your Activity needs to do is call\nthesetContentView() method with the layout resource identifier in which you defined\nin thepreceding XML shown.\nYou can change the text displayed programmatically by callingthe setText() method\non the TextView object. Retrieving the text is done with thegetText() method.To\ncustomize the appearance of TextView we can use Styles and Themes.\n1.4 EditText\nEditText is a user interface element for entering and modifying text.Following table\nshows important XML Attributes of EditText control.\nAttribute Description\nid This is an attribute used to uniquely identify an edit text\ngravity The gravity attribute is an optional attribute which is used to control\nthe alignment of the text like left, right, center, top, bottom,\ncenter_vertical, center_horizontal etc.\ntext This attribute is used to set the text in a text view.\nhint It is an attribute used to set the hint i.e. what you want user to enter in\nthis edit text. Whenever user start to type in edit text the hint will\nautomatically disappear.\nlines Defineshow many lines tall the input box is. If this isnot set, the entry\nfield grows as the user enters text.\ntextColorHint It is an attribute used to set the color of displayed hint.\ntextColor This attribute is used to set the text color of aedit text. Color value is\nin the form of \u201c#argb\u201d, \u201c#rgb\u201d, \u201c#rrggbb\u201d, or \u201c#aarrggbb\u201d.\ntextSize This attribute is used to set the size of text of aedit text. We can set\nthe text size in sp(scale independent pixel) or dp(density pixel).\n153 textStyle This attribute is used to set the text style of aedit text. The possible\ntext styles are bold, italic and normal.\nbackground This attribute is used to set the background of aedit text. We can set\na color or a drawable in the background of a edit text\npadding Paddingattribute is used to set the padding from left, right, top or\nbottom.\nTable-19\nFollowing layout code shows a basic EditText element.\n<EditText\nandroid:id=\u201d@+id\/txtName\u201d\nandroid:layout_height=\u201dwrap_content\u201d\nandroid:hint=\u201dFull Name\u201d\nandroid:lines=\u201d4\u201d\nandroid:layout_width=\u201dfill_parent\u201d \/>\nThe EditText object is essentially an editable TextView. You can readtext from it in\nby using the getText() method.You can also set initial text to draw in the text entry\narea using the setText() method.You can also highlight a portion of the text fromcode\nbycall to setSelection() method and a call to selectAll() method highlights theentire\ntext entry field.\nBy default, the user can perform a long press to bring up a context menu.This\nprovidesto the user some basic copy, cut, and paste operations as well as the ability\ntochange the input method and add a word to the user\u2019s dictionary of frequently\nusedwords. You can set theeditable attribute to false, so the user cannot edit the text\nin the field but can still copytext out of it using a long press.\n1.5 AutoCompleteTextView\nIn Android, AutoCompleteTextView is a view i.e. similar to EditText, except that it\ndisplays a list of completion suggestions automatically while the user is typing. A list\n154 of suggestions is displayed in drop down menu from which user can choose an item\nwhich actually replace the content of EditBox with that.\nIt is a subclass of EditText class so we can inherit all the properties of EditText in a\nAutoCompleteTextView.\nFollowing layout code shows a basic AutoCompleteTextView element.\n<AutoCompleteTextView\nandroid:id=\"@+id\/ac\"\nandroid:layout_width=\"fill_parent\"\nandroid:layout_height=\"wrap_content\"\nandroid:text=\" Auto Suggestions EditText\"\/>\nTo display the Array content in an AutoCompleteTextView we need to implement\nAdapter. In AutoCompleteTextView we mainly display text values so we use Array\nAdapter for that.ArrayAdapter is used when we need list of single type of items which\nis backed by an Array. For example, list of phone contacts, countries or names.\nArrayAdapter(Context context, int resource, int textViewResourceId, T[] objects)\nAutoCompleteTextView ac = (AutoCompleteTextView) findViewById(R.id.ac);\nFollowing code retrieve the value from a AutoCompleteTextView in Java class.\nString v = ac.getText().toString();\nCheck your progress-1\na) Which class represents the basic building block for user interface components?\n(A) View (B) ViewGroup (C) TextView (D) EditText\nb) Which subclass is the base class for layouts?\n(A) View (B) ViewGroup (C) TextView (D) EditText\nc) You can add views from __________\n(A) Code (B) XML Layout file (C) Either (A) or (B) (D) Neither (A) nor (B)\nd) __________ is a user interface element that displays text to the user\n155 (A) Label (B) EditText (C) TextBox (D) TextView\ne) ___________is a user interface element for entering and modifying text.\n(A) Label (B) EditText (C) TextBox (D) TextView\nf) AutoCompleteTextView is a view i.e. similar to ________except that it displays a\nlist of completion suggestions automatically while the user is typing.\n1.6 Spinner\nIn Android, Spinner provides a quick way to select one value from a set of values. It\nis similar to dropdown list in other programming language. In a default state, a\nspinner shows its currently selected value. It provides an easy way to select a value\nfrom a known set.Following table shows important XML Attributes of spinner control.\nAttribute Description\ndropDownHorizontalOffset Amount of pixels by which the drop down should be\noffset horizontally.\ndropDownSelector List selector to use for spinnerMode=\"dropdown\"\ndisplay.\nMay be a reference to another resource, in the form\n\"@[+][package:]type\/name\" or a theme attribute in the\nform \"?[package:]type\/name\".\nMay be a color value, in the form of \"#rgb\", \"#argb\",\n\"#rrggbb\", or \"#aarrggbb\".\ndropDownVerticalOffset Amount of pixels by which the drop down should be\noffset vertically.\ndropDownWidth Width of the dropdown in spinnerMode=\"dropdown\".\ngravity Gravity setting for positioning the currently selected\nitem.\npopupBackground Background drawable to use for the dropdown in\nspinnerMode=\"dropdown\".\nprompt The prompt to display when the spinner's dialog is\nshown.\nspinnerMode Display mode for spinner options. Must be one of the\nfollowing constant values.\nConstant Value Description\ndialog 0 Spinner options will be presented to\nthe user as a dialog window.\n156 dropdown 1 Spinner options will be presented to\nthe user as an inline dropdown\nanchored to the spinner widget itself.\nTable-20\nAs with the auto-complete method, the possible choices for a spinner can come from\nan Adapter.You can also set the available choices in the layout definition by usingthe\nentries attribute with an array resource. Following is an XML layout for showing\nspinner\n<Spinner\nandroid:id=\u201d@+id\/Spinner01\u201d\nandroid:layout_width=\u201dwrap_content\u201d\nandroid:layout_height=\u201dwrap_content\u201d\nandroid:entries=\u201d@array\/colors\u201d\nandroid:prompt=\u201d@string\/spin_prompt\u201d \/>\nThis places a Spinner control on the screen.When the user selects it, apop-up shows\nthe prompt text followed by a list of the possible choices.This list allowsonly a single\nitem to be selected at a time, and when one is selected, the pop-up goes away.\nFirst, the entries attribute is set to thevalues that shows by assigning it to an array\nresource, referred to here as @array\/colors.\nPopulate the Spinner with User Choices\nThe choices you provide for the spinner can come from any source, but must be\nprovided through a SpinnerAdapter, such as an ArrayAdapter if the choices are\navailable in an array or a CursorAdapter if the choices are available from a database\nquery.\nFor instance, if the available choices for your spinner are pre-determined, you can\nprovide them with a string array defined in a string resource file:\n<?xml version=\"1.0\" encoding=\"utf-8\"?>\n<resources>\n157 <string-array name=\"planets_array\">\n<item>Mercury<\/item>\n<item>Venus<\/item>\n<item>Earth<\/item>\n<item>Mars<\/item>\n<item>Jupiter<\/item>\n<item>Saturn<\/item>\n<item>Uranus<\/item>\n<item>Neptune<\/item>\n<\/string-array>\n<\/resources>\nWith an array such as this one, you can use the following code in\nyour Activity or Fragment to supply the spinner with the array using an instance\nof ArrayAdapter:\nSpinner spinner = (Spinner) findViewById(R.id.spinner);\n\/\/ Create an ArrayAdapter using the string array and a default spinner layout\nArrayAdapter<CharSequence> adapter = ArrayAdapter.createFromResource(this,\nR.array.planets_array,android.R.layout.simple_spinner_item);\n\/\/ Specify the layout to use when the list of choices appears\nadapter.setDropDownViewResource(android.R.layout.simple_spinner_dropdown_ite\nm);\n\/\/ Apply the adapter to the spinner\nspinner.setAdapter(adapter);\nThe createFromResource() method allows you to create an ArrayAdapter from the\nstring array. The third argument for this method is a layout resource that defines how\nthe selected choice appears in the spinner control. The simple_spinner_item layout\nis provided by the platform and is the default layout you should use unless you'd like\nto define your own layout for the spinner's appearance.\nYou should then call setDropDownViewResource(int) to specify the layout the\nadapter should use to display the list of spinner choices.\n158 Call setAdapter() to apply the adapter to your Spinner.\nResponding to User Selections\nWhen the user selects an item from the drop-down, the Spinner object receives an\non-item-selected event.\nTo define the selection event handler for a spinner, implement the\nAdapterView.OnItemSelectedListener interface and the corresponding\nonItemSelected() callback method. For example, here's an implementation of the\ninterface in an Activity:\npublic class SpinnerActivity extends Activity implements OnItemSelectedListener {\n...\npublic void onItemSelected(AdapterView<?> parent, View view,\nint pos, long id) {\n\/\/ An item was selected. You can retrieve the selected item using\n\/\/ parent.getItemAtPosition(pos)\n}\npublic void onNothingSelected(AdapterView<?> parent) {\n\/\/ Another interface callback\n}\n}\nThe AdapterView.OnItemSelectedListener requires the onItemSelected() and\nonNothingSelected() callback methods.\nThen you need to specify the interface implementation by calling\nsetOnItemSelectedListener():\nSpinner spinner = (Spinner) findViewById(R.id.spinner);\nspinner.setOnItemSelectedListener(this);\n159 If you implement the AdapterView.OnItemSelectedListener interface with your\nActivity or Fragment (such as in the example above), you can pass this as the\ninterface instance.\n1.7 Button\nA user interface element the user can tap or click to perform an action.To display a\nbutton in an activity, add a button to the activity's layout XML file:\n<Button\nandroid:layout_width=\"wrap_content\"\nandroid:layout_height=\"wrap_content\"\nandroid:text=\"@string\/button_text\"\nandroid:drawableLeft=\"@drawable\/button_icon\"\n... \/>\nTo specify an action when the button is pressed, set a click listener on the button\nobject in the corresponding activity code:\nFigure-61\npublic class MyActivity extends Activity {\nprotected void onCreate(Bundle savedInstanceState) {\nsuper.onCreate(savedInstanceState);\nsetContentView(R.layout.content_layout_id);\nfinal Button button = findViewById(R.id.button_id);\nbutton.setOnClickListener(new View.OnClickListener() {\npublic void onClick(View v) {\n\/\/ Code here executes on main thread after user presses button\n}\n});\n}\n}\n160 The above snippet creates an instance of View.OnClickListener and wires the\nlistener to the button using setOnClickListener(View.OnClickListener). As a result,\nthe system executes the code you write in onClick(View) after the user presses the\nbutton.\nEvery button is styled using the system's default button background, which is often\ndifferent from one version of the platform to another. If you are not satisfied with the\ndefault button style, you can customize it.\n1.8 Checkbox\nA checkbox is a specific type of two-states button that can be either checked or\nunchecked.\nFigure-62\nTo create each checkbox option, create a CheckBox in your layout. Because a set of\ncheckbox options allows the user to select multiple items, each checkbox is\nmanaged separately and you must register a click listener for each one.\nResponding to Click Events\nWhen the user selects a checkbox, the CheckBox object receives an on-click event.\nTo define the click event handler for a checkbox, add the android:onClick attribute to\nthe <CheckBox> element in your XML layout. The value for this attribute must be the\nname of the method you want to call in response to a click event. The Activity\nhosting the layout must then implement the corresponding method.\nFor example, here are a couple CheckBox objects in a list:\n161 <?xml version=\"1.0\" encoding=\"utf-8\"?>\n<LinearLayoutxmlns:android=\"http:\/\/schemas.android.com\/apk\/res\/android\"\nandroid:orientation=\"vertical\"\nandroid:layout_width=\"fill_parent\"\nandroid:layout_height=\"fill_parent\">\n<CheckBoxandroid:id=\"@+id\/checkbox_meat\"\nandroid:layout_width=\"wrap_content\"\nandroid:layout_height=\"wrap_content\"\nandroid:text=\"@string\/meat\"\nandroid:onClick=\"onCheckboxClicked\"\/>\n<CheckBoxandroid:id=\"@+id\/checkbox_cheese\"\nandroid:layout_width=\"wrap_content\"\nandroid:layout_height=\"wrap_content\"\nandroid:text=\"@string\/cheese\"\nandroid:onClick=\"onCheckboxClicked\"\/>\n<\/LinearLayout>\nWithin the Activity that hosts this layout, the following method handles the click event\nfor both checkboxes:\npublic void onCheckboxClicked(View view) {\n\/\/ Is the view now checked?\nboolean checked = ((CheckBox) view).isChecked();\n\/\/ Check which checkbox was clicked\nswitch(view.getId()) {\ncase R.id.checkbox_meat:\nif (checked)\n\/\/ Put some meat on the sandwich\nelse\n\/\/ Remove the meat\nbreak;\ncase R.id.checkbox_cheese:\nif (checked)\n\/\/ Cheese me\nelse\n\/\/ I'm lactose intolerant\nbreak;\n\/\/ TODO: Veggie sandwich\n162 }\n}\n1.9 Radio Button\nRadio buttons allow the user to select one option from a set. You should use radio\nbuttons for optional sets that are mutually exclusive if you think that the user needs\nto see all available options side-by-side. If it's not necessary to show all options side-\nby-side, use a spinner instead.\nFigure-63\nTo create each radio button option, create a RadioButton in your layout. However,\nbecause radio buttons are mutually exclusive, you must group them together inside a\nRadioGroup. By grouping them together, the system ensures that only one radio\nbutton can be selected at a time.\nResponding to Click Events\nWhen the user selects one of the radio buttons, the corresponding RadioButton\nobject receives an on-click event.\nTo define the click event handler for a button, add the android:onClick attribute to the\n<RadioButton> element in your XML layout. The value for this attribute must be the\nname of the method you want to call in response to a click event. The Activity\nhosting the layout must then implement the corresponding method.\nFor example, here are a couple RadioButton objects:\n<?xml version=\"1.0\" encoding=\"utf-8\"?>\n<RadioGroupxmlns:android=\"http:\/\/schemas.android.com\/apk\/res\/android\"\n163 android:layout_width=\"match_parent\"\nandroid:layout_height=\"wrap_content\"\nandroid:orientation=\"vertical\">\n<RadioButtonandroid:id=\"@+id\/radio_pirates\"\nandroid:layout_width=\"wrap_content\"\nandroid:layout_height=\"wrap_content\"\nandroid:text=\"@string\/pirates\"\nandroid:onClick=\"onRadioButtonClicked\"\/>\n<RadioButtonandroid:id=\"@+id\/radio_ninjas\"\nandroid:layout_width=\"wrap_content\"\nandroid:layout_height=\"wrap_content\"\nandroid:text=\"@string\/ninjas\"\nandroid:onClick=\"onRadioButtonClicked\"\/>\n<\/RadioGroup>\nWithin the Activity that hosts this layout, the following method handles the click event\nfor both radio buttons:\npublic void onRadioButtonClicked(View view) {\n\/\/ Is the button now checked?\nboolean checked = ((RadioButton) view).isChecked();\n\/\/ Check which radio button was clicked\nswitch(view.getId()) {\ncase R.id.radio_pirates:\nif (checked)\n\/\/ Pirates are the best\nbreak;\ncase R.id.radio_ninjas:\nif (checked)\n\/\/ Ninjas rule\nbreak;\n}\n}\n164 1.10 Pickers\nAndroid provides controls for the user to pick a time or pick a date as ready-to-use\ndialogs. Each picker provides controls for selecting each part of the time (hour,\nminute, AM\/PM) or date (month, day, year). Using these pickers helps ensure that\nyour users can pick a time or date that is valid, formatted correctly, and adjusted to\nthe user's locale.\nFigure-64\nIt is recommended that you use DialogFragment to host each time or date picker.\nThe DialogFragment manages the dialog lifecycle for you and allows you to display\nthe pickers in different layout configurations, such as in a basic dialog on handsets or\nas an embedded part of the layout on large screens.\nCreating a Time Picker\nTo display a TimePickerDialog using DialogFragment, you need to define a fragment\nclass that extends DialogFragment and return a TimePickerDialog from the\nfragment's onCreateDialog() method.\nExtending DialogFragment for a time picker\nTo define a DialogFragment for a TimePickerDialog, you must:\n\u2022 Define the onCreateDialog() method to return an instance of TimePickerDialog\n\u2022 Implement the TimePickerDialog.OnTimeSetListener interface to receive a\ncallback when the user sets the time.\n165 Here's an example:\npublic static class TimePickerFragment extends DialogFragment\nimplements TimePickerDialog.OnTimeSetListener {\n@Override\npublic Dialog onCreateDialog(Bundle savedInstanceState) {\n\/\/ Use the current time as the default values for the picker\nfinal Calendar c = Calendar.getInstance();\nint hour = c.get(Calendar.HOUR_OF_DAY);\nint minute = c.get(Calendar.MINUTE);\n\/\/ Create a new instance of TimePickerDialog and return it\nreturn new TimePickerDialog(getActivity(), this, hour, minute,\nDateFormat.is24HourFormat(getActivity()));\n}\npublic void onTimeSet(TimePicker view, int hourOfDay, int minute) {\n\/\/ Do something with the time chosen by the user\n}\n}\nShowing the time picker\nOnce you've defined a DialogFragment like the one shown above, you can display\nthe time picker by creating an instance of the DialogFragment and calling show().\nFor example, here's a button that, when clicked, calls a method to show the dialog:\n<Button\nandroid:layout_width=\"wrap_content\"\nandroid:layout_height=\"wrap_content\"\n166 android:text=\"@string\/pick_time\"\nandroid:onClick=\"showTimePickerDialog\" \/>\nWhen the user clicks this button, the system calls the following method:\npublic void showTimePickerDialog(View v) {\nDialogFragmentnewFragment = new TimePickerFragment();\nnewFragment.show(getSupportFragmentManager(), \"timePicker\");\n}\nThis method calls show() on a new instance of the DialogFragment defined above.\nThe show() method requires an instance of FragmentManager and a unique tag\nname for the fragment.\nCreating a Date Picker\nCreating a DatePickerDialog is just like creating a TimePickerDialog. The only\ndifference is the dialog you create for the fragment.\nTo display a DatePickerDialog using DialogFragment, you need to define a fragment\nclass that extends DialogFragment and return a DatePickerDialog from the\nfragment's onCreateDialog() method.\nExtending DialogFragment for a date picker\nTo define a DialogFragment for a DatePickerDialog, you must:\n\u2022 Define the onCreateDialog() method to return an instance of DatePickerDialog\n\u2022 Implement the DatePickerDialog.OnDateSetListener interface to receive a\ncallback when the user sets the date.\nHere's an example:\n167 public static class DatePickerFragment extends DialogFragment\nimplements DatePickerDialog.OnDateSetListener {\n@Override\npublic Dialog onCreateDialog(Bundle savedInstanceState) {\n\/\/ Use the current date as the default date in the picker\nfinal Calendar c = Calendar.getInstance();\nint year = c.get(Calendar.YEAR);\nint month = c.get(Calendar.MONTH);\nint day = c.get(Calendar.DAY_OF_MONTH);\n\/\/ Create a new instance of DatePickerDialog and return it\nreturn new DatePickerDialog(getActivity(), this, year, month, day);\n}\npublic void onDateSet(DatePicker view, int year, int month, int day) {\n\/\/ Do something with the date chosen by the user\n}\n}\nShowing the date picker\nOnce you've defined a DialogFragment like the one shown above, you can display\nthe date picker by creating an instance of the DialogFragment and calling show().\nFor example, here's a button that, when clicked, calls a method to show the dialog:\n<Button\nandroid:layout_width=\"wrap_content\"\nandroid:layout_height=\"wrap_content\"\nandroid:text=\"@string\/pick_date\"\nandroid:onClick=\"showDatePickerDialog\" \/>\nWhen the user clicks this button, the system calls the following method:\n168 public void showDatePickerDialog(View v) {\nDialogFragmentnewFragment = new DatePickerFragment();\nnewFragment.show(getSupportFragmentManager(), \"datePicker\");\n}\nThis method calls show() on a new instance of the DialogFragment defined above.\nThe show() method requires an instance of Fragment Manager and a unique tag\nname for the fragment.\nCheck your progress-2\na) __________ provides a quick way to select one value from a set of values from\ndrop down list?\n(A) Button (B) Checkbox (C) EditText (D) Spinner\nb) When the user selects an item from the drop-down, the Spinner object receives\nan___________ event.\nc) When the user selects a checkbox, the Checkbox object receives an on-click\nevent. (True\/False)\nd) Android provides controls for the user to pick a ______as ready-to-use dialogs.\n(A) Date (B) Time (C) Date or Time (D) None of these\ne) Radio buttons allow the user to select many options from a set. (True\/False)\nf) Every button is styled using the system's default button background, which is\noften different from one version of the platform to another. (True\/False)\n1.11 Let us sum up\nIn this unit you have learned about user interface elements available within the\nAndroid Software Development Kit (SDK). We have discussed use of various user\ninterface elements and use of different components and controls to build a screen,\nthis unit also explains about how application can listen for various actions performed\nby the user and how to apply style controls and themes to entire screens.\n169 1.12 Check your Progress: Possible Answers\n1-a) (A) View 1-b) (B) View Group 1-c) (C) Either (A) or (B)\n1-d) (D) TextView 1-e) (B) EditText 1-f) (B) EditText\n2-a) (D) Spinner 2-b) on-item-selected 2-c) True\n2-d) (C) Date or Time 2-e) False 2-f) True\n1.13 Further Reading\n\u2022 https:\/\/developer.android.com\/reference\/android\/widget\/TextView\n\u2022 https:\/\/developer.android.com\/reference\/android\/widget\/EditText\n\u2022 https:\/\/developer.android.com\/reference\/android\/widget\/Button\n\u2022 https:\/\/developer.android.com\/reference\/android\/widget\/CheckBox\n\u2022 https:\/\/developer.android.com\/reference\/android\/widget\/Spinner\n1.14 Assignment\n\u2022 Write short note on EditText\n\u2022 Explain the use of TextView, EditText, Button, Checkbox, Spinner, Radio Button.\n\u2022 What is difference between checkbox and radio button\n1.15 Activity\n\u2022 Write an application to demonstrate use of user interface element you have\nlearned in this unit.\n170 Unit-2: Designing User\n2\nInterfaces with Layouts\nUnit Structure\n2.0. Learning Objectives\n2.1. Introduction\n2.2. Creating Layouts Using XML Resources\n2.3. Creating Layouts Programmatically\n2.4. Built-In Layouts\n2.5. Frame Layout\n2.6. Linear Layout\n2.7. Relative Layout\n2.8. Table Layout\n2.9. Data Driven Container\n2.10. Let us sum up\n2.11. Check your Progress: Possible Answers\n2.12. Further Reading\n2.13. Assignment\n2.14. Activity\n171 2.0 Learning Objectives\nIn this unit you learn about\n\u2022 Layout and its use\n\u2022 How to create layout using XML\n\u2022 How to create layout programmatically\n\u2022 Different types of built in layouts\n\u2022 Use of List View, Grid View and Gallery view\n2.1 Introduction\nOne special type of control found within the android.widget package is called a\nlayout.A layout control is still a View object, but it doesn\u2019t actually draw anything\nspecific on thescreen. Instead, it is a parent container for organizing other controls\n(children). Layoutcontrols determine how and where on the screen child controls are\ndrawn. Each type oflayout control draws its children using particular rules. For\ninstance, the LinearLayoutcontrol draws its child controls in a single horizontal row or\na single vertical column. Similarly,a TableLayout control displays each child control\nin tabular format (in cells withinspecific rows and columns).\nApplication user interfaces can be simple or complex, involving many different\nscreens oronly a few. Layouts and user interface controls can be defined as\napplication resources orcreated programmatically at runtime.\n2.2. Creating Layouts Using XML Resources\nAndroid provides a simple way to create layout files inXML as resources provided in\nthe \/res\/layout project directory.This is the most commonand convenient way to build\nAndroid user interfaces and is especially useful fordefining static screen elements\nand control properties that you know in advance, and toset default attributes that you\ncan modify programmatically at runtime.\n172 You can configure almost any ViewGroup or View (or View subclass) attribute using\ntheXML layout resource files.This method greatly simplifies the user interface design\nprocess,moving much of the static creation and layout of user interface controls, and\nbasic definitionof control attributes, to the XML, instead of littering the code.\nDevelopers reserve theability to alter these layouts programmatically as necessary,\nbut they can set all the defaultsin the XML template.You will recognize the following\nas a simple layout file with a LinearLayout and a singleTextView control.\n<?xml version=\u201d1.0\u201d encoding=\u201dutf-8\u201d?>\n<LinearLayoutxmlns:android=\u201chttp:\/\/schemas.android.com\/apk\/res\/android\u201d\nandroid:orientation=\u201dvertical\u201d\nandroid:layout_width=\u201dfill_parent\u201d\nandroid:layout_height=\u201dfill_parent\u201d >\n<TextView\nandroid:layout_width=\u201dfill_parent\u201d\nandroid:layout_height=\u201dwrap_content\u201d\nandroid:text=\u201d@string\/hello\u201d \/>\n<\/LinearLayout>\nThis block of XML shows a basic layout with a single TextView.The first line, which\nyoumight recognize from most XML files, is required.\nCreating only an XML file, though, won\u2019t actually draw anything on the screen.A\nparticularlayout is usually associated with a particular Activity. In your default\nAndroidproject, there is only one activity, which sets the main.xml layout by\ndefault.To associatethe main.xml layout with the activity, use the method call\nsetContentView() with theidentifier of the main.xml layout.The ID of the layout\nmatches the XML filename withoutthe extension. In this case, the preceding example\ncame from main.xml, so the identifierof this layout is simply main:\nsetContentView(R.layout.main);\n173 2.3. Creating Layouts Programmatically\nYou can create user interface components such as layouts at runtime\nprogrammatically, butfor organization and maintainability, it\u2019s best that you leave this\nfor the odd case ratherthan the norm.The main reason is because the creation of\nlayouts programmatically isonerous and difficult to maintain, whereas the XML\nresource method is visual, more organized,and could be done by a separate\ndesigner with no Java skills.\nThe following example shows how to programmatically have an Activity instantiate a\nLinearLayout view and place two TextView objects within it. No resources\nwhatsoeverare used; actions are done at runtime instead.\npublic void onCreate(Bundle savedInstanceState) {\nsuper.onCreate(savedInstanceState);\nTextView text1 = new TextView(this);\ntext1.setText(\u201cHi there!\u201d);\nTextView text2 = new TextView(this);\ntext2.setText(\u201cI\u2019m second. I need to wrap.\u201d);\ntext2.setTextSize((float) 60);\nLinearLayoutll = new LinearLayout(this);\nll.setOrientation(LinearLayout.VERTICAL);\nll.addView(text1);\nll.addView(text2);\nsetContentView(ll);\n}\nThe onCreate() method is called when the Activity is created.The first thing\nthismethod does is some normal Activity housekeeping by calling the constructor for\nthe\nbase class.Next, two TextView controls are instantiated.The Text property of each\nTextView isset using the setText() method.AllTextView attributes, such as TextSize,\nare set by making method calls on the TextView object.These actions perform the\nsame functionthat you have in the past by setting the properties Text and\n174 TextSizeusing the layout resource designer, except these properties are set at\nruntime instead of defined inthe layout files compiled into your application package.\n2.4. Built in layouts\nWe talked a lot about the LinearLayout layout, but there are several other types of\nlayouts.Each layout has a different purpose and order in which it displays its child\nView controlson the screen. Layouts are derived from android.view.ViewGroup.\nThe types of layouts built-in to the Android SDK framework include:\n\u2022 FrameLayout\n\u2022 LinearLayout\n\u2022 RelativeLayout\n\u2022 TableLayout\nAll layouts, regardless of their type, have basic layout attributes. Layout attributes\napply toany child View within that layout.You can set layout attributes at runtime\nprogrammatically,but ideally you set them in the XML layout files using the following\nsyntax:android:layout_attribute_name=\u201dvalue\u201d\nThere are several layout attributes that all ViewGroup objects share.These include\nsizeattributes and margin attributes.You can find basic layout attributes in\ntheViewGroup.LayoutParamsclass.The margin attributes enable each child View\nwithin alayout to have padding on each side. Find these attributes in\ntheViewGroup.MarginLayoutParams classes.There are also a number of ViewGroup\nattributesfor handling child View drawing bounds and animation settings.\n2.5. Frame Layout\nFrameLayout is designed to block out an area on the screen to display a single item.\nGenerally, FrameLayout should be used to hold a single child view, because it can\nbe difficult to organize child views in a way that's scalable to different screen sizes\n175 without the children overlapping each other. You can, however, add multiple children\nto a FrameLayout and control their position within the FrameLayout by assigning\ngravity to each child, using the android:layout_gravity attribute.\nChild views are drawn in a stack, with the most recently added child on top. The size\nof the FrameLayout is the size of its largest child (plus padding), visible or not (if the\nFrameLayout's parent permits). Views that are View.GONE are used for sizing only if\nsetConsiderGoneChildrenWhenMeasuring() is set to true.\nFollowing Table describes some of the importantattributes specific to FrameLayout\nviews.\nAttribute Applies Description Value\nName To\nandroid: Parent Drawable to draw Drawable resource.\nview overthe content\nforeground\nandroid: Parent Gravity of One or more constants\nview foreground separatedby \u201c|\u201d. The constants\nforeground-\navailable aretop, bottom, left, right,\ndrawable.\nGravity center_vertical, fill_vertical,\ncenter_horizontal,\nfill_horizontal, center, and fill.\nandroid: Parent Restrict size of True or false.\nview layoutto all child\nmeasureAll-\nviews orjust the\nChildren child views set\nto VISIBLE (and\nnotthose set to\nINVISIBLE).\nandroid: Child A gravity constant One or more constants\nview that separatedby \u201c|\u201d. The constants\nlayout_\navailable aretop, bottom, left, right,\ndescribes how to\ngravity\nplacethe child View center_vertical, fill_\nwithinthe parent.\nvertical, center_horizontal,\nfill_horizontal, center,\nand fill.\nTable-21\nAn Example of FlowLayout is shown below\n176 Figure-65\nCheck your Progress-1\na) __________controls determine how and where on the screen child controls are\ndrawn.\nb) In _________ layout, Child views are drawn in a stack, with the most recently\nadded child on top.\n(A) Linear (B) Frame (C) Relative (D) Table\nc) creation of layouts programmatically is onerous and difficult to maintain\n(True\/False)\n2.6. LinearLayout\nA LinearLayout view organizes its child View objects in a single row, shown in Figure\nbelow, or column, depending on whether its orientation attribute is set to horizontal\nor vertical.This is a very handy layout method for creating forms.\nYou can find the layout attributes available for LinearLayout child View objects\ninandroid.control.LinearLayout.LayoutParams. Following table describes some of the\nimportantattributes specific to LinearLayout views.\n177 Attribute Applies Description Value\nName To\nandroid: Parent Layout is a single Horizontal or Vertical\nview row(horizontal) or\norientation\nsinglecolumn\n(vertical).\nandroid: Parent Gravity of child One or more constants\nview viewswithin layout. separated by\u201c|\u201d. The constants\ngravity\navailable are top,bottom, left,\nright, center_vertical, fill_vertical,\ncenter_horizontal, fill_horizontal,\ncenter, and fill.\nandroid: Child The gravity for a One or more constants\nView specificchild view. separated by\u201c|\u201d. The constants\nlayout_\nUsed available are top,bottom, left,\ngravity forpositioning of right, center_vertical, fill_vertical,\nviews.\ncenter_horizontal, fill_horizontal,\ncenter, and fill.\nandroid: Child The weight for a The sum of values across all\nview specificchild view. childviews in a parent view must\nlayout_\nUsed toprovide equal 1.For example, one child\nweight ratio of screen control mighthave a value of .3\nand anotherhave a value of .7.\nspace used within\ntheparent control.\nTable-22\nAn Example of Linear Layout is shown below\nFigure-66\n178 2.7. RelativeLayout\nThe RelativeLayout view enables you to specify where the child view controls are\ninrelation to each other. For instance, you can set a child View to be positioned\n\u201cabove\u201d or\u201cbelow\u201d or \u201cto the left of \u201d or \u201cto the right of \u201d another View, referred to by its\nuniqueidentifier.You can also align child View objects relative to one another or the\nparent layoutedges. Combining RelativeLayout attributes can simplify creating\ninteresting user interfaceswithout resorting to multiple layout groups to achieve a\ndesired effect. You can find the layout attributes available for RelativeLayout child\nView objects inandroid.control.RelativeLayout.LayoutParams. Following Table\ndescribes some of the importantattributes specific to RelativeLayout views.\nAttribute Name Applies Description Value\nTo\nandroid:gravity Parent Gravity of child views One or more\nview withinlayout. constantssepara\nted by \u201c|\u201d.\nTheconstants\navailableare top,\nbottom,left,\nright,center_verti\ncal,fill_vertical,ce\nnter_horizontal,fi\nll_horizontal,cent\ner, and fill.\nandroid: Child Centers child view True or False\nview horizontallyand vertically\nlayout_centerInParent\nwithinparent view.\nandroid: Child Centers child view True or False\nview horizontallywithin parent\nlayout_centerHorizontal\nview\nandroid: Child Centers child view True or False\nview verticallywithin parent view.\nlayout_centerVertical\nandroid: Child Aligns child view with True or False\nview topedge of parent view\nlayout_alignParentTop\nandroid: Child Aligns child view with True or False\nview bottomedge of parent view.\nlayout_alignParentBott\nom\nandroid: Child Aligns child view with True or False\n179 Attribute Name Applies Description Value\nTo\nView leftedge of parent view.\nlayout_alignParentLeft\nandroid: Child Aligns child view with True or False\nView rightedge of parent view.\nlayout_alignParentRigh\nt\nandroid: Child Aligns child view with A view ID;\nView rightedge of another child\nlayout_alignRight for example,\nview,specified by ID.\n@id\/Button1\nandroid: Child Aligns child view with A view ID;\nView leftedge of another child\nlayout_alignLeft for example,\nview,specified by ID.\n@id\/Button1\nandroid: Child A view ID;\nView\nlayout_alignTop for example,\n@id\/Button1\nandroid: Child A view ID;\nView\nlayout_alignBottom for example,\n@id\/Button1\nandroid: Child Positions bottom edge A view ID;\nView ofchild view above\nlayout_above for example,\nanotherchild view,\nspecified by ID. @id\/Button1\nandroid: Child Positions top edge of A view ID;\nView childview below another\nlayout_below for example,\nchildview, specified by ID.\n@id\/Button1\nandroid: Child Positions right edge of A view ID;\nView childview to the left of\nlayout_toLeftOf for example,\nanotherchild view,\nspecified by ID. @id\/Button1\nandroid: Child Positions left edge of A view ID;\nView childview to the right of\nlayout_toRightOf for example,\nanotherchildview, specified\nby ID. @id\/Button1\nTable-23\nFollowing figure shows how each of the button controls is relative to each other.\n180 Figure-67\nHere\u2019s an example of an XML layout resource with a RelativeLayout and two child\nView objects, a Button object aligned relative to its parent, and an ImageView\naligned andpositioned relative to the Button (and the parent):\n<?xml version=\u201d1.0\u201d encoding=\u201dutf-8\u201d?>\n<RelativeLayoutxmlns:android=\u201chttp:\/\/schemas.android.com\/apk\/res\/android\u201d\nandroid:id=\u201d@+id\/RelativeLayout01\u201d\nandroid:layout_height=\u201dfill_parent\u201d\nandroid:layout_width=\u201dfill_parent\u201d>\n<Buttonandroid:id=\u201d@+id\/ButtonCenter\u201d\nandroid:text=\u201dCenter\u201d\nandroid:layout_width=\u201dwrap_content\u201d\nandroid:layout_height=\u201dwrap_content\u201d\nandroid:layout_centerInParent=\u201dtrue\u201d \/>\n<ImageViewandroid:id=\u201d@+id\/ImageView01\u201d\nandroid:layout_width=\u201dwrap_content\u201d\nandroid:layout_height=\u201dwrap_content\u201d\nandroid:layout_above=\u201d@id\/ButtonCenter\u201d\nandroid:layout_centerHorizontal=\u201dtrue\u201d\nandroid:src=\u201d@drawable\/arrow\u201d \/>\n<\/RelativeLayout>\n2.8. TableLayout\n181 A TableLayout view organizes children into rows, as shown in following Figure-68.\nYou add individualView objects within each row of the table using a TableRow layout\nView (which isbasically a horizontally oriented LinearLayout) for each row of the\ntable. Each column ofthe TableRow can contain one View (or layout with child View\nobjects).You place Viewitems added to a TableRow in columns in the order they are\nadded.You can specify thecolumn number (zero-based) to skip columns as\nnecessary (the bottom row shown in above figure demonstrates this); otherwise, the\nView object is put in the next column to theright. Columns scale to the size of the\nlargest View of that column.You can also includenormal View objects instead of\nTableRow elements, if you want the View to take up an entirerow.\nFigure-68\nYou can find the layout attributes available for TableLayout child View objects\ninandroid.control.TableLayout.LayoutParams.You can find the layout attributes\navailableforTableRow child View objects in android.control.TableRow.LayoutParams.\nFollowing Table describes some of the important attributes specific to TableLayout\nView objects.\nAttribute Name Applies To Description Value\n182 Attribute Name Applies To Description Value\nandroid:collapseC TableLayout A comma-delimitedlist String or string\nolumns of column indices resource.For\nto collapse (0-based) example, \u201c0,1,3,5\u201d\nandroid: TableLayout A comma-delimited String or string\nshrinkColumns list of column indices resource.Use \u201c*\u201d for\nto shrink (0-based) all columns.\nFor example,\n\u201c0,1,3,5\u201d\nandriod: TableLayout A comma-delimited String or string\nstretchColumns list of column indices resource.Use \u201c*\u201d for\nto stretch (0-based) all columns.\nFor example,\n\u201c0,1,3,5\u201d\nandroid: TableRow Index of column this Integer or integer\nlayout_column child view child view should be resource.For\ndisplayed in (0-based) example, 1\nandroid: TableRow Number of columns Integer or integer\nlayout_span child view this child view should resourcegreater\nspan across than orequal to\n1.For example, 3\nTable-24\nHere\u2019s an example of an XML layout resource with a TableLayout with two rows (two\nTableRow child objects).The TableLayout is set to stretch the columns to the size of\nthescreen width.The first TableRow has three columns; each cell has a Button\nobject.Thesecond TableRow puts only one Button view into the second column\nexplicitly:\n<TableLayoutxmlns:android=\u201chttp:\/\/schemas.android.com\/apk\/res\/android\u201d\nandroid:id=\u201d@+id\/TableLayout01\u201d\nandroid:layout_width=\u201dfill_parent\u201d\nandroid:layout_height=\u201dfill_parent\u201d\nandroid:stretchColumns=\u201d*\u201d>\n<TableRowandroid:id=\u201d@+id\/TableRow01\u201d>\n183 <Buttonandroid:id=\u201d@+id\/ButtonLeft\u201d\nandroid:text=\u201dLeft Door\u201d \/>\n<Buttonandroid:id=\u201d@+id\/ButtonMiddle\u201d\nandroid:text=\u201dMiddle Door\u201d \/>\n<Buttonandroid:id=\u201d@+id\/ButtonRight\u201d\nandroid:text=\u201dRight Door\u201d \/>\n<\/TableRow>\n<TableRowandroid:id=\u201d@+id\/TableRow02\u201d>\n<Buttonandroid:id=\u201d@+id\/ButtonBack\u201d\nandroid:text=\u201dGo Back\u201d\nandroid:layout_column=\u201d1\u201d \/>\n<\/TableRow>\n<\/TableLayout>\n2.9 Using Data-Driven Containers\nSome of the View container controls are designed for displaying repetitive View\nobjects ina particular way. Examples of this type of View container control include\nListView,GridView, and GalleryView:\n\u2022 ListView: Contains a vertically scrolling, horizontally filled list of View objects,\neach of which typically contains a row of data; the user can choose an item to\nperform some action upon.\n\u2022 GridView: Contains a grid of View objects, with a specific number of columns;\nthiscontainer is often used with image icons; the user can choose an item to\nperformsome action upon.\n\u2022 GalleryView: Contains a horizontally scrolling list of View objects, also often\nusedwith image icons; the user can select an item to perform some action upon.\nThese containers are all types of AdapterView controls.An AdapterView control\ncontainsa set of child View controls to display data from some data source.An\nAdapter generatesthese child View controls from a data source. As this is an\nimportant part of all these containercontrols, we talk about the Adapter objects first.\n184 In this section, you learn how to bind data to View objects using Adapter objects.\nInthe Android SDK, an Adapter reads data from some data source and provides a\nView objectbased on some rules, depending on the type of Adapter used.This View\nis used topopulate the child View objects of a particular AdapterView.\nThe most common Adapter classes are the CursorAdapter and the\nArrayAdapter.TheCursorAdapter gathers data from a Cursor, whereas the\nArrayAdapter gathers data froman array.A CursorAdapter is a good choice to use\nwhen using data from a database.TheArrayAdapter is a good choice to use when\nthere is only a single column of data orwhen the data comes from a resource array.\nThere are some common elements to know about Adapter objects.When creating\nanAdapter, you provide a layout identifier.This layout is the template for filling in each\nrowof data.The template you create contains identifiers for particular controls that\ntheAdapter assigns data to.A simple layout can contain as little as a single TextView\ncontrol.\nWhen making an Adapter, refer to both the layout resource and the identifier of the\nTextView control.The Android SDK provides some common layout resources for use\ninyour application.\nHow to Use the Adapter\nAn ArrayAdapter binds each element of the array to a single View object within the\nlayoutresource. Here is an example of creating an ArrayAdapter:\nprivate String[] items = {\u201cItem 1\u201d, \u201cItem 2\u201d, \u201cItem 3\u201d };\nArrayAdapter adapt =new ArrayAdapter<String>(this, R.layout.textview, items);\nIn this example, we have a String array called items.This is the array used by\ntheArrayAdapter as the source data.We also use a layout resource, which is the\nView that isrepeated for each item in the array.This is defined as follows:\n185 <TextViewxmlns:android=\u201chttp:\/\/schemas.android.com\/apk\/res\/android\u201d\nandroid:layout_width=\u201dfill_parent\u201d\nandroid:layout_height=\u201dwrap_content\u201d\nandroid:textSize=\u201d20px\u201d \/>\nThis layout resource contains only a single TextView. However, you can use a more\ncomplexlayout with the constructors that also take the resource identifier of a\nTextViewwithin the layout. Each child View within the AdapterView that uses this\nAdapter getsone TextView instance with one of the strings from the String array.\nIf you have an array resource defined, you can also directly set the entries attribute\nforan AdapterView to the resource identifier of the array to automatically provide the\nArrayAdapter.\nHow to use Cursor Adapter\nA CursorAdapter binds one or more columns of data to one or more View\nobjectswithin the layout resource provided.This is best shown with an example.The\nfollowingexample demonstrates creating a CursorAdapter by querying the Contacts\ncontentprovider.The CursorAdapter requires the use of a Cursor.\nCursor names = managedQuery(Contacts.Phones.CONTENT_URI, null, null, null, null);\nstartManagingCursor(names);\nListAdapter adapter = new SimpleCursorAdapter(\nthis, R.layout.two_text,\nnames, new String[] {\nContacts.Phones.NAME,\nContacts.Phones.NUMBER\n}, new int[] {\nR.id.scratch_text1,\nR.id.scratch_text2\n});\n186 In this example, we present a couple of new concepts. First, you need to know that\ntheCursor must contain a field named _id. In this case, we know that the Contacts\ncontentprovider does have this field.This field is used later when you handle the user\nselecting aparticular item.\nWe make a call to managedQuery() to get the Cursor.Then, we instantiate\naSimpleCursorAdapter as a ListAdapter. Our layout, R.layout.two_text, has\ntwoTextView objects in it, which are used in the last parameter.\nSimpleCursorAdapter enablesus to match up columns in the database with particular\ncontrols in our layout. Foreach row returned from the query, we get one instance of\nthe layout within ourAdapterView.\nBinding Data to the AdapterView\nNow that you have an Adapter object, you can apply this to one of the AdapterView\ncontrols.Any of them works.Although the Gallery technically takes a\nSpinnerAdapter,the instantiation of SimpleCursorAdapter also returns a\nSpinnerAdapter. Here is an exampleof this with a ListView, continuing on from the\nprevious sample code:\n((ListView)findViewById(R.id.list)).setAdapter(adapter);\nThe call to the setAdapter() method of the AdapterView, a ListView in this\ncase,should come after your call to setContentView().This is all that is required to\nbind datato your AdapterView. Figure given below shows the same data in a\nListView, Gallery, andGridView.\n187 Figure-69\nHandling Selection Events\nYou often use AdapterView controls to present data from which the user should\nselect.All three of the discussed controls\u2014ListView, GridView, and Gallery\u2014enable\nyour applicationto monitor for click events in the same way.You need to\ncallsetOnItemClickListener() on your AdapterView and pass in an implementation\nofthe AdapterView.OnItemClickListener class.\nFollowing is an example implementation ofthis class:\nav.setOnItemClickListener(\nnew AdapterView.OnItemClickListener() {\npublic void onItemClick(\nAdapterView<?> parent, View view,\nint position, long id) {\nToast.makeText(Scratch.this, \u201cClicked _id=\u201d+id,\nToast.LENGTH_SHORT).show();\n}\n});\nIn the preceding example, av is our AdapterView.The implementation of the\nonItemClick() method is where all the interesting work happens.The parent\nparameteris the AdapterView where the item was clicked.This is useful if your screen\nhas more thanone AdapterView on it.The View parameter is the specific View within\nthe item that wasclicked.The position is the zero-based position within the list of\nitems that the user selects.\nFinally, the id parameter is the value of the _id column for the particular item thatthe\nuser selects.This is useful for querying for further information about that particularrow\nof data that the item represents.\nYour application can also listen for long-click events on particular\nitems.Additionally,your application can listen for selected items.Although the\n188 parameters are the same, yourapplication receives a call as the highlighted item\nchanges.This can be in response to theuser scrolling with the arrow keys and not\nselecting an item for action.\nCheck your Progress-2\na) A __________view organizes its child View objects in a single row or column\nb) The __________Layout view enables you to specify where the child view controls\nare in relation to each other\nc) _________ contains a vertically scrolling, horizontally filled list of View objects,\neach of which typically contains a row of data; the user can choose an item to\nperform some action upon.\n(A) ListView (B) GridView (C) GalleryView (D) All of these\nd) Which of the following is a data driven control?\n(A) ListView (B) GridView (C) GalleryView (D) All of these\ne) _______Contains a grid of View objects, with a specific number of columns\n(A) ListView (B) GridView (C) GalleryView (D) All of these\nf) __________ View contains a horizontally scrolling list of View objects, also often\nused with image icons;\n(A) ListView (B) GridView (C) GalleryView (D) All of these\n2.10 Let us sum up\nIn this unit you learn about layout and its use, we have seen that the layout can be\ncreated using XML as well as programmatically. You have learned about different\ntypes of built in layouts and few data driven controls such as List View, Grid View\nand Gallery view.\n2.11 Check your Progress: Possible Answers\n1-a) Layout1-b) (B) Frame 1-c)\n2-a) LinearLayout 2-b) Relative 2-c) ListView\n2-d) All of these 2-e) GridView 2-f) (C) GalleryView\n189 2.12 Further Reading\n\u2022 https:\/\/developer.android.com\/reference\/android\/widget\/FrameLayout\n\u2022 https:\/\/developer.android.com\/reference\/android\/widget\/TableLayout\n\u2022 https:\/\/developer.android.com\/reference\/android\/widget\/RelativeLayout\n\u2022 https:\/\/developer.android.com\/reference\/android\/widget\/GridLayout\n\u2022 https:\/\/developer.android.com\/reference\/android\/widget\/ListView\n\u2022 https:\/\/developer.android.com\/reference\/android\/widget\/GridView\n\u2022 https:\/\/developer.android.com\/reference\/android\/widget\/Gallery\n2.13 Assignment\n\u2022 Write detailed note on Built-in Layouts\n\u2022 Explain data driven controls\n\u2022 Explain two ways of creating layouts with its advantages and disadvantages.\n2.14 Activity\n\u2022 Design Interface using different Layouts for collecting personal information such\nas Id, Name, Date of Birth, Gender, Address etc.\n190 Unit-3: Drawing and Working\n3\nwith Animation\nUnit Structure\n3.0. Learning Objectives\n3.1. Introduction\n3.2. Canvas and Paints\n3.3. Bitmaps\n3.4. Shapes\n3.5. Frame by Frame animation\n3.6. Tweened Animation\n3.7. Let us sum up\n3.8. Check your Progress: Possible Answers\n3.9. Further Reading\n3.10. Assignment\n3.11. Activity\n191 3.0 Learning Objectives\nIn this unit you will learn about:\n\u2022 The drawing and animation features built into Android\n\u2022 Working with Canvas and Paint to draw shapes and text.\n\u2022 Animation and Types of animation\n3.1. Introduction\nWith Android, we can displayimages such as PNG and JPG graphics, as well as text\nand primitive shapes to the screen.We can paint these items with various colors,\nstyles, or gradients and modify them usingstandard image transforms.We can even\nanimate objects to give the illusion of motion.\n3.2 Canvas and Paint\nThe Canvas class holds the \"draw\" calls. To draw something, you need 4 basic\ncomponents:\n1. A Bitmap to hold the pixels,\n2. A Canvas to host the draw calls (writing into the bitmap),\n3. A drawing primitive (e.g. Rect, Path, text, Bitmap), and\n4. A paint (to describe the colors and styles for the drawing).\nThe android.graphics framework divides drawing into two areas:\n\u2022 What to draw, handled by Canvas\n\u2022 How to draw, handled by Paint.\nFor instance, Canvas provides a method to draw a line, while Paint provides\nmethods to define that line's color. Canvas has a method to draw a rectangle, while\nPaint defines whether to fill that rectangle with a color or leave it empty. Simply put,\nCanvas defines shapes that you can draw on the screen, while Paint defines the\ncolor, style, font, and so forth of each shape you draw.\n192 So, before you draw anything, you need to create one or more Paint objects. The\nPieChart example does this in a method called init, which is called from the\nconstructor from Java.\nprivate void init() {\ntextPaint = new Paint(Paint.ANTI_ALIAS_FLAG);\ntextPaint.setColor(textColor);\nif (textHeight == 0) {\ntextHeight = textPaint.getTextSize();\n} else {\ntextPaint.setTextSize(textHeight);\n}\npiePaint = new Paint(Paint.ANTI_ALIAS_FLAG);\npiePaint.setStyle(Paint.Style.FILL);\npiePaint.setTextSize(textHeight);\nshadowPaint = new Paint(0);\nshadowPaint.setColor(0xff101010);\nshadowPaint.setMaskFilter(new BlurMaskFilter(8, BlurMaskFilter.Blur.NORMAL));\n...\nCreating objects ahead of time is an important optimization. Views are redrawn very\nfrequently, and many drawing objects require expensive initialization. Creating\ndrawing objects within your onDraw() method significantly reduces performance and\ncan make your UI appear sluggish.\nOnce you have your object creation and measuring code defined, you can implement\nonDraw(). Every view implements onDraw() differently, but there are some common\noperations that most views share:\n\u2022 Draw text using drawText(). Specify the typeface by calling setTypeface(), and\nthe text color by calling setColor().\n\u2022 Draw primitive shapes using drawRect(), drawOval(), and drawArc(). Change\nwhether the shapes are filled, outlined, or both by calling setStyle().\n\u2022 Draw more complex shapes using the Path class. Define a shape by adding lines\nand curves to a Path object, then draw the shape using drawPath(). Just as with\nprimitive shapes, paths can be outlined, filled, or both, depending on the\nsetStyle().\n193 \u2022 Define gradient fills by creating LinearGradient objects. Call setShader() to use\nyour LinearGradient on filled shapes.\n\u2022 Draw bitmaps using drawBitmap().\nFor example, here's the code that draws PieChart. It uses a mix of text, lines, and\nshapes.\nprotected void onDraw(Canvas canvas) {\nsuper.onDraw(canvas);\n\/\/ Draw the shadow\ncanvas.drawOval(shadowBounds,shadowPaint);\n\/\/ Draw the label text\ncanvas.drawText(data.get(currentItem).mLabel, textX, textY, textPaint);\n\/\/ Draw the pie slices\nfor (int i = 0; i<data.size(); ++i) {\nItem it = data.get(i);\npiePaint.setShader(it.shader);\ncanvas.drawArc(bounds,360 - it.endAngle, it.endAngle - it.startAngle,\ntrue, piePaint);\n}\n\/\/ Draw the pointer\ncanvas.drawLine(textX, pointerY, pointerX, pointerY, textPaint);\ncanvas.drawCircle(pointerX, pointerY, pointerSize, mTextPaint);\n}\n3.3 Bitmaps\nYou can find lots of goodies for working with graphics such as bitmaps in the\nandroid.graphics package.The core class for bitmaps isandroid.graphics.Bitmap.\n194 Drawing Bitmap Graphics on a Canvas\nYou can draw bitmaps onto a valid Canvas, such as within the onDraw() method of a\nView, using one of the drawBitmap() methods. For example, the following code loads\na Bitmap resource and draws it on a canvas:\nimport android.graphics.Bitmap;\nimport android.graphics.BitmapFactory;\n...\nBitmap pic = BitmapFactory.decodeResource(getResources(),\nR.drawable.bluejay);\ncanvas.drawBitmap(pic, 0, 0, null);\nScaling Bitmap Graphics\nPerhaps you want to scale your graphic to a smaller size. In this case, you can use\nthecreateScaledBitmap() method, like this:\nBitmap sm = Bitmap.createScaledBitmap(pic, 50, 75, false);\nYou can preserve the aspect ratio of the Bitmap by checking the getWidth() and\ngetHeight() methods and scaling appropriately.\n3.4 Shapes\nYou can define and draw primitive shapes such as rectangles and ovals using\ntheShapeDrawable class in conjunction with a variety of specialized Shape\nclasses.You candefine Paintable drawables as XML resource files, but more often,\nespecially with morecomplex shapes, this is done programmatically.\nDefining Shape Drawables as XML Resources\n195 In Unit-5,\u201cApplication Resources\u201d of block-3, we show you how to define\nprimitiveshapes such as rectangles using specially formatted XML files within the\n\/res\/drawable\/resource directory.\nThe following resource file called \/res\/drawable\/green_rect.xml describes a simple,\ngreen rectangle shape drawable:\n<?xml version=\u201d1.0\u201d encoding=\u201dutf-8\u201d?>\n<shape xmlns:android=\u201chttp:\/\/schemas.android.com\/apk\/res\/android\u201d\nandroid:shape=\u201drectangle\u201d>\n<solid android:color=\u201d#0f0\u201d\/>\n<\/shape>\nYou can then load the shape resource and set it as the Drawable as follows:\nImageView iView = (ImageView)findViewById(R.id.ImageView1);\niView.setImageResource(R.drawable.green_rect);\nYou should note that many Paint properties can be set via XML as part of the\nShapedefinition. For example, the following Oval shape is defined with a linear\ngradient (red towhite) and stroke style information:\n<?xml version=\u201d1.0\u201d encoding=\u201dutf-8\u201d?>\n<shape xmlns:android=\u201dhttp:\/\/schemas.android.com\/apk\/res\/android\u201d\nandroid:shape=\u201doval\u201d>\n<solid android:color=\u201d#f00\u201d\/>\n<gradient android:startColor=\u201d#f00\u201dandroid:endColor=\u201d#fff\u201dandroid:angle=\u201d180\u201d\/>\n<stroke android:width=\u201d3dp\u201d android:color=\u201d#00f\u201d\nandroid:dashWidth=\u201d5dp\u201d android:dashGap=\u201d3dp\u201d\n\/>\n<\/shape>\nDefining Shape Drawables Programmatically\n196 You can also define this ShapeDrawable instances programmatically. The different\nshapesare available as classes within the android.graphics.drawable.shapes\npackage. For example,you can programmatically define the aforementioned green\nrectangle as follows:\nimport android.graphics.drawable.ShapeDrawable;\nimport android.graphics.drawable.shapes.RectShape;\n...\nShapeDrawablerect = new ShapeDrawable(new RectShape());\nrect.getPaint().setColor(Color.GREEN);\nYou can then set the Drawable for the ImageView directly:\nImageView iView = (ImageView)findViewById(R.id.ImageView1);\niView.setImageDrawable(rect);\nDrawing Different Shapes\nSome of the different shapes available within the\nandroid.graphics.drawable.shapespackage include\n\u2022 Rectangles (and squares)\n\u2022 Rectangles with rounded corners\n\u2022 Ovals (and circles)\n\u2022 Arcs and lines\n\u2022 Other shapes defined as paths\nYou can create and use these shapes as Drawable resources directly within\nImageViewviews, or you can find corresponding methods for creating these primitive\nshapes withina Canvas.\nDrawing Rectangles and Squares\n197 Drawing rectangles and squares (rectangles with equal height\/width values) is simply\namatter of creating a ShapeDrawable from a RectShape object.The RectShape\nobject hasno dimensions but is bound by the container object\u2014in this case, the\nShapeDrawable.\nYou can set some basic properties of the ShapeDrawable, such as the Paint color\nand thedefault size.\nFor example, here we create a magenta-colored rectangle that is 100-pixels long\nand 2-pixels wide, which looks like a straight, horizontal line.We then set the shape\nas the drawablefor an ImageView so the shape can be displayed:\nimport android.graphics.drawable.ShapeDrawable;\nimport android.graphics.drawable.shapes.RectShape;\n\u2026\nShapeDrawablerect = new ShapeDrawable(new RectShape());\nrect.setIntrinsicHeight(2);\nrect.setIntrinsicWidth(100);\nrect.getPaint().setColor(Color.MAGENTA);\nImageView iView = (ImageView)findViewById(R.id.ImageView1);\niView.setImageDrawable(rect);\nSimilarly we can draw other shapes.\n3.5 Frame by Frame animation\nYou can think of frame-by-frame animation as a digital flipbook in which a series of\nsimilarimages display on the screen in a sequence, each subtly different from the\nlast.Whenyou display these images quickly, they give the illusion of movement.This\ntechnique iscalled frame-by-frame animation and is often used on the Web in the\nform of animatedGIF images.\n198 Frame-by-frame animation is best used for complicated graphics transformations\nthatare not easily implemented programmatically.\nAn object used to create frame-by-frame animations, defined by a series of Drawable\nobjects, which can be used as a View object's background.\nThe simplest way to create a frame-by-frame animation is to define the animation in\nan XML file, placed in the res\/drawable\/ folder, and set it as the background to a\nView object. Then, call start() to run the animation.\nAn AnimationDrawable defined in XML consists of a single <animation-list> element\nand a series of nested <item> tags. Each item defines a frame of the animation. See\nthe example below.\nspin_animation.xml file in res\/drawable\/ folder:\n<animation-list android:id=\"@+id\/selected\" android:oneshot=\"false\">\n<item android:drawable=\"@drawable\/wheel0\" android:duration=\"50\" \/>\n<item android:drawable=\"@drawable\/wheel1\" android:duration=\"50\" \/>\n<item android:drawable=\"@drawable\/wheel2\" android:duration=\"50\" \/>\n<item android:drawable=\"@drawable\/wheel3\" android:duration=\"50\" \/>\n<item android:drawable=\"@drawable\/wheel4\" android:duration=\"50\" \/>\n<item android:drawable=\"@drawable\/wheel5\" android:duration=\"50\" \/>\n<\/animation-list>\nHere is the code to load and play this animation.\n\/\/ Load the ImageView that will host the animation and\n\/\/ set its background to our AnimationDrawable XML resource.\nImageViewimg = (ImageView)findViewById(R.id.spinning_wheel_image);\nimg.setBackgroundResource(R.drawable.spin_animation);\n\/\/ Get the background, which has been compiled to an AnimationDrawable object.\nAnimationDrawableframeAnimation = (AnimationDrawable) img.getBackground();\n199 \/\/ Start the animation (looped playback by default).\nframeAnimation.start();\n3.6 Tweened Animation\nWith tweened animation, you can provide a single Drawable resource - it is a Bitmap\ngraphic, a ShapeDrawable, a TextView, orany other type of View object\u2014and the\nintermediate frames of the animation are renderedby the system.Android provides\ntweening support for several common image transformations,including alpha, rotate,\nscale, and translate animations.You can apply tweenedanimation transformations to\nany View, whether it is an ImageView with a Bitmap orshape Drawable, or a layout\nsuch as a TableLayout.\nDefining Tweening Transformations\nYou can define tweening transformations as XML resource files or\nprogrammatically.Alltweened animations share some common properties, including\nwhen to start, how long toanimate, and whether to return to the starting state upon\ncompletion.\nDefining Tweened Animations as XML Resources\nIn Unit-5 of Block-3, we showed you how to store animation sequences as specially\nformattedXML files within the \/res\/anim\/ resource directory. For example, the\nfollowing resourcefile called \/res\/anim\/spin.xml describes a simple five-second\nrotation:\n<?xml version=\u201d1.0\u201d encoding=\u201dutf-8\u201d ?>\n<set xmlns:android= \u201chttp:\/\/schemas.android.com\/apk\/res\/android\u201d\nandroid:shareInterpolator=\u201dfalse\u201d>\n<rotateandroid:fromDegrees=\u201d0\u201d\nandroid:toDegrees=\u201d360\u201d\n200 android:pivotX=\u201d50%\u201d\nandroid:pivotY=\u201d50%\u201d\nandroid:duration=\u201d5000\u201d \/>\n<\/set>\nDefining Tweened Animations Programmatically\nYou can programmatically define these animations.The different types of\ntransformationsare available as classes within the android.view.animation package.\nFor example, youcan define the aforementioned rotation animation as follows:\nimport android.view.animation.RotateAnimation;\n...\nRotateAnimation rotate = new RotateAnimation(0, 360,\nRotateAnimation.RELATIVE_TO_SELF, 0.5f,\nRotateAnimation.RELATIVE_TO_SELF, 0.5f);\nrotate.setDuration(5000);\nDefining Simultaneous and Sequential Tweened Animations\nAnimation transformations can happen simultaneously or sequentially when you set\nthestartOffset and duration properties, which control when and for how long an\nanimationtakes to complete.You can combine animations into the <set> tag\n(programmatically,using AnimationSet) to share properties.\nFor example, the following animation resource file \/res\/anim\/grow.xml includes a\nsetof two scale animations: First, we take 2.5 seconds to double in size, and then at\n2.5 seconds,we start a second animation to shrink back to our starting size:\n<?xml version=\u201d1.0\u201d encoding=\u201dutf-8\u201d ?>\n<set xmlns:android=http:\/\/schemas.android.com\/apk\/res\/android\nandroid:shareInterpolator=\u201dfalse\u201d>\n<scaleandroid:pivotX=\u201d50%\u201d\nandroid:pivotY=\u201d50%\u201d\n201 android:fromXScale=\u201d1.0\u201d\nandroid:fromYScale=\u201d1.0\u201d\nandroid:toXScale=\u201d2.0\u201d\nandroid:toYScale=\u201d2.0\u201d\nandroid:duration=\u201d2500\u201d \/>\n<scale\nandroid:startOffset=\u201d2500\u201d\nandroid:duration=\u201d2500\u201d\nandroid:pivotX=\u201d50%\u201d\nandroid:pivotY=\u201d50%\u201d\nandroid:fromXScale=\u201d1.0\u201d\nandroid:fromYScale=\u201d1.0\u201d\nandroid:toXScale=\u201d0.5\u201d\nandroid:toYScale=\u201d0.5\u201d \/>\n<\/set>\nLoading Animations\nLoading animations is made simple by using the AnimationUtils helper class.The\nfollowingcode loads an animation XML resource file called \/res\/anim\/grow.xml and\nappliesit to an ImageView whose source resource is a green rectangle shape\ndrawable:\nimport android.view.animation.Animation;\nimport android.view.animation.AnimationUtils;\n...\nImageView iView = (ImageView)findViewById(R.id.ImageView1);\niView.setImageResource(R.drawable.green_rect);\nAnimation an =AnimationUtils.loadAnimation(this, R.anim.grow);\niView.startAnimation(an);\nWe can listen for Animation events, including the animation start, end, and repeat\nevents,by implementing an AnimationListener class, such as the MyListener class\nshown here:\n202 class MyListener implements Animation.AnimationListener {\npublic void onAnimationEnd(Animation animation) {\n\/\/ Do at end of animation\n}\npublic void onAnimationRepeat(Animation animation) {\n\/\/ Do each time the animation loops\n}\npublic void onAnimationStart(Animation animation) {\n\/\/ Do at start of animation\n}\n}\nYou can then register your AnimationListener as follows:\nan.setAnimationListener(new MyListener());\nNow let\u2019s look at each of the four types of tweening transformations\nindividually.Thesetypes are:\n\u2022 Transparency changes (Alpha)\n\u2022 Rotations (Rotate)\n\u2022 Scaling (Scale)\n\u2022 Movement (Translate)\nWorking with Alpha Transparency Transformations\nTransparency is controlled using Alpha transformations.Alpha transformations can\nbeused to fade objects in and out of view or to layer them on the screen.\nAlpha values range from 0.0 (fully transparent or invisible) to 1.0 (fully opaque or\nvisible).Alpha animations involve a starting transparency (fromAlpha) and an ending\ntransparency(toAlpha).\nThe following XML resource file excerpt defines a transparency-change animation,\ntaking five seconds to fade in from fully transparent to fully opaque:\n203 <alphaandroid:fromAlpha=\u201d0.0\u201d\nandroid:toAlpha=\u201d1.0\u201d\nandroid:duration=\u201d5000\u201d>\n<\/alpha>\nProgrammatically, you can create this same animation using the AlphaAnimation\nclasswithin the android.view.animation package.\nWorking with Rotating Transformations\nYou can use rotation operations to spin objects clockwise or counterclockwise\naround apivot point within the object\u2019s boundaries.\nRotations are defined in terms of degrees. For example, you might want an object to\nmake one complete clockwise rotation.To do this, you set the fromDegrees property\nto 0and the toDegrees property to 360.To rotate the object counterclockwise instead,\nyouset the toDegrees property to -360.\nBy default, the object pivots around the (0,0) coordinate, or the top-left corner of\ntheobject.This is great for rotations such as those of a clock\u2019s hands, but much of the\ntime,you want to pivot from the center of the object; you can do this easily by setting\nthe pivotpoint, which can be a fixed coordinate or a percentage.\nThe following XML resource file excerpt defines a rotation animation, taking five\nsecondsto make one full clockwise rotation, pivoting from the center of the object:\n<rotateandroid:fromDegrees=\u201d0\u201d\nandroid:toDegrees=\u201d360\u201d\nandroid:pivotX=\u201d50%\u201d\nandroid:pivotY=\u201d50%\u201d\nandroid:duration=\u201d5000\u201d \/>\nProgrammatically, you can create this same animation using the RotateAnimation\nclasswithin the android.view.animation package.\nWorking with Scaling Transformations\n204 You can use scaling operations to stretch objects vertically and horizontally. Scaling\noperationsare defined as relative scales.Think of the scale value of 1.0 as 100\npercent, or fullsize.To scale to half-size, or 50 percent, set the target scale value of\n0.5.You can scale horizontally and vertically on different scales or on the same scale\n(topreserve aspect ratio).You need to set four values for proper scaling: starting\nscale(fromXScale, fromYScale) and target scale (toXScale, toYScale).Again, you\ncan use apivot point to stretch your object from a specific (x,y) coordinate such as\nthe center oranother coordinate.\nThe following XML resource file excerpt defines a scaling animation, taking five\nsecondsto double an object\u2019s size, pivoting from the center of the object:\n<scaleandroid:pivotX=\u201d50%\u201d\nandroid:pivotY=\u201d50%\u201d\nandroid:fromXScale=\u201d1.0\u201d\nandroid:fromYScale=\u201d1.0\u201d\nandroid:toXScale=\u201d2.0\u201d\nandroid:toYScale=\u201d2.0\u201d\nandroid:duration=\u201d5000\u201d \/>\nProgrammatically, you can create this same animation using the ScaleAnimation\nclasswithin the android.view.animation package.\nWorking with Moving Transformations\nYou can move objects around using translate operations.Translate operations move\nan objectfrom one position on the (x,y) coordinate to another coordinate.\nTo perform a translate operation, you must specify the change, or delta, in the\nobject\u2019scoordinates.You can set four values for translations: starting position\n(fromXDelta,fromYDelta) and relative target location (toXDelta, toYDelta).\n205 "}