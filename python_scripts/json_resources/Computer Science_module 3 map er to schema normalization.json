{"text":"Module_3: Mapping ER to Schema, Normalization\n3.1 Introduction and Background\nMapping an Entity Relationship (ER) model gives a good overview of the design of a\nsystem with the goal of making the system easier to understand at a technical level. The ER\ndiagrams can be mapped to a relation schema, which means we can clearly display the\nrelationship between its members. The database schema is a structure that describes in a formal\nlanguage the association of data as a blueprint of how the database can be constructed.\nTo understand this process, we will review below what an ER model is. An ER model is\nused to illustrate the logical interpretation of the system and consists of three components: Entity,\nEntity Type and Entity Set.\nEntity can refer to a person, a concept, an object, a virtual file, or it can represent an idea\nthat can be quantified, such as a company, a job, or a document. An entity consists of an Entity\nType and everything that consists of an entity type is called an Entity Set. The example below\nwill clarify the power of design a schema showcasing an entity type, \u201cCar,\u201d and an entity set\nconsisting of all cars.\nCar\nEntity Type\nCar1\nCar2 Entity Set\nCar3\nThe next important step in understanding the mapping is an Attribute. Attributes are\nproperties which define the entity type. For example, a person may have the attributes name, date\nof birth, and address. The attribute in an ER diagram is represented by an oval.\nAttribute\nThe attribute that uniquely identifies each entity is called a Key Attribute and is\nrepresented by an oval with underlining. A key attribute can be \u201cID,\u201d which identifies each entity\nby a unique number.\nID For complex designs, there are multiple different types of attributes: Composite Attributes,\nconsisting of many individual attributes, Multivalued Attributes, consisting more than one value,\nand Derived Attributes, which are derived from other attributes as the name suggests.\nYear\nBrand\nTag\nCar\nAddress\nCountry State\nCity\nBetween entities, there are relationships. A relationship has a type and can be part of a sets. The\nlatter consists of one, two or many relationship types: unary, binary or N-ary.\nRelationship Type:\nDriver Car\nDrives\nRelationship Set:\nS1 E1\nC1\nS2 E2\nC2\nS3 E3\nC3\nUnary, Binary Relationship:\nPerson\nMarried\nTO\nAn ER diagram can also have a Weak Entity. A weak entity is an entity type for which a key\nattribute can\u2019t be defined. A company can store information of dependents (Parents, Children,\nSpouse) of an Employee but the dependents don\u2019t exist without the Employee; we call this entity\na weak entity. Employee\nHas Dependents\n3.2 List five properties of relations\nIn database systems, there exist relations in a two-dimensional table of data. This typically\nhas multiple named columns and an indeterminate quantity of rows for data to be entered. A\ncommon misconception is a database relation being mistaken for a relational database. The main\npoint to remember is that a relation specifically refers to an individual table in a relational\ndatabase. There are specific properties that define relations so that they can be easily identified by\na user. These relations have many properties that identify and separate themselves from non-\nrelational tables.\nProperties of relations:\n1. Each table in a database has a unique identity (name).\n2. Any entry at the connection of each row and column has a single value. There can be only one\nvalue that is related with each attribute on a specific row of a table; no multivalued attributes are\nallowed in a relation.\n3. Each row is unique; no two rows or tables in the same relation can be identical.\n4. Each attribute (or column) within a table has a unique name.\n5. The sequence of columns (left to right) is insignificant. The order of the columns\nin a relation can be changed without changing the meaning or use of the relation.\n6. The sequence of rows (top to bottom) is insignificant. As with columns, the order of the rows\nof a relation may be changed or stored in any sequence.\nA few of these properties tie into one another, namely, the first, fourth, and sixth. The\ncolumns having unique attributes and the individual rows being arbitrarily organized very simply\nexplains the core properties of relations.\nFigure 1 Example of property one. Referenced material from Fig 4-2 in book.\nThe second property speaks to Codd's original notion from 1969 that each and every\nattribute in individual tuples inside of a relation must only consist of a single value and not allow\nany different multivalued values of the kind supported in databases. Figure 2 Example of property two. Referenced material from Fig 4-1 in book.\nThe third property speaks to the uniqueness within the table itself and how each individual\nrow can only have values of data that are unique to the row itself. This ensures that no two rows\nwill be identical.\nFigure 3 - Example of property three. Referenced material from Fig 4-2 in book.\nThe fifth property specifically describes how the order does not matter in regard to the\ncolumns themselves. In figure 3, the order of columns can be arbitrary in the structure itself.\nEntities, Relations, and Characteristics\n\u2022 Each row contains data about an entity (table).\n\u2022 Each column contains data related to attributes of the entities.\n\u2022 All entries in a column are of the same kind.\n\u2022 Each cell of the table holds a single value.\n\u2022 The order of the columns is not important.\n\u2022 The order of the rows is not important\n\u2022 No two rows may be identical.\nEmpolyeerNumber FirsName LastName Department EmailAddress PhoneNum\n10 Judy Griffin Payroll jg@gmail.com 780-492-5689\n20 Lily Murphy Security lm@gmail.com 305-129-4593\n30 Sam Moore Accounting sm@gmail.com\nTable_1 \u2013 Entities Relations Characteristics\nTable 2 below shows three columns: the buyer\u2019s name, the SKU (stock keeping unit), and the\nnames of the buyer\u2019s college major. The Buyers_Name may be associated with more than one\nSKU, and they can have multiple Departments.\nTable_2 \u2013 Buyer and SKU_Numbers\nBuyers_Name SKU_Numbers Department\n1 Judy Griffin Griffin Payroll 2 Lily Murphy Murphy Security\n3 Sam Moore Moore Accounting\nIn the relational model of Databases:\n\u2022 A candidate key is an element that controls all the other columns in a relation. The\nSKU_DATA relation has two candidate keys: SKU and SKU_Description. Buyer is an\nelement, but it is not a candidate key because it controls only Department.\n\u2022 A primary key is a specific choice of a minimal set of attributes (Columns) that is a\nsingle row of a table in a database relation. A table has only one primary key. The primary\nkey can have one column, or it can be a composite. The definition of a table is given as\n(SKU, SKU_Description, Department, Buyer), where SKU is the primary key of\nSKU_DATA and the (OrdrNumber, SKU) is the primary key of ORDER_ITEM.\n\u2022 A surrogate key is an artificial column that is added to a table to serve as the primary key\nwhen the primary key is large. RENTAL_PROPERTY is the relationship below.\n\u2022 A foreign key is a column that is the primary key of a table. The term occurs because it is\na key of a table foreign to the one in which it appears as the primary key. In the below\ntwo tables, COMPANY.CompanyName is the primary key of COMPANY, and\nEMPLOYEE.Company is a foreign key. In this text, we will show foreign keys in italics:\n\u2022 Anomalies are problems that can occur in poorly planned database systems,\nunnormalised databases where the majority of the data are stored in one table (a flat-\nfile database). An Insertion Anomaly may be such that it is not possible to add a\nrequired piece of data unless another piece is unavailable data that is removed. When we\ndelete one row, the structure of this table forces to lose facts about two different things: a\nmachine and a repair. This condition is called a deletion anomaly.\n3.3 Define first (1NF), second (2NF), and third normal (3NF) form\nNormalization is a technique in database design used to organize tables in a way that\nreduces redundancy and dependency of data. The use of this technique splits first into a larger\ntable then into smaller tables, and links all by using entity relationships. The designer of the\nrelational model, Edgar Codd, came up with this theory of normalization that introduces the First\nNormal (1NF) form and then continues to extend the theory into a second (2NF) and third normal\nform (3NF). The main idea with this theory is that a table is about a specific topic and only\nsupporting topics are included, which minimizes duplicate data, avoids data modification issues,\nand simplifies queries. The first normal form (1NF), like all normal forms, has specific requirements to be\nvalidated as 1NF. A table, as below, must be two dimensional with rows and columns, and each\nrow must contain data that relates to something. Each column must contain data for a single\nattribute of the thing it\u2019s describing, each cell of the table must have only a single value, entries in\nany column must have the same type of data (Ex. If the entry in one row of a column contains hair\ncolor, all the other rows must contain hair color as well), each column must have a unique name,\nall rows should be uniquely identified (has to have some unique ID), and the order of the columns\nand rows must have no significance. Tables in first normal form are subject to deletion and\ninsertion anomalies; they may prove useful in some applications but can be unreliable in others.\nSecond normal form (2NF) must have all attributes or non-key columns dependent on\nthe key. For example, if the data is based on making an order as shown in Figure 1, the price of\nthe item isn\u2019t determined by the primary key or unique identifier of the customer, so this would\nbreak the second normal form. In this case, the table can be split into two, with one table having\nthe primary key as Customer_ID and all of their personal information and the second being a\ntable with the primary key as the item name and the supplier information and prices. All of this\ninformation in each table is now correctly dependent on the primary key.\nSince the second normal form has two separate tables, a junction table is necessary where\nboth keys are represented in the same table to show who bought what. This can also be used as a\ncompound key where two primary keys are conjoined to represent each other.\nIn the third normal form (3NF), all columns can be determined only by the key in the\ntable and no other column. Having this type of normalization gets rid of redundancy and is\nespecially vulnerable to some types of modification anomalies. Take a look at Figure 2 where the\nitems table has duplicate supplier phone numbers and supplier names. If Sony were to have more products under their item key, the supplier phone number would keep repeating because it\u2019s\ndirectly related to the supplier name and will always be that same phone number.\nSeparating these two tables into individual representations makes all of the columns\ndependent on only the key in the table and no other column, making the third normal form valid.\n\u2022 Some researchers discovered that anomalies could occur, and the conditions for Boyce-\nCodd Normal Form (BCNF) were identified. These normal forms are well-defined so\nthe relation in BCNF is in 3NF, a relation in 3NF is in 2NF, and a relation in 2NF is in\n1NF can occur.\n\u2022 Therefore, the normal forms 2NF through BCNF concern anomalies that happen from\nfunctional dependencies. They led to the definition of fourth normal form (4NF) and\nfifth normal form (5NF).\n\u2022 Table 3 shows other anomalies which occurred because of another kind of dependency\ncalled a multivalued dependency. Those anomalies could be eliminated by placing each\nmultivalued dependency in a relation of its own, a condition known as 4NF.\nTable_3 \u2013 Form of Normalizations Theory\nAnomaly Norma Forms Design Principles\nFunctional Dependencies 1NF, 2NF, 3NF, BCNF BCNF: Design tables so that\nevery determinant is a candidate\nkey.\nMultivalued Dependencies 4NF 4NF: Move each multivalued\ndependency to a table of its\nown.\nData Constrained 5NF, DK\/NF DK\/NF: Make every constraint\na logical consequence of\ncandidate keys and domains.\nThe fifth normal form (5NF), also known as Project-Join Normal Form (PJ\/NF) can\nlead to an anomaly where a table can be split apart but not correctly joined back together. However, the conditions this condition is rather complex, and generally, if a relation is in 4NF it\nis in 5NF. For more information about 5NF, consult the Wikipedia article at\nhttps:\/\/en.wikipedia.org\/wiki\/Fifth_normal_form.\n3.4 State Two Properties of Candidate Keys\nA candidate key is a conglomerate of attributes that identify a database record in a unique\nway without referencing any other key data from the database. A table may contain one or more\ncandidates and one of those candidate keys has to be referred to as the primary key. The absolute\nrequirement for a table to have is the primary key, but the maximum number of candidate keys is\nunlimited by any constraints.\nThe naming of a candidate key is coming from a super key with no redundant attribute and\nthey are respectively selected from the set of super keys. Another name for candidate key could\nbe minimal super key.\nAll candidate keys have common properties. One of the most important candidate key\nproperties is that the attribute that is used for identification must remain the same for its\nlifetime. Another basic but important property of candidate keys is that the value of the attribute\ncannot be a null value. It\u2019s a form of identification; therefore, if the value has a null value, there is\nno way a query can be applied to this row and find the desired information. Each candidate key\nmust contain minimum fields to ensure uniqueness.\nStudID Roll No FirstName LastName Email\n1 11 Ben RandomA abc@gmail.com\n2 12 David RandomB xyz@gmail.com\n3 13 Cameron RandomC mnoprq@gmail.com\nThis example identifies each property in a unique and standard way. The studID, Roll\nNumber and Email are unique attributes, therefore all three of them are candidate keys. Most\nimportantly studID is a candidate key and also primary key. To uniquely identify each student, a\nquery can use the primary key, which also serves as a candidate key. One of the other options\nwould be to identify it by Roll Number or by the email, as only one email and Roll Number can\nexist.\nOther examples of important candidate keys : Social Security Number, International\nStandard Book Numbers, Bank account numbers, Serial Numbers, Driver License Numbers,\nNational Provider ID, Phone numbers and so on.\n3.5 Section Concise Summary\nAn Entity Relationship (ER) model is a diagram that gives a good overview of the design\nof a database system with the aim of making it easier to be understood at a technical level. This\nmodel can be mapped to a relational schema which shows the relationship between its members.\nAn ER diagram consists of multiple components: the entity, entity type, entity set, and attributes.\nThe entity of the ER diagram is an object or concept about which you want to store\ninformation. This component is the overall subject of the entity set, whilst the entity set is within\nthe entity which holds the attributes of the entity\u2019s type. For example, in an entity called \u201cCar\u201d, an\nentity set would consist of attributes \u201cCar ID\u201d, \u201cCar color\u201d, \u201cCar model\u201d and \u201cCar brand\u201d. To\nexplain this better, here is a visual representation. Car Entity\nCar ID Attribute\nEntity Set Car Color\nCar Model\nCar Brand\nThe next important step in understanding ER mapping is attributes. These components are\nproperties which define the entity type. There are many examples to describe this, including\nName, DOB, Address, etc. The attribute that uniquely identifies each entity is called a key\nattribute, usually identifying each entity with a unique number. In the example above, Car ID\nwould be the key attribute which can also be called \u201cPrimary Key\u201d or PK. Car ID is the key\nattribute because every Car ID is unique and can identify each entity separately without\nduplicates. For more complex designs, there are multiple types of attributes: Composite attributes\n(compose of two or many combined attributes), Multivalued Attributes (consists of more than one\nvalue) and Derived attributes (attributes derived from other attributes).\nA weak entity is an entity type for which a key attribute can\u2019t be defined. A company can\nstore information of dependents (Parents, Children, Spouse) of an Employee but the dependents\ndon\u2019t exist without employee.\nA relational model for database management system is an approach to managing data\nusing a table structure that is consistent with specific logic and properties. In database systems,\nthere exist relations in a two-dimensional table of data. This typically has multiple named\ncolumns and an unknown quantity of rows for data to be entered. There are specific properties\nthat define relations so that they can be easily identified by a user. There are six properties of\nrelations:\n1. Each relation (or table) in a database has a unique name.\n2. Each entry at the intersection of each row and column is atomic (or single valued).\n(There can be only one value associated with each attribute on a specific row of a table; no\nmultivalued attributes are allowed in a relation.)\n3. Each row is unique; no two rows in a relation can be identical.\n4. Each attribute (or column) within a table has a unique name.\n5. The sequence of columns (left to right) is insignificant. The order of the columns\nin a relation can be changed without changing the meaning or use of the relation.\n6. The sequence of rows (top to bottom) is insignificant. As with columns, the order\nof the rows of a relation may be changed or stored in any sequence.\nAs stated previously, these relational tables use a certain structure that is consistent with\nspecific logic and properties: this is called normalization. This process is a technique in database\ndesign that is used to organize tables in a manner that reduces redundancy and dependency of\ndata. The use of this technique divides larger tables into smaller tables and links them using\nrelationships. The creator of the relational model, Edgar Codd, came up with the theory of\nnormalization with the introduction of the First Normal Form and then continued to extend this\ntheory into a second and third normal form.\nThe first normal form, like all normal forms, has specific requirements to be validated as\nfirst normal form. A table in first normal form must be two dimensional with rows and columns,\neach row must contain data that pertains to something, each column must contain data for a single\nattribute of the thing it\u2019s describing, each cell of the table must have only a single value, entries in\nany column has to have the same type of data (Ex. If the entry in one row of a column contains\nhair color, all the other rows must contain hair color as well), each column must have a unique\nname, all rows should be uniquely identified (has to have some unique ID), and the order of the columns and rows has no significance. Tables in first normal form are subject to deletion and\ninsertion anomalies and may prove useful in some applications but can be unreliable in others.\nSecond Normal Form\nMust have all attributes or non-key columns dependent on the key.\nThird Normal Form\nAll columns can be determined only by the key in the table and no other column.\nHaving this type of normalization gets rid of redundancy and is especially vulnerable to\nsome types of modification anomalies. If Sony were to have more products under their item key,\nthe supplier phone number would keep repeating because it\u2019s directly related to the supplier name\nand will always be that same phone number. Separating these two tables into individual\nrepresentations makes all of the columns dependent on only the key in the table and no other\ncolumn, making the third normal form valid.\nCandidate keys are a collective of attributes that identify a database record in a unique\nway without referencing any other key data from the database. A table may contain one or more\ncandidates and one of those candidate keys has to be referred to as the primary key. The absolute\nrequirement for a table to have is the primary key, but the maximum number of candidate keys is\nunlimited by any constraints. "}